(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/**
 * Created by qinning on 15/4/14.
 */
var VERSION_ASSET_ID = "@version";
var MANIFEST_ASSET_ID = "@manifest";
var AssetsManager = cc.Class.extend({
    /**
     * {jsb.AssetsManager}
     */
    _am : null,
    /**
     * {number}失败次数
     */
    _failCount : 0,
    /**
     * {number}最大错误重试次数
     */
    _maxFailCount : 1,
    ctor:function(){

    },
    purge:function() {
        if(this._am){
            this._am.release();
        }
        this._am = null;
    },

    retryDownAssets: function () {
        this._failCount = 0;
        this._maxFailCount = 5;
        if(this._am) {
            this._am.downloadFailedAssets();
        }
    },

    downLoadAssets : function(projectManifestPath,storagePath,updateCallBack,endCallBack) {
        this._failCount = 0;
        this._maxFailCount = 5;
        this._am = new jsb.AssetsManager(projectManifestPath, storagePath);
        this._am.retain();
        if (!this._am.getLocalManifest().isLoaded()) {
            endCallBack("error_local_manifest_not_loaded");
            return;
        }
        var that = this;
        var listener = new jsb.EventListenerAssetsManager(this._am, function (event) {
            switch (event.getEventCode()) {
                case jsb.EventAssetsManager.UPDATE_PROGRESSION:
                    var msg = event.getMessage();
                    cc.log("UPDATE_PROGRESSION:" + msg);
                    var assetId = event.getAssetId();
                    cc.log("assetId:"+assetId);
                    if(assetId == VERSION_ASSET_ID || assetId == MANIFEST_ASSET_ID) {
                        updateCallBack(1, "update manifest");
                    } else {
                        updateCallBack(event.getPercent(), msg);
                    }
                    break;
                case jsb.EventAssetsManager.UPDATE_FAILED:
                    cc.log("Update failed. " + event.getMessage());
                    that._failCount++;
                    if (that._failCount < that._maxFailCount) {
                        that._am.downloadFailedAssets();
                    }
                    else {
                        cc.log("Reach maximum fail count, exit update process");
                        that._failCount = 0;
                        endCallBack(event.getEventCode());
                    }
                    break;
                case jsb.EventAssetsManager.UPDATE_FINISHED:
                case jsb.EventAssetsManager.ALREADY_UP_TO_DATE:
                    endCallBack(null);
                    break;

                case jsb.EventAssetsManager.ERROR_NO_LOCAL_MANIFEST:
                    cc.log("No local manifest file found, skip assets update.");
                    endCallBack(event.getEventCode());
                    break;
                case jsb.EventAssetsManager.ERROR_DOWNLOAD_MANIFEST:
                    endCallBack(event.getEventCode());
                    cc.log("Fail to download manifest file, update skipped.");
                    break;
                case jsb.EventAssetsManager.ERROR_PARSE_MANIFEST:
                    endCallBack(event.getEventCode());
                    cc.log("Fail to parse manifest file, update skipped.");
                    break;
                case jsb.EventAssetsManager.ERROR_UPDATING:
                    cc.log("Asset update error: " + event.getMessage());
                    endCallBack(event.getEventCode());
                    break;
                case jsb.EventAssetsManager.ERROR_DECOMPRESS:
                    cc.log(event.getMessage());
                    endCallBack(event.getEventCode());
                    break;
                default:
                    cc.log("default: " + event.getEventCode());
                    break;
            }
        });

        cc.eventManager.addListener(listener, 1);
        this._am.update();
    }
});

AssetsManager._instance = null;
AssetsManager._firstUseInstance = true;

/**
 *
 * @returns {AssetsManager}
 */
AssetsManager.getInstance = function () {
    if (AssetsManager._firstUseInstance) {
        AssetsManager._firstUseInstance = false;
        AssetsManager._instance = new AssetsManager();
    }
    return AssetsManager._instance;
};


module.exports = AssetsManager;
},{}],2:[function(require,module,exports){
/**
 * Created by qinning on 15/4/27.
 */

var ACTION_TYPE = {
    ACTION_NULL: 0,
    ACTION_PAUSE: 1,
    ACTION_RESUME: 2
};

var PLAY_TYPE = {
    PLAY_TYPE_NORMAL: 0,
    PLAY_TYPE_FADE_OUT_FADE_IN: 1
};

var AudioPlayer = cc.Class.extend({
    lastMusicVolume: 0,
    suffix: null,
    effectMap: null,
    playType: PLAY_TYPE.PLAY_TYPE_NORMAL,
    actionType: ACTION_TYPE.ACTION_NULL,
    musicName: null,
    loop: false,
    ctor: function () {
        if (cc.sys.os === cc.sys.OS_ANDROID) {
            this.suffix = "res/audio_ogg/%s.ogg";
        } else {
            this.suffix = "res/audio_mp3/%s.mp3";
        }
        this.effectMap = {};
        var isMusicOn = this.isMusicOn();
        this.lastMusicVolume = 1;
        this.setMusicOn(isMusicOn);
    },

    beginSchedule: function () {
        cc.director.getScheduler().scheduleCallbackForTarget(this, this.update, 0.1, cc.REPEAT_FOREVER, 0, false);
    },

    stopSchedule: function () {
        cc.director.getScheduler().unscheduleCallbackForTarget(this, this.update);
    },

    update: function (dt) {
        dt *= 0.5;
        var isFinish = false;
        var volume = cc.audioEngine.getMusicVolume();
        if (this.playType == PLAY_TYPE.PLAY_TYPE_FADE_OUT_FADE_IN) {
            if (volume > 0.001) {
                if (this.actionType == ACTION_TYPE.ACTION_PAUSE) {
                    volume -= dt;
                    if (volume < 0.001) {
                        volume = 0.01;
                        this.playMusicByKey(this.musicName, this.loop);
                        this.actionType = ACTION_TYPE.ACTION_RESUME;
                    }
                    cc.audioEngine.setMusicVolume(volume);
                } else if (this.actionType == ACTION_TYPE.ACTION_RESUME) {
                    volume += dt;
                    if (volume > 0.99) {
                        volume = 0.99;
                        isFinish = true;
                    }
                    cc.audioEngine.setMusicVolume(volume);
                }
            } else {
                this.playMusicByKey(this.musicName, this.loop);
            }
            if (isFinish) {
                this.actionType = ACTION_TYPE.ACTION_NULL;
                this.playType = PLAY_TYPE.PLAY_TYPE_NORMAL;
                this.stopSchedule();
            }
        } else {
            if (volume > 0.001) {
                if (this.actionType == ACTION_TYPE.ACTION_PAUSE) {
                    volume -= dt;
                    if (volume < 0.001) {
                        volume = 0.01;
                        isFinish = true;
                        this.pauseMusic();
                    }
                    cc.audioEngine.setMusicVolume(volume);
                } else if (this.actionType == ACTION_TYPE.ACTION_RESUME) {
                    volume += dt;
                    if (volume > 0.99) {
                        volume = 0.99;
                        isFinish = true;
                    }
                    cc.audioEngine.setMusicVolume(volume);
                }
            } else {
                isFinish = true;
            }
            if (isFinish) {
                this.actionType = ACTION_TYPE.ACTION_NULL;
                this.stopSchedule();
            }
        }
    },

    playEffectByKey: function (effectName, loop) {
        if (!this.isEffectOn()) {
            return;
        }
        var fileName = game.utils.sprintf(this.suffix, effectName);
        var key = "";
        if (cc.sys.isNative) {
            if (jsb.fileUtils.isFileExist(fileName)) {
                key = cc.audioEngine.playEffect(fileName, loop);
            } else {
                cc.log(game.utils.sprintf("effect file %s not found", fileName));
            }
        } else {
            if (cc.loader.getRes(fileName)) {
                key = cc.audioEngine.playEffect(fileName, loop);
            }
        }
        if (key) {
            this.effectMap[fileName] = key;
        }
    },

    playMusicByKey: function (musicName, loop) {
        this.actionType = ACTION_TYPE.ACTION_NULL;
        this.playType = PLAY_TYPE.PLAY_TYPE_NORMAL;
        if (this.isMusicOn()) {
            if (this.lastMusicVolume != 0) {
                cc.audioEngine.setMusicVolume(this.lastMusicVolume);
            } else {
                cc.audioEngine.setMusicVolume(1);
            }
        }
        var fileName = game.utils.sprintf(this.suffix, musicName);
        if (cc.sys.isNative) {
            if (jsb.fileUtils.isFileExist(fileName)) {
                cc.audioEngine.playMusic(fileName, loop);
            } else {
                cc.log(game.utils.sprintf("music file %s not found", fileName));
            }
        } else {
            if (cc.loader.getRes(fileName)) {
                cc.audioEngine.playMusic(fileName, loop);
            }
        }
    },

    isPlayingMusic: function () {
        return cc.audioEngine.isMusicPlaying();
    },

    resumeMusic: function () {
        cc.audioEngine.resumeMusic();
    },

    resumeMusicSlowly: function () {
        var volume = cc.audioEngine.getMusicVolume();
        if (volume < 0.0001 || volume >= 0.99) {
            return;
        }
        if (this.actionType == ACTION_TYPE.ACTION_NULL) {
            this.beginSchedule();
        }
        cc.audioEngine.setMusicVolume(0.01);
        this.resumeMusic();
        this.actionType = ACTION_TYPE.ACTION_RESUME;
    },

    stopMusic: function () {
        cc.audioEngine.stopMusic();
    },

    stopEffect: function (effectName) {
        var fileName = game.utils.sprintf(this.suffix, effectName);
        var effectKey = this.effectMap[fileName];
        if (effectKey) {
            cc.audioEngine.stopEffect(effectKey);
            delete this.effectMap[fileName];
        }
    },

    stopAllEffects: function () {
        cc.audioEngine.stopAllEffects();
    },

    isEffectOn: function () {
        var isOn = game.storageController.getItem("effect_on", "true");
        if (isOn == "true") {
            return true;
        }
        return false;
    },

    isMusicOn: function () {
        var isOn = game.storageController.getItem("music_on", "true");
        if (isOn == "true") {
            return true;
        }
        return false;
    },

    pauseMusic: function () {
        cc.audioEngine.pauseMusic();
    },

    pauseMusicSlowly: function () {
        if (!this.isPlayingMusic()) {
            return;
        }
        if (cc.audioEngine.getMusicVolume() < 0.0001) {
            return;
        }
        if (this.actionType == ACTION_TYPE.ACTION_NULL) {
            this.beginSchedule();
        }
        //cc.audioEngine.setMusicVolume(0.99);
        this.actionType = ACTION_TYPE.ACTION_PAUSE;
    },

    playMusicSlowlyByKey: function (musicName, loop) {
        if (!this.isPlayingMusic()) {
            this.playMusicByKey(musicName, loop);
            return;
        }

        this.playType = PLAY_TYPE.PLAY_TYPE_FADE_OUT_FADE_IN;
        this.musicName = musicName;
        this.loop = loop;

        if (this.actionType == ACTION_TYPE.ACTION_NULL) {
            this.beginSchedule();
        }
        this.actionType = ACTION_TYPE.ACTION_PAUSE;
    },
    
    setEffectOn: function (isOn) {
        game.storageController.setItem("effect_on", "" + isOn);
    },

    setMusicOn: function (isOn) {
        if (isOn) {
            if (this.lastMusicVolume != 0) {
                cc.audioEngine.setMusicVolume(this.lastMusicVolume);
            } else {
                cc.audioEngine.setMusicVolume(1);
            }
        } else {
            this.lastMusicVolume = cc.audioEngine.getMusicVolume();
            cc.audioEngine.setMusicVolume(0);
        }
        game.storageController.setItem("music_on", "" + isOn);
    },

    setMusicVolume: function (volume) {
        if (this.isMusicOn()) {
            cc.audioEngine.setMusicVolume(volume);
        }
    }
});

AudioPlayer._instance = null;
AudioPlayer._firstUseInstance = true;

/**
 *
 * @returns {AudioPlayer}
 */
AudioPlayer.getInstance = function () {
    if (AudioPlayer._firstUseInstance) {
        AudioPlayer._firstUseInstance = false;
        AudioPlayer._instance = new AudioPlayer();
    }
    return AudioPlayer._instance;
};

module.exports = AudioPlayer;
},{}],3:[function(require,module,exports){
var GameBridge = {
    getMenuScene: function () {
        var MenuScene = require("../../many_bricks/scene/MenuScene");
        return new MenuScene();
    },

    getConfig: function () {
        return require("../../many_bricks/config/Config");
    },

    getPopupMan: function () {
        return require("../../many_bricks/model/PopupMan");
    },

    getLoadingScene: function () {
        var LoadingScene = require("../../many_bricks/scene/LoadingScene");
        return new LoadingScene();
    },

    getGameMan: function () {
        var GameMan = require("../../many_bricks/model/GameMan");
        return GameMan.getInstance();
    }
};

module.exports = GameBridge;
},{"../../many_bricks/config/Config":35,"../../many_bricks/model/GameMan":99,"../../many_bricks/model/PopupMan":101,"../../many_bricks/scene/LoadingScene":106,"../../many_bricks/scene/MenuScene":107}],4:[function(require,module,exports){
/**
 * Created by qinning on 15/4/23.
 */
var Utils = require("../util/Utils");

var BaseCCBController = function() {
};

BaseCCBController.prototype.onDidLoadFromCCB = function() {
    var self = this;
    var oldOnEnter = this.rootNode["onEnter"];
    this.rootNode["onEnter"] = function() {
        if(cc.isFunction(oldOnEnter)){
            oldOnEnter.apply(self.rootNode, arguments);
        }
        self.onEnter();
    };
    var oldOnExit = this.rootNode["onExit"];
    this.rootNode["onExit"] = function() {
        if (cc.isFunction(oldOnExit)) {
            oldOnExit.apply(self.rootNode, arguments);
        }
        self.onExit();
    };
    this._visitNodes();
};

BaseCCBController.prototype.onEnter = function() {
};

BaseCCBController.prototype.onExit = function() {
};

function setScaleWithParentSize(label) {
    cc.log("setScaleWithParentSize");
    var parent = label.getParent();
    var parentSize = parent.getContentSize();
    var fontSize = label.getContentSize();

    if (!label.__origin_scale) {
        label.__origin_scale = {
            x: label.getScaleX(),
            y: label.getScaleY()
        };
    }

    var size = {
        width : fontSize.width * label.__origin_scale.x,
        height : fontSize.height * label.__origin_scale.y
    };

    // a clean hacking, save us to calc the label height manually. :]
    // parentSize.height *= label.__origin_scale.y;

    if (size.width > parentSize.width || size.height > parentSize.height) {
        var x = Math.min(parentSize.width / size.width, 1) * label.__origin_scale.x;
        var y = Math.min(parentSize.height / size.height, 1) * label.__origin_scale.y;

        var scale = Math.min(x, y);
        label.setScale(scale);
    } else {
        //maybe reused, reset origin size
        label.setScale(label.__origin_scale.x);
    }
}

BaseCCBController.prototype._visitNodes = function () {
    var TouchedNode = require("../ext/TouchedNode");
    Utils.walkNode(this.rootNode, function(nd) {
        if (nd.___visited) {
            return true;
        }
        nd.___visited = true;
        if (!game.config.menuNoScale) {
            var isMenuItem = Utils.isNodeMenuItem(nd);
            if (isMenuItem || (Utils.isNodeButton(nd) && nd.zoomOnTouchDown)) {
                if (nd.zoomOnTouchDown) {
                    nd.zoomOnTouchDown = false;
                }
                var node = new TouchedNode(isMenuItem);
                nd.addChild(node);
            }
        }

        if (nd.getString != null && nd.setString != null) {
            var parent = nd.getParent();
            //cc.log("_visitNodes tag:" + parent.getTag());
            if (parent && parent.getTag() === 79) {
                var isBMFont = false;
                if(Utils.isLabelBMFont(nd)) {
                    isBMFont = true;
                }
                //cc.log("_visitNodes nd._className:" + nd._className);
                //cc.log("_visitNodes isBMFont:" + isBMFont);
                if(isBMFont) {
                    if (cc.sys.isNative) {
                        //cc.log("_visitNodes 2");
                        // maybe repeat call in onEnter
                        if (!nd.__origin_setstring) {
                            nd.__origin_setstring = nd.setString;
                            nd.setString = function(newString) {
                                this.__origin_setstring(newString);
                                // here we start to hack
                                setScaleWithParentSize(this);
                            }.bind(nd);
                        }
                    } else {
                        nd.setString = function(newString, needUpdateLabel) {
                            // origin code copied from CCLabelBMFont.js setString

                            newString = String(newString);
                            if (needUpdateLabel == null)
                                needUpdateLabel = true;
                            if (newString == null || !cc.isString(newString))
                                newString = newString + "";

                            //this._initialString = newString;
                            this._setString(newString, needUpdateLabel);

                            // here we start to hack
                            // set the dimension according to it's parent who has a tag 79
                            // needUpdateLabel == true, it prevents the loop been called recursively.
                            if (needUpdateLabel == true) {
                                setScaleWithParentSize(this);
                            }

                        }.bind(nd);
                    }
                }
            }

            var str = nd.getString();
            var searchStr = "&key.";
            if (str.substr(0, searchStr.length) == searchStr) {
                var key = str.substr(searchStr.length);
                var value = _(key);
                nd.setString(value);
            }
        }

        return true;
    });
};

module.exports = BaseCCBController;
},{"../ext/TouchedNode":13,"../util/Utils":31}],5:[function(require,module,exports){
/**
 * Created by qinning on 2017/8/29.
 */


var CrossPromController = function () {
    BaseCCBController.call(this);
    this._crossPromPic = null;

    this._corssPromConfig = null;
};

game.utils.inherits(CrossPromController, BaseCCBController);

CrossPromController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);

    if (this._infoLabel) {
        if (game.local.isChinese()) {
            this._infoLabel.setString("马上玩");
        } else {
            this._infoLabel.setString("Play");
        }
    }
};

CrossPromController.prototype.closeClicked = function (sender) {
    AudioHelper.playBtnSound();
    this.close();
};

CrossPromController.prototype.downloadClicked = function (sender) {
    AudioHelper.playBtnSound();
    cc.sys.openURL(this._corssPromConfig.downloadUrl);
    this.close();
};

CrossPromController.prototype.initWith = function (config, texture) {
    this._corssPromConfig = config;
    this._crossPromPic.setTexture(texture);
};

CrossPromController.prototype.popup = function () {
    game.dialogManager.popup(this.rootNode);
};

CrossPromController.prototype.close = function () {
    game.dialogManager.close(this.rootNode);
};

CrossPromController.createFromCCB = function(ccbName) {
    var node = game.utils.loadNodeFromCCB(ccbName, null, "CrossPromController", new CrossPromController());
    return node;
};

module.exports = CrossPromController;
},{}],6:[function(require,module,exports){
/**
 * Created by qinning on 2017/1/23.
 */

var PaymentInfo = function() {
    this.purchaseId = null;
    this.productId = null;
    this.receipt = null;
    this.signature = null;

    this.info = "";
};

PaymentInfo.prototype.unmarshal = function(jsonObj) {
    this.purchaseId = jsonObj["purchaseId"] || "";
    this.productId = jsonObj["productId"] || "";
    this.receipt = jsonObj["receipt"] || "";
    this.signature = jsonObj["signature"] || "";
    this.info = jsonObj["info"] || "";
};

module.exports = PaymentInfo;
},{}],7:[function(require,module,exports){
/**
 * Created by oye on 15-5-17.
 */
var PlayerInfo = function(){
    this.playerId = "";
    this.bestScore = 0;
    this.removedAds = false;
    this.level = 0;
    this.progress = 0;
    this.levelMap = null;
    this.rated = false;
};

PlayerInfo.prototype.unmarshall = function (json) {
    this.playerId = json["playerId"];
    this.bestScore = json["bestScore"] || 0;
    this.removedAds = json["removedAds"] || false;
    this.level = json["level"] || 1;
    this.progress = json["progress"] || 0;
    this.levelMap = json["levelMap"] || {};
    this.rated = json["rated"] || false;
};

PlayerInfo.createDefault = function () {
    var playerInfo = new PlayerInfo();
    playerInfo.hintsCount = 5;
    playerInfo.bestScore = 0;
    playerInfo.removedAds = false;
    playerInfo.level = 1;
    playerInfo.progress = 0;
    playerInfo.levelMap = {};
    playerInfo.rated = false;
    return playerInfo;
};

module.exports = PlayerInfo;

},{}],8:[function(require,module,exports){
/**
 * Created by qinning on 2017/1/23.
 */

var ProductInfo = function () {
    this.productId = 0;
    this.price = 0;
    this.description = null;
    this.title = null;
};

ProductInfo.prototype.unmarshal = function (jsonObj) {
    this.productId = jsonObj["productId"];
    this.price = jsonObj["price"];
    this.description = jsonObj["description"];
    this.title = jsonObj["title"];
};

module.exports = ProductInfo;
},{}],9:[function(require,module,exports){
var AdsPlace = {
    Pass: 1,
    Home: 2,
    BackGround: 3,
    Refresh: 4,
    Num: 4
};

module.exports = AdsPlace;
},{}],10:[function(require,module,exports){
/**
 * Created by qinning on 2017/1/23.
 */

var PaymentCode = {
    PAYMENT_CODE_SUCCESS: 0,
    PAYMENT_CODE_FAIL: 1
};

module.exports = PaymentCode;
},{}],11:[function(require,module,exports){
/**
 * Created by alanmars on 15/4/17.
 */
var EventPackage = cc.Class.extend({
    callback: null,
    target: null,
    listener: null,

    ctor: function (callback, target, listener) {
        this.callback = callback;
        this.target = target;
        this.listener = listener;
    }
});

var EventDispatcher = (function () {
    var instance;

    function createInstance() {
        var listenersMap = {};

        return {
            /**
             * @param {string} eventName
             * @param {function} callback
             * @param {object} target
             * @return {cc.EventListener} Return the listener. Needed in order to remove the event from the dispatcher.
             */
            addEventListener: function (eventName, callback, target) {
                var eventListener = cc.eventManager.addCustomListener(eventName, function (event) {
                    callback.call(target, event);
                });

                var shouldAdd = true;
                var eventPackages = listenersMap[eventName];
                if (cc.isUndefined(eventPackages)) {
                    eventPackages = [];
                    listenersMap[eventName] = eventPackages;
                }
                else {
                    for (var i = 0; i < eventPackages.length; ++i) {
                        var eventPackage = eventPackages[i];
                        if (eventPackage.callback === callback && eventPackage.target === target) {
                            shouldAdd = false;
                            break;
                        }
                    }
                }

                if (shouldAdd) {
                    eventPackages.push(new EventPackage(callback, target, eventListener));
                }
            },

            /**
             * @param {string} eventName
             * @param {function} callback
             * @param {object} target
             */
            removeEventListener: function (eventName, callback, target) {
                if (listenersMap[eventName]) {
                    /**
                     * @type {Array.<EventPackage>}
                     */
                    var eventPackages = listenersMap[eventName];
                    if (!cc.isUndefined(eventPackages) && eventPackages.length > 0) {
                        var newPackages = [];
                        for (var i = 0; i < eventPackages.length; ++i) {
                            /**
                             * @type {EventPackage}
                             */
                            var eventPackage = eventPackages[i];
                            if (eventPackage.callback === callback && eventPackage.target === target) {
                                cc.eventManager.removeListener(eventPackage.listener);
                            }
                            else {
                                newPackages.push(eventPackage);
                            }
                        }
                        listenersMap[eventName] = newPackages;
                    }
                }
            },

            /**
             * @param {string} eventName
             * @param {object} userData
             */
            dispatchEvent: function (eventName, userData) {
                cc.eventManager.dispatchCustomEvent(eventName, userData);
            }
        };
    }

    return {
        getInstance: function () {
            if (!instance) {
                instance = createInstance();
            }
            return instance;
        }
    };
})();

module.exports = EventDispatcher;
},{}],12:[function(require,module,exports){
/**
 * Created by qinning on 15/7/2.
 */
cc.TABLEVIEW_FILL_LEFT_RIGHT = 0;
cc.TABLEVIEW_FILL_RIGHT_LEFT = 0;

/**
 * Sole purpose of this delegate is to single touch event in this version.
 */
cc.MultiColTableViewDelegate = cc.Class.extend(/** @lends cc.MultiColTableViewDelegate# */{
    gridTouched:function(table,grid){
    }
});

/**
 * Data source that governs table backend data.
 */
cc.MultiColTableViewDataSource = cc.Class.extend(/** @lends cc.TableViewDataSource# */{
    gridAtIndex:function(table,idx){
       return null;
    },
    numberOfCellsInTableView:function(table){
        return 0;
    },
    numberOfGridsInCell:function(table, idx){
        return 0;
    },
    gridSizeForTable:function(table, idx){
        return cc.size(0,0);
    }
});

cc.MultiColTableView = cc.LayerColor.extend({
    _multiTableViewDataSource: null,
    _multiTableViewDelegate: null,
    _horizontalOrder: cc.TABLEVIEW_FILL_LEFT_RIGHT,
    _gridsFreed: null,
    _curTouchLocation: null,

    _tableView: null,
    _touchNode: null,
    _gridCells: null,

    /**
     * @param dataSource
     * @param {cc.Size} size
     * @param container
     */
    ctor: function (dataSource, size, container) {
        this._super(cc.color(0, 0, 255, 0), size.width, size.height);
        this._gridsFreed = [];
        this._gridCells = {};
        this.setMultiTableViewDataSource(dataSource);
        this._tableView = new cc.TableView(this, size, container);
        this._tableView.setDelegate(this);
        this.addChild(this._tableView);
        this._touchNode = new cc.Node();
        this._tableView.addChild(this._touchNode,1);
    },

    onEnter: function () {
        this._super();
        cc.eventManager.addListener({
            event: cc.EventListener.TOUCH_ONE_BY_ONE,
            swallowTouches: false,
            onTouchBegan: this.onTouchBegan.bind(this)
        }, this._touchNode);
    },

    dequeueGrid: function () {
        if (this._gridsFreed.length == 0) {
            return null;
        } else {
            var grid = this._gridsFreed.shift();
            this._autoRelease(grid);
            return grid;
        }
    },

    _releaseCB: function () {
        this.release();
    },

    _autoRelease: function (obj) {
        var running = obj._running === undefined ? false : !obj._running;
        cc.director.getScheduler().schedule(this._releaseCB, obj, 0, 0, 0, running, obj.__instanceId);
    },

    tableCellSizeForIndex: function (table, idx) {
        var size = this.getMultiTableViewDataSource().gridSizeForTable(this, idx);
        if (table.getDirection() === cc.SCROLLVIEW_DIRECTION_HORIZONTAL) {
            size.height *= this.getMultiTableViewDataSource().numberOfGridsInCell(this, idx);
        } else {
            size.width *= this.getMultiTableViewDataSource().numberOfGridsInCell(this, idx);
        }
        return size;
    },

    tableCellAtIndex: function (table, idx) {
        var grid;
        var numberOfGridsInCell = this.getMultiTableViewDataSource().numberOfGridsInCell(this, idx);
        var cell = table.dequeueCell();
        if (!cell) {
            cell = new cc.TableViewCell();
        } else {
            var children = cell.getChildren();
            for (var i = children.length - 1; i >= 0; --i) {
                grid = children[i];
                this._gridsFreed.push(grid);
                grid.setIdx(cc.INVALID_INDEX);
                grid.retain();
                grid.removeFromParent(false);
            }
        }
        var startIndex = 0;
        for (var localIdx = 0; localIdx < idx; ++localIdx) {
            startIndex += this.getMultiTableViewDataSource().numberOfGridsInCell(this, localIdx);
        }
        var gridSize = this.getMultiTableViewDataSource().gridSizeForTable(this, idx);
        for (var gridIdx = startIndex, colIdx = 0; gridIdx < (numberOfGridsInCell + startIndex); gridIdx++, colIdx++) {
            grid = this.getMultiTableViewDataSource().gridAtIndex(this, gridIdx);
            if (grid) {
                grid.setIdx(gridIdx);
                this._gridCells[gridIdx] = grid;
                grid.setAnchorPoint(cc.p(0, 0));
                if (table.getDirection() === cc.SCROLLVIEW_DIRECTION_HORIZONTAL) {
                    if (table.getVerticalFillOrder() === cc.TABLEVIEW_FILL_TOPDOWN) {
                        grid.setPosition(cc.p(0, gridSize.height * (numberOfGridsInCell - colIdx - 1)));
                    } else {
                        grid.setPosition(cc.p(0, gridSize.height * colIdx));
                    }
                } else {
                    grid.setPosition(cc.p(gridSize.width * colIdx, 0));
                }
                cell.addChild(grid);
            }
        }
        return cell;
    },

    numberOfCellsInTableView: function (table) {
        var numberOfCells = this.getMultiTableViewDataSource().numberOfCellsInTableView(this);
        return numberOfCells;
    },

    tableCellTouched: function (table, cell) {
        if (!this.getMultiTableViewDelegate()) {
            return;
        }
        for (var i = 0; i < cell.getChildren().length; i++) {
            var grid = cell.getChildren()[i];
            grid.setContentSize(this.getMultiTableViewDataSource().gridSizeForTable(this, cell.getIdx()));
            if (grid != null && this.isTouchInside(grid, this._curTouchLocation)) {
                this.getMultiTableViewDelegate().gridTouched(this, grid);
                break;
            }
        }
    },

    scrollViewDidScroll: function (view) {
        if (this._multiTableViewDelegate && this._multiTableViewDelegate.scrollViewDidScroll) {
            this._multiTableViewDelegate.scrollViewDidScroll(this);
        }
    },

    tableCellWillRecycle: function (table, cell) {
    },

    tableCellHighlight:function(table, cell){
    },

    tableCellUnhighlight:function(table, cell){
    },

    onTouchBegan: function (touch, event) {
        this._curTouchLocation = touch.getLocation();
        return false;
    },

    getMultiTableViewDataSource: function () {
        return this._multiTableViewDataSource;
    },
    setMultiTableViewDataSource: function (dataSource) {
        this._multiTableViewDataSource = dataSource;
    },

    getMultiTableViewDelegate: function () {
        return this._multiTableViewDelegate;
    },

    setMultiTableViewDelegate: function (delegate) {
        this._multiTableViewDelegate = delegate;
    },

    setHorizontalOrder: function (order) {
        this._horizontalOrder = order;
    },
    getHorizontalOrder: function () {
        return this._horizontalOrder;
    },

    isTouchInside: function (owner, touchLocation) {
        if (!owner || !owner.getParent()) {
            return false;
        }
        touchLocation = owner.getParent().convertToNodeSpace(touchLocation);
        return cc.rectContainsPoint(owner.getBoundingBox(), touchLocation);
    },

    reloadData: function () {
        this._tableView.reloadData();
    },

    setContentOffset: function (offset, animated) {
        return this._tableView.setContentOffset(offset, animated);
    },

    getContentOffset:function () {
        return this._tableView.getContentOffset();
    },

    minContainerOffset:function () {
        return this._tableView.minContainerOffset();
    },

    maxContainerOffset:function () {
        return this._tableView.maxContainerOffset();
    },

    setDirection:function (direction) {
        this._tableView.setDirection(direction);
    },

    /**
     * determines how cell is ordered and filled in the view.
     */
    setVerticalFillOrder: function (fillOrder) {
        this._tableView.setVerticalFillOrder(fillOrder);
    },

    setContentOffsetInDuration: function (offset, dt) {
        this._tableView.setContentOffsetInDuration(offset, dt);
    },

    getViewSize: function () {
        return this._tableView.getViewSize();
    },

    getContentSize: function () {
        return this._tableView.getContentSize();
    },

    getGridAtIndex:function (idx) {
        return this._gridCells[idx];
    },

    setViewSize: function (viewSize) {
        this.setContentSize(viewSize);
        this._tableView.setViewSize(viewSize);
    },

    setBounceable: function (bounceable) {
        this._tableView.setBounceable(bounceable);
    },

    setTouchEnabled: function (touchable) {
        this._tableView.setTouchEnabled(touchable);
    },

    isDragging: function () {
        return this._tableView.isDragging();
    },

    getContainer: function () {
        return this._tableView.getContainer();
    }
});

module.exports = cc.MultiColTableView;
},{}],13:[function(require,module,exports){
/**
 * Created by zhangmingxu on 29/11/2016.
 */

var TouchedNode = cc.Node.extend({
    offsetX: 10,
    offsetY: 5,

    ctor: function (isMenuItem) {
        this._isMenuItem = isMenuItem;
        this._isTouched = false;
        this._isHover = false;
        this._isHoverPlaying = false;

        this._buttonToucher = null;
        this._buttonMouser = null;
        this._super();
        this._name = "TouchedNode";
    },

    onEnter: function () {
        this._super();

        ///Touch Events
        this._buttonToucher = cc.EventListener.create({
            event: cc.EventListener.TOUCH_ONE_BY_ONE,
            swallowTouches: false,
            onTouchBegan: this.onTouchBegan.bind(this),
            onTouchMoved: this.onTouchMoved.bind(this),
            onTouchEnded: this.onTouchEnded.bind(this)
        }, this);
        cc.eventManager.addListener(this._buttonToucher, this);

        ///Mouse Events
        if(! cc.sys.isNative) {
            this._buttonMouser = cc.EventListener.create({
                event: cc.EventListener.MOUSE,
                swallowTouches: true,
                onMouseMove: this.onMouseMove.bind(this)
            });
            cc.eventManager.addListener(this._buttonMouser, this);
        }
    },

    onExit: function() {
        if(this._buttonToucher) {
            cc.eventManager.removeListener(this._buttonToucher);
            this._buttonToucher = null;
        }
        if(! cc.sys.isNative) {
            if(this._buttonMouser) {
                cc.eventManager.removeListener(this._buttonMouser);
                this._buttonMouser = null;
            }
        }

        this._super();
    },

    onTouchBegan:function (touch, event) {
        var pos = touch.getLocation();
        var target = this.parent;
        if (target && cc.rectContainsPoint(target.getBoundingBoxToWorld(), pos)) {
            if(target.enabled && target.visible) {
                this._isTouched = true;
                this._isHover = false;
                this._playBegin(target);
                return true;
            }
        }
        return false;
    },

    onTouchMoved:function (touch, event) {

    },

    onTouchEnded:function (touch, event) {
        if(this._isTouched) {
            this._isTouched = false;
            var target = this.parent;
            if (target) {
                this._playEnd(target);
            }
        }
    },

    onMouseMove: function(event) {
        var pos = event.getLocation();
        ///NOTE: target's parent is Button
        var target = this.parent;
        if (target) {
            if(cc.rectContainsPoint(target.getBoundingBoxToWorld(), pos)) {
                if(!this._isHover && !this._isTouched) {
                    if(target.enabled && target.visible) {
                        this._isHover = true;
                        this._playHover(target, true);
                    }
                }
            } else {
                if(this._isHover) {
                    this._isHover = false;
                    this._playHover(target, false);
                }
            }
        }
    },

    _onHoverEnded: function() {
        this._isHoverPlaying = false;
    },

    _playBeginEx: function(target) {
        /**
         * NOTE: CCB has bug, CCControlButton can NOT set child, so use empty node contains button and label
         * CCNode[empty]
         *    |_CCControlButton
         *          |_TouchedNode
         */
        if(target.parent) {
            target = target.parent;
        }
        /**
         * NOTE: MenuItem is more specially
         * CCNode[empty]
         *    |_CCMenu
         *          |_CCMenuItemImage
         *                  |_TouchedNode
         */
        if(this._isMenuItem && target.parent) {
            target = target.parent;
        }
        target.stopAllActions();
        target.runAction(
            cc.sequence(
                cc.delayTime(0.01),
                cc.scaleTo(0.1, 1.1, 0.9),
                cc.delayTime(0.01)
            )
        );
    },

    _playEndEx: function(target) {
        /**
         * NOTE: CCB has bug, CCControlButton can NOT set child, so use empty node contains button and label
         * CCNode[empty]
         *    |_CCControlButton
         *          |_TouchedNode
         */
        if(target.parent) {
            target = target.parent;
        }
        /**
         * NOTE: MenuItem is more specially
         * CCNode[empty]
         *    |_CCMenu
         *          |_CCMenuItemImage
         *                  |_TouchedNode
         */
        if(this._isMenuItem && target.parent) {
            target = target.parent;
        }
        target.stopAllActions();
        target.runAction(
            cc.sequence(
                cc.delayTime(0.01),
                cc.scaleTo(0.1, 1, 1),
                cc.delayTime(0.01)
            )
        );
    },

    _playBegin: function(target) {
        /**
         * NOTE: CCB has bug, CCControlButton can NOT set child, so use empty node contains button and label
         * CCNode[empty]
         *    |_CCControlButton
         *          |_TouchedNode
         */
        if(target.parent) {
            target = target.parent;
        }
        /**
         * NOTE: MenuItem is more specially
         * CCNode[empty]
         *    |_CCMenu
         *          |_CCMenuItemImage
         *                  |_TouchedNode
         */
        if(this._isMenuItem && target.parent) {
            target = target.parent;
        }
        target.stopAllActions();
        target.runAction(
            cc.scaleTo(0.20, 0.85, 0.85)
        );
    },

    _playEnd: function(target) {
        /**
         * NOTE: CCB has bug, CCControlButton can NOT set child, so use empty node contains button and label
         * CCNode[empty]
         *    |_CCControlButton
         *          |_TouchedNode
         */
        if(target.parent) {
            target = target.parent;
        }
        /**
         * NOTE: MenuItem is more specially
         * CCNode[empty]
         *    |_CCMenu
         *          |_CCMenuItemImage
         *                  |_TouchedNode
         */
        if(this._isMenuItem && target.parent) {
            target = target.parent;
        }
        target.stopAllActions();
        target.runAction(
            cc.scaleTo(0.20 ,1, 1)
        );
    },

    _playHoverEx: function(target) {
        var bounding = target.getBoundingBox();
        if(bounding.width < this.offsetX) {
            bounding.width = this.offsetX;
        }
        if(bounding.height < this.offsetY) {
            bounding.height = this.offsetY;
        }

        /**
         * NOTE: CCB has bug, CCControlButton can NOT set child, so use empty node contains button and label
         * CCNode[empty]
         *    |_CCControlButton
         *          |_TouchedNode
         */
        if(target.parent) {
            target = target.parent;
        }
        /**
         * NOTE: MenuItem is more specially
         * CCNode[empty]
         *    |_CCMenu
         *          |_CCMenuItemImage
         *                  |_TouchedNode
         */
        if(this._isMenuItem && target.parent) {
            target = target.parent;
        }
        target.stopAllActions();
        target.runAction(
            cc.sequence(
                cc.scaleTo(0.08, (bounding.width-this.offsetX)/bounding.width, (bounding.height+this.offsetY)/bounding.height),
                cc.scaleTo(0.1, (bounding.width+this.offsetX)/bounding.width, (bounding.height-this.offsetY)/bounding.height),
                cc.delayTime(0.04),
                cc.scaleTo(0.1, 1, 1),
                cc.callFunc(this._onHoverEnded, this)
            )
        );
    },

    _playHover: function(target, isHover) {
        //cc.error("hover: target = ", target, Date.now());
        /**
         * NOTE: CCB has bug, CCControlButton can NOT set child, so use empty node contains button and label
         * CCNode[empty]
         *    |_CCControlButton
         *          |_TouchedNode
         */
        if(target.parent) {
            target = target.parent;
        }
        /**
         * NOTE: MenuItem is more specially
         * CCNode[empty]
         *    |_CCMenu
         *          |_CCMenuItemImage
         *                  |_TouchedNode
         */
        if(this._isMenuItem && target.parent) {
            target = target.parent;
        }
        target.stopAllActions();

        if(isHover) {
            target.runAction(
                cc.sequence(
                    cc.scaleTo(0.16, 1.08, 1.08),
                    cc.scaleTo(0.1, 1.06, 1.06)
                )
            );
        } else {
            target.setScale(1, 1);
        }

    }

});

module.exports = TouchedNode;
},{}],14:[function(require,module,exports){
/**
 * Created by oye on 15-5-17.
 */
var HttpClient = require("../../common/net/HttpClient");
var AdsPlace = require("../enum/AdsPlace");

var AD_CONFIG_URL = "https://qinning199.github.io/game.html";

//var ONE_MINUTE = 60 * 1000;
var AdListener = cc.Class.extend({
    onRewardedVideoFinished: function (isRewarded) {
    },

    onInterstitialAdEnd: function (channelName) {
    },

    onShowVideoAdBegin: function () {
    },

    onShowVideoAdEnd: function () {
    }
});

var AdPlaceInfo = function (interval) {
    this.interval = interval;
    this.lastShowTime = Date.now();
};


var AdsManager = cc.Class.extend({
    DEFAULT_AD_INTERVAL: 60 * 1000,

    intervalMap: {
        "0": 150,
        "1": 150,
        "2": 80,
        "3": 60
    },

    ONE_MINUTE_SECOND: 60 * 1000,

    adConfigUrl: "",

    rateTime: 0,
    ratedTime: 0,
    rateRemoveAds: false,

    isNewPlayer: true,

    adPlaceMap: {},

    /**
     * @type {AdListener}
     */
    adListener: null,

    showTopBanner: true,
    topBannerDay: 0,

    lastInterstitialTime: 0,
    enabledInterstitialAd: true,

    ctor: function () {
        if(cc.sys.isNative) {
            jsb_dp.oneSdkBridge.onInterstitialAdFinished = this.onAdFinishedJsb.bind(this);
            jsb_dp.oneSdkBridge.onVideoAdFinished = this.onVideoAdFinishedJsb.bind(this);
            jsb_dp.oneSdkBridge.onShowVideoAdBegin = this.onShowVideoAdBeginJsb.bind(this);
            jsb_dp.oneSdkBridge.onShowVideoAdEnd = this.onShowVideoAdEndJsb.bind(this);
        }
        for (var i = 1; i <= AdsPlace.Num; ++i) {
            this.adPlaceMap[i] = new AdPlaceInfo(this.DEFAULT_AD_INTERVAL);
        }
    },

    init: function () {
        this.initInterval();
        this.logInterval("local");
    },

    initInterval: function () {
        cc.log("AdsManager initInterval");
        var day = game.playerMan.getRegisterDay();
        var interval = this.intervalMap[day];
        if (!interval) {
            var keys = Object.keys(this.intervalMap);
            var key = keys[keys.length - 1];
            cc.log("AdsManager init interval key:" + key);
            interval = this.intervalMap[key];
        }
        if (interval) {
            this.adPlaceMap[AdsPlace.Pass].interval = interval * 1000;
        }
    },

    loadRemoteData: function () {
        var adConfigUrl = game.config.getAdUrl() || AD_CONFIG_URL;
        cc.log("AdsManager loadRemoteData:" + adConfigUrl);
        var self = this;
        HttpClient.doGet(adConfigUrl, function (error, text) {
            cc.log("AdsManager remote response:" + error + ",text:" + text);
            if (!error) {
                try {
                    var adConfig = JSON.parse(text);

                    if (cc.sys.os === cc.sys.OS_ANDROID) {
                        if (adConfig && adConfig.androidConfig) {
                            adConfig = adConfig.androidConfig;
                        }
                    }

                    var intervalMap = adConfig.newIntervalMap;
                    cc.log("AdsManager intervalMap:" + JSON.stringify(intervalMap));
                    if (!cc.isUndefined(intervalMap)) {
                        self.intervalMap = intervalMap;
                        self.initInterval();
                    }

                    var showTopBanner = adConfig.showTopBanner;
                    if (!cc.isUndefined(showTopBanner)) {
                        self.showTopBanner = showTopBanner;
                    }

                    var topBannerDay = adConfig.topBannerDay;
                    if (!cc.isUndefined(topBannerDay)) {
                        self.topBannerDay = topBannerDay;
                    }

                    var backToGroundInterval = adConfig.backToGroundInterval;
                    if (!cc.isUndefined(backToGroundInterval)) {
                        self.adPlaceMap[AdsPlace.BackGround].interval = backToGroundInterval * 1000;
                    }

                    var backToHomeInterval = adConfig.backToHomeInterval;
                    if (!cc.isUndefined(backToHomeInterval)) {
                        self.adPlaceMap[AdsPlace.Home].interval = backToHomeInterval * 1000;
                    }

                    var refreshInterval = adConfig.refreshInterval;
                    if (!cc.isUndefined(refreshInterval)) {
                        self.adPlaceMap[AdsPlace.Refresh].interval = refreshInterval * 1000;
                    }

                    if (game.utils.isSelfGame()) {
                        var adsConfig = adConfig.adsConfig;
                        if (adsConfig) {
                            if (jsb_dp.oneSdkBridge.setInterstitialAdWeightConfig) {
                                jsb_dp.oneSdkBridge.setInterstitialAdWeightConfig(JSON.stringify(adsConfig));
                            }
                        }

                        var rewardAdsConfig = adConfig.rewardAdsConfig;
                        if (rewardAdsConfig) {
                            if (jsb_dp.oneSdkBridge.setRewardAdWeightConfig) {
                                jsb_dp.oneSdkBridge.setRewardAdWeightConfig(JSON.stringify(rewardAdsConfig));
                            }
                        }

                        var bannerAdsConfig = adConfig.bannerAdsConfig;
                        if (bannerAdsConfig) {
                            if (jsb_dp.oneSdkBridge.setBannerAdWeightConfig) {
                                jsb_dp.oneSdkBridge.setBannerAdWeightConfig(JSON.stringify(bannerAdsConfig));
                            }
                        }
                    }

                    self.logInterval("server");
                } catch (e) {
                    cc.log("AdsManager error:" + e.message);
                }
            }
        });
    },

    getRegisterDay: function () {
        return game.playerMan.getRegisterDay();
    },

    logInterval: function (tag) {
        cc.log("AdsManager " + tag + " adPlaceMap:" + JSON.stringify(this.adPlaceMap) +
            ",day:" + this.getRegisterDay());
    },

    setIsNewPlayer: function (isNew) {
        this.isNewPlayer = isNew;
    },

    onGameOnShow: function () {
    },

    setAdListener: function (adListener) {
        this.adListener = adListener;
    },

    isRemovedAds: function () {
        return game.playerMan.player.removedAds;
    },

    showBannerAds: function (placement) {
        cc.log("AdsManager showBannerAds:" + placement);
        if (this.isRemovedAds()) return;
        if (cc.sys.isNative) {
            if (!this.isShowBannerAds(placement)) {
                jsb_dp.oneSdkBridge.showBannerAd(placement);
            }
        }
    },

    removeBannerAds: function (placement) {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.removeBannerAd(placement);
        }
    },

    isShowBannerAds: function (placement) {
        if (cc.sys.isNative) {
            return jsb_dp.oneSdkBridge.isShowBannerAd(placement);
        }
        return false;
    },

    showInterstitial: function (place) {
        if (!this.enabledInterstitialAd) {
            return;
        }
        if (this.isRemovedAds()) return;
        cc.log("AdsManager showInterstitial place:" + place + ", interval:" + this.adPlaceMap[place].interval + ",current interval:" +
            (Date.now() - this.adPlaceMap[place].lastShowTime));
        if (Date.now() - this.adPlaceMap[place].lastShowTime < this.adPlaceMap[place].interval) {
            return;
        }
        this.adPlaceMap[place].lastShowTime = Date.now();

        if (Date.now() - this.lastInterstitialTime < 5 * 1000) {
            cc.log("AdsManager showInterstitial interval less than 5 seconds");
            return;
        }
        cc.log("AdsManager showInterstitial place:" + place + " showed");
        this.lastInterstitialTime = Date.now();

        var placement = "default";
        if (place === AdsPlace.Home) {
            placement = "home";
        } else if (place === AdsPlace.Refresh) {
            placement = "refresh";
        }
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.showInterstitalAd(placement);
        }
    },

    showNativeAd: function (place, posX, posY) {
        if (this.isRemovedAds()) return;
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.showNativeAd(place, posX, posY);
        }
    },

    removeNativeAd: function (place) {
        if (this.isRemovedAds()) return;
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.removeNativeAd(place);
        }
    },

    setInterstitialShowed: function (place) {
        this.adPlaceMap[place].lastShowTime = Date.now();
    },

    showCrossPromotion: function () {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.showCrossPromoteAd();
        }
    },

    isRewardVideoReady: function () {
        //if (game.playerMan.getRewardAdPlaceCountPerDay() > game.config.rewardAdMaxCountPerDay) {
        //    cc.log("AdsManager isRewardVideoReady has reached max count:" + game.playerMan.getRewardAdPlaceCountPerDay());
        //    return false;
        //}
        if (cc.sys.isNative) {
            return jsb_dp.oneSdkBridge.isRewardVideoReady();
        }
        return false;
    },

    showRewardVideoAd: function (name) {
        if (!this.isRewardVideoReady()) {
            return;
        }
        this.enabledInterstitial(false);
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.showRewardVideoAd(name);
        }
    },

    enabledInterstitial: function (enabled) {
        this.enabledInterstitialAd = enabled;
    },

    onAdFinishedJsb: function (str) {
        cc.log("onAdFinishedJsb:" + str);
        var adsFinishedObj = JSON.parse(str);
        var channelName = adsFinishedObj["channelName"];
        cc.log("channel :" + channelName + " show interstitial ads finished");

        if (this.adListener && this.adListener.onInterstitialAdEnd) {
            this.adListener.onInterstitialAdEnd(channelName);
        }
        game.playerMan.addInterstitialAdCount();
    },

    onVideoAdFinishedJsb: function (str) {
        cc.log("onVideoAdFinishedJsb:" + str);
        var adsFinishedObj = JSON.parse(str);
        var isSkipped = adsFinishedObj.isSkipped;
        if (!isSkipped) {
            cc.log("reward video ads show success");
        } else {
            cc.log("reward video ads skipped");
        }

        if (this.adListener && this.adListener.onRewardedVideoFinished) {
            this.adListener.onRewardedVideoFinished(!isSkipped);
        }
        if (!isSkipped) {
            game.playerMan.addRewardedAdCount();
        }
    },

    onShowVideoAdBeginJsb: function () {
        if (this.adListener && this.adListener.onShowVideoAdBegin) {
            this.adListener.onShowVideoAdBegin();
        }
    },

    onShowVideoAdEndJsb: function () {
        if (this.adListener && this.adListener.onShowVideoAdEnd) {
            this.adListener.onShowVideoAdEnd();
        }
        this.enabledInterstitial(true);
    }
});

AdsManager.sharedDirector = null;
AdsManager.firstUseDirector = true;

AdsManager.getInstance = function () {
    if (AdsManager.firstUseDirector) {
        AdsManager.firstUseDirector = false;
        AdsManager.sharedDirector = new AdsManager();
    }
    return AdsManager.sharedDirector;
};

module.exports = AdsManager;
},{"../../common/net/HttpClient":26,"../enum/AdsPlace":9}],15:[function(require,module,exports){
/**
 * Created by oye on 15-5-17.
 */

var AnalyseManager = cc.Class.extend({
    g_pAnalytics: null,
    ctor: function () {
    },

    initAnalytics: function () {
    },

    trackLoginEvent: function () {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.trackLogin();
        }
    },

    /**
     * @param {number} amountNum
     * @param {string} itemType
     * @param {string} itemId
     * @param {string} receipt
     */
    trackPurchaseEvent: function (amountNum, itemType, itemId, receipt) {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.trackPurchase(amountNum, itemType, itemId, receipt);
        }
    },

    trackStartProgressionEvent: function (name, value) {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.trackStartProgression(name, value);
        }
    },

    trackCompletedProgressionEvent: function (name, value) {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.trackCompletedProgression(name, value);
        }
    },

    trackFailedProgressionEvent: function (name, value) {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.trackFailProgression(name, value);
        }
    },

    /**
     * track error event
     * @param {string} errorMsg
     */
    trackErrorEvent: function (errorMsg) {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.trackError(errorMsg);
        }
    },

    trackEvent: function (name, obj) {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.trackEvent(name, JSON.stringify(obj));
        }
    }
});

AnalyseManager.sharedDirector = null;
AnalyseManager.firstUseDirector = true;

AnalyseManager.getInstance = function () {
    if (AnalyseManager.firstUseDirector) {
        AnalyseManager.firstUseDirector = false;
        AnalyseManager.sharedDirector = new AnalyseManager();
    }
    return AnalyseManager.sharedDirector;
};

module.exports = AnalyseManager;
},{}],16:[function(require,module,exports){
/**
 * Created by oye on 15-5-17.
 */
var CaptureListener = cc.Class.extend({
    onCaptureAudio: function (audioDecible) {
    }
});


var CaptureManager = cc.Class.extend({

    ctor: function () {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.onCaptureAudio = this.onCaptureAudio.bind(this);
        }
    },

    setCaptureListener: function (listener) {
        this.listener = listener;
    },

    captureAudio: function () {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.captureAudio();
        }
    },

    getAudioDecible: function () {
        if (cc.sys.isNative) {
            return jsb_dp.oneSdkBridge.getAudioDecible();
        }
        return 0;
    },

    onCaptureAudio: function (audioDecibleString) {
        var audioObj = JSON.parse(audioDecibleString);
        var audioDecible = audioObj["audioDecible"];
        if (this.listener) {
            this.listener.onCaptureAudio(audioDecible);
        }
    }
});

CaptureManager.sharedDirector = null;
CaptureManager.firstUseDirector = true;

CaptureManager.getInstance = function () {
    if (CaptureManager.firstUseDirector) {
        CaptureManager.firstUseDirector = false;
        CaptureManager.sharedDirector = new CaptureManager();
    }
    return CaptureManager.sharedDirector;
};

module.exports = CaptureManager;
},{}],17:[function(require,module,exports){
/**
 * Created by qinning on 2017/8/29.
 */

var HttpClient = require("../../common/net/HttpClient");

var CrossPromData = function () {
    this.scoreLimit = 0;
    this.imageUrl = "";
    this.downloadUrl = "";
    this.weight = 0;
    this.appId = "";
};

var CrossPromManager = cc.Class.extend({
    cachedTexture: null,
    cachedConfig: null,
    crossProms: null,
    ctor: function () {
    },

    tryToLoadFromRemote: function () {
        var crossPromUrl = game.config.getCrossPromUrl();

        var self = this;
        HttpClient.doGet(crossPromUrl, function (error, text) {
            if (!error) {
                try {
                    cc.log("cross promotion tryToLoadFromRemote downloaded");
                    var data = JSON.parse(text);
                    var open = data.open || false;
                    if (!open) {
                        return;
                    }
                    var scoreLimit = data.scoreLimit || 0;
                    //if (!cc.isUndefined(game.playerMan.player.bestScore)) {
                    //    if (game.playerMan.player.bestScore < scoreLimit) {
                    //        cc.log("cross promotion tryToLoadFromRemote game.playerMan.player.bestScore:" + game.playerMan.player.bestScore);
                    //        return;
                    //    }
                    //}
                    if (!cc.isUndefined(game.playerMan.player.level)) {
                        if (game.playerMan.player.level < scoreLimit) {
                            return;
                        }
                    }
                    var maxPopCount = data.maxPopCount || 3;
                    self.downloadedShow = data.downloadedShow || false;
                    self.crossProms = data["crossProms"];
                    self.maxPopCount = maxPopCount;
                    self.tryToDownloadPromoImg();
                } catch (e) {
                }
            }
        });
    },

    tryToDownloadPromoImg: function () {
        if (this.maxPopCount <= 0) {
            return;
        }
        if (this.cachedConfig || this.cachedTexture) {
            return;
        }
        this.maxPopCount--;
        cc.log("cross promotion tryToDownloadPromoImg check");
        var self = this;
        if (!cc.isUndefined(this.crossProms) && cc.isArray(this.crossProms) && this.crossProms.length > 0) {
            var randomConfig = this.getRandomConfig(this.crossProms);
            this.removeCrossPromoCfg(randomConfig);
            //game.utils.download
            cc.log("cross promotion tryToDownloadPromoImg start download");
            game.utils.loadRemoteImg(randomConfig.imageUrl, function (error, tex, extra) {
                if (!error && tex) {
                    cc.log("cross promotion tryToDownloadPromoImg downloaded:" + self.downloadedShow);
                    self.cachedTexture = tex;
                    self.cachedTexture.retain();
                    self.cachedConfig = randomConfig;
                    if (self.downloadedShow) {
                        self.downloadedShow = false;
                        self.tryToPopupCrossPromDlg();
                    }
                }
            }, null);
        }
    },

    removeCrossPromoCfg: function (crossPromCfg) {
        for (var i = 0; i < this.crossProms.length; ++i) {
            if (this.crossProms[i] === crossPromCfg) {
                this.crossProms.splice(i, 1);
                break;
            }
        }
    },


    getRandomConfig: function (crossProms) {
        var totalWeight = 0;
        var i;
        for (i = 0; i < crossProms.length; ++i) {
            totalWeight += crossProms[i].weight;
        }

        var randomNum = game.utils.randomNextInt(totalWeight);

        var curWeight = 0;
        for (i = 0; i < crossProms.length; ++i) {
            curWeight += crossProms[i].weight;
            if (curWeight > randomNum) {
                return crossProms[i];
            }
        }

        return crossProms[0];
    },

    popupCrossPromDlg: function (crossPromsConfig, texture) {
        var CrossPromController = require("../controller/CrossPromController");
        var crossPromNode = CrossPromController.createFromCCB("res/cross/cross_prom_view.ccbi");
        crossPromNode.controller.initWith(crossPromsConfig, texture);
        crossPromNode.controller.popup();
    },

    tryToPopupCrossPromDlg: function () {
        cc.log("cross promotion tryToPopupCrossPromDlg start");
        if (this.cachedConfig && this.cachedTexture) {
            cc.log("cross promotion tryToPopupCrossPromDlg poped");
            this.popupCrossPromDlg(this.cachedConfig, this.cachedTexture);
            this.cachedTexture.release();
            this.cachedConfig = null;
            this.cachedTexture = null;
            this.tryToDownloadPromoImg();
        }
    }
});

CrossPromManager.sharedDirector = null;
CrossPromManager.firstUseDirector = true;

CrossPromManager.getInstance = function () {
    if (CrossPromManager.firstUseDirector) {
        CrossPromManager.firstUseDirector = false;
        CrossPromManager.sharedDirector = new CrossPromManager();
    }
    return CrossPromManager.sharedDirector;
};


module.exports = CrossPromManager;
},{"../../common/net/HttpClient":26,"../controller/CrossPromController":5}],18:[function(require,module,exports){
/**
 * Created by oye on 15-5-17.
 */
var GCManager = cc.Class.extend({

    ctor: function () {
    },

    isGameCenterAvailable: function () {
        if (cc.sys.isNative) {
            return jsb_dp.oneSdkBridge.isGameCenterAvailable();
        }
        return false;
    },

    reportScore: function (score, leaderBoardKey) {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.reportScore(score, leaderBoardKey);
        }
    },

    showLeaderboard: function (leaderBoardKey) {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.showLeaderboard(leaderBoardKey);
        }
    },

    reportAchievement: function (percentCompleted, archievementKey) {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.reportAchievement(percentCompleted, archievementKey);
        }
    },

    showAchievements: function (leaderBoardkey) {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.showAchievements(leaderBoardkey);
        }
    },

    highScoreForLeaderboard: function (leaderBoardKey) {
        if (cc.sys.isNative) {
            return jsb_dp.oneSdkBridge.highScoreForLeaderboard(leaderBoardKey);
        }
        return 0;
    },

    progressForAchievement: function (archievementKey) {
        if (cc.sys.isNative) {
            return jsb_dp.oneSdkBridge.progressForAchievement(archievementKey);
        }
        return 0;
    }
});

GCManager.sharedDirector = null;
GCManager.firstUseDirector = true;

GCManager.getInstance = function () {
    if (GCManager.firstUseDirector) {
        GCManager.firstUseDirector = false;
        GCManager.sharedDirector = new GCManager();
    }
    return GCManager.sharedDirector;
};

module.exports = GCManager;
},{}],19:[function(require,module,exports){
/**
 * Created by qinning on 2017/3/11.
 */

var LocalizationManager = cc.Class.extend({

    _isLoaded: false,
    curLanguage: null,
    ctor: function () {
    },

    reload: function () {
        if (this._isLoaded) {
            return;
        }
        if (game.utils.isSelfGame()) {
            this.curLanguage = game.utils.loadJson("res/config/strings-zh.json");
        } else {
            this.curLanguage = game.utils.loadJson("res/config/strings-en.json");
        }
        this._isLoaded = true;
    },

    getValue: function (key) {
        return this.curLanguage[key] || key;
    },

    isChinese: function () {
        if (game.utils.isSelfGame()) {
            return true;
        }
        return false;
    }
});

LocalizationManager.sharedDirector = null;
LocalizationManager.firstUseDirector = true;

LocalizationManager.getInstance = function () {
    if (LocalizationManager.firstUseDirector) {
        LocalizationManager.firstUseDirector = false;
        LocalizationManager.sharedDirector = new LocalizationManager();
    }
    return LocalizationManager.sharedDirector;
};


module.exports = LocalizationManager;
},{}],20:[function(require,module,exports){
/**
 * Created by oye on 15-5-17.
 */
var NotificationManager = cc.Class.extend({

    ctor: function () {
    },

    registerNotification: function () {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.registerNotification();
        }
    },

    /**
     *
     * @param timeFromNow
     * @param alertText
     * @param alertAction
     * @param badgeNumber
     * @param sound
     */
    scheduleNotification: function (timeFromNow, alertText, alertAction, badgeNumber) {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.scheduleNotification(timeFromNow, alertText, alertAction, badgeNumber);
        }
    },

    unscheduleNotification: function () {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.unscheduleNotification();
        }
    }
});

NotificationManager.sharedDirector = null;
NotificationManager.firstUseDirector = true;

NotificationManager.getInstance = function () {
    if (NotificationManager.firstUseDirector) {
        NotificationManager.firstUseDirector = false;
        NotificationManager.sharedDirector = new NotificationManager();
    }
    return NotificationManager.sharedDirector;
};


module.exports = NotificationManager;
},{}],21:[function(require,module,exports){
/**
 * Created by oye on 15-5-17.
 */
var RateManager = cc.Class.extend({

    ctor: function () {
    },

    init: function () {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.initRateParams(3, 1, 0.5, 0.5, true);
        }
    },

    rate: function () {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.launchRate();
        }
    },

    likeInFacebook: function (url) {
        cc.sys.openURL(url);
    },

    launchAppReview: function () {
        if (cc.sys.isNative) {
            return jsb_dp.oneSdkBridge.launchAppReview();
        }
        return false;
    }
});

RateManager.sharedDirector = null;
RateManager.firstUseDirector = true;

RateManager.getInstance = function () {
    if (RateManager.firstUseDirector) {
        RateManager.firstUseDirector = false;
        RateManager.sharedDirector = new RateManager();
    }
    return RateManager.sharedDirector;
};

module.exports = RateManager;
},{}],22:[function(require,module,exports){
/**
 * Created by oye on 15-5-17.
 */

var ShareManager = cc.Class.extend({
    ctor: function () {
    },

    shareWithSystem: function (tips) {
        if (cc.sys.isNative) {
            var fileName = "";
            if (cc.sys.os === cc.sys.OS_IOS) {
                fileName = game.utils.getScreenShot("capture_screen.jpg");
            }
            jsb_dp.oneSdkBridge.systemShare(fileName, tips);
        }
    },

    openAppWithIdentifier: function (appId) {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.openAppWithIdentifier(appId);
        }
    },

    sendEmail: function (address, title, body) {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.sendEmail(address, title, body);
        }
    }
});

ShareManager.sharedDirector = null;
ShareManager.firstUseDirector = true;

ShareManager.getInstance = function () {
    if (ShareManager.firstUseDirector) {
        ShareManager.firstUseDirector = false;
        ShareManager.sharedDirector = new ShareManager();
    }
    return ShareManager.sharedDirector;
};

module.exports = ShareManager;
},{}],23:[function(require,module,exports){
/**
 * Created by oye on 15-5-17.
 */
var PaymentInfo = require("../entity/PaymentInfo");
var PaymentCode = require("../enum/PaymentCode");
var ProductInfo = require("../entity/ProductInfo");

var PaymentDelegate = cc.Class.extend({
    /**
     * @param {PaymentCode} error
     * @param {PaymentInfo} paymentInfo
     */
    onPaymentCompleted: function (error, paymentInfo) {
    },

    /**
     * @param {Array.<PaymentInfo>} paymentInfoList
     */
    onGetUnverifiedReceiptList: function (paymentInfoList) {
    },

    /**
     * on get product list.
     * @param {Array.<ProductInfo>} productList
     */
    onGetProductList: function (productList) {
    }
});

var StoreManager = cc.Class.extend({
    /**
     * @type {PaymentDelegate}
     */
    paymentDelegate: null,

    /**
     * @param {Array.<PaymentInfo>} paymentInfoList
     */
    productList: null,

    ctor: function () {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.onGetProductList = this.onGetProductList.bind(this);
            jsb_dp.oneSdkBridge.onPurchase = this.onPurchase.bind(this);
            jsb_dp.oneSdkBridge.onConsume = this.onConsume.bind(this);
            jsb_dp.oneSdkBridge.onGetUnverifiedReceiptList = this.onGetUnverifiedReceiptList.bind(this);
        }
    },

    /**
     * set payment delegate.
     * @param {PaymentDelegate} paymentDelegate
     */
    setPaymentDelegate: function (paymentDelegate) {
        this.paymentDelegate = paymentDelegate;
    },

    onGetProductList: function (jsonResult) {
        cc.log("onGetProductList: " + jsonResult);
        if (jsonResult) {
            var products = JSON.parse(jsonResult);
            if (products && products.length > 0) {
                var productList = [];
                for (var i = 0; i < products.length; ++i) {
                    var productInfo = new ProductInfo();
                    productInfo.unmarshal(products[i]);
                    productList.push(productInfo);
                }
                this.paymentDelegate.onGetProductList(productList);
                this.productList = productList;
            }
        }
    },

    onPurchase: function (jsonResult) {
        cc.log("onPurchase: " + jsonResult);
        var purchaseResult = JSON.parse(jsonResult);
        var purchaseData;
        if (purchaseResult.errorCode === PaymentCode.PAYMENT_CODE_SUCCESS) {
            purchaseData = JSON.parse(jsonResult);
            this._paymentCompleted(PaymentCode.PAYMENT_CODE_SUCCESS, purchaseData);
        } else {
            purchaseData = JSON.parse(jsonResult);
            this._paymentCompleted(PaymentCode.PAYMENT_CODE_FAIL, purchaseData);
        }
    },

    onConsume: function (jsonInfo) {
        cc.log("onConsume: " + jsonInfo);
    },

    onGetUnverifiedReceiptList: function (purchaseListString) {
        cc.log("onGetUnverifiedReceiptList: " + purchaseListString);
        if (purchaseListString && purchaseListString.length > 0) {
            var purchaseJsonList = JSON.parse(purchaseListString);
            if (purchaseJsonList && purchaseJsonList.length > 0) {
                var purchaseInfoList = [];
                for (var i = 0; i < purchaseJsonList.length; ++i) {
                    var paymentMsg = purchaseJsonList[i];
                    var paymentInfo = new PaymentInfo();
                    paymentInfo.unmarshal(paymentMsg);
                    purchaseInfoList.push(paymentInfo);
                }
                this.paymentDelegate.onGetUnverifiedReceiptList(purchaseInfoList);
            }
        }

    },

    _paymentCompleted: function (error, paymentMsg) {
        var paymentInfo = new PaymentInfo();
        paymentInfo.unmarshal(paymentMsg);
        if (error === PaymentCode.PAYMENT_CODE_SUCCESS) {
            if (paymentMsg) {
                this.paymentDelegate.onPaymentCompleted(PaymentCode.PAYMENT_CODE_SUCCESS, paymentInfo);
                var product = this._getProductById(paymentInfo.productId);
                if (product) {
                    var price = this._getNumFromString(product.price) * 100;
                    game.analyseManager.trackPurchaseEvent(price, product.title, paymentInfo.productId,
                        paymentInfo.receipt);
                }
            } else {
                this.paymentDelegate.onPaymentCompleted(PaymentCode.PAYMENT_CODE_FAIL, paymentInfo);
            }
        } else {
            this.paymentDelegate.onPaymentCompleted(PaymentCode.PAYMENT_CODE_FAIL, paymentInfo);
        }
        //if (cc.sys.os !== cc.sys.OS_ANDROID) {
        //    this.consume(paymentInfo.purchaseId);
        //}
    },

    _getNumFromString: function (text) {
        return text.replace(/[^0-9.]/ig, "");
    },

    requestProduct: function (productIds) {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.getProductsInfo(productIds);
        }
    },

    payForProduct: function (productId) {
        cc.log("payForProduct:" + productId);
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.purchase(productId);
        }
    },

    consume: function (transactionId) {
        cc.log("consume:" + transactionId);
        if (cc.sys.isNative) {
            if (transactionId && transactionId.length > 0) {
                jsb_dp.oneSdkBridge.consume(transactionId);
            }
        }
    },

    restoreCompletedTransactions: function () {
        cc.log("restoreCompletedTransactions");
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.restoreTransactions();
        }
    },

    getUnverifiedReceiptList: function () {
        cc.log("getUnverifiedReceiptList");
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.getUnverifiedReceiptList();
        }
    },

    _getProductById: function (productId) {
        if (this.productList && this.productList.length > 0) {
            for (var i = 0; i < this.productList.length; ++i) {
                var product = this.productList[i];
                if (product.productId === productId) {
                    return product;
                }
            }
        }
        return null;
    }
});

StoreManager.sharedDirector = null;
StoreManager.firstUseDirector = true;

StoreManager.getInstance = function () {
    if (StoreManager.firstUseDirector) {
        StoreManager.firstUseDirector = false;
        StoreManager.sharedDirector = new StoreManager();
    }
    return StoreManager.sharedDirector;
};

module.exports = StoreManager;
},{"../entity/PaymentInfo":6,"../entity/ProductInfo":8,"../enum/PaymentCode":10}],24:[function(require,module,exports){
var DAY_IN_SECONDS = 24 * 60 * 60;

var NOTIFICATION_DAYS = [1, 3, 7, 15, 30];
var AdsPlace = require("../enum/AdsPlace");

var LogicMan = cc.Class.extend({
    _isRegisterGameEventListener: false,
    _start: false,
    ctor: function() {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge = jsb_dp.OneSDKJSBridge.getInstance();
            if (jsb_dp.LogicJSBridge && jsb_dp.LogicJSBridge.getInstance) {
                jsb_dp.logicBridge = jsb_dp.LogicJSBridge.getInstance();
            }
        }

        var EventDispatcher = require("../events/EventDispatcher");
        var NotificationManager = require("../manager/NotificationManager");
        var AnalyseManager = require("../manager/AnalyseManager");
        var StoreManager = require("../manager/StoreManager");
        var GCManager = require("../manager/GCManager");
        var RateManager = require("../manager/RateManager");
        var PlayerMan = require("../model/PlayerMan");
        var StorageController = require("../storage/StorageController");
        var AdsManager = require("../manager/AdsManager");
        var AudioPlayer = require("../audio/AudioPlayer");
        var Utils = require("../util/Utils");
        var ShareManager = require("../manager/ShareManager");
        var DialogManager = require("../popup/DialogManager");
        var AssetsManager = require("../assets/AssetsManager");

        var BaseCCBController = require("../controller/BaseCCBController");
        var AudioHelper = require("../util/AudioHelper");
        var CaptureManager = require("../manager/CaptureManager");
        var LocalizationManager = require("../manager/LocalizationManager");
        var CrossPromManager = require("../manager/CrossPromManager");

        window.game = {};
        window.game.utils = Utils;
        window.game.eventDispatcher = EventDispatcher.getInstance();
        window.game.logicMan = this;
        window.game.notificationManager = NotificationManager.getInstance();
        window.game.analyseManager = AnalyseManager.getInstance();
        window.game.storeManager = StoreManager.getInstance();
        window.game.gcManager = GCManager.getInstance();
        window.game.rateManager = RateManager.getInstance();
        window.game.playerMan = PlayerMan.getInstance();
        window.game.storageController = StorageController.getInstance();
        window.game.adsManager = AdsManager.getInstance();
        window.game.audioPlayer = AudioPlayer.getInstance();
        window.game.shareManager = ShareManager.getInstance();
        window.game.dialogManager = DialogManager.getInstance();
        window.game.assetsManager = AssetsManager.getInstance();
        window.game.captureManager = CaptureManager.getInstance();
        window.game.local = LocalizationManager.getInstance();

        window.BaseCCBController = BaseCCBController;
        window.AudioHelper = AudioHelper;

        var GameBridge = require("../bridge/GameBridge");
        window.GameBridge = GameBridge;
        window.game.config = GameBridge.getConfig();
        window.game.popupMan = GameBridge.getPopupMan();
        window.game.gameMan = GameBridge.getGameMan();

        window.game.crossPromMan = CrossPromManager.getInstance();

        _ = function (key) {
            return game.local.getValue(key);
        };
    },

    init: function () {
    },

    registerGameEventListener: function() {
        if(!this._isRegisterGameEventListener) {
            this._isRegisterGameEventListener = true;
            game.eventDispatcher.addEventListener(cc.game.EVENT_SHOW, this.gameOnShow, this);
            game.eventDispatcher.addEventListener(cc.game.EVENT_HIDE, this.gameOnHide, this);
        }
    },

    purge: function() {
        game.eventDispatcher.removeEventListener(cc.game.EVENT_SHOW, this.gameOnShow, this);
        game.eventDispatcher.removeEventListener(cc.game.EVENT_HIDE, this.gameOnHide, this);
    },

    gameOnShow: function() {
        game.notificationManager.unscheduleNotification();

        game.adsManager.onGameOnShow();

        setTimeout(function () {
            if (game.playerMan.getLevel() >= 4) {
                game.adsManager.showInterstitial(AdsPlace.BackGround);
            }
        }.bind(this), 100);
    },

    gameOnHide: function() {
        if (cc.sys.isNative) {
            this.scheduleLocalNotification();
        }
        game.adsManager.setInterstitialShowed(AdsPlace.BackGround);
        this.lastHideTime = Date.now();
    },

    registerNotification: function () {
        game.notificationManager.registerNotification();
    },

    startGame: function (notInitPlayer) {
        if (this._start) {
            return;
        }
        this._start = true;
        game.notificationManager.unscheduleNotification();
        this.registerGameEventListener();

        if (!notInitPlayer) {
            game.playerMan.initData();
        }
        game.adsManager.init();
        game.adsManager.loadRemoteData();
        game.analyseManager.initAnalytics();
        game.gcManager.isGameCenterAvailable();
        game.rateManager.init(3, 1, 0.5, 0.5, true);
        game.analyseManager.trackLoginEvent();
        game.crossPromMan.tryToLoadFromRemote();
        game.adsManager.setIsNewPlayer(game.playerMan.isNewPlayer());
    },

    scheduleLocalNotification: function () {
        if (!cc.sys.isNative) {
            return;
        }


        var leftTimeSeconds = Math.floor(game.gameMan.getWheelLeftTime() / 1000);
        if (leftTimeSeconds < 5 * 60) {
            leftTimeSeconds = 5 * 60;
        }
        var index = 1;
        //wheel notification.
        game.notificationManager.scheduleNotification(leftTimeSeconds,
            _("wheel_is_ready"), game.local.getValue("app_name"), index++);

        //daily bonus notification.
        var lastClaimDay = game.playerMan.player.lastClaimDailyBonusDay;
        var currentDayClaimed = (lastClaimDay >= game.utils.getDayByTs(Date.now()));
        var dailyBonusSeconds = 0;
        if (currentDayClaimed) {
            var nextDayTime = (game.utils.getDayByTs(Date.now()) + 1) * (24 * 3600 * 1000);
            dailyBonusSeconds = (nextDayTime - Date.now()) / 1000;
        }
        if (dailyBonusSeconds <= 10 * 60) {
            dailyBonusSeconds = 10 * 60;
        }
        game.notificationManager.scheduleNotification(dailyBonusSeconds,
            _("daily_bonus_is_ready"), game.local.getValue("app_name"), index++);

        //normal notification.
        for (var i = 0; i < NOTIFICATION_DAYS.length; ++i) {
            game.notificationManager.scheduleNotification(DAY_IN_SECONDS * NOTIFICATION_DAYS[i],
                game.local.getValue(game.utils.sprintf("noti_tips%d", i + 1)), game.local.getValue("app_name"), index++);
        }
    },

    rsyncUserDataFromGC: function () {
        //var highLevel = game.gcManager.highScoreForLeaderboard(game.config.getLeaderBoardKey());
        //if (highLevel > game.playerMan.getLevel()) {
        //    game.playerMan.setLevel(highLevel);
        //}
    }
});

LogicMan._instance = null;
LogicMan._firstUseInstance = true;

/**
 *
 * @returns {LogicMan}
 */
LogicMan.getInstance = function () {
    if (LogicMan._firstUseInstance) {
        LogicMan._firstUseInstance = false;
        LogicMan._instance = new LogicMan();
    }
    return LogicMan._instance;
};

module.exports = LogicMan;
},{"../assets/AssetsManager":1,"../audio/AudioPlayer":2,"../bridge/GameBridge":3,"../controller/BaseCCBController":4,"../enum/AdsPlace":9,"../events/EventDispatcher":11,"../manager/AdsManager":14,"../manager/AnalyseManager":15,"../manager/CaptureManager":16,"../manager/CrossPromManager":17,"../manager/GCManager":18,"../manager/LocalizationManager":19,"../manager/NotificationManager":20,"../manager/RateManager":21,"../manager/ShareManager":22,"../manager/StoreManager":23,"../model/PlayerMan":25,"../popup/DialogManager":27,"../storage/StorageController":29,"../util/AudioHelper":30,"../util/Utils":31}],25:[function(require,module,exports){
/**
 * Created by qinning on 15/5/12.
 */
var PlayerInfo = require("../entity/PlayerInfo");

var PLAYER_KEY = "player_key";

var PlayerMan = cc.Class.extend({
    player: null,
    bestScoreKey: null,
    levelBoardKey: null,
    ctor: function () {
    },

    initData: function () {
        var playerInfoStr = game.storageController.getItem(PLAYER_KEY, null);
        var player;
        if (playerInfoStr == null || playerInfoStr == "") {
            player = PlayerInfo.createDefault();
            game.storageController.setItem(PLAYER_KEY, JSON.stringify(player));
        } else {
            player = new PlayerInfo();
            player.unmarshall(JSON.parse(playerInfoStr));
        }
        this.player = player;
    },

    getBestScore: function () {
        return this.player.bestScore;
    },

    getLevel: function () {
        if (cc.isUndefined(this.player.level)) {
            return 1;
        } else {
            return this.player.level;
        }
    },

    setLevel: function (level) {
        this.player.level = level;
        this._flushToStorage();
    },

    updateLevelStar: function (level, levelStar) {
        if (cc.isUndefined(this.player.levelMap[level]) || this.player.levelMap[level] < levelStar) {
            this.player.levelMap[level] = levelStar;
            game.gcManager.reportScore(level, this.getLevelBoardKey());
            this._flushToStorage();
        }
    },

    getLevelStar: function (level) {
        return this.player.levelMap[level] || 0;
    },

    addLevel: function () {
        game.gcManager.reportScore(this.player.level, this.getLevelBoardKey());
        this.player.level++;
        this.player.progress = 0;
        this._flushToStorage();
    },

    updateBestScore: function (newBestScore) {
        if (newBestScore > this.player.bestScore) {
            this.player.bestScore = newBestScore;
            game.gcManager.reportScore(newBestScore, this.getBestScoreBoardKey());
            this._flushToStorage();
            return true;
        }
        return false;
    },

    getLevelBoardKey: function () {
        return this.levelBoardKey || game.config.getLeaderBoardKey();
    },

    getBestScoreBoardKey: function () {
        return this.bestScoreKey || game.config.getLeaderBoardKey();
    },

    setLevelBoardKey: function (key) {
        this.levelBoardKey = key;
    },

    setBestScoreBoardKey: function (bestScoreKey) {
        this.bestScoreKey = bestScoreKey;
    },

    updateProgress: function (progress) {
        if (this.player.progress < progress) {
            this.player.progress = progress;
            this._flushToStorage();
        }
    },

    removedAds: function () {
        this.player.removedAds = true;
        game.adsManager.removeBannerAds();
        this._flushToStorage();
    },

    setRated: function () {
        this.player.rated = true;
        this._flushToStorage();
    },

    _flushToStorage: function () {
        game.storageController.setItem(PLAYER_KEY, JSON.stringify(this.player));
    }
});

PlayerMan._instance = null;
PlayerMan._firstUseInstance = true;

/**
 *
 * @returns {PlayerMan}
 */
PlayerMan.getInstance = function () {
    if (PlayerMan._firstUseInstance) {
        PlayerMan._firstUseInstance = false;
        PlayerMan._instance = new PlayerMan();
    }
    return PlayerMan._instance;
};

module.exports = PlayerMan;
},{"../entity/PlayerInfo":7}],26:[function(require,module,exports){
/**
 * Created by qinning on 15/4/22.
 */
var HttpClient = {

    /**
     * get request,jsb ok,html5 shows  No 'Access-Control-Allow-Origin' header is present on the requested resource
     * @param {string} url
     * @param {function} callback
     */
    doGet: function (url, callback) {
        var xhr = cc.loader.getXMLHttpRequest();
        xhr.open("GET", url, true);

        xhr.onreadystatechange = function () {
            cc.log("readyState:"+xhr.readyState+",status:"+xhr.status+",statuText:"+xhr.statusText+",,,responseText:"+xhr.responseText);
            if (xhr.readyState == 4 && xhr.status == 200) {
                var httpStatus = xhr.statusText;
                var response = xhr.responseText;
                callback(null,response);
            }else{
                callback(xhr.statusText);
            }
        };
        xhr.send();
    },

    /**
     *
     * @param {string} url
     * @param {string} param
     * @param {Object.<string,string>} headers
     * @param {Function} callback
     */
    doPost: function (url, params, headers, callback) {
        var xhr = cc.loader.getXMLHttpRequest();
        xhr.open("POST", url);
        for (var key in headers) {
            xhr.setRequestHeader(key, headers[key]);
        }
        xhr.onreadystatechange = function () {
            if (xhr.readyState == 4) {
                if (xhr.status >= 200 && xhr.status <= 207) {
                    callback(null, xhr.responseText);
                } else {
                    callback(xhr.status, xhr.statusText);
                }
            }
        };
        try {
            xhr.send(params);
        } catch (e) {
        }
    }
};

module.exports = HttpClient;
},{}],27:[function(require,module,exports){
var ModalLayer = require("./ModalLayer");

var DialogManager = cc.Class.extend({
    DIALOG_ZORDER_BEGIN: 999,
    DIALOG_ZORDER_STEP: 2,

    /**
     * @types {ModalLayer}
     */
    _overlay: null,
    _scaleFactor: 0,
    /**
     * @types {Array.<ModalLayer>}
     */
    _dialogStack: null,

    ctor: function () {
    },

    createOverlay: function () {
        this._overlay = new ModalLayer();
        this._overlay.setColor(cc.color.BLACK);
        this._overlay.setOpacity(190);
        this._overlay.setContentSize(cc.size(cc.winSize.width, cc.winSize.height));
        this._overlay.setLocalZOrder(999);
        this._overlay.retain();
        this._scaleFactor = 1.0;
        this._dialogStack = [];
    },

    popup: function (dlg, param) {
        dlg.ignoreAnchorPointForPosition(false);
        dlg.setScale(this._scaleFactor);
        var dlgLen = this._dialogStack.length;
        cc.log("dlgLen:" + dlgLen);
        if (dlgLen == 0) {
            dlg.setLocalZOrder(this.DIALOG_ZORDER_BEGIN);
        }
        else {
            dlg.setLocalZOrder(this._dialogStack[dlgLen - 1].getLocalZOrder() + this.DIALOG_ZORDER_STEP);
        }
        this._dialogStack.push(dlg);
        this._overlay.setLocalZOrder(dlg.getLocalZOrder() - 1);

        if (this._overlay.getParent() == null) {
            this.attachScene(this._overlay);
        }

        if (param && param.overlayColor) {
            this._overlay.setColor(param.overlayColor);
        } else {
            this._overlay.setColor(cc.color.BLACK);
        }

        if (param && param.overlayOpacity) {
            this._overlay.setOpacity(param.overlayOpacity);
        } else {
            this._overlay.setOpacity(190);
        }

        this.attachScene(dlg);

        game.eventDispatcher.dispatchEvent("dialog_poped");
    },

    attachScene: function (node) {
        cc.director.getRunningScene().addChild(node);
    },

    close: function (dlg, dispose) {
        if (cc.isUndefined(dispose)) {
            dispose = true;
        }
        var closeIndex;
        var dlgLen = this._dialogStack.length;
        for (closeIndex = dlgLen - 1; closeIndex >= 0; --closeIndex) {
            if (dlg === this._dialogStack[closeIndex]) {
                break;
            }
        }

        if (closeIndex >= 0) {
            this._dialogStack.splice(closeIndex, 1);
            dlgLen = this._dialogStack.length;
            dlg.removeFromParent(dispose);
        } else {
            return;
        }

        if (dlgLen === 0) {
            this._overlay.removeFromParent(false);
        } else {
            var topIndex = dlgLen - 1;

            if (topIndex >= 0) {
                this._overlay.setLocalZOrder(this._dialogStack[topIndex].getLocalZOrder() - 1);
            } else {
                this._overlay.removeFromParent(false);
                this._dialogStack.length = 0;
            }
        }
        game.eventDispatcher.dispatchEvent("dialog_closed");
    },

    closeAll: function () {
        var dlgLen = this._dialogStack.length;
        while (dlgLen != 0) {
            var modalLayer = this._dialogStack[dlgLen - 1];
            this.close(modalLayer, true);
            dlgLen = this._dialogStack.length;
        }
    },

    isTopestDialog: function (node) {
        return (this._dialogStack[this._dialogStack.length - 1] === node);
    }

});

DialogManager._instance = null;
DialogManager._firstUseInstance = true;

/**
 *
 * @returns {DialogManager}
 */
DialogManager.getInstance = function () {
    if (DialogManager._firstUseInstance) {
        DialogManager._firstUseInstance = false;
        DialogManager._instance = new DialogManager();
    }
    return DialogManager._instance;
};

module.exports = DialogManager;
},{"./ModalLayer":28}],28:[function(require,module,exports){
/**
 * Created by qinning on 15/4/28.
 */
var ModalLayer = cc.LayerColor.extend({
    ctor:function(){
        this._super();
        cc.eventManager.addListener({
            event: cc.EventListener.TOUCH_ONE_BY_ONE,
            swallowTouches: true,
            onTouchBegan: this.onTouchBegan.bind(this)
        }, this);
    },
    onTouchBegan:function(touch, event) {
        if(!this.isVisible() || (!this.isTouchInside(this,touch))){
            return false;
        }
        return true;
    },
    isTouchInside: function (owner,touch) {
        if(!owner || !owner.getParent()){
            return false;
        }
        var touchLocation = touch.getLocation(); // Get the touch position
        touchLocation = owner.getParent().convertToNodeSpace(touchLocation);
        return cc.rectContainsPoint(owner.getBoundingBox(), touchLocation);
    }
});

module.exports = ModalLayer;
},{}],29:[function(require,module,exports){
/**
 * Created by qinning on 15/4/23.
 */

var StorageController = cc.Class.extend({
    setItem: function (key, value) {
        cc.sys.localStorage.setItem(key, value);
    },
    getItem: function (key, defaultValue) {
        var value = cc.sys.localStorage.getItem(key);
        if (value == "" || value == null) {
            return defaultValue;
        }
        return value;
    },
    removeItem: function (key) {
        cc.sys.localStorage.removeItem(key);
    }
});

StorageController._instance = null;
StorageController._firstUseInstance = true;

/**
 *
 * @returns {StorageController}
 */
StorageController.getInstance = function () {
    if (StorageController._firstUseInstance) {
        StorageController._firstUseInstance = false;
        StorageController._instance = new StorageController();
    }
    return StorageController._instance;
};

module.exports = StorageController;
},{}],30:[function(require,module,exports){
/**
 * Created by oye on 16/3/12.
 */

var AudioHelper = {
    playBtnSound: function () {
        game.audioPlayer.playEffectByKey("enter");
    }
};

module.exports = AudioHelper;
},{}],31:[function(require,module,exports){
/**
 * Created by oye on 15-4-19.
 */


var Utils = {
    /**
     * Generate a random integer value which meets [0, upperValue)
     * @param {number} upperValue
     * @returns {number}
     */
    randomNextInt: function(upperValue) {
        return Math.floor(Math.random() * upperValue);
    },

    /**
     * generate a random number value which meets [0, upperValue)
     * @param upperValue
     * @returns {number}
     */
    randomNextNumber: function (upperValue) {
        return Math.random() * upperValue;
    },

    /**
     * random a integer from [min, max]
     * @param {number} min
     * @param {number} max
     * @returns {number}
     */
    rangeNextInt: function(min, max) {
        return min + this.randomNextInt(max - min + 1);
    },

    rangeNextNumber: function (min, max) {
        return min + this.randomNextNumber(max - min);
    },

    /**
     * Generate a random number value which meets [lowerValue, upperValue)
     * @param {number} lowerValue
     * @param {number} upperValue
     * @returns {number}
     */
    randomNextNumberInRange: function (lowerValue, upperValue) {
        return Math.random() * (upperValue - lowerValue) + lowerValue;
    },

    /**
     * Generate a random integer value which meets [lowerValue, upperValue)
     * @param {number} lowerValue
     * @param {number} upperValue
     * @returns {number}
     */
    randomNextIntInRange: function (lowerValue, upperValue) {
        return Math.floor(Math.random() * (upperValue - lowerValue) + lowerValue);
    },

    /**
     * 格式化字符串
     * @returns {string}
     */
    sprintf: function () {
        var i = 0, a, f = arguments[i++], o = [], m, p, c, x, s = '';
        while (f) {
            if (m = /^[^\x25]+/.exec(f)) {
                o.push(m[0]);
            }
            else if (m = /^\x25{2}/.exec(f)) {
                o.push('%');
            }
            else if (m = /^\x25(?:(\d+)\$)?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-fosuxX])/.exec(f)) {
                if (((a = arguments[m[1] || i++]) == null) || (a == undefined)) {
                    throw('Too few arguments.');
                }
                if (/[^s]/.test(m[7]) && (typeof(a) != 'number')) {
                    throw('Expecting number but found ' + typeof(a));
                }
                switch (m[7]) {
                    case 'b':
                        a = a.toString(2);
                        break;
                    case 'c':
                        a = String.fromCharCode(a);
                        break;
                    case 'd':
                        a = parseInt(a);
                        break;
                    case 'e':
                        a = m[6] ? a.toExponential(m[6]) : a.toExponential();
                        break;
                    case 'f':
                        a = m[6] ? parseFloat(a).toFixed(m[6]) : parseFloat(a);
                        break;
                    case 'o':
                        a = a.toString(8);
                        break;
                    case 's':
                        a = ((a = String(a)) && m[6] ? a.substring(0, m[6]) : a);
                        break;
                    case 'u':
                        a = Math.abs(a);
                        break;
                    case 'x':
                        a = a.toString(16);
                        break;
                    case 'X':
                        a = a.toString(16).toUpperCase();
                        break;
                }
                a = (/[def]/.test(m[7]) && m[2] && a >= 0 ? '+' + a : a);
                c = m[3] ? m[3] == '0' ? '0' : m[3].charAt(1) : ' ';
                x = m[5] - String(a).length - s.length;
                p = m[5] ? str_repeat(c, x) : '';
                o.push(s + (m[4] ? a + p : p + a));
            }
            else {
                throw('Huh ?!');
            }
            f = f.substring(m[0].length);
        }
        return o.join('');
    },

    getDistance : function(point1,point2){
        return Math.sqrt((point1.x - point2.x) * (point1.x - point2.x) + (point1.y - point2.y) * (point1.y - point2.y));
    },

    arrayContain : function (arr, element) {
        if(arr && arr.length > 0) {
            for(var i = 0; i < arr.length; ++i) {
                if(arr[i] == element) {
                    return true;
                }
            }
        }
        return false;
    },

    /**
     * @param {string} ccbFileName
     * @param {string} controllerName
     * @param {object | cc.Node} controllerNode
     * @returns {cc.Node | null}
     */
    loadNodeFromCCB : function(ccbFileName,containerNode,controllerName,controllerNode){
        if(!cc.isUndefined(controllerName) && !cc.isUndefined(controllerNode)){
            cc.BuilderReader.registerController(controllerName,controllerNode);
        }
        var node = cc.BuilderReader.load(ccbFileName, containerNode);
        node.retain();
        this.executeInNextFrame(function () {
            node.release();
        });
        return node;
    },

    /**
     *
     * @param {function} subType
     * @param {function} superType
     */
    inherits: function(subType, superType) {
        var subPrototype = Object.create(superType.prototype);
        subPrototype.constructor = subType;
        subType.prototype = subPrototype;
    },

    /**
     *
     * @param {string} url
     * @returns {Object}
     */
    loadJson: function (url) {
        if (!cc.sys.isNative) {
            return cc.loader.getRes(url);
        } else {
            if(jsb.fileUtils.isFileExist(url)) {
                return JSON.parse(jsb.fileUtils.getStringFromFile(url));
            } else {
                return null;
            }
        }
    },

    loadPlist: function (url) {
        if (!cc.sys.isNative) {
            return cc.loader.getRes(url);
        } else {
            if(jsb.fileUtils.isFileExist(url)) {
                return cc.plistParser.parse(jsb.fileUtils.getStringFromFile(url));
            } else {
                return null;
            }
        }
    },

    getScreenShot: function (fileName) {
        cc.log("fileName:" + fileName);
        var tex = new cc.RenderTexture(cc.winSize.width, cc.winSize.height, cc.Texture2D.PIXEL_FORMAT_RGBA8888);
        tex.setPosition(cc.p(cc.winSize.width / 2, cc.winSize.height / 2));
        tex.begin();
        cc.director.getRunningScene().visit();
        tex.end();

        var imgPath = jsb.fileUtils.getWritablePath();
        if (imgPath.length == 0) {
            return "";
        }
        var result = tex.saveToFile(fileName, cc.IMAGE_FORMAT_JPEG);
        if (result) {
            imgPath += fileName;
            cc.log("save image:" + imgPath);
            return imgPath;
        }
        return "";
    },

    isPad: function () {
        var winSize = cc.winSize;
        if (!!GameBridge.getConfig().horizontalGame) {
            return (winSize.width / winSize.height < 1.5);
        } else {
            return (winSize.height / winSize.width < 1.5);
        }
    },

    getFormatRotation: function (rotation) {
        return ((rotation % 360) + 360) % 360;
    },

    doClipping: function (maskLayer, clipLayer) {
        if(maskLayer && clipLayer){
            var clipParentNode = clipLayer.getParent();
            clipLayer.retain();
            clipLayer.removeFromParent(false);

            maskLayer.removeFromParent(false);
            maskLayer.visible = true;

            var clippingNode = new cc.ClippingNode(maskLayer);
            clippingNode.alphaThreshold = 1;
            clippingNode.addChild(clipLayer);
            clipLayer.release();

            clipParentNode.addChild(clippingNode);
        }
    },

    isPixelCollision: function (spr1, spr2) {
        if (cc.sys.isNative) {
            return jsb_dp.oneSdkBridge.isPixelCollision(spr1, spr2);
        } else {
            return cc.rectIntersectsRect(spr1.getBoundingBox(), spr2.getBoundingBox());
        }
    },

    scaleCCLabelBMFont: function (label, maxWidth) {
        if (label.width > maxWidth) {
            var scaleFactor = maxWidth / label.width;
            label.scaleX = label.scaleY = scaleFactor;
        } else {
            label.scaleX = label.scaleY = 1.0;
        }
    },

    scaleCCLabelBMFontWithMaxScale: function (label, maxWidth, maxScale) {
        if (label.width * label.scaleX > maxWidth) {
            label.scaleX = label.scaleY = maxWidth / label.width;
        }
        if (label.scaleX > maxScale) {
            label.scaleX = label.scaleY = maxScale;
        }
    },

    /**
     *
     * @param {cc.Node} node
     */
    walkNode: function (node, cb) {
        if(node) {
            var more = cb(node);
            if(more) {
                for(var k in node.children) {
                    more = this.walkNode(node.children[k], cb);
                    if(!more)
                        break;
                }
            }
            return more;
        }
        else {
            return true;
        }
    },

    isNodeButton: function(nd) {
        return (nd instanceof cc.ControlButton);
    },

    isNodeMenuItem: function(nd) {
        return (nd instanceof cc.MenuItem || nd instanceof cc.MenuItemImage);
    },

    isLabelBMFont:function (nd) {
        return (nd instanceof cc.LabelBMFont || nd instanceof cc.Label);
    },

    /**
     * Load an image with the given url
     * @param {string} url
     * @param {function} callback - function(error, texture, extra)
     * @param {*} extra
     */
    loadRemoteImg: function (url, callback, extra) {
        if (!cc.sys.isNative) {
            cc.loader.loadImg(url, {isCrossOrigin: true}, function (error, img) {
                var texture2d = new cc.Texture2D();
                texture2d.initWithElement(img);
                texture2d.handleLoadedTexture();
                callback(error, texture2d, extra);
            });
        } else {
            cc.loader.loadImg(url, {isCrossOrigin: true}, function (error, texture2d) {
                callback(error, texture2d, extra);
            });
        }
    },

    playCCBAnimation: function(node, anmName){
        var animMgr = node.animationManager;
        var seqId;
        if(anmName) {
            if (cc.sys.isNative){
                seqId = animMgr.getSequenceId(anmName);
            }
            else{
                seqId = animMgr._getSequenceId(anmName);
            }
        } else {
            seqId = animMgr.getAutoPlaySequenceId();
        }

        if (seqId != -1){
            if(!anmName) {
                animMgr.runAnimationsForSequenceIdTweenDuration(seqId, 0);
            } else {
                animMgr.runAnimationsForSequenceNamed(anmName);
            }
            return true;
        } else {
            cc.log("animation " + anmName + " not exists!");
            return false;
        }
    },

    randomScaleAnim: function (spr, startScale, totalTime) {
        totalTime = this.randomNextNumberInRange(totalTime * 0.8, totalTime * 1.2);
        var delayTime = this.randomNextNumber(totalTime / 2);

        var scaleBigTime = 0.3 * (totalTime - delayTime) * 2;
        var scaleSmallTime = 0.1 * (totalTime - delayTime) * 2;
        var scaleNormalTime = 0.1 * (totalTime - delayTime) * 2;

        spr.stopAllActions();
        spr.setScale(0);
        spr.runAction(cc.sequence(cc.delayTime(delayTime),
            cc.scaleTo(scaleBigTime, 1.1 * startScale).easing(cc.easeInOut(2)) ,
            cc.scaleTo(scaleSmallTime, 0.9 * startScale).easing(cc.easeInOut(2)),
            cc.scaleTo(scaleNormalTime, 1 * startScale).easing(cc.easeInOut(2))));
    },

    getFormatTime: function (time) {
        var decimals = time - Math.floor(time);
        time = Math.floor(time);
        if (time <= 60) {
            return "" + (time + decimals).toFixed(2);
        } else if (time <= 3600) {
            return Math.floor(time / 60) + ":" + ((time % 60) + decimals).toFixed(2);
        } else {
            return Math.floor(time / 3600) + ":" + Math.floor(time % 3600 / 60) + ":" + ((time % (3600 * 60)) + decimals).toFixed(2);
        }
    },

    getLongFormatTime: function (time) {
        return Math.floor(time / 3600) + ":" + Math.floor(time % 3600 / 60) + ":" + (time % (3600 * 60));
    },

    seekNodeByTag: function (rootNode, tag) {
        if (null === rootNode){
            return null;
        }
        if(rootNode.getTag() === tag){
            return rootNode;
        }
        var arrayRootChildren = rootNode.getChildren();
        if(arrayRootChildren && arrayRootChildren.length > 0) {
            var length = arrayRootChildren.length;
            for(var i = 0; i < length; i++) {
                var child = arrayRootChildren[i];
                if (null !== child){
                    var res = this.seekNodeByTag(child, tag);
                    if (null !== res) {
                        return res;
                    }
                }
            }
        }
        return null;
    },

    autoRelease: function (obj) {
        Utils.executeInNextFrame(function () {
            obj.release();
        });
    },

    executeInNextFrame: function (callback) {
        setTimeout(function () {
            if (callback) {
                callback();
            }
        }, 0);
    },

    isIOS: function () {
        if (cc.sys.os === cc.sys.OS_IOS) {
            return true;
        }
        return false;
    },

    getDayByTs: function(ts) {
        return Math.floor(ts / (1000 * 3600 * 24));
    },

    isSelfGame: function () {
        if (cc.sys.os === cc.sys.OS_IOS) {
            if (cc.sys.language === cc.sys.LANGUAGE_CHINESE) {
                return true;
            }
        }
        return false;
    }
};

module.exports = Utils;
},{}],32:[function(require,module,exports){
/**
 * Created by XinCheng on 8/18/16.
 */

var EasingFunctions = {
    // no easing, no acceleration
    linear: function (t) { return t; },
    // accelerating from zero velocity
    easeInQuad: function (t) { return t*t; },
    // decelerating to zero velocity
    easeOutQuad: function (t) { return t*(2-t); },
    // acceleration until halfway, then deceleration
    easeInOutQuad: function (t) { return t<0.5 ? 2*t*t : -1+(4-2*t)*t; },
    // accelerating from zero velocity
    easeInCubic: function (t) { return t*t*t; },
    // decelerating to zero velocity
    easeOutCubic: function (t) { return (--t)*t*t+1; },
    // acceleration until halfway, then deceleration
    easeInOutCubic: function (t) { return t<0.5 ? 4*t*t*t : (t-1)*(2*t-2)*(2*t-2)+1; },
    // accelerating from zero velocity
    easeInQuart: function (t) { return t*t*t*t; },
    // decelerating to zero velocity
    easeOutQuart: function (t) { return 1-(--t)*t*t*t; },
    // acceleration until halfway, then deceleration
    easeInOutQuart: function (t) { return t<0.5 ? 8*t*t*t*t : 1-8*(--t)*t*t*t; },
    // accelerating from zero velocity
    easeInQuint: function (t) { return t*t*t*t*t; },
    // decelerating to zero velocity
    easeOutQuint: function (t) { return 1+(--t)*t*t*t*t; },
    // acceleration until halfway, then deceleration
    easeInOutQuint: function (t) { return t<0.5 ? 16*t*t*t*t*t : 1+16*(--t)*t*t*t*t; },

    easeOutElastic: function(t){  var p = 0.4; return Math.pow(2,-10*t) * Math.sin((t-p/4)*(2*Math.PI)/p) + 1; },

    elastic: function(t, x) { return Math.pow(2, 10 * (t-1)) * Math.cos(20*Math.PI*x/3*t); },

    // 弹跳
    bounce: function(t) {
        for(var a = 0, b = 1; 1; a += b, b /= 2) {
            if (t >= (7 - 4 * a) / 11) {
                return -Math.pow((11 - 6 * a - 11 * t) / 4, 2) + Math.pow(b, 2);
            }
        }
    },

    //三次贝塞尔算法
    bseBase: function(t, p0, p1, p2, p3){
        var x = p0.x * (1 - t) * (1 - t) * (1 - t) + p1.x * 3 * t * (1 - t) * (1 - t) + p2.x * 3 * t * t * (1 - t) + p3.x * t * t * t;
        var y = p0.y * (1 - t) * (1 - t) * (1 - t) + p1.y * 3 * t * (1 - t) * (1 - t) + p2.y * 3 * t * t * (1 - t) + p3.y * t * t * t;
        return {x:x,y:y};
    },

    doShaking: function (t) {
        return -Math.sin(2 * Math.PI * 3 * t) * Math.pow((1 - t), 2);
    }

};

var Wheel = cc.Class.extend({
    target: null,                               // the target node you want to rotate
    bCurve: [0.42, -0.08, 0.58, 1.10],          // magic curve
    fps: 0,                                     // fps
    nRound: 1,                                  // move nRound x 360

    frameCount: 0,
    elapsedTime: 0,
    totalRotationTime: 0,
    startRotation: 0,       // the start rotation
    movement: 0,             // the movement degrees
    easyFunction: null,
    endCallback: null,
    targetRotation: 0,
    wheelItemAngle: 0,
    lastTime: 0,
    lastRotation: 0,
    speed: 0,

    _lotteryReseting: false,
    _isHighRotating: false,
    _startUpdate: false,


    /*
     * target: the node you want to rotate
     * fps: 30fps by default
     */
    ctor: function (target, fps) {
        this.target = target;
        this.fps = fps || 60;
    },

    /**
     * rotate the target node to the specified value
     * the index should start with 0
     * @param {number} rotationTime
     * @param {number} targetRotation
     * @param {number} wheelItemAngle
     * @param {Function} rollEndCallback
     */
    rotate: function (rotationTime, targetRotation, wheelItemAngle, rollEndCallback) {
        // I am moving
        if (this._startUpdate) {
            return;
        }

        this.targetRotation = targetRotation;
        this.frameCount = 0;
        this.totalRotationTime = rotationTime;

        this.startRotation = this.target.rotation % 360;
        this.movement = targetRotation - this.startRotation;
        this.wheelItemAngle = wheelItemAngle;

        this.lastTime = Date.now();
        this.lastRotation = 0;
        this._isHighRotating = false;
        this._lotteryReseting = false;

        this.easyFunction = this.defaultEasyFunction;
        //// use bezier
        //if (Array.isArray(params.easyFunction)) {
        //    this.bCurve = params.easyFunction;
        //    this.easyFunction = this.defaultEasyFunction;
        //}
        //// provide a function
        //else if (typeof easyFunction === 'function') {
        //    this.easyFunction = params.easyFunction;
        //}
        //// provide a functionName
        //else {
        //    this.easyFunction = EasingFunctions[params.easyFunction] || this.defaultEasyFunction;
        //}

        this.endCallback = rollEndCallback;

        this.scheduleUpdate();
        this._startUpdate = true;
    },

    scheduleUpdate: function () {
        this.elapsedTime = 0;
        cc.director.getScheduler().scheduleUpdateForTarget(this, 0, false);
    },

    unscheduleUpdate: function () {
        cc.director.getScheduler().unscheduleUpdateForTarget(this);
        this.elapsedTime = 0;
    },

    update: function (dt) {
        if (this._startUpdate) {
            this.moveByFrame(dt);
        }
    },

    /*rotate the reel frame by frame*/
    moveByFrame: function (dt) {
        // calculate elapsed time
        this.elapsedTime += dt;

        // calculate the moving progress
        var progress = this.easyFunction(this.elapsedTime / this.totalRotationTime);

        // do the rotation
        this.target.rotation = progress * this.movement + this.startRotation;

        //var hasStop = false;
        // stop here
        if (this.targetRotation <= this.target.rotation) {
            this.target.rotation = this.targetRotation;
            this.unscheduleUpdate();
            this._startUpdate = false;

            //game.audio.stopEffect("slots/roulette-bg");

            if (this.endCallback) {
                this.endCallback();
            }
        }

        this.speed = (this.target.rotation - this.lastRotation) / (Date.now() - this.lastTime) * 1000;

        this.lastTime = Date.now();
        this.lastRotation = this.target.rotation;
    },

    /* Use bezier Curive as default */
    defaultEasyFunction: function (t) {
        var bez = this.bCurve;
        var coord = EasingFunctions.bseBase(t, {x: 0, y: 0}, {x: bez[0], y: bez[1]}, {x: bez[2], y: bez[3]}, {
            x: 1,
            y: 1
        });
        return coord.y;
    },

    getTargetRotation: function () {
        return this.targetRotation;
    },

    getSpeed: function () {
        return this.speed;
    }
});


module.exports = Wheel;

},{}],33:[function(require,module,exports){
/**
 * A brief explanation for "project.json":
 * Here is the content of project.json file, this is the global configuration for your game, you can modify it to customize some behavior.
 * The detail of each field is under it.
 {
    "project_type": "javascript",
    // "project_type" indicate the program language of your project, you can ignore this field

    "debugMode"     : 1,
    // "debugMode" possible values :
    //      0 - No message will be printed.
    //      1 - cc.error, cc.assert, cc.warn, cc.log will print in console.
    //      2 - cc.error, cc.assert, cc.warn will print in console.
    //      3 - cc.error, cc.assert will print in console.
    //      4 - cc.error, cc.assert, cc.warn, cc.log will print on canvas, available only on web.
    //      5 - cc.error, cc.assert, cc.warn will print on canvas, available only on web.
    //      6 - cc.error, cc.assert will print on canvas, available only on web.

    "showFPS"       : true,
    // Left bottom corner fps information will show when "showFPS" equals true, otherwise it will be hide.

    "frameRate"     : 60,
    // "frameRate" set the wanted frame rate for your game, but the real fps depends on your game implementation and the running environment.

    "id"            : "gameCanvas",
    // "gameCanvas" sets the id of your canvas element on the web page, it's useful only on web.

    "renderMode"    : 0,
    // "renderMode" sets the renderer type, only useful on web :
    //      0 - Automatically chosen by engine
    //      1 - Forced to use canvas renderer
    //      2 - Forced to use WebGL renderer, but this will be ignored on mobile browsers

    "engineDir"     : "frameworks/cocos2d-html5/",
    // In debug mode, if you use the whole engine to develop your game, you should specify its relative path with "engineDir",
    // but if you are using a single engine file, you can ignore it.

    "modules"       : ["cocos2d"],
    // "modules" defines which modules you will need in your game, it's useful only on web,
    // using this can greatly reduce your game's resource size, and the cocos console tool can package your game with only the modules you set.
    // For details about modules definitions, you can refer to "../../frameworks/cocos2d-html5/modulesConfig.json".

    "jsList"        : [
    ]
    // "jsList" sets the list of js files in your game.
 }
 *
 */

cc.game.onStart = function() {
    if (!cc.sys.isNative && document.getElementById("cocosLoading"))
        document.body.removeChild(document.getElementById("cocosLoading"));

    cc.view.enableRetina(false);
    cc.view.adjustViewPort(true);

    var LogicMan = require("./common/model/LogicMan");
    LogicMan.getInstance().init();

    var Utils = require("./common/util/Utils");
    cc.view.resizeWithBrowserSize(true);
    cc.view.setDesignResolutionSize(1000, 1300, cc.ResolutionPolicy.SHOW_ALL);
    //if (cc.sys.isNative) {
    //    var width = 0;
    //    var height = 0;
    //    if (!!GameBridge.getConfig().horizontalGame) {
    //        height = 640;
    //        if (Utils.isPad()) {
    //            height = 768;
    //        }
    //        width = height * cc.winSize.width / cc.winSize.height;
    //        cc.log("cc.winSize.width:" + cc.winSize.width);
    //        cc.log("cc.winSize.height:" + cc.winSize.height);
    //
    //    } else {
    //        height = 1136;
    //        if (Utils.isPad()) {
    //            height = 1024;
    //        }
    //        width = height * cc.winSize.width / cc.winSize.height;
    //    }
    //    cc.log("width:" + width);
    //    cc.log("height:" + height);
    //    cc.view.setDesignResolutionSize(width, height, cc.ResolutionPolicy.SHOW_ALL);
    //} else {
    //    if (!!GameBridge.getConfig().horizontalGame) {
    //        cc.view.setDesignResolutionSize(960, 640, cc.ResolutionPolicy.SHOW_ALL);
    //    } else {
    //        cc.view.setDesignResolutionSize(640, 960, cc.ResolutionPolicy.SHOW_ALL);
    //    }
    //}

    // The game will be resized when browser size change
    cc.BuilderReader.setResourcePath("res/");
    cc.view.resizeWithBrowserSize(true);

    game.dialogManager.createOverlay();
    window.isEditor = true;

    if (cc.sys.isNative) {
        game.local.reload();
        cc.director.runScene(new GameBridge.getMenuScene());
    } else {
        cc.loader.loadJson("res/resource_list/resource_list.json", function (error, result) {
            if (!error) {
                cc.LoaderScene.preload(result, function () {
                    game.local.reload();
                    var EditorScene = require("./many_bricks/editor/scene/EditorScene");
                    cc.director.runScene(new EditorScene());
                }, this);
            }
        });
    }
};
cc.game.run();

},{"./common/model/LogicMan":24,"./common/util/Utils":31,"./many_bricks/editor/scene/EditorScene":79}],34:[function(require,module,exports){

var BrickConfig = function () {
    this.width = 0;
    this.height = 0;
    this.x = 0;
    this.y = 0;
    this.type = 0;
};

BrickConfig.prototype.unmarshal = function (jsonObj) {
    this.x = jsonObj[0];
    this.y = jsonObj[1];
    this.width = jsonObj[2];
    this.height = jsonObj[3];
    this.type = jsonObj[4];
};

BrickConfig.prototype.getHardCfg = function () {
    var hardCfg = new BrickConfig();
    hardCfg.x = this.x * 2;
    hardCfg.y = this.y * 2;
    hardCfg.width = this.width * 2;
    hardCfg.height = this.height * 2;
    hardCfg.type = this.type;
    return hardCfg;
};

module.exports = BrickConfig;
},{}],35:[function(require,module,exports){
/**
 * Created by oye on 16/5/19.
 */
var Config = {
    itunesDownloadUrl: "itms-apps://itunes.apple.com/app/id1372837123?action=write-review",
    googlePlayUrl: "http://bit.ly/2O8G9vx",
    iosShortUrl: "https://apple.co/2UPCwz6",
    androidShortUrl: "http://bit.ly/2O8G9vx",
    appName: "Blast Bricks",
    iosLeaderBoardKey: "com.douapp.manybricks.rank",
    iosHardLeaderBoardKey: "com.douapp.manybricks.hardrank",
    googlePlayLeaderBoardKey: "CgkIouCt0-kBEAIQAQ",
    IS_DEBUG: false,
    IS_ENABLE_HOT_UPDATE: false,

    getLeaderBoardKey: function () {
        if (cc.sys.os == cc.sys.OS_ANDROID) {
            return this.googlePlayLeaderBoardKey;
        } else {
            return this.iosLeaderBoardKey;
        }
    },

    getHardBoardKey: function () {
        if (cc.sys.os == cc.sys.OS_ANDROID) {
            return this.googlePlayLeaderBoardKey;
        } else {
            return this.iosHardLeaderBoardKey;
        }
    },

    getPlatformDownloadUrl: function () {
        if (cc.sys.os == cc.sys.OS_ANDROID) {
            return this.googlePlayUrl;
        } else {
            return this.itunesDownloadUrl;
        }
    },

    getShortPlatformDownloadUrl: function () {
        if (cc.sys.os == cc.sys.OS_ANDROID) {
            return this.androidShortUrl;
        } else {
            return this.iosShortUrl;
        }
    },
    getCrossPromUrl: function () {
        if (cc.sys.os == cc.sys.OS_ANDROID) {
            return this.androidCrossPromUrl;
        } else {
            if (cc.sys.language === cc.sys.LANGUAGE_CHINESE) {
                return this.cnCrossPromUrl;
            }
            return this.crossPromUrl;
        }
    },
    getPackageName: function () {
        if (cc.sys.os == cc.sys.OS_ANDROID) {
            if (game.utils.isSelfGame()) {
                return "com.douapp.manybricks";
            } else {
                return "com.q1.breakbricks";
            }
        } else {
            return "com.douapp.manybricks";
        }
    },
    getAdUrl: function () {
        if (game.utils.isSelfGame()) {
            return this.cnNewAdConfigUrl;
        }
        return this.adConfigUrl;
    },
    horizontalGame: false,

    //bingchuan ad url.
    adConfigUrl: "https://onegameinc.github.io/many_bricks/game_bingchuan.html",
    //bingchuan prom url.
    crossPromUrl: "https://onegameinc.github.io/cross_promotion/config/many_bricks/cross_promotion_bingchuan.html",

    //old version cn ad url.
    cnAdConfigUrl: "https://onegameinc.github.io/many_bricks/game.html",
    //new version cn ad url.
    cnNewAdConfigUrl: "https://onegameinc.github.io/many_bricks/game_cn.html",
    //cn prom url.
    cnCrossPromUrl: "https://onegameinc.github.io/cross_promotion/config/many_bricks/cross_promotion.html",


    androidCrossPromUrl: "https://onegameinc.github.io/cross_promotion/config/many_bricks_android/cross_promotion.html",
    connectEmail: "bricks.crush.play@gmail.com",

    rewardAdMaxCountPerDay: 10
};

module.exports = Config;
},{}],36:[function(require,module,exports){
/**
 * Created by qinning on 2017/3/25.
 */
var LevelConfig = require("./LevelConfig");
//var PackageConfig = require("./PackageConfig");
var StoreConfig = require("./StoreConfig");
var WheelConfig = require("./WheelConfig");
var ShareConfig = require("./ShareConfig");
var SkinConfig = require("./SkinConfig");
var DailyBonusConfig = require("./DailyBonusConfig");
var StoreType = require("../enum/StoreType");
var TaskConfig = require("./TaskConfig");
var BoostType = require("../enum/BoostType");
var TaskOldConfig = require("./TaskOldConfig");

var LevelConfigMan = cc.Class.extend({

    levelList: null,
    storeList: null,
    wheelList: null,
    shareList: null,
    skinList: null,
    dailyBonusList: null,
    storeListWithoutFirstPurchase: null,
    taskList: null,
    oldTaskList: null,
    originalLevelList: null,

    ctor: function () {
        this.storeList = [];
        this.levelList = [];
        this.wheelList = [];
        this.shareList = [];
        this.skinList = [];
        this.dailyBonusList = [];
        this.storeListWithoutFirstPurchase = [];
        this.taskList = [];
        this.oldTaskList = [];

        this.reload();
    },

    reload: function () {
        var i;

        var jsonObj = game.utils.loadJson("res/config/store_config.json");
        var storeConfigs = jsonObj["stores"];
        for (i = 0; i < storeConfigs.length; ++i) {
            var storeConfig = new StoreConfig();
            storeConfig.unmarshal(storeConfigs[i]);
            this.storeList.push(storeConfig);

            if (storeConfig.type === StoreType.FIRST_PURCHASE) {
                this.specialOfferCfg = storeConfig;
            } else {
                this.storeListWithoutFirstPurchase.push(storeConfig);
            }
        }

        jsonObj = game.utils.loadJson("res/config/level_configs.json");
        var levelConfigs = jsonObj["levels"];
        this.originalLevelList = levelConfigs;
        for (i = 0; i < levelConfigs.length; ++i) {
            var levelConfig = new LevelConfig();
            levelConfig.unmarshal(levelConfigs[i]);
            this.levelList.push(levelConfig);
        }

        jsonObj = game.utils.loadJson("res/config/data_config.json");
        var wheelConfigs = jsonObj["wheel"];
        for (i = 0; i < wheelConfigs.length; ++i) {
            var wheelConfig = new WheelConfig();
            wheelConfig.unmarshal(wheelConfigs[i]);
            this.wheelList.push(wheelConfig);
        }

        var shareConfigs = jsonObj["share"];
        for (i = 0; i < shareConfigs.length; ++i) {
            var shareConfig = new ShareConfig();
            shareConfig.unmarshal(shareConfigs[i]);
            this.shareList.push(shareConfig);
        }

        var dailyBonusConfigs = jsonObj["daily_bonus"];
        for (i = 0; i < dailyBonusConfigs.length; ++i) {
            var dailyBonusConfig = new DailyBonusConfig();
            dailyBonusConfig.unmarshal(dailyBonusConfigs[i]);
            if (dailyBonusConfig.type === BoostType.SKIN) {
                var getted = game.playerMan.hasSkin(dailyBonusConfig.arg1);
                if (getted) {
                    dailyBonusConfig.type = dailyBonusConfig.extra.type;
                    dailyBonusConfig.count = dailyBonusConfig.extra.count;
                    dailyBonusConfig.image = dailyBonusConfig.extra.image;
                }
            }

            this.dailyBonusList.push(dailyBonusConfig);
        }

        //var specialOfferJson = jsonObj["special_offer"];
        //var specialOfferConfig = new StoreConfig();
        //specialOfferConfig.unmarshal(specialOfferJson);
        //this.specialOfferCfg = specialOfferConfig;

        jsonObj = game.utils.loadJson("res/config/skins_config.json");
        var skinsConfigs = jsonObj["skins"];
        for (i = 0; i < skinsConfigs.length; ++i) {
            var skinConfig = new SkinConfig();
            skinConfig.unmarshal(skinsConfigs[i]);
            this.skinList.push(skinConfig);
        }

        jsonObj = game.utils.loadJson("res/config/task_config.json");
        var taskConfigs = jsonObj["tasks"];
        for (i = 0; i < taskConfigs.length; ++i) {
            var taskConfig = new TaskConfig();
            taskConfig.unmarshal(taskConfigs[i]);
            this.taskList.push(taskConfig);
        }

        jsonObj = game.utils.loadJson("res/config/task_old_config.json");
        var taskConfigs = jsonObj["tasks"];
        for (i = 0; i < taskConfigs.length; ++i) {
            var taskConfig = new TaskOldConfig();
            taskConfig.unmarshal(taskConfigs[i]);
            this.oldTaskList.push(taskConfig);
        }
    },

    getStoreList: function () {
        return this.storeList;
    },

    getStoreListWithoutFirstPurchase: function () {
        return this.storeListWithoutFirstPurchase;
    },

    getLevelList: function () {
        return this.levelList;
    },

    getLevelConfig: function (levelId) {
        return this.levelList[levelId - 1];
    },

    getOriginalLevelConfig: function (levelId) {
        return this.originalLevelList[levelId - 1];
    },

    getWheelList: function () {
        return this.wheelList;
    },

    getShareList: function () {
        return this.shareList;
    },

    getSkinList: function () {
        return this.skinList;
    },

    getTaskList: function () {
        return this.taskList;
    },

    getOldTaskList: function () {
        return this.oldTaskList;
    },

    getSkinCfg: function (skinId) {
        for (var i = 0; i < this.skinList.length; ++i) {
            if (skinId == this.skinList[i].id) {
                return this.skinList[i];
            }
        }
        return null;
    },

    getDailyBonusList: function () {
        return this.dailyBonusList;
    },

    getSpecialOfferCfg: function () {
        return this.specialOfferCfg;
    }

    //getPackage: function (packageId) {
    //    for (var i = 0; i < this.packageList.length; ++i) {
    //        if (this.packageList[i].id === packageId) {
    //            return this.packageList[i];
    //        }
    //    }
    //    return null;
    //}
});

LevelConfigMan._instance = null;
LevelConfigMan._firstUseInstance = true;

/**
 *
 * @returns {LevelConfigMan}
 */
LevelConfigMan.getInstance = function () {
    if (LevelConfigMan._firstUseInstance) {
        LevelConfigMan._firstUseInstance = false;
        LevelConfigMan._instance = new LevelConfigMan();
    }
    return LevelConfigMan._instance;
};

module.exports = LevelConfigMan;

},{"../enum/BoostType":89,"../enum/StoreType":97,"./DailyBonusConfig":37,"./LevelConfig":38,"./ShareConfig":39,"./SkinConfig":40,"./StoreConfig":41,"./TaskConfig":42,"./TaskOldConfig":43,"./WheelConfig":44}],37:[function(require,module,exports){
/**
 * Created by qinning on 2017/12/15.
 */

var DailyBonusConfig = function () {
    this.id = 0;
    this.type = 0;
    this.count = 0;
    //this.probability = 0;
    this.image = "";
    this.arg1 = "";
};

DailyBonusConfig.prototype.unmarshal = function (jsonObj) {
    this.id = jsonObj["id"];
    this.type = jsonObj["type"];
    this.count = jsonObj["count"];
    //this.probability = jsonObj["probability"];
    this.image = jsonObj["image"];
    this.arg1 = jsonObj["arg1"];
    this.extra = jsonObj["extra"];
};

module.exports = DailyBonusConfig;


},{}],38:[function(require,module,exports){
/**
 * Created by qinning on 2017/3/25.
 */
var BrickConfig = require("./BrickConfig");

var LevelConfig = function () {
    this.lifeProbability = 0;
    this.boostProbability = 0;
    this.pixelWidth = 0;
    this.pixelHeight = 0;
    this.width = 0;
    this.height = 0;
    /**
     * @type {Array.<BrickConfig>}
     */
    this.obstacles = [];
    /**
     * @type {Array.<BrickConfig>}
     */
    this.bricks = [];
    this.starTime = 0;
};

LevelConfig.prototype.unmarshal = function (jsonObj) {
    this.lifeProbability = jsonObj["l"] || 0;
    this.boostProbability = jsonObj["b"] || 0;
    this.pixelWidth = jsonObj["pixelWidth"];
    this.pixelHeight = jsonObj["pixelHeight"];
    this.width = jsonObj["width"];
    this.height = jsonObj["height"];
    var i;
    var obstacles = jsonObj["obstacles"];
    for (i = 0; i < obstacles.length; ++i) {
        var obstacle = obstacles[i];
        var obstacleCfg = new BrickConfig();
        obstacleCfg.unmarshal(obstacle);
        this.obstacles.push(obstacleCfg);
    }

    var bricks = jsonObj["bricks"];
    for (i = 0; i < bricks.length; ++i) {
        var brick = bricks[i];
        var brickCfg = new BrickConfig();
        brickCfg.unmarshal(brick);
        this.bricks.push(brickCfg);
    }
    this.starTime = jsonObj["starTime"] || 0;
};

LevelConfig.prototype.getHardCfg = function () {
    var levelCfg = new LevelConfig();
    levelCfg.lifeProbability = this.lifeProbability;
    levelCfg.boostProbability = this.boostProbability * 0.85;
    levelCfg.pixelWidth = this.pixelWidth;
    levelCfg.pixelHeight = this.pixelHeight;
    levelCfg.width = this.width * 2;
    levelCfg.height = this.height * 2;
    levelCfg.obstacles = [];
    levelCfg.bricks = [];
    levelCfg.starTime = this.starTime;
    var i;
    for (i = 0; i < this.obstacles.length; ++i) {
        levelCfg.obstacles.push(this.obstacles[i].getHardCfg());
    }
    for (i = 0; i < this.bricks.length; ++i) {
        levelCfg.bricks.push(this.bricks[i].getHardCfg());
    }
    return levelCfg;
};

module.exports = LevelConfig;
},{"./BrickConfig":34}],39:[function(require,module,exports){
/**
 * Created by qinning on 2017/12/15.
 */

var ShareConfig = function () {
    this.id = 0;
    this.image = "";
    this.desc = "";
};

ShareConfig.prototype.unmarshal = function (jsonObj) {
    this.id = jsonObj["id"];
    this.image = jsonObj["image"];
    this.desc = jsonObj["desc"];
};

ShareConfig.prototype.copy = function () {
    var config = new ShareConfig();
    config.id = this.id;
    config.image = this.image;
    config.desc = this.desc;
    return config;
};

module.exports = ShareConfig;


},{}],40:[function(require,module,exports){
/**
 * Created by qinning on 2017/12/15.
 */

var SkinConfig = function () {
    this.id = 0;
    this.count = "";
    this.image = 0;
    this.scale = 1;
};

SkinConfig.prototype.unmarshal = function (jsonObj) {
    this.id = jsonObj["id"];
    this.count = jsonObj["count"];
    this.image = jsonObj["image"];
    this.scale = jsonObj["scale"] || 1;
};

module.exports = SkinConfig;


},{}],41:[function(require,module,exports){
/**
 * Created by qinning on 2017/12/15.
 */

var StoreConfig = function () {
    this.id = 0;
    this.type = 0;
    this.name = "";
    this.price = 0;
    this.count = 1;
    this.image = "";
    this.pid = "";
    this.key = "";
    this.hot = false;
    this.best = false;
    this.data = null;
    this.original_price = 0;
    this.discount_multi = 0;
    this.extra = 0;
};

StoreConfig.prototype.unmarshal = function (jsonObj) {
    this.id = jsonObj["id"];
    this.type = jsonObj["type"];
    this.name = jsonObj["name"];
    this.price = jsonObj["price"];
    this.count = jsonObj["count"];
    this.image = jsonObj["image"];
    this.pid = jsonObj["pid"];
    if (cc.sys.os === cc.sys.OS_ANDROID) {
        this.pid = jsonObj["pid_gp"];
    }
    this.key = jsonObj["key"];
    this.hot = jsonObj["hot"];
    this.best = jsonObj["best"];
    this.data = jsonObj["data"] || {};
    this.original_price = jsonObj["original_price"];
    this.discount_multi = jsonObj["discount_multi"];
    this.extra = jsonObj["extra"] || 0;
};

module.exports = StoreConfig;


},{}],42:[function(require,module,exports){
/**
 * Created by qinning on 2017/12/15.
 */

var TaskConfig = function () {
    this.id = 0;
    this.type = 0;
    this.count = "";
    this.rewardCount = 0;
};

TaskConfig.prototype.unmarshal = function (jsonObj) {
    this.id = jsonObj["id"];
    this.type = jsonObj["type"];
    this.count = jsonObj["count"];
    this.rewardCount = jsonObj["rewardCount"];
};

module.exports = TaskConfig;


},{}],43:[function(require,module,exports){

/**
 * Created by qinning on 2017/12/15.
 */

var TaskOldConfig = function () {
    this.id = 0;
    this.count = "";
    this.image = 0;
    this.scale = 1;
    this.type = 0;
};

TaskOldConfig.prototype.unmarshal = function (jsonObj) {
    this.id = jsonObj["id"];
    this.type = jsonObj["type"];
    this.count = jsonObj["count"];
    this.image = jsonObj["image"];
    this.scale = jsonObj["scale"] || 1;
};

module.exports = TaskOldConfig;


},{}],44:[function(require,module,exports){
/**
 * Created by qinning on 2017/12/15.
 */

var WheelConfig = function () {
    this.id = 0;
    this.type = 0;
    this.count = 0;
    this.probability = 0;
    this.image = "";
};

WheelConfig.prototype.unmarshal = function (jsonObj) {
    this.id = jsonObj["id"];
    this.type = jsonObj["type"];
    this.count = jsonObj["count"];
    this.probability = jsonObj["probability"];
    this.image = jsonObj["image"];
};

module.exports = WheelConfig;


},{}],45:[function(require,module,exports){
var EventsName = require("../events/EventsName");

var AdsReminderController = function () {
    BaseCCBController.call(this);

    this.spReminder = null;
    this.lbReminder = null;
};

game.utils.inherits(AdsReminderController, BaseCCBController);

AdsReminderController.prototype.onEnter = function () {
    BaseCCBController.prototype.onEnter.call(this);
    game.eventDispatcher.addEventListener(EventsName.REWARDED_VIDEO_COUNT, this.onUpdateReminder, this);
};

AdsReminderController.prototype.onExit = function () {
    game.eventDispatcher.removeEventListener(EventsName.REWARDED_VIDEO_COUNT, this.onUpdateReminder, this);
    BaseCCBController.prototype.onExit.call(this);
};

AdsReminderController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);
    this.onUpdateReminder();
};

AdsReminderController.prototype.onUpdateReminder = function () {
    var count = game.config.rewardAdMaxCountPerDay - game.playerMan.getRewardAdPlaceCountPerDay();
    if (count < 0) {
        count = 0;
    }
    this.lbReminder.setString(count);
};

module.exports = AdsReminderController;
},{"../events/EventsName":98}],46:[function(require,module,exports){
//var SkinItemController = require("./SkinItemController");
//var ConfigMan = require("../config/ConfigMan");
//var EventsName = require("../events/EventsName");
//
//var GRID_SIZE = cc.size(350, 500);
//
//var StoreItemCellView = cc.TableViewCell.extend({
//    entity: null,
//    itemNode: null,
//    ctor: function () {
//        this._super();
//        this.itemNode = SkinItemController.createFromCCB();
//        this.addChild(this.itemNode);
//        this.itemNode.setPosition(cc.p(GRID_SIZE.width * 0.5, GRID_SIZE.height * 0.5));
//    },
//
//    initWith: function (entity, idx, inited) {
//        this.entity = entity;
//        this.itemNode.controller.initWith(entity, idx);
//    }
//});
var BoostType = require("../enum/BoostType");
var GameMan = require("../model/GameMan");

var BagController = function () {
    BaseCCBController.call(this);
    this.lbBoostName1 = null;
    this.lbBoostName2 = null;
    this.lbBoostDesc1 = null;
    this.lbBoostDesc2 = null;
    this.lbShareTips = null;
};

game.utils.inherits(BagController, BaseCCBController);

BagController.prototype.onEnter = function () {
    BaseCCBController.prototype.onEnter.call(this);
};

BagController.prototype.onExit = function () {
    BaseCCBController.prototype.onExit.call(this);
};

BagController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);
    this.lbBoostName1.setString(_("boost_split_title") + " X" + (game.playerMan.getBoostCount(BoostType.SPLIT)));
    this.lbBoostName2.setString(_("boost_new_title") + " X" + (game.playerMan.getBoostCount(BoostType.THREE_BALL)));
    this.lbBoostDesc1.setString(_("boost_split_desc"));
    this.lbBoostDesc2.setString(_("boost_new_desc"));
    this.lbShareTips.setString("");//_("bag_share_tips"));
    this.lbTitle.setString(_("bag_title"));
};

BagController.prototype.backClicked = function (sender) {
    AudioHelper.playBtnSound();

    this.close();
};

BagController.prototype.shareClicked = function (sender) {
    AudioHelper.playBtnSound();
    var share = GameMan.getInstance().getShareConfig();
    game.shareManager.wxShare(share, function (shared) {

    });
};

BagController.prototype.popup = function () {
    game.dialogManager.popup(this.rootNode);
};

BagController.prototype.close = function () {
    game.dialogManager.close(this.rootNode);
};

BagController.createFromCCB = function() {
    var node = game.utils.loadNodeFromCCB("res/menu/bag_view.ccbi", null, "BagController", new BagController());
    return node;
};

module.exports = BagController;
},{"../enum/BoostType":89,"../model/GameMan":99}],47:[function(require,module,exports){
var GameMan = require("../model/GameMan");

var BoardController = function () {
    BaseCCBController.call(this);

    this.spCircle = null;
    this.ndBoard = null;
    this.spBall = null;
};

game.utils.inherits(BoardController, BaseCCBController);

BoardController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);
    GameMan.getInstance().updateSkin(this.spBall);
};

BoardController.prototype.initWith = function (ballWidth) {
    var scale = GameMan.getInstance().getCurrentSkinCfg().scale;
    this.spBall.scaleX = ballWidth / this.spBall.width * scale;
    this.spBall.scaleY = ballWidth / this.spBall.height * scale;
};

BoardController.prototype.hideBall = function () {
    this.spBall.visible = false;
};

BoardController.prototype.showBall = function () {
    this.spBall.visible = true;
};

BoardController.createFromCCB = function(ballWidth) {
    var node = game.utils.loadNodeFromCCB("res/game/board_view.ccbi", null, "BoardController", new BoardController());
    node.controller.initWith(ballWidth);
    return node;
};

module.exports = BoardController;
},{"../model/GameMan":99}],48:[function(require,module,exports){
var ConfigMan = require("../config/ConfigMan");
var DailyBonusItemController = require("./DailyBonusItemController");
var BoostType = require("../enum/BoostType");
var StoreHelper = require("../model/StoreHelper");

var DailyBonusController = function () {
    BaseCCBController.call(this);
    this.DAILY_BONUS_COUNT = 7;
    this.DAILY_BONUS_TAG = 200;
    this.ndContainer = null;

    this.lblTitle = null;

    this.ndDailyBonus = null;

    this.btnDouble = null;
    this.btnClaim = null;

    this.lblClaim = null;
    this.lblDouble = null;

    this.dailyBonusNodes = [];

    //user data.
    this.configs = null;

    this.curConfig = null;

    this.claimed = false;
};

game.utils.inherits(DailyBonusController, BaseCCBController);

DailyBonusController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);
    this.lblTitle.setString(_("daily_bonus_title"));
    this.lblClaim.setString(_("claim_title"));
    this.lblDouble.setString(_("double_title"));

    this.configs = ConfigMan.getInstance().getDailyBonusList();

    for (var i = 0; i < this.DAILY_BONUS_COUNT; ++i) {
        var node = this.ndDailyBonus.getChildByTag(this.DAILY_BONUS_TAG + i);
        var itemNode = DailyBonusItemController.createFromCCB();
        this.dailyBonusNodes.push(itemNode);
        node.addChild(itemNode);
    }

    this.initUI();
};

DailyBonusController.prototype.initUI = function () {
    var lastClaimDay = game.playerMan.player.lastClaimDailyBonusDay;
    var consecutiveDay = game.playerMan.checkConsecutiveLoginDay();
    var currentDayClaimed = lastClaimDay >= game.utils.getDayByTs(Date.now());
    consecutiveDay %= 7;
    consecutiveDay = consecutiveDay || 7;
    this.claimed = currentDayClaimed;

    this.btnClaim.enabled = !currentDayClaimed;
    this.btnDouble.enabled = !currentDayClaimed;

    cc.log("consecutiveDay:" + consecutiveDay + ",dailyBonusNodes length:" + this.dailyBonusNodes.length + ",currentDayClaimed:" + currentDayClaimed);
    for (var i = 1; i <= 7; ++i) {
        cc.log("initUI:" + i);
        var config = this.configs[i - 1];
        var node = this.dailyBonusNodes[i - 1];
        if (!node) {
            cc.log("daily bonus node is null:" + i);
            continue;
        }
        var controller = node.controller;
        if (!controller) {
            cc.log("daily bonus controller is null:" + i);
            continue;
        }
        if (i < consecutiveDay) {
            controller.initWith(config, i, false, true);
        }
        else if (i === consecutiveDay) {
            controller.initWith(config, i, true, currentDayClaimed);
            this.curConfig = config;
        }
        else {
            controller.initWith(config, i, false, false);
        }
    }

    if (consecutiveDay === 3) {
        this.btnDouble.enabled = false;
    }
};

DailyBonusController.prototype.popupClaimReward = function (config, double, callback) {
    //var count = double ? config.count * 2 : config.count;
    var param = double ? 2 : 1;
    var count = config.count;
    var splitCount = 0;
    var threeBallCount = 0;
    if (config.type === BoostType.SPLIT) {
        splitCount = count;
    } else if (config.type === BoostType.THREE_BALL) {
        threeBallCount = count;
    } else if (config.type === BoostType.GIFT) {
        splitCount = game.utils.randomNextIntInRange(2, 4);
        threeBallCount = game.utils.randomNextIntInRange(2, 4);
    } else if (config.type === BoostType.SKIN) {
        game.popupMan.popupRewardNoticeDlg(game.local.getValue("skin_claimed"),
            function () {
                game.playerMan.setClaimedSkin(config.arg1);
                if (callback) {
                    callback();
                }
            }, config.image, 1);
        return;
    } else if (config.type === BoostType.DIAMOND) {
        var diamondCount = config.count;
        game.popupMan.popupRewardNoticeDlg(game.local.getValue("reward_video_diamonds"),
            function () {
                game.playerMan.addDiamonds(diamondCount);
                if (callback) {
                    callback();
                }
            }, config.image, diamondCount);
        return;
    }
    splitCount = splitCount * param;
    threeBallCount = threeBallCount * param;
    StoreHelper.getInstance().popupBoostRewardDlg(splitCount, threeBallCount, function () {
        callback && callback();
    });
};

DailyBonusController.prototype.claimClicked = function (sender) {
    AudioHelper.playBtnSound();
    if (!this.claimed) {
        var self = this;
        this.popupClaimReward(this.curConfig, false, function () {
            self.setClaimed();
        });
    }
    this.close();
};

DailyBonusController.prototype.doubleClicked = function (sender) {
    AudioHelper.playBtnSound();
    if (!this.claimed) {
        var self = this;
        StoreHelper.getInstance().checkAndShowRewardVideo(game.utils.isIOS() ? "shuangbeilibao" : "dailybonus", function (rewarded) {
            if (rewarded) {
                this.popupClaimReward(this.curConfig, true, function () {
                    self.setClaimed();
                });
                this.close();
            }
        }.bind(this));
    }
};

DailyBonusController.prototype.setClaimed = function () {
    game.playerMan.setLastClaimDailyBonusDay(game.utils.getDayByTs(Date.now()));
    this.claimed = true;
};

DailyBonusController.prototype.backClicked = function (sender) {
    AudioHelper.playBtnSound();

    this.close();
};

DailyBonusController.prototype.popup = function () {
    game.dialogManager.popup(this.rootNode);
};

DailyBonusController.prototype.close = function () {
    game.dialogManager.close(this.rootNode);
};

DailyBonusController.prototype.onExit = function () {
};

DailyBonusController.createFromCCB = function() {
    cc.BuilderReader.registerController("DailyBonusItemController", new DailyBonusItemController());
    //cc.BuilderReader.registerController("TitleController", new TitleController());
    var node = game.utils.loadNodeFromCCB("res/menu/daily_bonus_view.ccbi", null, "DailyBonusController", new DailyBonusController());
    cc.BuilderReader._controllerClassCache["DailyBonusItemController"] = undefined;
    return node;
};

module.exports = DailyBonusController;
},{"../config/ConfigMan":36,"../enum/BoostType":89,"../model/StoreHelper":103,"./DailyBonusItemController":49}],49:[function(require,module,exports){
var BoostType = require("../enum/BoostType");

var DailyBonusItemController = function () {
    BaseCCBController.call(this);

    this.spBlack = null;
    this.spItem = null;
    this.spCurrent = null;
    this.spClaimed = null;
    this.lblCount = null;
    this.lblDay = null;

    this.dailyBonusCfg = null;
};

game.utils.inherits(DailyBonusItemController, BaseCCBController);

DailyBonusItemController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);
};
/**
 * @param {DailyBonusConfig} data
 * @param {number} day
 * @param {boolean} current
 * @param {boolean} claimed
 */
//day, state, rewardObj, claimed
DailyBonusItemController.prototype.initWith = function (data, day, current, claimed) {
    this.dailyBonusCfg = data;

    if (data.type === BoostType.SKIN) {
        var getted = game.playerMan.hasSkin(data.arg1);
        if (getted) {
            data.type = data.extra.type;
            data.count = data.extra.count;
            data.image = data.extra.image;
        }
    }

    this.spBlack.visible = claimed;
    this.spItem.setSpriteFrame(data.image);
    //game.utils.scaleCCLabelBMFont(this.spItem, 59);
    if (!claimed) {
        this.spCurrent.visible = current;
    } else {
        this.spCurrent.visible = false;
    }

    this.spClaimed.visible = claimed;
    this.lblCount.setString("x" + data.count);
    this.lblDay.setString(game.utils.sprintf(_("day_title"), day));
};

DailyBonusItemController.prototype.getContentSize = function () {
    return this.spBgSelected.getContentSize();
};

DailyBonusItemController.createFromCCB = function() {
    return game.utils.loadNodeFromCCB("res/menu/daily_bonus_item_view.ccbi", null, "DailyBonusItemController", new DailyBonusItemController());
};

module.exports = DailyBonusItemController;
},{"../enum/BoostType":89}],50:[function(require,module,exports){
/**
 * Created by qinning on 2017/12/15.
 */
var GameMan = require("../model/GameMan");

var FailController = function () {
    BaseCCBController.call(this);
    this._replayCallback = null;
    this._nextCallback = null;

    this.spFailCn = null;
    this.spFailEn = null;

    this.lblReward = null;
    //this.lblRelife = null;
    this.lblWheel = null;

    this.lblSkip = null;
};

game.utils.inherits(FailController, BaseCCBController);

FailController.prototype.onExit = function () {
    this._replayCallback = null;
    game.eventDispatcher.removeEventListener("dialog_poped", this.onDialogPoped, this);
    game.eventDispatcher.removeEventListener("dialog_closed", this.onDialogClosed, this);
    this.removeNativeAd();
};

FailController.prototype.onEnter = function () {
    game.eventDispatcher.addEventListener("dialog_poped", this.onDialogPoped, this);
    game.eventDispatcher.addEventListener("dialog_closed", this.onDialogClosed, this);
    this.showNativeAd();
};

FailController.prototype.onDialogPoped = function () {
    this.updateNativeAd();
};

FailController.prototype.onDialogClosed = function () {
    this.updateNativeAd();
};

FailController.prototype.updateNativeAd = function () {
    if (game.dialogManager.isTopestDialog(this.rootNode)) {
        this.showNativeAd();
    } else {
        this.removeNativeAd();
    }
};

FailController.prototype.showNativeAd = function () {
    game.adsManager.showNativeAd("fail", 0, 0);
};

FailController.prototype.removeNativeAd = function () {
    game.adsManager.removeNativeAd("fail");
};

FailController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);
    this.lblWheel.setString(_("lucky_wheel_title"));
    this.lblReward.setString(_("watch_ads_get_boosts"));
    this.lblSkip.setString(_("skip_level_title"));
    game.audioPlayer.playEffectByKey("fail");
};

FailController.prototype.initWith = function (replayCallback, skipCallback) {
    this._replayCallback = replayCallback;
    this._skipCallback = skipCallback;
};

FailController.prototype.onAnimEnd = function () {
};

FailController.prototype.restartClicked = function (sender) {
    game.audioPlayer.playEffectByKey("enter");
    GameMan.getInstance().showAds(false);
    if (this._replayCallback) {
        this._replayCallback();
    }
    this.close();
};

FailController.prototype.homeClicked = function (sender) {
    game.audioPlayer.playEffectByKey("enter");
    GameMan.getInstance().showAds(false);
    game.sceneMan.switchScene(game.sceneType.MENU);
};

FailController.prototype.watchAdsClicked = function (sender) {
    game.audioPlayer.playEffectByKey("enter");
    //game.sceneMan.switchScene(game.sceneType.MENU);
    var StoreHelper = require("../model/StoreHelper");
    StoreHelper.getInstance().checkAndShowRewardVideo(game.utils.isIOS() ? "failgift" : "jili06");
};

FailController.prototype.relifeClicked = function (sender) {
    //game.audioPlayer.playEffectByKey("enter");
    //var StoreHelper = require("../model/StoreHelper");
    //StoreHelper.getInstance().checkAndShowRewardVideo(function () {
    //});
};

FailController.prototype.skipClicked = function (sender) {
    var StoreHelper = require("../model/StoreHelper");
    StoreHelper.getInstance().checkAndShowRewardVideo(game.utils.isIOS() ? "tiaoguo01" : "skip", function () {
        if (this._skipCallback) {
            this._skipCallback();
        }
    }.bind(this));
};

FailController.prototype.wheelClicked = function (sender) {
    AudioHelper.playBtnSound();
    game.popupMan.popupWheelDlg();
};

FailController.prototype.popup = function () {
    game.dialogManager.popup(this.rootNode);
};

FailController.prototype.close = function () {
    game.dialogManager.close(this.rootNode);
};

FailController.createFromCCB = function() {
    var node = game.utils.loadNodeFromCCB("res/notice/fail_view.ccbi", null, "FailController", new FailController());
    return node;
};

module.exports = FailController;
},{"../model/GameMan":99,"../model/StoreHelper":103}],51:[function(require,module,exports){
var EventsName = require("../events/EventsName");
var BricksView = require("../view/BricksView");
var GameMan = require("../model/GameMan");
var BoostType = require("../enum/BoostType");
var HelpController = require("./HelpController");
var StoreType = require("../enum/StoreType");

var GameController = function () {
    BaseCCBController.call(this);
    this.LIFE_START_TAG = 100;
    this.LIFE_COUNT = 6;

    this.ndLifeNode = null;
    this.lbTime = null;
    this.lb3New = null;
    this.lb3Multiple = null;
    this._gameNode = null;
    this.ndHelp = null;

    this.ndBoost1 = null;
    this.ndBoost2 = null;

    this.ndLifeNodes = null;

    this.spTopProgress = null;

    this.spYellow1 = null;
    this.spYellow2 = null;
    this.spYellow3 = null;

    this.spBlack1 = null;
    this.spBlack2 = null;
    this.spBlack3 = null;

    this.lbLevel = null;

    this.spYellows = [];
    this.spBlacks = [];
};

game.utils.inherits(GameController, BaseCCBController);

GameController.prototype.onEnter = function () {
    game.eventDispatcher.addEventListener(EventsName.UPDATE_LEVEL, this.onUpdateLevel, this);
    game.eventDispatcher.addEventListener(EventsName.REFRESH_BOOST, this.onUpdateBoost, this);

    //this.ndBoost1.runAction();
};

GameController.prototype.onExit = function () {
    game.eventDispatcher.removeEventListener(EventsName.REFRESH_BOOST, this.onUpdateBoost, this);
    game.eventDispatcher.removeEventListener(EventsName.UPDATE_LEVEL, this.onUpdateLevel, this);
    this._gameCoreNode = null;
};

GameController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);

    this.ndLifeNodes = [];
    for (var i = 0; i < this.LIFE_COUNT; ++i) {
        var lifeNode = this.ndLifeNode.getChildByTag(this.LIFE_START_TAG + i);
        this.ndLifeNodes.push(lifeNode);
    }

    this.spYellows = [this.spYellow1, this.spYellow2, this.spYellow3];
    this.spBlacks = [this.spBlack1, this.spBlack2, this.spBlack3];

    var config = null;
    var levelId = null;
    if (window.isEditor) {
        config = game.gameMan.levelCfg;
        levelId = 0;
    } else {
        config = GameMan.getInstance().getCurConfig();
        levelId = GameMan.getInstance().levelId;
    }

    this._gameCoreNode = new BricksView(config, this);
    this._gameNode.addChild(this._gameCoreNode);

    this.lbLevel.setString(game.utils.sprintf(_("level_title"), levelId));

    this.updateLifeCount();
    this.updateBoost();

    var firstEnter = game.storageController.getItem("first_enter", "true");
    if (firstEnter === "true") {
        this.ndHelp.visible = true;
    } else {
        this.ndHelp.visible = false;
    }

    this.updateTime();
};

GameController.prototype.updateLifeCount = function () {
    var nowLifeCount = this._gameCoreNode.lifeCount;
    for (var i = 0; i < this.LIFE_COUNT; ++i) {
        var lifeNode = this.ndLifeNodes[i];
        if (lifeNode) {
            lifeNode.visible = (nowLifeCount > i);
        }
    }
};

GameController.prototype.onUpdateBoost = function () {
    this.updateBoost();
};

GameController.prototype.updateBoost = function () {
    this.lb3New.setString(game.playerMan.getBoostCount(BoostType.THREE_BALL));
    this.lb3Multiple.setString(game.playerMan.getBoostCount(BoostType.SPLIT));
};

GameController.prototype.updateTime = function () {
    var costTime = 0;
    if (this._gameCoreNode.eclipsedTime) {
        costTime = this._gameCoreNode.eclipsedTime / 1000;
    }
    this.lbTime.setString(game.utils.getLongFormatTime(costTime));

    var percent = GameMan.getInstance().getProgressPercent(costTime);
    this.spTopProgress.setPreferredSize(cc.size(150 * percent * 0.01, 8));
    var star = GameMan.getInstance().getCurrentStar(costTime);
    this.updateStar(star);
};

GameController.prototype.updateStar = function (star) {
    for (var i = 0; i < 3; ++i) {
        this.spYellows[i].visible = (star >= i + 1);
        this.spBlacks[i].visible = (star < i + 1);
    }
};

GameController.prototype.pauseClicked = function () {
    AudioHelper.playBtnSound();
    if (window.isEditor) {
        var EditorScene = require("../editor/scene/EditorScene");
        cc.director.runScene(new EditorScene());
    } else {
        this.showPause();
    }
};

GameController.prototype.showPause = function () {
    this._gameCoreNode.stop();
    var self = this;
    game.popupMan.popupPauseDlg(function () {
        self._gameCoreNode.resume();
    });
};

GameController.prototype.storeClicked = function () {
    AudioHelper.playBtnSound();
    this._gameCoreNode.stop();
    var self = this;
    game.popupMan.popupStoreDlg(StoreType.DIAMOND, function () {
        self._gameCoreNode.resume();
    });
};

GameController.prototype.new3Clicked = function () {
    AudioHelper.playBtnSound();
    if (game.playerMan.useBoost(BoostType.THREE_BALL)) {
        this._gameCoreNode.useNew3BallBoost();
        this.updateBoost();
    } else {
        this._gameCoreNode.stop();
        //GameMan.getInstance().showAds();
        var self = this;
        game.popupMan.popupStoreDlg(StoreType.DIAMOND, function () {
            self._gameCoreNode.resume();
        });
    }
};

GameController.prototype.multiple3Clicked = function () {
    AudioHelper.playBtnSound();
    if (game.playerMan.useBoost(BoostType.SPLIT)) {
        this._gameCoreNode.useSplitBallBoost();
        this.updateBoost();
    } else {
        this._gameCoreNode.stop();
        //GameMan.getInstance().showAds();
        var self = this;
        game.popupMan.popupStoreDlg(StoreType.DIAMOND, function () {
            self._gameCoreNode.resume();
        });
    }
};

GameController.createFromCCB = function() {
    cc.BuilderReader.registerController("HelpController", new HelpController());
    var node = game.utils.loadNodeFromCCB("res/game/game_view.ccbi", null, "GameController", new GameController());
    cc.BuilderReader._controllerClassCache["HelpController"] = undefined;
    return node;
};

module.exports = GameController;
},{"../editor/scene/EditorScene":79,"../enum/BoostType":89,"../enum/StoreType":97,"../events/EventsName":98,"../model/GameMan":99,"../view/BricksView":109,"./HelpController":54}],52:[function(require,module,exports){
var GameMan = require("../model/GameMan");
var GameMode = require("../enum/GameMode");

var GameOverController = function () {
    BaseCCBController.call(this);
    this._bestScoreLabel = null;
    this._scoreLabel = null;

    this._iconEnglish = null;
    this._iconChinese = null;
    this._newRecordLabel = null;

    this._replayCallback = null;
};

game.utils.inherits(GameOverController, BaseCCBController);

GameOverController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);
    this._newRecordLabel.visible = false;
};

GameOverController.prototype.initWith = function (percent, callback) {
    if (GameMan.getInstance().gameMode === GameMode.GAME_MODE_ENDLESS) {
        this._bestScoreLabel.setString(game.utils.sprintf(game.local.getValue("best_score_title"), game.playerMan.getBestScore()));
        this._scoreLabel.setString(percent);
        this._newRecordLabel.setString(game.local.getValue("new_record_title"));
        if (GameMan.getInstance().isNewRecord) {
            this._newRecordLabel.visible = true;
            this._newRecordLabel.runAction(cc.sequence(cc.fadeOut(0.3), cc.fadeIn(0.3)).repeatForever());
        }
    } else {
        this._bestScoreLabel.setString(game.utils.sprintf(game.local.getValue("level_title"), GameMan.getInstance().levelConfig.id));
        this._scoreLabel.setString(game.utils.sprintf("%d%%", percent));
    }
    this._replayCallback = callback;
};

GameOverController.prototype.homeClicked = function (sender) {
    AudioHelper.playBtnSound();
    var reScene = new cc.TransitionFade(0.5, GameBridge.getMenuScene(), cc.color(255, 255, 255));
    cc.director.runScene(reScene);
};

GameOverController.prototype.replayClicked = function (sender) {
    AudioHelper.playBtnSound();
    if (this._replayCallback) {
        this._replayCallback();
    }
    this.close();
};

GameOverController.prototype.rankClicked = function (sender) {
    AudioHelper.playBtnSound();
    game.gcManager.showLeaderboard(game.config.getLeaderBoardKey());
};

GameOverController.prototype.shareClicked = function (sender) {
    AudioHelper.playBtnSound();
    game.shareManager.shareWithSystem(game.utils.sprintf(game.local.getValue("share_tips"),
        game.playerMan.getBestScore(), game.config.getPlatformDownloadUrl()));
};

GameOverController.prototype.popup = function () {
    //game.dialogManager.popup(this.rootNode);
    //game.dialogManager.popup(this.rootNode, {"overlayOpacity": 100});
    game.dialogManager.popup(this.rootNode, {"overlayColor": cc.color(243, 243, 243), "overlayOpacity": 210});
};

GameOverController.prototype.close = function () {
    game.dialogManager.close(this.rootNode);
};

GameOverController.createFromCCB = function() {
    var node = game.utils.loadNodeFromCCB("res/menu/game_over_view.ccbi", null, "GameOverController", new GameOverController());
    return node;
};

module.exports = GameOverController;
},{"../enum/GameMode":90,"../model/GameMan":99}],53:[function(require,module,exports){
var GameMan = require("../model/GameMan");

var GameWinController = function () {
    BaseCCBController.call(this);
    this.YELLOW_COLOR = cc.color(254, 175, 25);

    this._nextNode = null;

    this._resultLabel = null;

    this._replayCallback = null;
    this._nextCallback = null;
};

game.utils.inherits(GameWinController, BaseCCBController);

GameWinController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);

    this._resultLabel.setString(game.local.getValue("mission_completed_title"));
    var hasNextLevel = GameMan.getInstance().hasNextLevel();
    if (!hasNextLevel) {
        this._nextNode.visible = false;
    }
};

GameWinController.prototype.initWith = function (callback, nextCallback) {
    this._replayCallback = callback;
    this._nextCallback = nextCallback;
};

GameWinController.prototype.homeClicked = function (sender) {
    AudioHelper.playBtnSound();
    var reScene = new cc.TransitionFade(0.5, GameBridge.getMenuScene(), cc.color(255, 255, 255));
    cc.director.runScene(reScene);
};

GameWinController.prototype.nextClicked = function (sender) {
    AudioHelper.playBtnSound();
    if (this._nextCallback) {
        this._nextCallback();
    }
    this.close();
};

GameWinController.prototype.replayClicked = function (sender) {
    if (this._replayCallback) {
        this._replayCallback();
    }
    this.close();
};

GameWinController.prototype.rankClicked = function (sender) {
    AudioHelper.playBtnSound();
    game.gcManager.showLeaderboard(game.config.getLeaderBoardKey());
};

GameWinController.prototype.shareClicked = function (sender) {
    AudioHelper.playBtnSound();
    game.shareManager.shareWithSystem(game.utils.sprintf(game.local.getValue("share_tips"),
        game.playerMan.getBestScore(), game.config.getPlatformDownloadUrl()));
};

GameWinController.prototype.popup = function () {
    game.dialogManager.popup(this.rootNode, {"overlayColor": cc.color(243, 243, 243), "overlayOpacity": 210});
};

GameWinController.prototype.close = function () {
    game.dialogManager.close(this.rootNode);
};

GameWinController.createFromCCB = function() {
    var node = game.utils.loadNodeFromCCB("res/menu/game_win_view.ccbi", null, "GameWinController", new GameWinController());
    return node;
};

module.exports = GameWinController;
},{"../model/GameMan":99}],54:[function(require,module,exports){


var HelpController = function () {
    BaseCCBController.call(this);
    this.lbHelpInfo = null;
};

game.utils.inherits(HelpController, BaseCCBController);

HelpController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);
    this.lbHelpInfo.setString(game.local.getValue("help_content"));
    this.lbHelpInfo.setAlignment(cc.TEXT_ALIGNMENT_CENTER);
};

module.exports = HelpController;
},{}],55:[function(require,module,exports){
var GameScene = require("../scene/GameScene");
var StoreHelper = require("../model/StoreHelper");
var MultiColTableView = require("../../common/ext/MultiColTableView");
var LevelItemController = require("./LevelItemController");
var LevelConfigMan = require("../config/ConfigMan");
var LockStatus = require("../enum/LockStatus");
var GameMan = require("../model/GameMan");
var TitleController = require("./TitleController");

var GRID_SIZE = [137.5, 120];

var LevelItemCellView = cc.TableViewCell.extend({
    levelEntity: null,
    levelItemNode: null,
    ctor: function () {
        this._super();
        this.levelItemNode = LevelItemController.createFromCCB();
        this.addChild(this.levelItemNode);

        this.levelItemNode.setPosition(cc.p(GRID_SIZE[0] * 0.5, GRID_SIZE[1] * 0.5));
    },

    initWith: function (levelEntity, idx) {
        this.levelEntity = levelEntity;
        this.levelItemNode.controller.initWith(levelEntity, idx);
    },

    showAppearAnim: function () {
        this.levelItemNode.controller.showAppearAnim();
    },

    showDisappearAnim: function () {
        this.levelItemNode.controller.showDisappearAnim();
    }
});

var LevelController = function () {
    BaseCCBController.call(this);
    this.ndContainer = null;
    this.lbLevelName = null;

    //user data.
    this._levelList = null;
};

game.utils.inherits(LevelController, BaseCCBController);

LevelController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);

    this._levelList = GameMan.getInstance().getLevelList();
    this.showLevelTableView();

    var userLevel = GameMan.getInstance().getPlayerLevel();
    if (userLevel > this._levelList.length) {
        userLevel = 1;
    }
    var curRow = 0;
    if (userLevel % this.numberOfGridsInCell() === 0) {
        curRow = Math.floor(userLevel / this.numberOfGridsInCell());
    } else {
        curRow = Math.floor(userLevel / this.numberOfGridsInCell()) + 1;
    }

    var yOffset = -(this.numberOfCellsInTableView() - curRow + 1) * this.gridSizeForTable().height +
        this._tableView.getViewSize().height;

    if (yOffset < this._tableView.minContainerOffset().y) {
        yOffset = this._tableView.minContainerOffset().y;
    } else if (yOffset >= this._tableView.maxContainerOffset().y) {
        yOffset = this._tableView.maxContainerOffset().y;
    }

    this._tableView.setContentOffset(cc.p(0, yOffset));
};

LevelController.prototype.showLevelTableView = function () {
    var size = this.ndContainer.getContentSize();
    this._tableView = new MultiColTableView(this, size, null);
    this._tableView.setDirection(cc.SCROLLVIEW_DIRECTION_VERTICAL);
    this._tableView.setVerticalFillOrder(cc.TABLEVIEW_FILL_TOPDOWN);
    this._tableView.setMultiTableViewDelegate(this);
    this._tableView.ignoreAnchorPointForPosition(false);
    this._tableView.setAnchorPoint(cc.p(0, 0));
    this.ndContainer.addChild(this._tableView);
    this._tableView.reloadData();
};

LevelController.prototype.scrollViewDidScroll = function (view) {
};

LevelController.prototype.scrollViewDidZoom = function (view) {
};

LevelController.prototype.gridAtIndex = function(multiTable,  idx) {
    var cell = multiTable.dequeueGrid();
    if (!cell) {
        cell = new LevelItemCellView();
    }

    if (idx < this._levelList.length) {
        var levelEntity = this._levelList[idx];
        cell.initWith(levelEntity, idx);
        cell.visible = true;
    } else {
        cell.visible = false;
    }

    return cell;
};

LevelController.prototype.numberOfCellsInTableView = function(multiTable) {
    var gridsInCell = this.numberOfGridsInCell(multiTable);
    if (this._levelList.length % gridsInCell === 0) {
        return Math.floor(this._levelList.length / gridsInCell);
    } else {
        return Math.floor(this._levelList.length / gridsInCell) + 1;
    }
};

LevelController.prototype.numberOfGridsInCell = function(multiTable, colIdx) {
    return 4;
};

LevelController.prototype.gridSizeForTable = function(table, colIdx) {
    return cc.size(GRID_SIZE[0], GRID_SIZE[1]);
};

LevelController.prototype.gridTouched = function(table, grid) {
    //console.log("grid touched at index: " + grid.getIdx());
    AudioHelper.playBtnSound();
    if (grid.getIdx() < GameMan.getInstance().getPlayerLevel()) {
        if (this.clicked) {
            return;
        }
        this.clicked = true;
        GameMan.getInstance().chooseLevel(grid.getIdx() + 1);
        game.sceneMan.switchScene(game.sceneType.GAME);
    }
};

LevelController.prototype.backClicked = function (sender) {
    AudioHelper.playBtnSound();
    game.sceneMan.switchScene(game.sceneType.MENU);
};

LevelController.createFromCCB = function() {
    var node = game.utils.loadNodeFromCCB("res/menu/level_view.ccbi", null, "LevelController", new LevelController());
    return node;
};

module.exports = LevelController;
},{"../../common/ext/MultiColTableView":12,"../config/ConfigMan":36,"../enum/LockStatus":92,"../model/GameMan":99,"../model/StoreHelper":103,"../scene/GameScene":104,"./LevelItemController":56,"./TitleController":76}],56:[function(require,module,exports){
var LockStatus = require("../enum/LockStatus");
var GameMan = require("../model/GameMan");

var LevelItemController = function () {
    BaseCCBController.call(this);

    this.lbLevel = null;
    this.spPlayed = null;
    this.spLocked = null;

    this.spCurrent = null;

    this.ndStar = null;

    this.spYellow1 = null;
    this.spYellow2 = null;
    this.spYellow3 = null;

    this.spBlack1 = null;
    this.spBlack2 = null;
    this.spBlack3 = null;

    this.spYellows = [];
    this.spBlacks = [];

    this.idx = 0;
};

game.utils.inherits(LevelItemController, BaseCCBController);

LevelItemController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);
    this.spYellows = [this.spYellow1, this.spYellow2, this.spYellow3];
    this.spBlacks = [this.spBlack1, this.spBlack2, this.spBlack3];
};

LevelItemController.prototype.showAppearAnim = function () {
    game.utils.randomScaleAnim(this.rootNode, 1, 0.8);
};

LevelItemController.prototype.showDisappearAnim = function () {
    this.rootNode.runAction(cc.scaleTo(0.4, 0));
};

/**
 * @param {LevelConfig} data
 * @param {number} idx
 */
LevelItemController.prototype.initWith = function (data, idx) {
    cc.log("LevelItemController initWith");
    this.idx = idx;
    this.lbLevel.setString(idx + 1);
    var level = idx + 1;

    this.spCurrent.visible = false;
    this.spLocked.visible = false;
    this.spPlayed.visible = false;
    this.ndStar.visible = false;
    this.lbLevel.visible = true;
    var curLevel = GameMan.getInstance().getPlayerLevel();
    if (curLevel === idx + 1) {
        this.spCurrent.visible = true;
        this.lbLevel.y = 0;
    } else if (curLevel > idx + 1) {
        this.spPlayed.visible = true;
        this.ndStar.visible = true;
        var star = 0;
        if (GameMan.getInstance().isHardMode()) {
            star = game.playerMan.getHardLevelStar(level) || 0;
        } else {
            star = game.playerMan.getLevelStar(level) || 0;
        }
        cc.log("LevelItemController star:" + star);
        for (var i = 0; i < 3; ++i) {
            this.spYellows[i].visible = (star >= i + 1);
            this.spBlacks[i].visible = (star < i + 1);
        }
        this.lbLevel.y = 11;
    } else {
        this.lbLevel.y = 0;
        //this.lbLevel.visible = false;
        this.spLocked.visible = true;
    }
};

LevelItemController.prototype.levelClicked = function () {
    AudioHelper.playBtnSound();
    if (this.idx < GameMan.getInstance().getPlayerLevel()) {
        GameMan.getInstance().chooseLevel(this.idx + 1);
        game.sceneMan.switchScene(game.sceneType.GAME);
    }
};

LevelItemController.prototype.getContentSize = function () {
    return this.spPlayed.getContentSize();
};

LevelItemController.createFromCCB = function() {
    return game.utils.loadNodeFromCCB("res/menu/level_item_view.ccbi", null, "LevelItemController", new LevelItemController());
};

module.exports = LevelItemController;
},{"../enum/LockStatus":92,"../model/GameMan":99}],57:[function(require,module,exports){
var MenuScene = require("../scene/MenuScene");
var PlayerMan = require("../model/PlayerMan");
var StoreHelper = require("../model/StoreHelper");
var GameScene = require("../scene/GameScene");
var SceneType = require("../enum/SceneType");
var GameMan = require("../model/GameMan");
var SceneMan = require("../model/SceneMan");
var AdsReminderController = require("../controller/AdsReminderController");

var LoadingController = function () {
    BaseCCBController.call(this);
    this.bgEnSprite = null;
    this.bgCnSprite = null;
};

game.utils.inherits(LoadingController, BaseCCBController);

LoadingController.prototype.onEnter = function () {
    BaseCCBController.prototype.onEnter.call(this);

    cc.BuilderReader.registerController("AdsReminderController", new AdsReminderController());

    game.playerMan = PlayerMan.getInstance();
    game.playerMan.initData();

    var LogicMan = require("../../common/model/LogicMan");
    LogicMan.getInstance().startGame(true);

    game.sceneMan = SceneMan.getInstance();
    game.sceneType = SceneType;

    game.gameMan.init();
    game.gameMan.adjustSkinConfigs();

    var isFirstEnterGame = true;
    var firstOpenGame = game.storageController.getItem("firstOpenGame", "true");
    if (firstOpenGame != "true") {
        isFirstEnterGame = false;
    } else {
        game.storageController.setItem("firstOpenGame", "false");
    }

    var myLogo = game.utils.isSelfGame();

    cc.log("isFirstEnterGame:" + isFirstEnterGame);

    this.bgCnSprite.visible = false;
    this.bgEnSprite.visible = false;
    var sprite = myLogo ? this.bgCnSprite : this.bgEnSprite;
    sprite.visible = true;
    sprite.opacity = 0;
    sprite.runAction(cc.sequence(cc.fadeIn(0.5), cc.delayTime(2), cc.fadeOut(0.5), cc.callFunc(function () {
        if (isFirstEnterGame) {
            GameMan.getInstance().chooseLatestLevel();
            game.sceneMan.switchScene(game.sceneType.GAME);
            //game.sceneMan.switchScene(SceneType.GAME);
        } else {
            cc.director.runScene(new MenuScene());
        }
        setTimeout(function () {
            StoreHelper.getInstance().init();
        }, 1);
    }, this)));
};

LoadingController.prototype.onExit = function () {
    BaseCCBController.prototype.onExit.call(this);
};

LoadingController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);
};

LoadingController.createFromCCB = function() {
    var node = game.utils.loadNodeFromCCB("res/menu/loading_view.ccbi", null, "LoadingController", new LoadingController());
    return node;
};

module.exports = LoadingController;
},{"../../common/model/LogicMan":24,"../controller/AdsReminderController":45,"../enum/SceneType":94,"../model/GameMan":99,"../model/PlayerMan":100,"../model/SceneMan":102,"../model/StoreHelper":103,"../scene/GameScene":104,"../scene/MenuScene":107}],58:[function(require,module,exports){
//var PackageScene = require("../scene/PackageScene");
//var StoreHelper = require("../model/StoreHelper");
//var LevelScene = require("../scene/LevelScene");
//var GameScene = require("../scene/GameScene");
var GameMan = require("../model/GameMan");
var StoreHelper = require("../model/StoreHelper");
var EventsName = require("../events/EventsName");

game.firstEnter = true;

var MenuController = function () {
    BaseCCBController.call(this);

    this.spPlayEn = null;
    this.spPlayCn = null;
    this.spLevelsEn = null;
    this.spLevelsCn = null;
    this.spIconEn = null;
    this.spIconCn = null;

    this._rankItem = null;
    this._supportItem = null;
    this._storeItem = null;
    this._rateItem = null;
    this._soundItem = null;

    this.spHardCn = null;
    this.spHardEn = null;

    this.spHardHint = null;

    this.btnGiftEn = null;
    this.btnGiftCn = null;

    this.btnWheelCn = null;
    this.btnWheelEn = null;

    this.spGiftBg = null;
    this.ndSpecialOffer = null;

    this.ndGifts = null;

    this.spSkinReminder = null;
};

game.utils.inherits(MenuController, BaseCCBController);

MenuController.prototype.onEnter = function () {
    BaseCCBController.prototype.onEnter.call(this);
    /*
    setTimeout(function () {
        var firstOpenGame = game.storageController.getItem("firstOpenGame", "true");
        if (firstOpenGame != "true") {
            if (game.firstEnter && GameMan.getInstance().isFreeWheel()) {
                game.popupMan.popupWheelDlg();
            }
        } else {
            game.storageController.setItem("firstOpenGame", "false");
        }
        game.firstEnter = false;
    }, 300);
    */
    setTimeout(function () {
        var firstOpenGame = game.storageController.getItem("firstOpenGame", "true");
        if (firstOpenGame != "true") {
            GameMan.getInstance().checkAutoPopup();
        } else {
            game.storageController.setItem("firstOpenGame", "false");
        }
    }, 300);
    this.updateSkinReminder();
    //this.intervalKey = setInterval(this.onUpdate.bind(this), 1000);
    game.eventDispatcher.addEventListener(EventsName.UPDATE_SPECIAL_OFFER, this.updateSpeicialOffer, this);
    game.eventDispatcher.addEventListener(EventsName.DIAMONDS_UPDATE, this.onUpdateDiamonds, this);
    game.eventDispatcher.addEventListener(EventsName.TASK_UPDATE, this.updateSkinReminder, this);
};

MenuController.prototype.onExit = function () {
    clearInterval(this.intervalKey);
    game.eventDispatcher.removeEventListener(EventsName.TASK_UPDATE, this.updateSkinReminder, this);
    game.eventDispatcher.removeEventListener(EventsName.UPDATE_SPECIAL_OFFER, this.updateSpeicialOffer, this);
    game.eventDispatcher.removeEventListener(EventsName.DIAMONDS_UPDATE, this.onUpdateDiamonds, this);
};

MenuController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);
    //this.createClubButton();
    this.updateSoundItem();
    this.updateGiftItem();
    this.spPlayEn.visible = false;
    this.spPlayCn.visible = false;
    this.spLevelsEn.visible = false;
    this.spLevelsCn.visible = false;
    this.spIconEn.visible = false;
    this.spIconCn.visible = false;
    this.spHardCn.visible = false;
    this.spHardEn.visible = false;
    this.btnGiftEn.visible = false;
    this.btnGiftCn.visible = false;
    this.btnWheelCn.visible = false;
    this.btnWheelEn.visible = false;

    if (game.local.isChinese()) {
        this.spPlayCn.visible = true;
        this.spLevelsCn.visible = true;
        this.spIconCn.visible = true;
        this.spHardCn.visible = true;
        this.btnGiftCn.visible = true;
        this.btnWheelCn.visible = true;
    } else {
        this.spPlayEn.visible = true;
        this.spLevelsEn.visible = true;
        this.spIconEn.visible = true;
        this.spHardEn.visible = true;
        this.btnGiftEn.visible = true;
        this.btnWheelEn.visible = true;
    }
    this.ndGifts.visible = true;

    this.spGiftBg.runAction(cc.rotateBy(3, 360).repeatForever());
    this.updateSpeicialOffer();
    this.onUpdateDiamonds();
};

MenuController.prototype.updateSpeicialOffer = function () {
    this.ndSpecialOffer.visible = !GameMan.getInstance().isSpecialOfferPurchased();
};

MenuController.prototype.onUpdateDiamonds = function () {
    this.lbDiamonds.setString(game.playerMan.getDiamonds());
};

MenuController.prototype.onUpdate = function () {
    this.updateGiftItem();
};

MenuController.prototype.updateGiftItem = function () {
    if (game.adsManager.isRewardVideoReady()) {
        this.ndGifts.visible = true;
    } else {
        this.ndGifts.visible = false;
    }
};

MenuController.prototype.updateSoundItem = function () {
    var isSoundOn = game.audioPlayer.isEffectOn();
    if (isSoundOn) {
        this._soundItem.setNormalImage(new cc.Sprite("#btn_sound_on.png"));
        this._soundItem.setSelectedImage(new cc.Sprite("#btn_sound_on.png"));
    } else {
        this._soundItem.setNormalImage(new cc.Sprite("#btn_sound_off.png"));
        this._soundItem.setSelectedImage(new cc.Sprite("#btn_sound_off.png"));
    }
};

MenuController.prototype.storeClicked = function (sender) {
    AudioHelper.playBtnSound();
    var StoreType = require("../enum/StoreType");
    game.popupMan.popupStoreDlg(StoreType.DIAMOND);
};

MenuController.prototype.diamondClicked = function (sender) {
    AudioHelper.playBtnSound();
    var StoreType = require("../enum/StoreType");
    game.popupMan.popupStoreDlg(StoreType.DIAMOND);
};

MenuController.prototype.shareClicked = function (sender) {
    AudioHelper.playBtnSound();
    game.shareManager.shareWithSystem(game.utils.sprintf(game.local.getValue("share_tips"),
        game.playerMan.getLevel(), game.config.getPlatformDownloadUrl()));
};

MenuController.prototype.rankClicked = function (sender) {
    AudioHelper.playBtnSound();
    game.gcManager.showLeaderboard(game.config.getLeaderBoardKey());
};

MenuController.prototype.supportClicked = function (sender) {
    AudioHelper.playBtnSound();
    game.shareManager.sendEmail(game.config.connectEmail,
        game.local.getValue("feed_back_title"), game.local.getValue("feed_back_content"));
};

MenuController.prototype.rateClicked = function (sender) {
    AudioHelper.playBtnSound();
    cc.sys.openURL(game.config.getPlatformDownloadUrl());
};

MenuController.prototype.playClicked = function (sender) {
    AudioHelper.playBtnSound();
    if (this.played) {
        return;
    }
    this.played = true;
    GameMan.getInstance().chooseLatestLevel();
    game.sceneMan.switchScene(game.sceneType.GAME);
};

MenuController.prototype.packageClicked = function (sender) {
    AudioHelper.playBtnSound();
    if (this.played) {
        return;
    }
    this.played = true;
    GameMan.getInstance().setHardMode(false);
    game.sceneMan.switchScene(game.sceneType.LEVEL);
};

MenuController.prototype.soundClicked = function (sender) {
    AudioHelper.playBtnSound();
    game.audioPlayer.setEffectOn(!game.audioPlayer.isEffectOn());
    game.audioPlayer.setMusicOn(!game.audioPlayer.isMusicOn());
    this.updateSoundItem();
};

MenuController.prototype.wheelClicked = function (sender) {
    AudioHelper.playBtnSound();
    game.popupMan.popupWheelDlg();
};

MenuController.prototype.dailyBonusClicked = function (sender) {
    AudioHelper.playBtnSound();
    game.popupMan.popupDailyBonus();
};

MenuController.prototype.hardClicked = function (sender) {
    AudioHelper.playBtnSound();
    if (this.played) {
        return;
    }
    this.played = true;
    game.storageController.setItem("hard_reminded", "false");
    this.spHardHint.visible = false;
    GameMan.getInstance().setHardMode(true);
    game.sceneMan.switchScene(game.sceneType.LEVEL);
};

MenuController.prototype.giftClicked = function (sender) {
    AudioHelper.playBtnSound();
    StoreHelper.getInstance().checkAndShowRewardVideo(game.utils.isIOS() ? "shouye" : "jili04");
};

MenuController.prototype.taskClicked = function (sender) {
    AudioHelper.playBtnSound();
    game.popupMan.popupTaskDlg();

    game.storageController.setItem("click_task", "true");
    this.updateSkinReminder();
};

MenuController.prototype.updateSkinReminder = function () {
    var clickSkin = game.storageController.getItem("click_task", "false");
    if (clickSkin == "false") {
        this.spSkinReminder.visible = true;
    } else {
        if (GameMan.getInstance().hasCompletedTask()) {
            this.spSkinReminder.visible = true;
        } else {
            this.spSkinReminder.visible = false;
        }
    }
};

MenuController.prototype.specialOfferClicked = function (sender) {
    AudioHelper.playBtnSound();
    game.popupMan.popupSpeicialOffer();
};

MenuController.prototype.skinClicked = function (sender) {
    AudioHelper.playBtnSound();
    var StoreType = require("../enum/StoreType");
    game.popupMan.popupStoreDlg(StoreType.SKIN);
};

MenuController.prototype.removeAdsClicked = function (sender) {
    var StoreType = require("../enum/StoreType");
    var StoreHelper = require("../model/StoreHelper");
    var removeAdEntity = StoreHelper.getInstance().getStoreEntityByType(StoreType.REMOVE_ADS);
    StoreHelper.getInstance().buyProduct(removeAdEntity);
};

MenuController.createFromCCB = function() {
    var node = game.utils.loadNodeFromCCB("res/menu/menu_view.ccbi", null, "MenuController", new MenuController());
    return node;
};

MenuController.time = 0;

module.exports = MenuController;
},{"../enum/StoreType":97,"../events/EventsName":98,"../model/GameMan":99,"../model/StoreHelper":103}],59:[function(require,module,exports){


var NoticeController = function () {
    BaseCCBController.call(this);
    this._okItem = null;
    this._cancelItem = null;
    this._confirmItem = null;
    this._closeItem = null;
    this._infoLabel = null;

    this._okLabel = null;
    this._cancelLabel = null;
    this._confirmLabel = null;

    this.ndReward1 = null;
    this.ndReward2 = null;

    this.spReward1 = null;
    this.lbReward1 = null;
    this.spReward2 = null;
    this.lbReward2 = null;
    this.lbReward2Info = null;

    this.spReward = null;
    this.lbReward = null;
    this.lbRewardInfo = null;

    this.sprAd = null;

    this._okCallFunc = null;
    this._failCallFunc = null;
};

game.utils.inherits(NoticeController, BaseCCBController);

NoticeController.prototype.onEnter = function () {
    BaseCCBController.prototype.onEnter.call(this);
    //game.adsManager.showNativeAd("notice", 0, 0);
};

NoticeController.prototype.onExit = function () {
    //game.adsManager.removeNativeAd("notice");
    BaseCCBController.prototype.onExit.call(this);
};

NoticeController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);
    this._titleLabel.setString(game.local.getValue("notice_title"));
    this.ndReward1.visible = false;
    this.ndReward2.visible = false;
    this._infoLabel.visible = false;
    this.sprAd.visible = false;
};

NoticeController.prototype.initWithYes = function (info, okCallFunc) {
    this._infoLabel.visible = true;
    this._infoLabel.setString(info);
    this._infoLabel.setAlignment(cc.TEXT_ALIGNMENT_CENTER);
    this._okCallFunc = okCallFunc;
    this._confirmItem.visible = true;
    this._okItem.visible = false;
    this._cancelItem.visible = false;
    this._okLabel.visible = false;
    this._cancelLabel.visible = false;
    this._closeItem.visible = false;
    this._confirmLabel.visible = true;
    this._confirmLabel.setString(game.local.getValue("confirm_info"));
    this._confirmLabel.setAlignment(cc.TEXT_ALIGNMENT_CENTER);
};

NoticeController.prototype.initWithYesNo = function (info, yesInfo, cancelInfo, okCallFunc, failCallFunc, showClose, isShowAds) {
    this._infoLabel.visible = true;
    this._infoLabel.setString(info);
    this._infoLabel.setAlignment(cc.TEXT_ALIGNMENT_CENTER);
    this._okCallFunc = okCallFunc;
    this._failCallFunc = failCallFunc;
    if (this._confirmItem) {
        this._confirmItem.visible = false;
    }
    this._okItem.visible = true;
    this._cancelItem.visible = true;
    this._okLabel.visible = true;
    this._cancelLabel.visible = true;
    if (this._confirmLabel) {
        this._confirmLabel.visible = false;
    }
    this._okLabel.setString(yesInfo);
    this._cancelLabel.setString(cancelInfo);
    this._okLabel.setAlignment(cc.TEXT_ALIGNMENT_CENTER);
    this._cancelLabel.setAlignment(cc.TEXT_ALIGNMENT_CENTER);
    this._closeItem.visible = showClose;
    this.sprAd.visible = !!isShowAds;
    if (isShowAds) {
        this.rootNode.scheduleOnce(function () {
            game.utils.playCCBAnimation(this.rootNode, "loop");
        }.bind(this), 1);
    }
};

NoticeController.prototype.initWithRewardYes = function (info, okCallFunc, reward1Sprite, reward1Count,
                                                      reward2Sprite, reward2Count) {
    this._infoLabel.visible = false;
    var spriteFrame;
    if (reward1Sprite && reward2Sprite) {
        this.ndReward2.visible = true;
        this.lbReward2Info.setString(info);
        this.lbReward2Info.setAlignment(cc.TEXT_ALIGNMENT_CENTER);
        spriteFrame = cc.spriteFrameCache.getSpriteFrame(reward1Sprite);
        if (spriteFrame) {
            this.spReward1.setSpriteFrame(spriteFrame);
        }
        this.lbReward1.setString("x" + reward1Count);
        spriteFrame = cc.spriteFrameCache.getSpriteFrame(reward2Sprite);
        if (spriteFrame) {
            this.spReward2.setSpriteFrame(spriteFrame);
        }
        this.lbReward2.setString("x" + reward2Count);
    } else {
        this.ndReward1.visible = true;
        this.lbRewardInfo.setString(info);
        this.lbRewardInfo.setAlignment(cc.TEXT_ALIGNMENT_CENTER);
        spriteFrame = cc.spriteFrameCache.getSpriteFrame(reward1Sprite);
        if (spriteFrame) {
            this.spReward.setSpriteFrame(spriteFrame);
        }
        this.lbReward.setString("x" + reward1Count);
    }

    this._okCallFunc = okCallFunc;
    this._confirmItem.visible = true;
    this._okItem.visible = false;
    this._cancelItem.visible = false;
    this._okLabel.visible = false;
    this._cancelLabel.visible = false;
    this._closeItem.visible = false;
    this._confirmLabel.visible = true;
    this._confirmLabel.setString(game.local.getValue("confirm_info"));
    this._confirmLabel.setAlignment(cc.TEXT_ALIGNMENT_CENTER);
};

NoticeController.prototype.okClicked = function (sender) {
    AudioHelper.playBtnSound();
    if (this._okCallFunc) {
        this._okCallFunc();
    }
    this.close();
};

NoticeController.prototype.cancelClicked = function (sender) {
    AudioHelper.playBtnSound();
    if (this._failCallFunc) {
        this._failCallFunc();
    }
    this.close();
};

NoticeController.prototype.closeClicked = function (sender) {
    AudioHelper.playBtnSound();
    this.close();
};

NoticeController.prototype.confirmClicked = function (sender) {
    AudioHelper.playBtnSound();
    if (this._okCallFunc) {
        this._okCallFunc();
    }
    this.close();
};

NoticeController.prototype.popup = function () {
    game.dialogManager.popup(this.rootNode);
};

NoticeController.prototype.close = function () {
    game.dialogManager.close(this.rootNode);
};


NoticeController.createFromCCB = function() {
    var node = game.utils.loadNodeFromCCB("res/notice/notice_view.ccbi", null, "NoticeController", new NoticeController());
    return node;
};

NoticeController.createGuideFromCCB = function() {
    var node = game.utils.loadNodeFromCCB("res/notice/new_tip_view.ccbi", null, "NoticeController", new NoticeController());
    return node;
};

module.exports = NoticeController;
},{}],60:[function(require,module,exports){
var GameScene = require("../scene/GameScene");
var StoreHelper = require("../model/StoreHelper");
var MultiColTableView = require("../../common/ext/MultiColTableView");
var PackageItemController = require("./PackageItemController");
var LevelConfigMan = require("../config/ConfigMan");
var LockStatus = require("../enum/LockStatus");
var GameMan = require("../model/GameMan");
var LevelScene = require("../scene/LevelScene");
var TitleController = require("./TitleController");

//var CELL_WIDTH = 520;

var PackageItemCellView = cc.TableViewCell.extend({
    packageEntity: null,
    packageItemNode: null,

    ctor: function () {
        this._super();
        this.packageItemNode = PackageItemController.createFromCCB();
        this.addChild(this.packageItemNode);
        var size = this.packageItemNode.controller.getContentSize();
        this.packageItemNode.setPosition(cc.p(cc.winSize.width * 0.5, size.height * 0.5));
    },

    initWith: function (packageEntity, idx) {
        cc.log("PackageItemCellView initWith:idx:" + idx);
        this.packageEntity = packageEntity;
        this.packageItemNode.controller.initWith(packageEntity, idx);
    },

    refresh: function () {
        this.packageItemNode.controller.refresh();
    },

    showAppearAnim: function () {
        this.packageItemNode.controller.showAppearAnim(false);
    },

    showDisappearAnim: function () {
        this.packageItemNode.controller.showDisappearAnim();
    }
});

var PackageController = function () {
    BaseCCBController.call(this);
    this.lbChapterName = null;
    this.ndContainer = null;
    this.lbLevelName = null;
    this._tableView = null;

    //user data.
    this.packageConfigs = null;
};

game.utils.inherits(PackageController, BaseCCBController);

PackageController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);

    this.packageConfigs = LevelConfigMan.getInstance().getPackageList();

    this.showLevelTableView();

    var packageId = 1;
    var packageInfo = GameMan.getInstance().getMinUnCompletedPackage();
    if (!packageInfo || (packageInfo.id > this.packageConfigs.length)) {
        packageId = 1;
    } else {
        packageId = packageInfo.id;
    }
    cc.log("packageId:" + packageId);
    var curRow = 0;
    if (packageId % this.numberOfGridsInCell() === 0) {
        curRow = Math.floor(packageId / this.numberOfGridsInCell());
    } else {
        curRow = Math.floor(packageId / this.numberOfGridsInCell()) + 1;
    }

    var yOffset = -(this.numberOfCellsInTableView() - curRow + 1) * this.gridSizeForTable().height +
        this._tableView.getViewSize().height;

    if (yOffset < this._tableView.minContainerOffset().y) {
        yOffset = this._tableView.minContainerOffset().y;
    } else if (yOffset >= this._tableView.maxContainerOffset().y) {
        yOffset = this._tableView.maxContainerOffset().y;
    }

    this._tableView.setContentOffset(cc.p(0, yOffset));

    for (var i = 0; i < this.numberOfCellsInTableView(); ++i) {
        var cell = this._tableView.getGridAtIndex(i);
        if (cell) {
            cell.showAppearAnim();
        }
    }

    this.lbLevelName.setString(game.local.getValue("package_title"));
};

PackageController.prototype.showLevelTableView = function () {
    this._tableView = new MultiColTableView(this, this.ndContainer.getContentSize(), null);
    this._tableView.setDirection(cc.SCROLLVIEW_DIRECTION_VERTICAL);
    this._tableView.setVerticalFillOrder(cc.TABLEVIEW_FILL_TOPDOWN);
    this._tableView.setMultiTableViewDelegate(this);
    this._tableView.ignoreAnchorPointForPosition(false);
    this._tableView.setAnchorPoint(cc.p(0, 0));
    this.ndContainer.addChild(this._tableView);
    this._tableView.reloadData();
};

PackageController.prototype.scrollViewDidScroll = function (view) {
};

PackageController.prototype.scrollViewDidZoom = function (view) {
};

PackageController.prototype.gridAtIndex = function(multiTable,  idx) {
    var cell = multiTable.dequeueGrid();
    if (!cell) {
        cell = new PackageItemCellView();
    }

    if (idx < this.packageConfigs.length) {
        var packageConfig = this.packageConfigs[idx];
        cell.initWith(packageConfig, idx, this.inited);
        cell.visible = true;
    } else {
        cell.visible = false;
    }

    return cell;
};

PackageController.prototype.numberOfCellsInTableView = function(multiTable) {
    return this.packageConfigs.length;
};

PackageController.prototype.numberOfGridsInCell = function(multiTable, colIdx) {
    return 1;
};

PackageController.prototype.gridSizeForTable = function(table, colIdx) {
    return cc.size(cc.winSize.width, 143);
};

PackageController.prototype.gridTouched = function(table, grid) {
    cc.log("grid touched at index: " + grid.getIdx());
    var packageEntity = grid.packageEntity;
    AudioHelper.playBtnSound();
    if (packageEntity.isLocked()) {
        game.popupMan.popupYesNoCommonDlg(game.utils.sprintf(game.local.getValue("unlock_info"), packageEntity.unlockCount),
            game.local.getValue("unlock_title"),
            game.local.getValue("cancel_title"),
            function () {
            if (game.playerMan.player.coins >= packageEntity.unlockCount) {
                game.playerMan.addCoins(-packageEntity.unlockCount);
                game.playerMan.setPackageUnlocked(packageEntity.id);
                grid.refresh();
            } else {
                game.popupMan.popupStoreDlg();
            }
        });
    } else {
        this.showCloseAnim(function () {
            GameMan.getInstance().setPackageEntity(packageEntity);
            game.sceneMan.switchScene(game.sceneType.LEVEL);
        });
    }
};

PackageController.prototype.backClicked = function (sender) {
    AudioHelper.playBtnSound();
    this.showCloseAnim(function () {
        game.sceneMan.switchScene(game.sceneType.MENU);
    });
};

PackageController.prototype.showCloseAnim = function (callback) {
    for (var i = 0; i < this.numberOfCellsInTableView(); ++i) {
        var cell = this._tableView.getGridAtIndex(i);
        if (cell) {
            cell.showDisappearAnim();
        }
    }
    this.rootNode.scheduleOnce(function () {
        if (callback) {
            callback();
        }
    }.bind(this), 0.8);
};

PackageController.createFromCCB = function() {
    cc.BuilderReader.registerController("TitleController", new TitleController());
    var node = game.utils.loadNodeFromCCB("res/menu/package_view.ccbi", null, "PackageController", new PackageController());
    cc.BuilderReader._controllerClassCache["TitleController"] = undefined;
    return node;
};

module.exports = PackageController;
},{"../../common/ext/MultiColTableView":12,"../config/ConfigMan":36,"../enum/LockStatus":92,"../model/GameMan":99,"../model/StoreHelper":103,"../scene/GameScene":104,"../scene/LevelScene":105,"./PackageItemController":61,"./TitleController":76}],61:[function(require,module,exports){
var LockStatus = require("../enum/LockStatus");

var PackageItemController = function () {
    BaseCCBController.call(this);
    this.lbName = null;
    this.lbCount = null;

    this.spBg = null;

    this.spCompleted = null;
    this.spUnCompleted = null;

    this.ndLock = null;
    this.lbUnlockCount = null;

    this.packageEntity = null;

    this.idx = 0;
};

game.utils.inherits(PackageItemController, BaseCCBController);

PackageItemController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);
};

PackageItemController.prototype.showAppearAnim = function (inited) {
    //if (!inited) {
        this.rootNode.stopAllActions();
        game.utils.playCCBAnimation(this.rootNode, "left");
        this.rootNode.scheduleOnce(function () {
            game.utils.playCCBAnimation(this.rootNode, "normal");
        }.bind(this), this.idx * 0.05);
    //} else {
    //    game.utils.playCCBAnimation(this.rootNode, "none");
    //}
};

PackageItemController.prototype.showDisappearAnim = function () {
    this.rootNode.stopAllActions();
    this.rootNode.scheduleOnce(function () {
        game.utils.playCCBAnimation(this.rootNode, "disappear");
    }.bind(this), this.idx * 0.05);
};

/**
 * @param {PackageConfig} data
 * @param {number} idx
 */
PackageItemController.prototype.initWith = function (data, idx) {
    this.packageEntity = data;
    this.idx = idx;
    this.refresh();
    game.utils.playCCBAnimation(this.rootNode, "none");
};

PackageItemController.prototype.refresh = function () {
    this.lbName.setString(game.local.getValue(game.utils.sprintf("package_%d", this.idx + 1)));
    var maxLevel = game.playerMan.getPackageUnlockLevel(this.packageEntity.id) + 1;
    if (maxLevel > this.packageEntity.count) {
        maxLevel = this.packageEntity.count;
    }
    this.lbCount.setString(maxLevel + "/" + this.packageEntity.count);
    this.spBg.setSpriteFrame(cc.spriteFrameCache.getSpriteFrame(this.packageEntity.image));
    this.spCompleted.visible = false;
    this.spUnCompleted.visible = false;
    if (maxLevel === this.packageEntity.count) {
        this.spCompleted.visible = true;
    } else {
        this.spUnCompleted.visible = true;
    }
    if (this.packageEntity.isLocked()) {
        this.ndLock.visible = true;
        this.lbUnlockCount.setString(this.packageEntity.unlockCount);
    } else {
        this.ndLock.visible = false;
    }

    if (!game.local.isChinese()) {
        this.lbName.setScale(1.0);
    }
};

PackageItemController.prototype.getContentSize = function () {
    return this.spBg.getContentSize();
};

PackageItemController.createFromCCB = function() {
    return game.utils.loadNodeFromCCB("res/menu/package_item_view.ccbi", null, "PackageItemController", new PackageItemController());
};

module.exports = PackageItemController;
},{"../enum/LockStatus":92}],62:[function(require,module,exports){
/**
 * Created by qinning on 2017/12/15.
 */
var GameMan = require("../model/GameMan");

var PassController = function () {
    BaseCCBController.call(this);
    this._replayCallback = null;
    this._nextCallback = null;

    //this.spWinCn = null;
    //this.spWinEn = null;

    this.ndWheel = null;

    this.lblReward = null;
    this.lblWheel = null;

    this.spYellow1 = null;
    this.spYellow2 = null;
    this.spYellow3 = null;

    this.spBlack1 = null;
    this.spBlack2 = null;
    this.spBlack3 = null;

    this.spYellows = [];
    //this.spBlacks = [];
};

game.utils.inherits(PassController, BaseCCBController);

PassController.prototype.onExit = function () {
    this._replayCallback = null;
    this._nextCallback = null;
    game.eventDispatcher.removeEventListener("dialog_poped", this.onDialogPoped, this);
    game.eventDispatcher.removeEventListener("dialog_closed", this.onDialogClosed, this);
    this.removeNativeAd();
};

PassController.prototype.onEnter = function () {
    game.eventDispatcher.addEventListener("dialog_poped", this.onDialogPoped, this);
    game.eventDispatcher.addEventListener("dialog_closed", this.onDialogClosed, this);
    this.showNativeAd();
};

PassController.prototype.onDialogPoped = function () {
    this.updateNativeAd();
};

PassController.prototype.onDialogClosed = function () {
    this.updateNativeAd();
};

PassController.prototype.updateNativeAd = function () {
    if (game.dialogManager.isTopestDialog(this.rootNode)) {
        this.showNativeAd();
    } else {
        this.removeNativeAd();
    }
};

PassController.prototype.showNativeAd = function () {
    game.adsManager.showNativeAd("pass", 0, 0);
};

PassController.prototype.removeNativeAd = function () {
    game.adsManager.removeNativeAd("pass");
};

PassController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);

    this.lblReward.setString(_("watch_ads_get_boosts"));
    this.lblWheel.setString(_("lucky_wheel_title"));

    this.spYellows = [this.spYellow1, this.spYellow2, this.spYellow3];

    var star = GameMan.getInstance().currentStar;
    for (var i = 0; i < 3; ++i) {
        this.spYellows[i].visible = (star >= i + 1);
    }

    for (i = 0; i < star; ++i) {
        setTimeout(function (index) {
            return function () {
                game.audioPlayer.playEffectByKey("star_" + (index + 1));
            };
        }(i), 250 * (i + 1));
    }
};

PassController.prototype.initWith = function (replayCallback, nextCallback) {
    this._replayCallback = replayCallback;
    this._nextCallback = nextCallback;
};

PassController.prototype.onAnimEnd = function () {
    // GameMan.getInstance().showAdsAndRate(true);
};

PassController.prototype.nextClicked = function (sender) {
    game.audioPlayer.playEffectByKey("enter");
    GameMan.getInstance().showAdsAndRate(true);
    if (this._nextCallback) {
        this._nextCallback();
    }
    GameMan.getInstance().showRegisterNotification();
    this.close();
};

PassController.prototype.restartClicked = function (sender) {
    game.audioPlayer.playEffectByKey("enter");
    GameMan.getInstance().showAdsAndRate(true);
    if (this._replayCallback) {
        this._replayCallback();
    }
    this.close();
};

PassController.prototype.homeClicked = function (sender) {
    game.audioPlayer.playEffectByKey("enter");
    GameMan.getInstance().showAdsAndRate(true);
    game.sceneMan.switchScene(game.sceneType.MENU);
};

PassController.prototype.watchAdsClicked = function (sender) {
    game.audioPlayer.playEffectByKey("enter");
    var StoreHelper = require("../model/StoreHelper");
    StoreHelper.getInstance().checkAndShowRewardVideo(game.utils.isIOS() ? "wingift" : "jili05");
};

PassController.prototype.wheelClicked = function (sender) {
    AudioHelper.playBtnSound();
    game.popupMan.popupWheelDlg();
};

PassController.prototype.popup = function () {
    game.dialogManager.popup(this.rootNode);
};

PassController.prototype.close = function () {
    game.dialogManager.close(this.rootNode);
};

PassController.createFromCCB = function() {
    var node = game.utils.loadNodeFromCCB("res/notice/pass_view.ccbi", null, "PassController", new PassController());
    return node;
};

module.exports = PassController;
},{"../model/GameMan":99,"../model/StoreHelper":103}],63:[function(require,module,exports){
/**
 * Created by qinning on 2017/12/15.
 */
var AdsPlace = require("../../common/enum/AdsPlace");

var PauseController = function () {
    BaseCCBController.call(this);
    this.lblReward = null;

    this._replayCallback = null;
    this._nextCallback = null;
};

game.utils.inherits(PauseController, BaseCCBController);

PauseController.prototype.onExit = function () {
    this._resumeCallback = null;
    game.eventDispatcher.removeEventListener("dialog_poped", this.onDialogPoped, this);
    game.eventDispatcher.removeEventListener("dialog_closed", this.onDialogClosed, this);
    this.removeNativeAd();
};

PauseController.prototype.onEnter = function () {
    game.eventDispatcher.addEventListener("dialog_poped", this.onDialogPoped, this);
    game.eventDispatcher.addEventListener("dialog_closed", this.onDialogClosed, this);
    this.showNativeAd();
};

PauseController.prototype.onDialogPoped = function () {
    this.updateNativeAd();
};

PauseController.prototype.onDialogClosed = function () {
    this.updateNativeAd();
};

PauseController.prototype.updateNativeAd = function () {
    if (game.dialogManager.isTopestDialog(this.rootNode)) {
        this.showNativeAd();
    } else {
        this.removeNativeAd();
    }
};

PauseController.prototype.showNativeAd = function () {
    game.adsManager.showNativeAd("pause", 0, 99);
};

PauseController.prototype.removeNativeAd = function () {
    game.adsManager.removeNativeAd("pause");
};

PauseController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);
    this.lblReward.setString(_("watch_ads_get_boosts"));
};

PauseController.prototype.initWith = function (resumeCallback) {
    this._resumeCallback = resumeCallback;
};

PauseController.prototype.resumeClicked = function (sender) {
    game.audioPlayer.playEffectByKey("enter");
    if (this._resumeCallback) {
        this._resumeCallback();
    }
    this.close();
};

PauseController.prototype.homeClicked = function (sender) {
    game.audioPlayer.playEffectByKey("enter");
    game.popupMan.popupYesNoCommonDlg(_("exit_game_confirm"), _("yes_title"), _("no_title"), function () {
        game.sceneMan.switchScene(game.sceneType.MENU);
        if (game.playerMan.getLevel() >= 4) {
            game.adsManager.showInterstitial(AdsPlace.Home);
        }
    });
};

PauseController.prototype.restartClicked = function (sender) {
    game.audioPlayer.playEffectByKey("enter");
    game.sceneMan.switchScene(game.sceneType.GAME);
    game.adsManager.showInterstitial(AdsPlace.Refresh);
};

PauseController.prototype.watchAdsClicked = function (sender) {
    game.audioPlayer.playEffectByKey("enter");
    var StoreHelper = require("../model/StoreHelper");
    StoreHelper.getInstance().checkAndShowRewardVideo(game.utils.isIOS() ? "pause" : "pause");
};

PauseController.prototype.popup = function () {
    game.dialogManager.popup(this.rootNode);
};

PauseController.prototype.close = function () {
    game.dialogManager.close(this.rootNode);
};

PauseController.createFromCCB = function() {
    var node = game.utils.loadNodeFromCCB("res/notice/pause_view.ccbi", null, "PauseController", new PauseController());
    return node;
};

module.exports = PauseController;
},{"../../common/enum/AdsPlace":9,"../model/StoreHelper":103}],64:[function(require,module,exports){
//var SkinItemController = require("./SkinItemController");
//var ConfigMan = require("../config/ConfigMan");
//var EventsName = require("../events/EventsName");
//
//var GRID_SIZE = cc.size(350, 500);
//
//var StoreItemCellView = cc.TableViewCell.extend({
//    entity: null,
//    itemNode: null,
//    ctor: function () {
//        this._super();
//        this.itemNode = SkinItemController.createFromCCB();
//        this.addChild(this.itemNode);
//        this.itemNode.setPosition(cc.p(GRID_SIZE.width * 0.5, GRID_SIZE.height * 0.5));
//    },
//
//    initWith: function (entity, idx, inited) {
//        this.entity = entity;
//        this.itemNode.controller.initWith(entity, idx);
//    }
//});
var RankType = require("../enum/RankType");

var RankController = function () {
    BaseCCBController.call(this);
    this.ndContainer = null;
    this.lblTitle = null;

    this.rankType = 0;

    this.updateCount = 0;
};

game.utils.inherits(RankController, BaseCCBController);

RankController.prototype.onEnter = function () {
    BaseCCBController.prototype.onEnter.call(this);
    //this.rootNode.schedule(this.onUpdate.bind(this));
    this.intervalKey = setInterval(this.onUpdate.bind(this), 500);
};

RankController.prototype.onExit = function () {
    //this.rootNode.unschedule(this.onUpdate.bind(this));
    clearInterval(this.intervalKey);
    if (this.closeCallback) {
        this.closeCallback();
    }
    this.closeCallback = null;
    BaseCCBController.prototype.onExit.call(this);
};

RankController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);
    ////onewx.social.loadShareCanvas(this.ndContainer);
    //this.onUpdate(0);
};

RankController.prototype.init = function (rankType, closeCallback) {
    this.rankType = rankType;
    this.closeCallback = closeCallback;
    if (rankType === RankType.Friends) {
        this.lblTitle.setString(game.local.getValue("friends_rank_title"));
    } else {
        this.lblTitle.setString(game.local.getValue("group_rank_title"));
    }
    if (this.rankType === RankType.Friends) {
        onewx.social.initFriend();
    } else {
        onewx.social.initGroup();
    }
    this.refreshRank();
};

RankController.prototype.refreshRank = function () {
    this.updateCount = 0;
    this.onUpdate(0);
};

RankController.prototype.onUpdate = function () {
    if (this.updateCount <= 10) {
        onewx.social.loadShareCanvas(this.ndContainer);
        this.updateCount++;
    }
};

RankController.prototype.prevClicked = function (sender) {
    AudioHelper.playBtnSound();
    onewx.social.onPageChange(this.ndContainer, -1);
    this.refreshRank();
};

RankController.prototype.nextClicked = function (sender) {
    AudioHelper.playBtnSound();
    onewx.social.onPageChange(this.ndContainer, 1);
    this.refreshRank();
};

RankController.prototype.backClicked = function (sender) {
    AudioHelper.playBtnSound();

    this.close();
};

RankController.prototype.challengeClicked = function (sender) {
    AudioHelper.playBtnSound();
    game.sceneMan.switchScene(game.sceneType.GAME);
};

RankController.prototype.popup = function () {
    game.dialogManager.popup(this.rootNode);
};

RankController.prototype.close = function () {
    game.dialogManager.close(this.rootNode);
};

RankController.createFromCCB = function() {
    var node = game.utils.loadNodeFromCCB("res/menu/rank_view.ccbi", null, "RankController", new RankController());
    return node;
};

module.exports = RankController;
},{"../enum/RankType":93}],65:[function(require,module,exports){
var StoreHelper = require("../model/StoreHelper");

var RewardDoubleController = function () {
    BaseCCBController.call(this);

    this._titleLabel = null;

    this.lbReward = null;
    this.spReward = null;
    this.spRewardBg = null;

    this.btnCloseCn = null;
    this.btnCloseEn = null;

    this.lbDouble = null;

    this.closeCallback = null;

    this.doubled = false;
};

game.utils.inherits(RewardDoubleController, BaseCCBController);

RewardDoubleController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);
    this.btnCloseCn.visible = false;
    this.btnCloseEn.visible = false;
    //this.spTitleCn.visible = false;
    //this.spTitleEn.visible = false;
    if (game.local.isChinese()) {
        this.btnCloseCn.visible = true;
        //this.spTitleCn.visible = true;
    } else {
        this.btnCloseEn.visible = true;
        //this.spTitleEn.visible = true;
    }
    this.lbDouble.setString(_("double_rewards"));
};

RewardDoubleController.prototype.init = function (image, count, closeCallback) {
    console.log("RewardDoubleController.prototype.init");
    this.spReward.setSpriteFrame(image);
    this.lbReward.setString("X" + count);
    this.closeCallback = closeCallback;

    this.spRewardBg.runAction(cc.rotateBy(2, 360).repeatForever());
};

RewardDoubleController.prototype.closeClicked = function (sender) {
    AudioHelper.playBtnSound();
    this.close();
};

RewardDoubleController.prototype.watchAdsClicked = function (sender) {
    AudioHelper.playBtnSound();
    var self = this;
    StoreHelper.getInstance().checkAndShowRewardVideo(game.utils.isIOS() ? "zhuanpan02" : "jili02", function (rewarded) {
        if (rewarded) {
            self.doubled = true;
            self.close();
        }
    });
};

RewardDoubleController.prototype.popup = function () {
    game.dialogManager.popup(this.rootNode, {overlayOpacity: 210});
};

RewardDoubleController.prototype.close = function () {
    game.dialogManager.close(this.rootNode);
    if (this.closeCallback) {
        this.closeCallback(this.doubled);
        this.closeCallback = null;
    }
};

RewardDoubleController.createFromCCB = function() {
    var node = game.utils.loadNodeFromCCB("res/notice/reward_double_view.ccbi", null, "RewardDoubleController", new RewardDoubleController());
    return node;
};

module.exports = RewardDoubleController;
},{"../model/StoreHelper":103}],66:[function(require,module,exports){
var StoreHelper = require("../model/StoreHelper");
var GameMan = require("../model/GameMan");
var BoostType = require("../enum/BoostType");

var RewardGiftController = function () {
    BaseCCBController.call(this);

    this.lbTitle = null;

    this.lbTips = null;
    this.lbButton = null;

    this.closeCallback = null;
};

game.utils.inherits(RewardGiftController, BaseCCBController);

RewardGiftController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);
    this.lbTitle.setString(_("gift_title"));
    this.lbTips.setString(_("gift_tips"));
    this.lbButton.setString(_("gift_button"));

    //this.lbTips.setAlignment(cc.TEXT_ALIGNMENT_CENTER);
};

RewardGiftController.prototype.init = function (closeCallback) {
    this.closeCallback = closeCallback;
};

RewardGiftController.prototype.closeClicked = function (sender) {
    AudioHelper.playBtnSound();
    this.close();
};

RewardGiftController.prototype.giftClicked = function (sender) {
    AudioHelper.playBtnSound();
    var self = this;
    var share = GameMan.getInstance().getShareConfig();
    game.shareManager.wxGroupShare(share, "gift_share", function (shared) {
        if (shared) {
            var splitCount = game.utils.randomNextIntInRange(2, 3);
            var threeBallCount = game.utils.randomNextIntInRange(2, 3);
            StoreHelper.getInstance().popupBoostRewardDlg(splitCount, threeBallCount, function () {
                self.close();
            });
        } else {
            game.utils.showWXToast("需要分享到群");
        }
    });
};

RewardGiftController.prototype.popup = function () {
    game.dialogManager.popup(this.rootNode, {overlayOpacity: 210});
};

RewardGiftController.prototype.close = function () {
    game.dialogManager.close(this.rootNode);
    if (this.closeCallback) {
        this.closeCallback();
        this.closeCallback = null;
    }
};

RewardGiftController.createFromCCB = function() {
    var node = game.utils.loadNodeFromCCB("res/notice/reward_gift_view.ccbi", null, "RewardGiftController", new RewardGiftController());
    return node;
};

module.exports = RewardGiftController;
},{"../enum/BoostType":89,"../model/GameMan":99,"../model/StoreHelper":103}],67:[function(require,module,exports){


var RewardNoticeController = function () {
    BaseCCBController.call(this);
    this.ndReward1 = null;
    this.ndReward2 = null;

    this.spReward1 = null;
    this.lbReward1 = null;
    this.spReward2 = null;
    this.lbReward2 = null;

    this.spReward = null;
    this.lbReward = null;

    this.lblOk = null;

    this._okCallFunc = null;
};

game.utils.inherits(RewardNoticeController, BaseCCBController);

RewardNoticeController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);
    this.ndReward1.visible = false;
    this.ndReward2.visible = false;

    game.audioPlayer.playEffectByKey("get_diamonds");

    //this.spBg.runAction(cc.rotateBy(2, 360).repeatForever());
};

RewardNoticeController.prototype.initWithRewardYes = function (info, okCallFunc, reward1Sprite, reward1Count,
                                                      reward2Sprite, reward2Count) {
    var spriteFrame;
    if (reward1Sprite && reward2Sprite) {
        this.ndReward2.visible = true;
        //this.lbReward2Info.setString(info);
        //this.lbReward2Info.setAlignment(cc.TEXT_ALIGNMENT_CENTER);
        spriteFrame = cc.spriteFrameCache.getSpriteFrame(reward1Sprite);
        if (spriteFrame) {
            this.spReward1.setSpriteFrame(spriteFrame);
        }
        this.lbReward1.setString("x" + reward1Count);
        spriteFrame = cc.spriteFrameCache.getSpriteFrame(reward2Sprite);
        if (spriteFrame) {
            this.spReward2.setSpriteFrame(spriteFrame);
        }
        this.lbReward2.setString("x" + reward2Count);
    } else {
        this.ndReward1.visible = true;
        //this.lbRewardInfo.setString(info);
        //this.lbRewardInfo.setAlignment(cc.TEXT_ALIGNMENT_CENTER);
        spriteFrame = cc.spriteFrameCache.getSpriteFrame(reward1Sprite);
        if (spriteFrame) {
            this.spReward.setSpriteFrame(spriteFrame);
        }
        this.lbReward.setString("x" + reward1Count);
    }

    this.lblOk.setString(game.local.getValue("confirm_info"));
    this._okCallFunc = okCallFunc;
};

RewardNoticeController.prototype.okClicked = function (sender) {
    AudioHelper.playBtnSound();
    if (this._okCallFunc) {
        this._okCallFunc();
    }
    this.close();
};

RewardNoticeController.prototype.popup = function () {
    game.dialogManager.popup(this.rootNode);
};

RewardNoticeController.prototype.close = function () {
    game.dialogManager.close(this.rootNode);
};

RewardNoticeController.createFromCCB = function() {
    var node = game.utils.loadNodeFromCCB("res/notice/reward_notice_view.ccbi", null, "RewardNoticeController", new RewardNoticeController());
    return node;
};

module.exports = RewardNoticeController;
},{}],68:[function(require,module,exports){
var StoreHelper = require("../model/StoreHelper");

var RewardVideoController = function () {
    BaseCCBController.call(this);

    this._titleLabel = null;

    this.spReward1 = null;
    this.lbReward1 = null;
    this.spReward2 = null;
    this.lbReward2 = null;
    this.lbReward2Info = null;
    this.lblFree = null;

    this.closeCallback = null;
};

game.utils.inherits(RewardVideoController, BaseCCBController);

RewardVideoController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);
    this.lbReward1.setString("X1");
    this.lbReward2.setString("X1");
    this.lbReward2Info.setString(game.local.getValue("watch_ads_tips"));
    this._titleLabel.setString(game.local.getValue("watch_ads_title"));
    this.lblFree.setString(_("free_coins_title"));
};

RewardVideoController.prototype.init = function (closeCallback) {
    this.closeCallback = closeCallback;
};

RewardVideoController.prototype.closeClicked = function (sender) {
    AudioHelper.playBtnSound();
    this.close();
};

RewardVideoController.prototype.watchAdsClicked = function (sender) {
    AudioHelper.playBtnSound();
    StoreHelper.getInstance().checkAndShowRewardVideo(game.utils.isIOS() ? "jili03-IOS" : "jili03");
};

RewardVideoController.prototype.popup = function () {
    game.dialogManager.popup(this.rootNode);
};

RewardVideoController.prototype.close = function () {
    game.dialogManager.close(this.rootNode);
    if (this.closeCallback) {
        this.closeCallback();
        this.closeCallback = null;
    }
};

RewardVideoController.createFromCCB = function() {
    var node = game.utils.loadNodeFromCCB("res/notice/reward_video_view.ccbi", null, "RewardVideoController", new RewardVideoController());
    return node;
};

module.exports = RewardVideoController;
},{"../model/StoreHelper":103}],69:[function(require,module,exports){
var SkinItemController = require("./SkinItemController");
var ConfigMan = require("../config/ConfigMan");
var EventsName = require("../events/EventsName");
var MultiColTableView = require("../../common/ext/MultiColTableView");

var GRID_SIZE = cc.size(270, 200);

var StoreItemCellView = cc.TableViewCell.extend({
    entity: null,
    itemNode: null,
    ctor: function () {
        this._super();
        this.itemNode = SkinItemController.createFromCCB();
        this.addChild(this.itemNode);
        this.itemNode.setPosition(cc.p(GRID_SIZE.width * 0.5, GRID_SIZE.height * 0.5));
    },

    initWith: function (entity, idx) {
        this.entity = entity;
        this.itemNode.controller.initWith(entity, idx);
    }
});

var SkinController = function () {
    BaseCCBController.call(this);
    this.ndContainer = null;

    this.lblTitle = null;

    this._tableView = null;

    //user data.
    this.configs = null;
};

game.utils.inherits(SkinController, BaseCCBController);

SkinController.prototype.onEnter = function () {
    BaseCCBController.prototype.onEnter.call(this);
    game.eventDispatcher.addEventListener(EventsName.UPDATE_SKIN, this.onUpdateSkin, this);
};

SkinController.prototype.onExit = function () {
    game.eventDispatcher.addEventListener(EventsName.UPDATE_SKIN, this.onUpdateSkin, this);
    BaseCCBController.prototype.onExit.call(this);
};

SkinController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);
    this.lblTitle.setString(_("skin_title"));

    this.configs = ConfigMan.getInstance().getSkinList();
    this.showTableView();
};

SkinController.prototype.onUpdateSkin = function (event) {
    this.showTableView();
};

SkinController.prototype.showTableView = function () {
    if (!this._tableView) {
        var size = this.ndContainer.getContentSize();
        this._tableView = new MultiColTableView(this, size, null);
        this._tableView.setDirection(cc.SCROLLVIEW_DIRECTION_VERTICAL);
        this._tableView.setVerticalFillOrder(cc.TABLEVIEW_FILL_TOPDOWN);
        this._tableView.setMultiTableViewDelegate(this);
        this._tableView.ignoreAnchorPointForPosition(false);
        this._tableView.setAnchorPoint(cc.p(0, 0));
        this.ndContainer.addChild(this._tableView);
    } else {
        this._offset = this._tableView.getContentOffset();
    }
    this._tableView.reloadData();
    if (this._offset) {
        this._tableView.setContentOffset(this._offset);
        this._offset = null;
    }
};

SkinController.prototype.scrollViewDidScroll = function (view) {
};

SkinController.prototype.scrollViewDidZoom = function (view) {
};

SkinController.prototype.gridAtIndex = function(multiTable,  idx) {
    var cell = multiTable.dequeueGrid();
    if (!cell) {
        cell = new StoreItemCellView();
    }

    if (idx < this.configs.length) {
        var skinCfg = this.configs[idx];
        cell.initWith(skinCfg, idx);
        cell.visible = true;
    } else {
        cell.visible = false;
    }

    return cell;
};

SkinController.prototype.numberOfCellsInTableView = function(multiTable) {
    var gridsInCell = this.numberOfGridsInCell(multiTable);
    return Math.ceil(this.configs.length / gridsInCell);
};

SkinController.prototype.numberOfGridsInCell = function(multiTable, colIdx) {
    return 2;
};

SkinController.prototype.gridSizeForTable = function(table, colIdx) {
    return cc.size(270, 220);
};

SkinController.prototype.gridTouched = function(table, grid) {
};

SkinController.prototype.backClicked = function (sender) {
    AudioHelper.playBtnSound();

    this.close();
};

SkinController.prototype.popup = function () {
    game.dialogManager.popup(this.rootNode);
};

SkinController.prototype.close = function () {
    game.dialogManager.close(this.rootNode);
};

SkinController.prototype.onExit = function () {
    //if (this.closeCallback) {
    //    this.closeCallback();
    //    this.closeCallback = null;
    //}
};

SkinController.createFromCCB = function() {
    var node = game.utils.loadNodeFromCCB("res/menu/skin_view.ccbi", null, "SkinController", new SkinController());
    return node;
};

module.exports = SkinController;
},{"../../common/ext/MultiColTableView":12,"../config/ConfigMan":36,"../events/EventsName":98,"./SkinItemController":70}],70:[function(require,module,exports){
var SkinRewardType = require("../enum/SkinRewardType");
var EventsName = require("../events/EventsName");

var SkinItemController = function () {
    BaseCCBController.call(this);

    this.ndPurchase = null;
    this.ndOwned = null;

    this.lbDiamondPrice = null;
    this.lbUsing = null;

    this.spSkin = null;

    this.idx = 0;
    this.skinCfg = null;
};

game.utils.inherits(SkinItemController, BaseCCBController);

SkinItemController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);
};

SkinItemController.prototype.onEnter = function() {
    BaseCCBController.prototype.onEnter.call(this);
    game.eventDispatcher.addEventListener(EventsName.UPDATE_SKIN, this.onUpdateSkin, this);
};

SkinItemController.prototype.onExit = function() {
    game.eventDispatcher.removeEventListener(EventsName.UPDATE_SKIN, this.onUpdateSkin, this);
    BaseCCBController.prototype.onExit.call(this);
};
/**
 * @param {SkinConfig} data
 * @param {number} idx
 */
SkinItemController.prototype.initWith = function (data, idx) {
    this.idx = idx;
    this.skinCfg = data;
    //var completed = false;

    try {
        var spriteFrame = cc.spriteFrameCache.getSpriteFrame(data.image + ".png");
        this.spSkin.setSpriteFrame(spriteFrame);

        this.ndPurchase.visible = false;
        this.ndOwned.visible = false;

        var owned = game.playerMan.hasSkin(this.skinCfg.id);
        if (owned) {
            this.ndOwned.visible = true;
            if (data.id === game.playerMan.getCurrentSkinId()) {
                this.lbUsing.setString(_("selected_title"));
            } else {
                this.lbUsing.setString(_("select_title"));
            }
        } else {
            this.ndPurchase.visible = true;
            this.lbDiamondPrice.setString(this.skinCfg.count);
        }
    } catch (ex) {
        cc.error(ex);
    }
};

SkinItemController.prototype.onUpdateSkin = function () {
    this.initWith(this.skinCfg, this.idx);
};

SkinItemController.prototype.getContentSize = function () {
    return this.spBgSelected.getContentSize();
};

SkinItemController.prototype.purchaseClicked = function () {
    AudioHelper.playBtnSound();
    var StoreHelper = require("../model/StoreHelper");
    StoreHelper.getInstance().buySkin(this.skinCfg);
};

SkinItemController.prototype.selectClicked = function () {
    AudioHelper.playBtnSound();
    game.playerMan.setCurrentSkinId(this.skinCfg.id);
    game.eventDispatcher.dispatchEvent(EventsName.UPDATE_SKIN);
};

SkinItemController.createFromCCB = function() {
    return game.utils.loadNodeFromCCB("res/menu/skin_item_view.ccbi", null, "SkinItemController", new SkinItemController());
};

module.exports = SkinItemController;
},{"../enum/SkinRewardType":96,"../events/EventsName":98,"../model/StoreHelper":103}],71:[function(require,module,exports){
var StoreHelper = require("../model/StoreHelper");
var ConfigMan = require("../config/ConfigMan");
var EventsName = require("../events/EventsName");

var SpecialOfferController = function () {
    BaseCCBController.call(this);

    this.lbTitle = null;

    this.spReward1 = null;
    this.lbReward1 = null;
    //this.spReward2 = null;
    //this.lbReward2 = null;
    this.lbLeftTime = null;

    this.lblOriginalPrice = null;
    this.lbPrice = null;
    this.lblDiscount = null;

    this.btnPurchase = null;

    /**
     * @type {StoreConfig}
     */
    this.specialOfferCfg = null;
};

game.utils.inherits(SpecialOfferController, BaseCCBController);

SpecialOfferController.prototype.onEnter = function () {
    BaseCCBController.prototype.onEnter.call(this);
    game.eventDispatcher.addEventListener(EventsName.PURCHASE_END, this.onPurchaseEnd, this);
};

SpecialOfferController.prototype.onExit = function () {
    game.eventDispatcher.removeEventListener(EventsName.PURCHASE_END, this.onPurchaseEnd, this);
    BaseCCBController.prototype.onExit.call(this);
};

SpecialOfferController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);
    this.specialOfferCfg = ConfigMan.getInstance().getSpecialOfferCfg();
    this.lbTitle.setString(_("special_offer_title"));
    this.lbReward1.setString("x" + this.specialOfferCfg.data.diamonds);

    this.lbPrice.setString(this.specialOfferCfg.price);
    this.lblOriginalPrice.setString(this.specialOfferCfg.original_price);
    this.lblDiscount.setString(game.utils.sprintf(_("more_title"), "" + (this.specialOfferCfg.discount_multi * 100)));
};

SpecialOfferController.prototype.init = function (closeCallback) {
    this.closeCallback = closeCallback;
};

SpecialOfferController.prototype.closeClicked = function (sender) {
    AudioHelper.playBtnSound();
    this.close();
};

SpecialOfferController.prototype.onPurchaseEnd = function (event) {
    var success = event.getUserData();
    if (success) {
        this.close();
    } else {
        this.btnPurchase.enabled = true;
    }
};

SpecialOfferController.prototype.onPurchase = function (sender) {
    AudioHelper.playBtnSound();
    this.btnPurchase.enabled = false;
    StoreHelper.getInstance().buyProduct(this.specialOfferCfg);
};

SpecialOfferController.prototype.popup = function () {
    game.dialogManager.popup(this.rootNode);
};

SpecialOfferController.prototype.close = function () {
    game.dialogManager.close(this.rootNode);
    if (this.closeCallback) {
        this.closeCallback();
        this.closeCallback = null;
    }
};

SpecialOfferController.createFromCCB = function() {
    var node = game.utils.loadNodeFromCCB("res/store/special_offer_view.ccbi", null, "SpecialOfferController", new SpecialOfferController());
    return node;
};

module.exports = SpecialOfferController;
},{"../config/ConfigMan":36,"../events/EventsName":98,"../model/StoreHelper":103}],72:[function(require,module,exports){
var MultiColTableView = require("../../common/ext/MultiColTableView");
var StoreItemController = require("./StoreItemController");
var StoreHelper = require("../model/StoreHelper");
var SkinItemController = require("./SkinItemController");
var ConfigMan = require("../config/ConfigMan");
var StoreType = require("../enum/StoreType");
var EventsName = require("../events/EventsName");

var StoreTab = {
    DIAMONDS: 0,
    SKINS: 1
};

var TabVisualConfig = {};
TabVisualConfig[StoreTab.DIAMONDS] = {
    tabNode: "tabDiamondsLight",
    unselectNode: "tabDiamondsDark",
    contentNode:"diamondsContentNode"
};
TabVisualConfig[StoreTab.SKINS] = {
    tabNode:"tabSkinLight",
    unselectNode:"tabSkinDark",
    contentNode:"skinContentNode"
};

var StoreSize = cc.size(571, 110);
var SkinSize = cc.size(285, 200);

var StoreItemCellView = cc.TableViewCell.extend({
    entity: null,
    itemNode: null,
    ctor: function () {
        this._super();
        this.itemNode = StoreItemController.createFromCCB();
        this.addChild(this.itemNode);
        this.itemNode.setPosition(cc.p(StoreSize.width * 0.5, StoreSize.height * 0.5));
    },

    initWith: function (entity, idx) {
        this.entity = entity;
        this.itemNode.controller.initWith(entity, idx);
    }
});

var SkinItemCellView = cc.TableViewCell.extend({
    entity: null,
    itemNode: null,
    ctor: function () {
        this._super();
        this.itemNode = SkinItemController.createFromCCB();
        this.addChild(this.itemNode);
        this.itemNode.setPosition(cc.p(SkinSize.width * 0.5, SkinSize.height * 0.5));
    },

    initWith: function (entity, idx) {
        this.entity = entity;
        this.itemNode.controller.initWith(entity, idx);
    }
});

var StoreController = function () {
    BaseCCBController.call(this);
    //this.lbChapterName = null;
    this.ndContainer = null;

    this.ndTitle = null;
    this.lbStoreName = null;

    this.lbDiamonds = null;

    //user data.
    this.configs = null;
    this.closeCallback = null;
};

game.utils.inherits(StoreController, BaseCCBController);

StoreController.prototype.onExit = function () {
    game.eventDispatcher.removeEventListener(EventsName.DIAMONDS_UPDATE, this.onUpdateDiamonds, this);
    if (this.closeCallback) {
        this.closeCallback();
        this.closeCallback = null;
    }
};

StoreController.prototype.onEnter = function () {
    game.eventDispatcher.addEventListener(EventsName.DIAMONDS_UPDATE, this.onUpdateDiamonds, this);
    //this.refreshUI();
    this.onUpdateDiamonds();
};

StoreController.prototype.onUpdateDiamonds = function () {
    this.lbDiamonds.setString(game.playerMan.getDiamonds());
};

StoreController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);
    this.lbStoreName.setString(game.local.getValue("store_title"));
    this.initStoreUI();
};

StoreController.prototype.initStoreUI = function () {
    //var originalTab = this.currentTab;
    var skinConfigs = ConfigMan.getInstance().getSkinList();
    cc.log("skinConfigs length:" + skinConfigs.length);
    //this.currentTab = StoreTab.SKINS;
    this[TabVisualConfig[StoreTab.SKINS].contentNode] = this.getTableView({
        gridAtIndex: function (multiTable, idx) {
            var cell = multiTable.dequeueGrid();
            if (!cell) {
                cell = new SkinItemCellView();
            }

            if (idx < skinConfigs.length) {
                var config = skinConfigs[idx];
                cell.initWith(config, idx);
                cell.visible = true;
            } else {
                cell.visible = false;
            }

            return cell;
        },

        numberOfCellsInTableView: function (multiTable) {
            var gridsInCell = this.numberOfGridsInCell(multiTable);
            return Math.ceil(skinConfigs.length / gridsInCell);
        },

        numberOfGridsInCell: function (multiTable, colIdx) {
            return 2;
        },

        gridSizeForTable: function (table, colIdx) {
            //return cc.size(200, 200);
            return cc.size(SkinSize.width, SkinSize.height);
        }
    }, {
        gridTouched: function (table, grid) {
            //cc.log("grid touched at index: " + grid.getIdx());
            //var entity = grid.entity;
            //AudioHelper.playBtnSound();
            //StoreHelper.getInstance().buySkin(entity);
        }
    });

    var diamondConfigs = ConfigMan.getInstance().getStoreListWithoutFirstPurchase();
    //this.currentTab = StoreTab.DIAMONDS;
    this[TabVisualConfig[StoreTab.DIAMONDS].contentNode] = this.getTableView({
        gridAtIndex: function (multiTable, idx) {
            var cell = multiTable.dequeueGrid();
            if (!cell) {
                cell = new StoreItemCellView();
            }

            if (idx < diamondConfigs.length) {
                var config = diamondConfigs[idx];
                cell.initWith(config, idx);
                cell.visible = true;
            } else {
                cell.visible = false;
            }

            return cell;
        },

        numberOfCellsInTableView: function (multiTable) {
            return diamondConfigs.length;
        },

        numberOfGridsInCell: function (multiTable, colIdx) {
            return 1;
        },

        gridSizeForTable: function (table, colIdx) {
            return StoreSize;
        }
    }, {
        gridTouched: function (table, grid) {
            //cc.log("grid touched at index: " + grid.getIdx());
            //var entity = grid.entity;
            //AudioHelper.playBtnSound();
            //StoreHelper.getInstance().buyProduct(entity);
        }
    });

    //this.currentTab = originalTab;
};

StoreController.prototype.refreshUI = function() {
    this.currentTab = this.currentTab || StoreTab.DIAMONDS;
    cc.log("StoreController.prototype.refreshUI:" + this.currentTab);
    //this.currentTab = StoreTab.SKINS;
    for(var i in TabVisualConfig) {
        //var tabNode = this[TabVisualConfig[i].tabNode];
        var unSelectNode = this[TabVisualConfig[i].unselectNode];
        var contentNode = this[TabVisualConfig[i].contentNode];
        //tabNode && tabNode.setVisible(Number(i) === this.currentTab);
        contentNode && contentNode.setVisible(Number(i) === this.currentTab);
        unSelectNode && unSelectNode.setVisible(Number(i) !== this.currentTab);
    }
};

StoreController.prototype.initWith = function (type, callback) {
    cc.log("StoreController.prototype.initWith:" + type);
    if (type === StoreType.SKIN) {
        this.currentTab = StoreTab.SKINS;
    } else if (type === StoreType.DIAMOND) {
        this.currentTab = StoreTab.DIAMONDS;
    }
    this.refreshUI();
    this.closeCallback = callback;
};

StoreController.prototype.getTableView = function (dataSource, delegate) {
    var tableView = new MultiColTableView(dataSource, this.ndContainer.getContentSize(), null);
    tableView.setDirection(cc.SCROLLVIEW_DIRECTION_VERTICAL);
    tableView.setVerticalFillOrder(cc.TABLEVIEW_FILL_TOPDOWN);
    tableView.setMultiTableViewDelegate(delegate);
    tableView.ignoreAnchorPointForPosition(false);
    tableView.setAnchorPoint(cc.p(0, 0));
    tableView.reloadData();
    this.ndContainer.addChild(tableView);
    return tableView;
};

StoreController.prototype.onClickSkin = function () {
    AudioHelper.playBtnSound();
    this.currentTab = StoreTab.SKINS;
    this.refreshUI();
};

StoreController.prototype.onClickDiamonds = function () {
    AudioHelper.playBtnSound();
    this.currentTab = StoreTab.DIAMONDS;
    this.refreshUI();
};

StoreController.prototype.backClicked = function (sender) {
    AudioHelper.playBtnSound();

    this.close();
};

StoreController.prototype.popup = function () {
    game.dialogManager.popup(this.rootNode);
};

StoreController.prototype.close = function () {
    game.dialogManager.close(this.rootNode);
};

StoreController.createFromCCB = function() {
    var node = game.utils.loadNodeFromCCB("res/store/store_view.ccbi", null, "StoreController", new StoreController());
    return node;
};

module.exports = StoreController;
},{"../../common/ext/MultiColTableView":12,"../config/ConfigMan":36,"../enum/StoreType":97,"../events/EventsName":98,"../model/StoreHelper":103,"./SkinItemController":70,"./StoreItemController":73}],73:[function(require,module,exports){
var StoreType = require("../enum/StoreType");
var EventsName = require("../events/EventsName");

var StoreItemController = function () {
    BaseCCBController.call(this);

    //price
    this.lbPrice = null;
    this.spRewardedVideo = null;
    this.ndDiamondPrice = null;
    this.lbDiamondPrice = null;

    //node
    this.ndRestore = null;
    this.ndBoosts = null;
    this.ndDiamond = null;
    this.ndPurchase = null;

    //
    this.lbSplit = null;
    this.lbNewThree = null;
    this.lbDiamond = null;
    this.spDiamond = null;

    //tag
    this.spHotTag = null;
    this.spFreeTag = null;
    this.spPercentTag = null;

    this.spRedBg = null;

    this.lbTag = null;

    this.btnClaim = null;

    this.ndReminder = null;

    this.idx = 0;
};

game.utils.inherits(StoreItemController, BaseCCBController);

StoreItemController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);
};

/**
 * @param {StoreConfig} data
 * @param {number} idx
 */
StoreItemController.prototype.initWith = function (data, idx) {
    this.storeEntity = data;
    this.idx = idx;
    this.lbPrice.setString(data.price);

    try {

        this.ndRestore.visible = false;
        this.ndBoosts.visible = false;
        this.ndDiamond.visible = false;
        this.ndPurchase.visible = true;

        this.lbPrice.visible = false;
        this.ndDiamondPrice.visible = false;
        this.spRewardedVideo.visible = false;

        this.spHotTag.visible = false;
        this.spFreeTag.visible = false;
        this.spPercentTag.visible = false;

        this.lbTag.visible = false;

        this.spRedBg.visible = false;

        this.btnClaim.enabled = true;

        this.ndReminder.visible = false;

        var spriteFrame;
        switch (data.type) {
            case StoreType.FREE:
                this.ndDiamond.visible = true;
                this.lbDiamond.setString(data.count);
                this.spRewardedVideo.visible = true;
                spriteFrame = cc.spriteFrameCache.getSpriteFrame(data.image);
                if (spriteFrame) {
                    this.spDiamond.setSpriteFrame(spriteFrame);
                }
                //tag
                this.spFreeTag.visible = true;
                this.lbTag.visible = true;
                this.lbTag.setString(_("free_coins_title"));
                this.ndReminder.visible = true;
                break;
            case StoreType.REMOVE_ADS:
                this.ndDiamond.visible = true;
                this.lbDiamond.setString(game.local.getValue("remove_ads_title"));
                spriteFrame = cc.spriteFrameCache.getSpriteFrame(data.image);
                if (spriteFrame) {
                    this.spDiamond.setSpriteFrame(spriteFrame);
                }
                this.lbPrice.visible = true;
                this.spHotTag.visible = true;
                this.lbTag.visible = true;
                this.lbTag.setString(_("hot_title"));
                break;
            case StoreType.RESTORE:
                this.ndRestore.visible = true;
                this.ndPurchase.visible = false;
                this.spRedBg.visible = true;
                break;
            case StoreType.NEW_AND_SPLIT:
                this.ndBoosts.visible = true;
                this.lbSplit.setString("x" + data.data.multiple_3);
                this.lbNewThree.setString("x" + data.data.multiple_3);
                this.ndDiamondPrice.visible = true;
                this.lbDiamondPrice.setString(data.count);
                break;
            case StoreType.DIAMOND:
                this.ndDiamond.visible = true;
                this.lbDiamond.setString(data.count);
                this.lbPrice.visible = true;
                spriteFrame = cc.spriteFrameCache.getSpriteFrame(data.image);
                if (spriteFrame) {
                    this.spDiamond.setSpriteFrame(spriteFrame);
                }
                //tag
                if (data.extra > 0) {
                    this.spPercentTag.visible = true;
                    this.lbTag.visible = true;
                    this.lbTag.setString("+" + (data.extra * 100) + "%");
                }
                break;
        }
    } catch (ex) {
        cc.error(ex);
    }
};

StoreItemController.prototype.getContentSize = function () {
    return this.spBg.getContentSize();
};

StoreItemController.prototype.purchaseClicked = function () {
    AudioHelper.playBtnSound();
    var StoreHelper = require("../model/StoreHelper");
    StoreHelper.getInstance().buyProduct(this.storeEntity);
};

StoreItemController.createFromCCB = function() {
    var node = game.utils.loadNodeFromCCB("res/store/store_item_view.ccbi", null, "StoreItemController", new StoreItemController());
    return node;
};

module.exports = StoreItemController;
},{"../enum/StoreType":97,"../events/EventsName":98,"../model/StoreHelper":103}],74:[function(require,module,exports){
var TaskItemController = require("./TaskItemController");
var ConfigMan = require("../config/ConfigMan");
var EventsName = require("../events/EventsName");
var MultiColTableView = require("../../common/ext/MultiColTableView");

var GRID_SIZE = cc.size(270, 200);

var StoreItemCellView = cc.TableViewCell.extend({
    entity: null,
    itemNode: null,
    ctor: function () {
        this._super();
        this.itemNode = TaskItemController.createFromCCB();
        this.addChild(this.itemNode);
        this.itemNode.setPosition(cc.p(GRID_SIZE.width * 0.5, GRID_SIZE.height * 0.5));
    },

    initWith: function (entity, idx) {
        this.entity = entity;
        this.itemNode.controller.initWith(entity, idx);
    }
});

var TaskController = function () {
    BaseCCBController.call(this);
    this.ndContainer = null;

    this.lblTitle = null;

    this._tableView = null;

    //user data.
    this.configs = null;
};

game.utils.inherits(TaskController, BaseCCBController);

TaskController.prototype.onEnter = function () {
    BaseCCBController.prototype.onEnter.call(this);
    game.eventDispatcher.addEventListener(EventsName.UPDATE_SKIN, this.onUpdateSkin, this);
};

TaskController.prototype.onExit = function () {
    game.eventDispatcher.addEventListener(EventsName.UPDATE_SKIN, this.onUpdateSkin, this);
    BaseCCBController.prototype.onExit.call(this);
};

TaskController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);
    this.lblTitle.setString(_("task_title"));

    this.configs = ConfigMan.getInstance().getTaskList();
    this.showTableView();
};

TaskController.prototype.onUpdateSkin = function (event) {
    this.showTableView();
};

TaskController.prototype.showTableView = function () {
    if (!this._tableView) {
        var size = this.ndContainer.getContentSize();
        this._tableView = new MultiColTableView(this, size, null);
        this._tableView.setDirection(cc.SCROLLVIEW_DIRECTION_VERTICAL);
        this._tableView.setVerticalFillOrder(cc.TABLEVIEW_FILL_TOPDOWN);
        this._tableView.setMultiTableViewDelegate(this);
        this._tableView.ignoreAnchorPointForPosition(false);
        this._tableView.setAnchorPoint(cc.p(0, 0));
        this.ndContainer.addChild(this._tableView);
    } else {
        this._offset = this._tableView.getContentOffset();
    }
    this._tableView.reloadData();
    if (this._offset) {
        this._tableView.setContentOffset(this._offset);
        this._offset = null;
    }
};

TaskController.prototype.scrollViewDidScroll = function (view) {
};

TaskController.prototype.scrollViewDidZoom = function (view) {
};

TaskController.prototype.gridAtIndex = function(multiTable,  idx) {
    var cell = multiTable.dequeueGrid();
    if (!cell) {
        cell = new StoreItemCellView();
    }

    if (idx < this.configs.length) {
        var skinCfg = this.configs[idx];
        cell.initWith(skinCfg, idx);
        cell.visible = true;
    } else {
        cell.visible = false;
    }

    return cell;
};

TaskController.prototype.numberOfCellsInTableView = function(multiTable) {
    var gridsInCell = this.numberOfGridsInCell(multiTable);
    return Math.ceil(this.configs.length / gridsInCell);
};

TaskController.prototype.numberOfGridsInCell = function(multiTable, colIdx) {
    return 2;
};

TaskController.prototype.gridSizeForTable = function(table, colIdx) {
    return cc.size(270, 220);
};

TaskController.prototype.gridTouched = function(table, grid) {
};

TaskController.prototype.backClicked = function (sender) {
    AudioHelper.playBtnSound();

    this.close();
};

TaskController.prototype.popup = function () {
    game.dialogManager.popup(this.rootNode);
};

TaskController.prototype.close = function () {
    game.dialogManager.close(this.rootNode);
};

TaskController.prototype.onExit = function () {
    //if (this.closeCallback) {
    //    this.closeCallback();
    //    this.closeCallback = null;
    //}
};

TaskController.createFromCCB = function() {
    var node = game.utils.loadNodeFromCCB("res/menu/task_view.ccbi", null, "TaskController", new TaskController());
    return node;
};

module.exports = TaskController;
},{"../../common/ext/MultiColTableView":12,"../config/ConfigMan":36,"../events/EventsName":98,"./TaskItemController":75}],75:[function(require,module,exports){
var SkinRewardType = require("../enum/SkinRewardType");
var EventsName = require("../events/EventsName");
var BoostType = require("../enum/BoostType");

var TaskItemController = function () {
    BaseCCBController.call(this);

    this.lblGoal = null;
    this.lblGoalInfo = null;
    //this.spSkin = null;
    this.spBgSelected = null;

    this.lblSelect = null;
    this.btnSelect = null;
    this.ndSelect = null;

    this.lblDiamonds = null;

    //this.lblUsing = null;

    this.idx = 0;
    this.taskCfg = null;
};

game.utils.inherits(TaskItemController, BaseCCBController);

TaskItemController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);
};
/**
 * @param {TaskConfig} data
 * @param {number} idx
 */
TaskItemController.prototype.initWith = function (data, idx) {
    this.idx = idx;
    this.taskCfg = data;
    this.refresh();
};

TaskItemController.prototype.refresh = function () {
    var data = this.taskCfg;
    var completed = false;
    switch (data.type) {
        case SkinRewardType.None:
            this.lblGoal.visible = false;
            this.lblGoalInfo.visible = false;
            completed = true;
            break;
        case SkinRewardType.LevelCount:
            this.lblGoal.visible = true;
            this.lblGoalInfo.visible = true;
            this.lblGoal.setString(game.utils.sprintf(game.local.getValue("level_count_title"), data.count));
            if (game.playerMan.getLevel() >= data.count) {
                this.lblGoalInfo.setString(game.local.getValue("completed_title"));
                completed = true;
            } else {
                this.lblGoalInfo.setString(game.utils.sprintf("%d/%d", game.playerMan.getLevel(), data.count));
            }
            break;
        case SkinRewardType.WatchAdCount:
            this.lblGoal.visible = true;
            this.lblGoalInfo.visible = true;
            this.lblGoal.setString(game.utils.sprintf(game.local.getValue("watch_ad_count_title"), data.count));
            if (game.playerMan.player.interstitialAdCount >= data.count) {
                this.lblGoalInfo.setString(game.local.getValue("completed_title"));
                completed = true;
            } else {
                this.lblGoalInfo.setString(game.utils.sprintf("%d/%d", game.playerMan.player.interstitialAdCount, data.count));
            }
            break;
        case SkinRewardType.WatchRewardAdCount:
            this.lblGoal.visible = true;
            this.lblGoalInfo.visible = true;
            this.lblGoal.setString(game.utils.sprintf(game.local.getValue("watch_reward_ad_count_title"), data.count));
            if (game.playerMan.player.rewardedAdCount >= data.count) {
                this.lblGoalInfo.setString(game.local.getValue("completed_title"));
                completed = true;
            } else {
                this.lblGoalInfo.setString(game.utils.sprintf("%d/%d", game.playerMan.player.rewardedAdCount, data.count));
            }
            break;
        case SkinRewardType.Claimed:
            if (game.playerMan.hasSkin(data.id)) {
                this.lblGoal.visible = false;
                this.lblGoalInfo.visible = false;
                completed = true;
            } else {
                this.lblGoal.setString(_("skin_gift_title"));
                this.lblGoalInfo.setString("--");
            }
            break;
        case SkinRewardType.Purchase:
            if (game.playerMan.hasSkin(data.id)) {
                this.lblGoal.visible = false;
                this.lblGoalInfo.visible = false;
                completed = true;
            } else {
                this.lblGoal.setString(_("skin_purchase_title"));
                this.lblGoalInfo.setString("--");
            }
            break;
    }

    this.lblDiamonds.setString("x" + data.rewardCount);

    //var spriteFrame = cc.spriteFrameCache.getSpriteFrame(data.image + ".png");
    //this.spSkin.setSpriteFrame(spriteFrame);
    //this.lblUsing.setString(_("selected_title"));

    //this.lblUsing.visible = false;
    //this.ndSelect.visible = false;
    this.btnSelect.enabled = false;

    var claimed = game.playerMan.isTaskClaimed(this.taskCfg.id);
    this.ndSelect.visible = true;

    if (completed) {
        if (!claimed) {
            this.btnSelect.enabled = true;
            this.lblSelect.setString(game.local.getValue("claim_title"));
        } else {
            this.lblSelect.setString(game.local.getValue("claimed_title"));
        }
    } else {
        this.lblSelect.setString(_("uncompleted_title"));
    }
};

TaskItemController.prototype.getContentSize = function () {
    return this.spBgSelected.getContentSize();
};

TaskItemController.prototype.selectClicked = function () {
    AudioHelper.playBtnSound();
    cc.log("task claimed:" + game.playerMan.isTaskClaimed(this.taskCfg.id));
    if (!game.playerMan.isTaskClaimed(this.taskCfg.id)) {
        cc.log("task set claimed:" + this.taskCfg.id);
        game.playerMan.setTaskClaimed(this.taskCfg.id);
        var rewardCount = this.taskCfg.rewardCount;
        game.popupMan.popupRewardNoticeDlg(game.local.getValue("reward_video_diamonds"),
            function () {
                game.playerMan.addDiamonds(rewardCount);
            }, "icon_diamond_1.png", rewardCount);
        this.refresh();
        game.eventDispatcher.dispatchEvent(EventsName.TASK_UPDATE);
    }
};

TaskItemController.createFromCCB = function() {
    return game.utils.loadNodeFromCCB("res/menu/task_item_view.ccbi", null, "TaskItemController", new TaskItemController());
};

module.exports = TaskItemController;
},{"../enum/BoostType":89,"../enum/SkinRewardType":96,"../events/EventsName":98}],76:[function(require,module,exports){
/**
 * Created by qinning on 2017/12/15.
 */
var EventsName = require("../events/EventsName");

var ColorList = [
    cc.color(255, 106, 107),
    cc.color(90, 181, 110),
    cc.color(83, 183, 209),
    cc.color(243, 77, 151),
    cc.color(153, 95, 206),
    cc.color(57, 103, 249),
    cc.color(249, 112, 49),
    cc.color(232, 59, 20),
    cc.color(84, 235, 43),
    cc.color(50, 84, 117),
    cc.color(127, 127, 127)
];


var TitleController = function () {
    BaseCCBController.call(this);
    this.lbCoins = null;

    this.spCoinsAdd = null;
    this.btnAdd = null;

    this.bgNode = null;
};

game.utils.inherits(TitleController, BaseCCBController);

TitleController.prototype.onEnter = function () {
    game.eventDispatcher.addEventListener(EventsName.COINS_UPDATE, this.refresh, this);
};

TitleController.prototype.onExit = function () {
    game.eventDispatcher.removeEventListener(EventsName.COINS_UPDATE, this.refresh, this);
};

TitleController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);
    this.refresh();
    this.randomSquares();

    if (TitleController.time > 0) {
        game.utils.playCCBAnimation(this.rootNode, "Default Timeline");
    }
    TitleController.time ++;
};

TitleController.prototype.randomSquares = function () {
    for (var i = 0; i < 20; ++i) {
        var square = new cc.Sprite("#square_circle.png");

        square.setPosition(this.getRandomPos());
        square.setColor(ColorList[game.utils.randomNextInt(ColorList.length - 1)]);
        square.setOpacity(15);
        square.setScale(1.4);

        var pos1 = this.getRandomPos();
        square.setPosition(pos1);
        var pos2 = this.getRandomPos();
        var t = this.getTime(pos1, pos2);
        var moveTo1 = cc.moveTo(t, pos2);
        var moveTo2 = cc.moveTo(t, pos1);
        var action = cc.sequence(moveTo1, moveTo2).repeatForever();
        square.runAction(action);
        square.runAction(cc.rotateBy(20, 360).repeatForever());
        this.bgNode.addChild(square);
    }
};

TitleController.prototype.getTime = function (pos1, pos2) {
    return cc.pDistance(pos1, pos2) / 20;
};

TitleController.prototype.getRandomPos = function () {
    return cc.p(game.utils.randomNextInt(cc.winSize.width * 1.5) - cc.winSize.width * 0.25,
        game.utils.randomNextInt(cc.winSize.height * 1.5) - cc.winSize.height * 0.25);
};

TitleController.prototype.initWith = function (replayCallback, nextCallback) {
    this._replayCallback = replayCallback;
    this._nextCallback = nextCallback;
};

TitleController.prototype.refresh = function () {
    this.lbCoins.setString(game.playerMan.player.coins);
};

TitleController.prototype.disableAddCoins = function () {
    this.spCoinsAdd.visible = false;
    this.btnAdd.enabled = false;
    game.utils.playCCBAnimation(this.rootNode, "none");
};

TitleController.prototype.storeClicked = function (sender) {
    AudioHelper.playBtnSound();
    game.popupMan.popupStoreDlg();
};

TitleController.createFromCCB = function() {
    var node = game.utils.loadNodeFromCCB("res/menu/title_view.ccbi", null, "TitleController", new TitleController());
    return node;
};

TitleController.time = 0;

module.exports = TitleController;
},{"../events/EventsName":98}],77:[function(require,module,exports){
var Wheel = require("../../common/wheel/Wheel");
var ConfigMan = require("../config/ConfigMan");
var BoostType = require("../enum/BoostType");
var StoreHelper = require("../model/StoreHelper");
var GameMan = require("../model/GameMan");

var WheelController = function () {
    BaseCCBController.call(this);
    this.WHEEL_TIME = 5;
    this.WHEEL_ITEM_ANGLE = 90;

    this.WHEEL_ICON_TAG = 100;
    this.WHEEL_NUM_TAG = 200;

    this.WHEEL_COUNT = 4;

    this.ndWheel = null;
    this.lblLeft = null;
    this.lblRight = null;
    this.btnLeft = null;
    this.btnRight = null;

    this.btnClose = null;

    this.lblLeftTips = null;
    this.lblRightTips = null;

    this.spTitleCn = null;
    this.spTitleEn = null;

    //this.btnCloseCn = null;
    //this.btnCloseEn = null;




    /**
     * @type {Wheel}
     */
    this.wheel = null;

    this.wheelIcons = null;
    this.wheelNums = null;
};

game.utils.inherits(WheelController, BaseCCBController);

WheelController.prototype.onEnter = function () {
    BaseCCBController.prototype.onEnter.call(this);
    this.intervalKey = setInterval(this.onUpdate.bind(this), 1000);
};

WheelController.prototype.onExit = function () {
    clearInterval(this.intervalKey);
    BaseCCBController.prototype.onExit.call(this);
};

WheelController.prototype.onDidLoadFromCCB = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);

    //this.btnCloseCn.visible = false;
    //this.btnCloseEn.visible = false;
    this.spTitleCn.visible = false;
    this.spTitleEn.visible = false;
    if (game.local.isChinese()) {
        //this.btnCloseCn.visible = true;
        this.spTitleCn.visible = true;
    } else {
        //this.btnCloseEn.visible = true;
        this.spTitleEn.visible = true;
    }

    this.wheelIcons = [];
    this.wheelNums = [];
    for (var i = 0; i < this.WHEEL_COUNT; ++i) {
        var wheelIcon = game.utils.seekNodeByTag(this.ndWheel, this.WHEEL_ICON_TAG + i);
        var wheelNum = game.utils.seekNodeByTag(this.ndWheel, this.WHEEL_NUM_TAG + i);
        this.wheelIcons.push(wheelIcon);
        this.wheelNums.push(wheelNum);
    }

    this.initWheelUI();
    this.updateWheelItems();
    this.wheel = new Wheel(this.ndWheel);
};

WheelController.prototype.initWheelUI = function () {
    var wheels = ConfigMan.getInstance().getWheelList();
    for (var i = 0; i < wheels.length; ++i) {
        var wheelIcon = this.wheelIcons[i];
        var wheelNum = this.wheelNums[i];
        wheelIcon.setSpriteFrame(wheels[i].image);
        wheelNum.setString("x" + wheels[i].count);
    }
};

WheelController.prototype.isShowRewardedVideo = function () {
    return game.adsManager.isRewardVideoReady();
};

WheelController.prototype.onUpdate = function () {
    this.updateWheelItems();
};

WheelController.prototype.isFreeWheel = function () {
    var leftTime = GameMan.getInstance().getWheelLeftTime();
    if (leftTime <= 0) {
        return true;
    }
    return false;
};

WheelController.prototype.getLeftHour = function () {
    var leftTime = GameMan.getInstance().getWheelLeftTime();
    return Math.ceil(leftTime / (60 * 60 * 1000));
};

WheelController.prototype.updateWheelItems = function () {
    this.lblLeft.setString(_("wheel_reward_video_btn"));
    this.lblLeftTips.setString(_("wheel_reward_video_tips"));
    //if (this.isShowRewardedVideo()) {
    //    this.btnLeft.enabled = true;
    //} else {
    //    this.btnLeft.enabled = false;
    //}
    //    this.lblLeft.setString(_("wheel_share_btn"));
    //    this.lblLeftTips.setString(_("wheel_share_tips"));
    //}
    //this.lblLeft.setString(_("wheel_share_btn"));
    //this.lblLeftTips.setString("");//_("wheel_share_tips"));

    this.lblRight.setString(_("wheel_free_btn"));
    var freeWheel = this.isFreeWheel();
    this.btnRight.enabled = freeWheel;
    if (freeWheel) {
        this.lblRightTips.setString("");
    } else {
        this.lblRightTips.setString(game.utils.sprintf(_("wheel_free_tips"), this.getLeftHour()));
    }
};

WheelController.prototype.getRandomWheel = function () {
    var wheels = ConfigMan.getInstance().getWheelList();
    var randomNum = game.utils.randomNextInt(100);
    console.log("randomNum:" + randomNum);
    var sumProbability = 0;
    for (var i = 0; i < wheels.length; ++i) {
        if (sumProbability + wheels[i].probability > randomNum) {
            return wheels[i];
        } else {
            sumProbability += wheels[i].probability;
        }
    }
    return null;
};

WheelController.prototype.startWheel = function () {
    this.wheelConfig = this.getRandomWheel();
    var wheelId = this.wheelConfig.id;
    console.log("random wheel id:" + wheelId);
    this.wheel.rotate(this.WHEEL_TIME, 360 * 3 + (wheelId - 1) * 90, this.WHEEL_ITEM_ANGLE, this.onRotateEnd.bind(this));
    this.btnClose.enabled = false;
    this.wheelInterval = setInterval(function () {
        game.audioPlayer.playEffectByKey("wheel_pin");
    }, 100);
};

WheelController.prototype.onRotateEnd = function () {
    clearInterval(this.wheelInterval);
    game.audioPlayer.playEffectByKey("wheel_stop");
    setTimeout(this.onShowReward.bind(this), 1000);
};

WheelController.prototype.onShowReward = function () {
    var wheel = this.wheelConfig;
    game.popupMan.popupRewardDoubleTipDlg(wheel.image, wheel.count, function (double) {
        var count = double ? wheel.count * 2 : wheel.count;
        var splitCount = 0;
        var threeBallCount = 0;
        if (wheel.type === BoostType.SPLIT) {
            splitCount = count;
        } else if (wheel.type === BoostType.THREE_BALL) {
            threeBallCount = count;
        }
        if (double) {
            StoreHelper.getInstance().popupBoostRewardDlg(splitCount, threeBallCount, function () {
            });
        } else {
            game.playerMan.addBoost(BoostType.SPLIT, splitCount);
            game.playerMan.addBoost(BoostType.THREE_BALL, threeBallCount);
        }
        this.btnClose.enabled = true;
        this.updateWheelItems();
    }.bind(this));
};

WheelController.prototype.leftClicked = function () {
    AudioHelper.playBtnSound();
    var self = this;
    if (this.isShowRewardedVideo()) {
        StoreHelper.getInstance().checkAndShowRewardVideo(game.utils.isIOS() ? "zhuanpan01" : "jili01", function (rewarded) {
            if (rewarded) {
                self.startWheel();
            }
            self.updateWheelItems();
        });
    } else {
        //share
        //var share = GameMan.getInstance().getShareConfig();
        //game.shareManager.wxGroupShare(share, "wheel_share", function (shared) {
        //    if (shared) {
        //        self.startWheel();
        //    } else {
        //        game.utils.showWXToast("需要转发到群");
        //    }
        //});
    }
};

WheelController.prototype.rightClicked = function () {
    AudioHelper.playBtnSound();
    game.playerMan.setLastWheelTime(Date.now());
    this.updateWheelItems();
    this.btnRight.enabled = false;
    this.startWheel();
};

WheelController.prototype.closeClicked = function () {
    AudioHelper.playBtnSound();
    this.close();
};

WheelController.prototype.popup = function () {
    game.dialogManager.popup(this.rootNode);
};

WheelController.prototype.close = function () {
    game.dialogManager.close(this.rootNode);
};

WheelController.createFromCCB = function() {
    var ccbiName = game.utils.isSelfGame() ? "res/wheel/wheel_view.ccbi" : "res/wheel/wheel_view_new.ccbi";
    var node = game.utils.loadNodeFromCCB(ccbiName, null, "WheelController", new WheelController());
    return node;
};

module.exports = WheelController;
},{"../../common/wheel/Wheel":32,"../config/ConfigMan":36,"../enum/BoostType":89,"../model/GameMan":99,"../model/StoreHelper":103}],78:[function(require,module,exports){
/**
 * Created by qinning on 2017/12/2.
 */

var Grid = cc.LayerColor.extend({

    col: 0,
    row: 0,

    editing: false,
    used: false,

    ctor: function (color, width, height, col, row) {
        this._super(color, width, height);
        this.ignoreAnchor = false;
        //this.type = type;
        this.col = col;
        this.row = row;
    },

    setColor: function (color) {
        this._super(color);
    }
});

module.exports = Grid;
},{}],79:[function(require,module,exports){
var ConfigMan = require("../../config/ConfigMan");
var PlayerMan = require("../../model/PlayerMan");
var LevelConfig = require("../../config/LevelConfig");
//var AdsReminderController = require("../../controller/AdsReminderController");

var ColorConfigs = [
    cc.color(252, 178, 0),
    cc.color(81, 229, 12),
    cc.color(27, 226, 255),
    cc.color(255, 252, 29),
    cc.color(255, 56, 56),
    cc.color(248, 70, 255),
    cc.color(255, 129, 17),
    cc.color(57, 103, 249),
    cc.color(90, 181, 110),

    cc.color(255, 90, 141),
    cc.color(242, 86, 9),
    cc.color(66, 46, 176),
    cc.color(144, 85, 222),
    cc.color(23, 167, 104),
    cc.color(176, 72, 206),
    cc.color(147, 192, 26),
    cc.color(55, 70, 219)
];

var GrayColor = cc.color.GRAY;
var LightGrayColor = cc.color(130, 130, 130);
var StatusList = ["brick", "obstacle", "delete"];

var EditorScene = cc.Scene.extend({

    CONTENT_WIDTH: 600,
    CONTENT_HEIGHT: 600,

    COL: 50,
    ROW: 50,

    GRID_WIDTH: 9,
    GRID_HEIGHT: 9,

    GAP_WIDTH: 3,
    GAP_HEIGHT: 3,

    brickRects: null,

    obstacleRects: null,

    //_isBrick: true,
    _status: "brick",

    _brickItem: null,

    _levelEditBox: null,

    ctor: function () {
        game.playerMan = PlayerMan.getInstance();
        game.playerMan.initData();

        //var LogicMan = require("../../../common/model/LogicMan");
        //LogicMan.getInstance().startGame(true);
        //cc.BuilderReader.registerController("AdsReminderController", new AdsReminderController());

        this._super();

        var scale = 1.5;
        this.xOffset = (cc.winSize.width - this.CONTENT_WIDTH * scale) * 0.5;
        this.yOffset = (cc.winSize.height - this.CONTENT_HEIGHT * scale) * 0.5;

        this.brickRects = [];
        this.obstacleRects = [];

        this.currentRects = this.brickRects;
        this.selectColor = ColorConfigs[0];
        this.selectColorIndex = 0;

        this.gridNode = new cc.Node();
        this.addChild(this.gridNode);
        this.gridNode.x = this.xOffset;
        this.gridNode.y = this.yOffset;
        this.gridNode.scale = scale;

        this.initGrids();
        this.initButtons();
        this.initColorButtons();
        this.initEditBox();

        if (game.gameMan.levelCfg) {
            this.loadConfig(game.gameMan.levelCfg.originalConfig);
        }
    },

    initEditBox: function () {
        var xOffset = 200;
        this._levelEditBox = this.createEditBox("", "Input LevelId", cc.p(cc.winSize.width * 0.5 - xOffset, 100));
        this._boostEditBox = this.createEditBox("1", "Input Boost Probability", cc.p(cc.winSize.width * 0.5, 100));
        this._star3EditBox = this.createEditBox("90", "Input 3Star Time", cc.p(cc.winSize.width * 0.5 + xOffset, 100));
    },

    createEditBox: function (content, placeHolder, position) {
        var editBox = new cc.EditBox(cc.size(270, 100), new cc.Scale9Sprite("res/common/blank.png"),
            new cc.Scale9Sprite("res/common/blank.png"));
        editBox.setString(content);
        editBox.setPosition(position);
        editBox.setFontColor(cc.color(255, 255, 255));
        //editBox.setHintCo
        editBox.setPlaceholderFontColor(cc.color(255, 0, 0));
        editBox.setPlaceHolder(placeHolder);
        editBox.setDelegate(this);
        this.addChild(editBox);
        return editBox;
    },

    initButtons: function () {
        // Bugs Item
        var brickItem = new cc.MenuItemFont("Brick", this.onBrickTypeChange, this);
        var saveItem = new cc.MenuItemFont("Save", this.onSave, this);
        var deleteItem = new cc.MenuItemFont("Back", this.onDelete, this);
        //var refreshItem = new cc.MenuItemFont("Refresh", this.onRefresh, this);
        var addItem = new cc.MenuItemFont("Add", this.onAdd, this);
        var reduceItem = new cc.MenuItemFont("Reduce", this.onReduce, this);
        var loadItem = new cc.MenuItemFont("Load", this.onLoad, this);
        var previewItem = new cc.MenuItemFont("Preview", this.onPreview, this);
        var menu = new cc.Menu(brickItem, saveItem, deleteItem, addItem, reduceItem, loadItem, previewItem);

        menu.alignItemsHorizontally();
        this.addChild(menu);
        menu.setPosition(cc.p(cc.winSize.width * 0.5, cc.winSize.height - 20));
        this._brickItem = brickItem;

        this._gridLabel = new cc.LabelTTF("", "Arial", 40);
        this.addChild(this._gridLabel);

        this._gridLabel.setAnchorPoint(cc.p(0, 0.5));

        this._gridLabel.setPosition(cc.p(100, cc.winSize.height - 80));

        this._gridLabel.setString(this.COL + "x" + this.ROW);
    },

    initColorButtons: function () {

        var items = [];
        for (var i = 0; i < ColorConfigs.length; ++i) {
            var colorItem = new cc.MenuItemFont(" O ", this.onSelectColor, this);
            colorItem.setColor(ColorConfigs[i]);
            colorItem.setTag(i);
            items.push(colorItem);
        }
        var menu = new cc.Menu(items.slice(0, items.length / 2 + 1));
        menu.alignItemsHorizontally();
        menu.setPosition(cc.p(cc.winSize.width * 0.5, cc.winSize.height - 55));
        this.addChild(menu);

        var bottomMenu = new cc.Menu(items.slice(items.length / 2 + 1));
        bottomMenu.alignItemsHorizontally();
        bottomMenu.setPosition(cc.p(cc.winSize.width * 0.5, cc.winSize.height - 90));
        this.addChild(bottomMenu);
    },

    onLoad: function (sender) {
        var levelString = this._levelEditBox.getString();
        var levelId = parseInt(levelString);
        if (isNaN(levelId)) {
            alert("level id not found:" + levelString);
        } else {
            var levelConfig = ConfigMan.getInstance().getOriginalLevelConfig(levelId);
            if (!levelConfig) {
                alert("level id not found:" + levelString);
            } else {
                this.loadConfig(levelConfig);
            }
        }
    },

    onPreview: function (sender) {
        var obj = this.generateLevelObj();
        var levelConfig = new LevelConfig();
        levelConfig.unmarshal(obj);
        levelConfig.originalConfig = obj;
        game.gameMan.levelCfg = levelConfig;
        //var scene = new GameScene();
        var GameScene = require("./GameScene");
        //cc.winSize.width = cc.winSize.height * 0.5;
        cc.director.runScene(new GameScene());
    },

    generateLevelObj: function () {
        var boostProbability = Number(this._boostEditBox.getString());
        if (isNaN(boostProbability)) {
            boostProbability = 1;
        }

        var starTime = Number(this._star3EditBox.getString());
        if (isNaN(starTime)) {
            starTime = 90;
        }

        var obj = {
            b: boostProbability,
            starTime: starTime,
            pixelWidth: this.CONTENT_WIDTH,
            pixelHeight: this.CONTENT_HEIGHT,
            width: this.COL,
            height: this.ROW,
            bricks: this.brickRects,
            obstacles: this.obstacleRects
        };
        return obj;
    },

    loadConfig: function (config) {
        this.resetOldView();

        this.CONTENT_WIDTH = config.pixelWidth;
        this.CONTENT_HEIGHT = config.pixelHeight;
        this.COL = config.width;
        this.ROW = config.height;
        this.brickRects = config.bricks;
        this.obstacleRects = config.obstacles;

        //this.updateView();
        var width = this.CONTENT_WIDTH / this.COL;
        var height = this.CONTENT_HEIGHT / this.ROW;
        this.GRID_WIDTH = width * 0.75;
        this.GRID_HEIGHT = height * 0.75;
        this.GAP_WIDTH = width - this.GRID_WIDTH;
        this.GAP_HEIGHT = height - this.GRID_HEIGHT;

        this.initGrids();

        //this.brickRects = [];
        //this.obstacleRects = [];
        this.currentRects = this.brickRects;
        //this._isBrick = true;
        //this._status = "brick";
        //this._brickItem.setString("Brick");
        this._gridLabel.setString(this.COL + "x" + this.ROW);

        for (var i = 0; i < this.brickRects.length; ++i) {
            var brickRect = this.brickRects[i];
            this.markOccupiedWithRect(brickRect, ColorConfigs[brickRect[4] - 1]);
        }
        for (var i = 0; i < this.obstacleRects.length; ++i) {
            var brickRect = this.obstacleRects[i];
            this.markOccupiedWithRect(brickRect,  cc.color.WHITE);
        }
        this._boostEditBox.setString(config.boostProbability);
        this._star3EditBox.setString(config.starTime);
        //this.currentRects =
    },

    onSelectColor: function (sender) {
        this.selectColor = ColorConfigs[sender.getTag()];
        this.selectColorIndex = sender.getTag();
    },

    resetOldView: function () {
        this.forEachGrids(function (grid) {
            grid.removeFromParent();
        });
        this.grids = [];
    },

    updateView: function () {
        var width = this.CONTENT_WIDTH / this.COL;
        var height = this.CONTENT_HEIGHT / this.ROW;
        this.GRID_WIDTH = width * 0.75;
        this.GRID_HEIGHT = height * 0.75;
        this.GAP_WIDTH = width - this.GRID_WIDTH;
        this.GAP_HEIGHT = height - this.GRID_HEIGHT;

        this.initGrids();

        this.brickRects = [];
        this.obstacleRects = [];
        this.currentRects = this.brickRects;
        //this._isBrick = true;
        this._status = "brick";
        this._brickItem.setString("Brick");

        this._gridLabel.setString(this.COL + "x" + this.ROW);
    },

    onAdd: function () {
        this.resetOldView();
        this.COL += 4;
        this.ROW += 4;
        this.updateView();
    },

    onReduce: function () {
        this.resetOldView();
        this.COL -= 4;
        this.ROW -= 4;
        this.updateView();
    },


    onSave: function () {
        var obj = this.generateLevelObj();

        cc.log("results:" + JSON.stringify(obj));

        //alert(JSON.stringify(obj));
        var blob = new Blob([JSON.stringify(obj)]);
        var tag = document.createElement("a");
        tag.download = "level.json";
        tag.href = URL.createObjectURL(blob);
        tag.click();
        URL.revokeObjectURL(blob);
    },

    onDelete: function () {
        this.deleteLatestRect();
    },

    onRefresh: function () {
        this.reset();
    },

    onBrickTypeChange: function () {
        this._status = StatusList[(StatusList.indexOf(this._status) + 1) % StatusList.length];
        //this._isBrick = !this._isBrick;
        this._brickItem.setString(this._status);
        if (this._status === "obstacle") {
            this.currentRects = this.obstacleRects;
        } else if (this._status === "brick") {
            this.currentRects = this.brickRects;
        } else {
            this.currentRects = null;
        }
    },

    initGrids: function () {
        this.grids = [];
        var Grid = require("../entity/Grid");
        for (var localCol = 0; localCol < this.COL; ++localCol) {
            this.grids.push([]);
            for (var localRow = 0; localRow < this.ROW; ++localRow) {
                var grid = new Grid(LightGrayColor, this.GRID_WIDTH, this.GRID_HEIGHT, localCol, localRow);
                this.gridNode.addChild(grid);
                grid.setPosition(this.getGridPos(localCol, localRow));
                this.grids[localCol].push(grid);
                this.markGrayHint(grid, localCol, localRow);
                grid._color = grid.color;
            }
        }
    },

    markGrayHint: function (grid, localCol, localRow) {
        var grayColor = GrayColor;
        var isLeft = (this.COL / localCol) > 2;
        var isBottom = (this.ROW / localRow) > 2;
        if (localCol === Math.floor(this.COL / 2) ||
            localCol === Math.floor(this.COL / 2) - 1 ||
            localRow === Math.floor(this.ROW / 2) ||
            localRow === Math.floor(this.ROW / 2) - 1
        ) {
            grid.setColor(grayColor);
        }

        var iii = isLeft ? 4 : 0;

        if (localCol % 5 === iii) {
            grid.setColor(grayColor);
        }

        var jjj = isBottom ? 4 : 0;

        if (localRow % 5 === jjj) {
            grid.setColor(grayColor);
        }

        //iii = isLeft ? 9 : 0;
        //jjj = isBottom ? 9 : 0;
        //
        //if (localCol % 10 === iii && localRow % 10 === jjj) {
        //    grid.setColor(cc.color.YELLOW);
        //}
    },

    reset: function () {
        for (var localCol = 0; localCol < this.COL; ++localCol) {
            for (var localRow = 0; localRow < this.ROW; ++localRow) {
                this.grids[localCol][localRow].editing = false;
                this.grids[localCol][localRow].setColor(LightGrayColor);
                this.grids[localCol][localRow].used = false;

                this.markGrayHint(this.grids[localCol][localRow], localCol, localRow);
            }
        }
        this.brickRects = [];
        this.obstacleRects = [];
        this.currentRects = this.brickRects;
        //this._isBrick = true;
        this._status = "brick";
        this._brickItem.setString("Brick");
    },

    onEnter:function () {
        this._super();
        cc.eventManager.addListener({
            event: cc.EventListener.TOUCH_ONE_BY_ONE,
            swallowTouches: true,
            onTouchBegan: this.onTouchBegan.bind(this),
            onTouchMoved: this.onTouchMoved.bind(this),
            onTouchEnded: this.onTouchEnded.bind(this),
            onTouchCancelled: this.onTouchCancelled.bind(this)
        }, this.gridNode);

        //cc.eventManager.addListener({
        //    event: cc.EventListener.KEYBOARD,
        //    onKeyReleased: function (keyCode, event) {
        //        if (keyCode === cc.KEY.backspace) {
        //            //cc.director.end();
        //            this.deleteLatestRect();
        //        }
        //    }.bind(this)
        //}, this);
    },

    onExit: function () {
        this._super();
    },

    getGridPos: function (localCol, localRow) {
        var gridSize = this.getGridSize();
        return cc.p((gridSize.width + this.GAP_WIDTH) * (localCol + 0.5),
            (gridSize.height + this.GAP_HEIGHT) * (localRow + 0.5));
    },

    getGridSize: function () {
        return cc.size(this.GRID_WIDTH, this.GRID_HEIGHT);
    },

    getFullGridSize: function () {
        return cc.size(this.GRID_WIDTH + this.GAP_WIDTH, this.GRID_HEIGHT + this.GAP_HEIGHT);
    },

    onTouchBegan:function(touch, event) {
        var grid = this.getClosestGrid(touch);
        if (!grid) {
            return false;
        }
        if (this._status === "delete") {
            this.firstGrid = grid;
            // grid.setColor(grid._color);
        } else {
            if (grid.used) {
                return false;
            }
            this.firstGrid = grid;
            grid.setColor(this.getCurrentColor());
        }
        return true;
    },

    onTouchMoved:function(touch, event) {
        if (this._status === "delete") {
            this.touchDelete(touch);
        } else {
            this.touchDraw(touch);
        }
        return true;
    },

    onTouchEnded:function(touch, event) {
        if (this._status === "delete") {
            this.touchDelete(touch);
        } else {
            this.touchDraw(touch);
        }

        if (this.firstGrid && this.lastGrid) {
            var region = this.getRegion(this.firstGrid, this.lastGrid);
            var index = this.selectColorIndex + 1;
            if (this._status !== "brick") {
                index = 0;
            }
            var rect = [region.minCol, region.minRow,
                region.maxCol - region.minCol + 1, region.maxRow - region.minRow + 1, index];
            var ccRect = cc.rect(rect[0], rect[1], rect[2], rect[3]);
            if (this._status === "delete") {
                this.deleteRectFromRects(ccRect, this.brickRects);
                this.deleteRectFromRects(ccRect, this.obstacleRects);
                this.forEachGrids(function (grid) {
                    grid.deleted = false;
                });
            } else {
                this.currentRects.push(rect);
                this.markOccupiedWithRect(rect, null);
                this.forEachGrids(function (grid) {
                    grid.editing = false;
                });
            }
        }

        this.firstGrid = null;
        this.lastGrid = null;
    },

    deleteRectFromRects: function (ccRect, rects) {
        for (var i = rects.length - 1; i >= 0; --i) {
            var brickRect = rects[i];
            var ccBrickRect = cc.rect(brickRect[0], brickRect[1], brickRect[2], brickRect[3]);
            var overlapsRect = cc.rectIntersection(ccRect, ccBrickRect);
            if (overlapsRect.width <= 0 || overlapsRect.height <= 0) {
                continue;
            }
            var resultRects = this.getOverlapsRects(overlapsRect, ccBrickRect);
            rects.splice(i, 1);
            for (var j = 0; j < resultRects.length; ++j) {
                rects.push(this.convertToJsonList(resultRects[j], brickRect[4]));
            }
        }
    },

    convertToJsonList: function (rect, color) {
        return [rect.x, rect.y, rect.width, rect.height, color];
    },

    getOverlapsRects: function (overlapsRect, brickRect) {
        var results = [
            cc.rect(brickRect.x, brickRect.y, brickRect.width, overlapsRect.y - brickRect.y),
            cc.rect(brickRect.x, cc.rectGetMaxY(overlapsRect), brickRect.width, cc.rectGetMaxY(brickRect) - cc.rectGetMaxY(overlapsRect)),
            cc.rect(brickRect.x, overlapsRect.y, overlapsRect.x - brickRect.x, overlapsRect.height),
            cc.rect(cc.rectGetMaxX(overlapsRect), overlapsRect.y, cc.rectGetMaxX(brickRect) - cc.rectGetMaxX(overlapsRect), overlapsRect.height)
        ];
        console.log("results:" + JSON.stringify(results));
        var rects = [];
        for (var i = results.length - 1; i >= 0; --i) {
            var rect = results[i];
            if (rect.width <= 0 || rect.height <= 0) {
                continue;
            }
            rects.push(rect);
        }
        return rects;
    },

    //markOccupied: function () {
    //    var region = this.getRegion(this.firstGrid, this.lastGrid);
    //
    //    for (var localCol = region.minCol; localCol <= region.maxCol; ++localCol) {
    //        for (var localRow = region.minRow; localRow <= region.maxRow; ++localRow) {
    //            this.grids[localCol][localRow].used = true;
    //        }
    //    }
    //},

    markOccupiedWithRect: function (rect, color) {
        for (var localCol = rect[0]; localCol < rect[0] + rect[2]; ++localCol) {
            for (var localRow = rect[1]; localRow < rect[1] + rect[3]; ++localRow) {
                this.grids[localCol][localRow].editing = false;
                this.grids[localCol][localRow].used = true;
                if (color) {
                    this.grids[localCol][localRow].setColor(color);
                }
            }
        }
    },

    isOccupied: function (grid) {
        var region = this.getRegion(this.firstGrid, grid);
        for (var localCol = region.minCol; localCol <= region.maxCol; ++localCol) {
            for (var localRow = region.minRow; localRow <= region.maxRow; ++localRow) {
                if (this.grids[localCol][localRow].used) {
                    return true;
                }
            }
        }
        return false;
    },

    touchDraw: function (touch) {
        if (!this.firstGrid) {
            return false;
        }
        var grid = this.getClosestGrid(touch);

        if (!grid) {
            return false;
        }

        if (grid === this.lastGrid) {
            return false;
        }

        if (this.isOccupied(grid)) {
            return false;
        }
        this.lastGrid = grid;
        this.clearRect();
        this.drawRect(grid);
        return true;
    },

    touchDelete: function (touch) {
       if (!this.firstGrid) {
           return false;
       }
       var grid = this.getClosestGrid(touch);

       if (!grid) {
           return false;
       }

       if (grid === this.lastGrid) {
           return false;
       }

       // if (this.isOccupied(grid)) {
       //     return false;
       // }
       this.lastGrid = grid;
       // this.clearRect();
       // this.drawRect(grid);
        this.drawDeleteRect(grid);
    },

    deleteLatestRect: function () {
        var rect = this.currentRects.pop();
        if (rect) {
            for (var localCol = rect[0]; localCol < rect[0] + rect[2]; ++localCol) {
                for (var localRow = rect[1]; localRow < rect[1] + rect[3]; ++localRow) {
                    var grid = this.grids[localCol][localRow];
                    grid.setColor(grid._color);
                    grid.used = false;
                }
            }
        }
    },

    clearRect: function () {
        this.forEachGrids(function (grid) {
            if (grid.editing && !grid.used) {
                grid.setColor(grid._color);
                grid.editing = false;
            }
        });
    },

    drawRect: function (grid) {
        var region = this.getRegion(this.firstGrid, grid);

        for (var localCol = region.minCol; localCol <= region.maxCol; ++localCol) {
            for (var localRow = region.minRow; localRow <= region.maxRow; ++localRow) {
                this.grids[localCol][localRow].editing = true;
                this.grids[localCol][localRow].setColor(this.getCurrentColor());
            }
        }
    },

    forEachGrids: function (cb) {
        for (var localCol = 0; localCol < this.COL; ++localCol) {
            for (var localRow = 0; localRow < this.ROW; ++localRow) {
                var grid = this.grids[localCol][localRow];
                cb(grid);
            }
        }
    },

    drawDeleteRect: function (grid) {
        var region = this.getRegion(this.firstGrid, grid);

        this.forEachGrids(function (grid) {
            if (grid.deleted) {
                grid.setColor(grid._showColor);
                grid.deleted = false;
            }
        });

        for (var localCol = region.minCol; localCol <= region.maxCol; ++localCol) {
            for (var localRow = region.minRow; localRow <= region.maxRow; ++localRow) {
                var grid = this.grids[localCol][localRow];
                // grid.editing = false;
                grid.used = false;
                grid.deleted = true;
                grid._showColor = grid.getColor();
                grid.setColor(grid._color);
            }
        }
    },

    getRegion: function (grid1, grid2) {
        var minRow = Math.min(grid1.row, grid2.row);
        var maxRow = Math.max(grid1.row, grid2.row);
        var minCol = Math.min(grid1.col, grid2.col);
        var maxCol = Math.max(grid1.col, grid2.col);
        return {
            minRow: minRow,
            maxRow: maxRow,
            minCol: minCol,
            maxCol: maxCol
        };
    },

    onTouchCancelled:function(touch, event) {
    },

    getClosestGrid: function (touch) {
        var localPos = this.gridNode.convertToNodeSpace(touch.getLocation());
        var gridSize = this.getFullGridSize();

        cc.log("localPos:" + JSON.stringify(localPos));

        var row = Math.floor(localPos.x / gridSize.width);
        var col = Math.floor(localPos.y / gridSize.height);

        cc.log("row:" + row + ",col:" + col);

        return this.grids[row][col];
    },

    getCurrentColor: function () {
        if (this._status === "brick") {
            return this.selectColor;
        } else {
            return cc.color.WHITE;
        }
    }
    //
    //drawRect: function(region, color, clear) {
    //    if (clear){
    //        this._drawNode.clear();
    //    }
    //    if (region == null) {
    //        return;
    //    }
    //    var min = region.getMin();
    //    var max = region.getMax();
    //    max.x += 1;
    //    max.y += 1;
    //    this._drawNode.drawSegment(cc.p(min.x, min.y),
    //        cc.p(min.x, max.y), 1, color);
    //    this._drawNode.drawSegment(cc.p(min.x, max.y),
    //        cc.p(max.x, max.y), 1, color);
    //    this._drawNode.drawSegment(cc.p(max.x, max.y),
    //        cc.p(max.x, min.y), 1, color);
    //    this._drawNode.drawSegment(cc.p(max.x, min.y),
    //        cc.p(min.x, min.y), 1, color);
    //},
    //
    //drawRectFill: function (region, color) {
    //    if (region == null) {
    //        return;
    //    }
    //    this._drawNode.drawRect(region.getMin(), region.getMax(), color, 1, color);
    //}
});

module.exports = EditorScene;
},{"../../config/ConfigMan":36,"../../config/LevelConfig":38,"../../model/PlayerMan":100,"../entity/Grid":78,"./GameScene":80}],80:[function(require,module,exports){
var GameController = require("../../controller/GameController");

var GameScene = cc.Scene.extend({

    ctor: function () {
        this._super();
        var gameNode = GameController.createFromCCB();
        this.addChild(gameNode);
    }
});

module.exports = GameScene;

},{"../../controller/GameController":51}],81:[function(require,module,exports){
var GridType = require("../enum/GridType");
var ShapeType = require("../enum/ShapeType");
var GameMan = require("../model/GameMan");

var Ball = cc.Node.extend({

    type: GridType.BALL,
    body: null,
    sprite: null,
    addScale: 1,
    ctor: function (width) {
        this._super();
        var skinCfg = GameMan.getInstance().getCurrentSkinCfg();
        var image = skinCfg.image + ".png";
        var sprite = new cc.Sprite("#" + image);
        this.addScale = skinCfg.scale;
        this.addChild(sprite);
        this.sprite = sprite;
        this.reset(width);
    },

    reset: function (width) {
        this.sprite.scaleX = width / this.sprite.width * this.addScale;
        this.sprite.scaleY = width / this.sprite.width * this.addScale;
    },

    onExit: function () {
        this._super();
        this.removeBody();
    },

    update: function (dt) {
        if (this.body) {
            var bodyPos = this.body.getPos();
            this.sprite.setPosition(bodyPos);
            this.sprite.setRotation(this.getBodyAngle());
        }
    },

    setAngleVel: function (w) {
        this.body.setAngVel(-cc.radiansToDegrees(w));
    },

    getBodyAngle: function () {
        return -cc.radiansToDegrees(this.body.a);
    },

    initBody: function (space, pos) {
        this.space = space;
        var body = new cp.Body(1, cp.momentForCircle(1, 0, this.sprite.width * this.sprite.scaleX, cp.v(0, 0)));
        var shape = new cp.CircleShape(body, this.sprite.width * this.sprite.scaleX / 2, cp.v(0, 0));
        shape.setElasticity(1);
        shape.setFriction(0);
        this.space.addShape(shape);
        this.space.addBody(body);
        shape.setCollisionType(ShapeType.BALL);
        shape.group = 1;
        body.userData = this;
        this.body = body;
        this.shape = shape;
        this.body.setPos(pos);
        body.setAngVel(3);
        this.update(0);
        //this.sprite.setPosition(pos);
    },

    getPosition: function () {
        return this.sprite.getPosition();
    },

    removeBody: function () {
        //console.log("Ball removeBody");
        if (this.body) {
            this.space.removeBody(this.body);
            this.space.removeShape(this.shape);
            this.body = null;
            this.shape = null;
        }
    },

    setVel: function (directionPos) {
        this.body.setVel(directionPos);
    },

    getVel: function () {
        return this.body.getVel();
    }
});

module.exports = Ball;
},{"../enum/GridType":91,"../enum/ShapeType":95,"../model/GameMan":99}],82:[function(require,module,exports){
/**
 * Created by qinning on 2017/11/8.
 */
var Utils = require("../../common/util/Utils");

var BallPool = {
    MAX_POOL_SIZE: 300,
    _pool: {},

    putInPool: function (name, obj) {
        if (!this._pool[name]) {
            this._pool[name] = [];
        }
        if (this._pool[name].length < this.MAX_POOL_SIZE) {
            obj.retain && obj.retain();
            this._pool[name].push(obj);
        } else {
            cc.log("Symbol pool is full, throw away this symbol:" + name);
        }
    },

    hasObject: function (name) {
        return (this._pool[name] && this._pool[name].length > 0);
    },

    removeObject: function (name, obj) {
        var list = this._pool[name];
        if (list) {
            for (var i = 0; i < list.length; i++) {
                if (obj === list[i]) {
                    // JSB release to avoid memory leak
                    obj.release && obj.release();
                    list.splice(i, 1);
                }
            }
        }
    },

    getFromPool: function (name) {
        if (this.hasObject(name)) {
            var obj = this._pool[name].pop();
            cc.sys.isNative && obj.release && Utils.autoRelease(obj);
            return obj;
        }
    },

    drainAllPools: function () {
        for (var i in this._pool) {
            if (this._pool.hasOwnProperty(i)) {
                for (var j = 0; j < this._pool[i].length; j++) {
                    var obj = this._pool[i][j];
                    // JSB release to avoid memory leak
                    obj.release && obj.release();
                }
            }
        }
        this._pool = {};
    }
};

module.exports = BallPool;
},{"../../common/util/Utils":31}],83:[function(require,module,exports){
/**
 * Created by qinning on 2017/12/2.
 */

var GridType = require("../enum/GridType");
var BoardController = require("../controller/BoardController");
var ShapeType = require("../enum/ShapeType");

var Board = cc.Node.extend({

    type: GridType.BOARD,

    node: null,

    shape: null,

    ctor: function (width) {
        this._super();
        this.node = BoardController.createFromCCB(width);
        this.addChild(this.node);

        this.width = this.node.controller.ndBoard.width + 16;
        this.height = this.node.controller.ndBoard.height;
    },

    onExit: function () {
        this._super();
        this.removeBody();
    },

    removeBody: function () {
        //console.log("Board removeBody");
        if (this.body) {
            //this.space.removeBody(this.body);
            this.space.removeStaticShape(this.shape);
            this.body = null;
            this.shape = null;
        }
    },

    initBody: function (space, pos) {
        this.setPosition(pos);
        this.space = space;

        var body = new cp.Body(Infinity, Infinity);
        var shape = new cp.BoxShape(body, this.width, this.height);
        shape.setElasticity(1);
        shape.setFriction(0);
        shape.setCollisionType(ShapeType.BOARD);
        this.space.addStaticShape(shape);
        body.setPos(pos);
        body.userData = this;
        this.body = body;
        this.shape = shape;
        this.space.reindexShape(this.shape);
    },

    setPosX: function (posX) {
        this.x = posX;
        this.body.setPos(cc.p(this.x, this.y));
        this.space.reindexShape(this.shape);
    },

    getBoundingBox: function () {
        return this.node.controller.ndBoard.getBoundingBoxToWorld();
    },

    hideBall: function () {
        this.node.controller.hideBall();
    },

    showBall: function () {
        this.node.controller.showBall();
    }
});

module.exports = Board;
},{"../controller/BoardController":47,"../enum/GridType":91,"../enum/ShapeType":95}],84:[function(require,module,exports){
var BoostType = require("../enum/BoostType");

var Boost = cc.Sprite.extend({

    type: 0,
    ctor: function (type) {
        this.type = type;
        switch (type) {
            case BoostType.LIFE:
                this._super("#icon_new_life.png");
                //this.setColor(cc.color.RED);
                break;
            case BoostType.SPLIT:
                this._super("#icon_3_multiple.png");
                //this.setColor(cc.color.BLUE);
                break;
            case BoostType.THREE_BALL:
                this._super("#icon_3_new.png");
                //this.setColor(cc.color.GREEN);
                break;
        }
    }
});

module.exports = Boost;
},{"../enum/BoostType":89}],85:[function(require,module,exports){
/**
 * Created by qinning on 2017/12/2.
 */

var ShapeType = require("../enum/ShapeType");

var Grid = cc.Node.extend({

    isGift: false,
    type: 0,
    removeable: false,

    sprite: null,
    ctor: function (color, width, height, type) {
        this._super();
        this.ignoreAnchor = false;
        this.sprite = new cc.Sprite("#grid.png");
        this.addChild(this.sprite);
        this.reset(color, width, height, type);
    },

    reset: function (color, width, height, type) {
        this.type = type;
        this.sprite.scaleX = width / this.sprite.width;
        this.sprite.scaleY = height / this.sprite.height;
        this.sprite.setColor(color);
        this.width = width;
        this.height = height;
    },

    onExit: function () {
        this._super();
        this.removeBody();
    },

    setGift: function () {
        this.isGift = true;
        var spriteFrame = cc.spriteFrameCache.getSpriteFrame("grid_gift.png");
        this.sprite.setSpriteFrame(spriteFrame);
        this.sprite.setColor(cc.color.WHITE);
        this.sprite.scaleX = (this.width + 4) / this.sprite.width;
        this.sprite.scaleY = (this.height + 4) / this.sprite.height;
    },

    setColor: function (color) {
        this._super();
        if (!this.isGift) {
            this.sprite.setColor(color);
        }
    },

    initBody: function (space, pos) {
        this.setPosition(pos);
        this.space = space;

        var body = new cp.Body(Infinity, Infinity);
        var shape = new cp.BoxShape(body, this.width, this.height);
        shape.setElasticity(1);
        shape.setFriction(0);
        this.space.addStaticShape(shape);
        shape.setCollisionType(ShapeType.BRICK);
        body.setPos(pos);
        this.body = body;
        body.userData = this;
        this.shape = shape;
        this.space.reindexShape(shape);
    },

    removeBody: function () {
        //console.log("Grid removeBody");
        if (this.shape) {
            this.space.removeStaticShape(this.shape);
            this.shape = null;
            this.body = null;
            this.removeable = false;
        }
    }
});

module.exports = Grid;
},{"../enum/ShapeType":95}],86:[function(require,module,exports){
/**
 * Created by qinning on 2017/12/2.
 */

var Obstacle = cc.Node.extend({

    ctor: function (color, width, height) {
        this._super(color, width, height);
        this.ignoreAnchor = false;
        this.sprite = new cc.Sprite("#grid.png");
        this.addChild(this.sprite);
        this.reset(color, width, height);
    },

    reset: function (color, width, height) {
        this.sprite.scaleX = width / this.sprite.width;
        this.sprite.scaleY = height / this.sprite.height;
        this.width = width;
        this.height = height;
        this.sprite.setColor(color);
    },

    setColor: function (color) {
        this._super();
        this.sprite.setColor(color);
    }
});

module.exports = Obstacle;
},{}],87:[function(require,module,exports){
/**
 * Created by oye on 15-5-17.
 */
var BoostType = require("../enum/BoostType");

var PlayerInfo = function(){
    this.playerId = "";
    this.bestScore = 0;
    this.removedAds = false;
    this.level = 0;
    this.progress = 0;
    this.levelMap = null;
    this.rated = false;

    this.boostMap = null;
    this.coins = 0;
    this.guided = false;

    this.hardLevel = 0;
    this.lastWheelTime = 0;
    this.currentSkinId = 0;
    this.interstitialAdCount = 0;
    this.rewardedAdCount = 0;

    this.createDt = 0;

    this.levelsMap = {};

    this.lastLoginDay = 0;
    this.consecutiveLoginDays = 1;
    this.lastClaimDailyBonusDay = 0;
    this.nextDayTips = false;

    this.skinMap = {};
    this.specialOfferMap = {};

    this.diamonds = 0;

    this.taskMap = {};
    this.skinAdjusted = false;
    this.lastShowRateTime = 0;

    this.rewardAdCountPerDay = {};
    this.rewardAdRecordDay = 0;
};

PlayerInfo.prototype.unmarshall = function (json) {
    this.playerId = json["playerId"];
    this.bestScore = json["bestScore"] || 0;
    this.removedAds = json["removedAds"] || false;
    this.level = json["level"] || 1;
    this.progress = json["progress"] || 0;
    this.levelMap = json["levelMap"] || {};
    this.rated = json["rated"] || false;
    this.coins = json["coins"] || 0;
    this.guided = json["guided"] || false;
    this.boostMap = json["boostMap"] || {};
    this.hardLevel = json["hardLevel"] || 1;
    this.lastWheelTime = json["lastWheelTime"] || 0;
    this.currentSkinId = json["currentSkinId"] || 0;
    this.interstitialAdCount = json["interstitialAdCount"] || 0;
    this.rewardedAdCount = json["rewardedAdCount"] || 0;
    this.createDt = json["createDt"] || Date.now();
    this.levelsMap = json["levelsMap"] || {};
    this.lastLoginDay = json["lastLoginDay"] || 0;
    this.consecutiveLoginDays = json["consecutiveLoginDays"] || 1;
    this.lastClaimDailyBonusDay = json["lastClaimDailyBonusDay"] || 0;
    this.nextDayTips = json["nextDayTips"] || false;
    this.skinMap = json["skinMap"] || {
        "0": true
    };
    this.specialOfferMap = json["specialOfferMap"] || {};
    this.diamonds = json["diamonds"] || 50;
    this.taskMap = json["taskMap"] || {};
    this.skinAdjusted = json["skinAdjusted"] || false;
    this.lastShowRateTime = json["lastShowRateTime"] || 0;
    this.rewardAdCountPerDay = json["rewardAdCountPerDay"] || 0;
    this.rewardAdRecordDay = json["rewardAdRecordDay"] || 0;
};

PlayerInfo.createDefault = function () {
    var playerInfo = new PlayerInfo();
    playerInfo.hintsCount = 5;
    playerInfo.bestScore = 0;
    playerInfo.removedAds = false;
    playerInfo.level = 1;
    playerInfo.progress = 0;
    playerInfo.levelMap = {};
    playerInfo.rated = false;
    playerInfo.coins = 0;
    playerInfo.guided = false;
    playerInfo.boostMap = {};
    playerInfo.boostMap[BoostType.SPLIT] = 5;
    playerInfo.boostMap[BoostType.THREE_BALL] = 5;
    playerInfo.hardLevel = 1;
    playerInfo.lastWheelTime = 0;
    playerInfo.currentSkinId = 0;
    playerInfo.interstitialAdCount = 0;
    playerInfo.rewardedAdCount = 0;
    playerInfo.createDt = Date.now();
    playerInfo.levelsMap = {};
    playerInfo.dailyBonusDt = Date.now();
    playerInfo.lastLoginDay = 0;
    playerInfo.consecutiveLoginDays = 1;
    playerInfo.lastClaimDailyBonusDay = 0;
    playerInfo.nextDayTips = false;
    playerInfo.skinMap = {
        "0": true
    };
    playerInfo.specialOfferMap = {};
    playerInfo.diamonds = 50;
    playerInfo.taskMap = {};
    playerInfo.skinAdjusted = false;
    playerInfo.lastShowRateTime = 0;
    playerInfo.rewardAdCountPerDay = 0;
    playerInfo.rewardAdRecordDay = 0;
    return playerInfo;
};

module.exports = PlayerInfo;

},{"../enum/BoostType":89}],88:[function(require,module,exports){
/**
 * Created by qinning on 2017/12/2.
 */

var ShapeType = require("../enum/ShapeType");

var Wall = cc.Node.extend({

    initBody: function (space, pos) {
        this.setPosition(pos);
        this.space = space;

        var body = new cp.Body(Infinity, Infinity);
        var shape = new cp.BoxShape(body, this.width, this.height);
        shape.setElasticity(1);
        shape.setFriction(0);
        this.space.addStaticShape(shape);
        shape.setCollisionType(ShapeType.WALL);
        body.setPos(cc.pAdd(pos, cc.p(this.width * 0.5, this.height * 0.5)));
        body.userData = this;
        this.space.reindexShape(shape);
    }
});

module.exports = Wall;
},{"../enum/ShapeType":95}],89:[function(require,module,exports){

var BoostType = {
    LIFE: 1,
    THREE_BALL: 2,
    SPLIT: 3,
    GIFT: 4,
    SKIN: 5,
    DIAMOND: 6,
    NUM: 6
};

module.exports = BoostType;
},{}],90:[function(require,module,exports){
/**
 * Created by qinning on 2017/5/7.
 */

var GameMode = {
    GAME_MODE_ENDLESS: 0,
    GAME_MODE_LEVEL: 1
};

module.exports = GameMode;
},{}],91:[function(require,module,exports){

var GridType = {
    OBSTACLE: 0,
    BRICK: 1,
    BALL: 2,
    BOARD: 3
};

module.exports = GridType;
},{}],92:[function(require,module,exports){
/**
 * Created by qinning on 2017/3/25.
 */

var LockStatus = {
    LOCK_STATUS_LOCK: 0,
    LOCK_STATUS_UNLOCK: 1,
    LOCK_STATUS_DOING: 2
};

module.exports = LockStatus;
},{}],93:[function(require,module,exports){

var RankType = {
    Friends: 0,
    Group: 1,
    Global:2
};

module.exports = RankType;
},{}],94:[function(require,module,exports){
/**
 * Created by qinning on 2018/1/1.
 */


var SceneType = {
    NONE: -1,
    LOADING: 0,
    MENU: 1,
    PACKAGE: 2,
    LEVEL: 3,
    GAME: 4
};

module.exports = SceneType;
},{}],95:[function(require,module,exports){

var ShapeType = {
    BALL: 1,
    BRICK: 2,
    BOARD: 3,
    WALL: 4
};

module.exports = ShapeType;
},{}],96:[function(require,module,exports){

var SkinRewardType = {
    None: 0,
    LevelCount: 1,
    WatchAdCount: 2,
    WatchRewardAdCount: 3,
    Claimed: 4,
    Purchase: 5
};

module.exports = SkinRewardType;
},{}],97:[function(require,module,exports){
/**
 * Created by qinning on 2017/12/16.
 */

var StoreType = {
    FREE: 1,
    NEW_3: 2,
    SPLIT: 3,
    REMOVE_ADS: 4,
    RESTORE: 5,
    FIRST_PURCHASE: 6,
    NEW_AND_SPLIT: 7,
    DIAMOND: 8,
    SKIN: 9
};

module.exports = StoreType;
},{}],98:[function(require,module,exports){
/**
 * Created by oye on 15/11/21.
 */

var EventsName = {
    EVENT_NAME_GAME_START: "event_name_start",
    EVENT_NAME_GAME_OVER: "event_name_game_over",
    EVENT_NAME_UPDATE_SCORE: "event_name_update_score",
    EVENT_NAME_UPDATE_LEFT_BULLET: "event_name_update_left_bullet",
    EVENT_NAME_UPDATE_BEST_SCORE: "event_name_update_best_score",
    EVENT_NAME_UPDATE_AUDIO: "event_name_update_audio",
    UPDATE_LEVEL: "update_level",
    COINS_UPDATE: "coins_update",
    REFRESH_BOOST: "refresh_boost",
    UPDATE_SKIN: "update_skin",
    UPDATE_SPECIAL_OFFER: "update_special_offer",
    PURCHASE_END: "purchase_end",
    DIALOG_POPED: "dialog_poped",
    DIALOG_CLOSED: "dialog_closed",
    DIAMONDS_UPDATE: "diamonds_update",
    TASK_UPDATE: "task_update",
    REWARDED_VIDEO_COUNT: "rewarded_video_count"
};

module.exports = EventsName;
},{}],99:[function(require,module,exports){
/**
 * Created by qinning on 15/5/12.
 */
var EventsName = require("../events/EventsName");
var ConfigMan = require("../config/ConfigMan");
var ShareConfig = require("../config/ShareConfig");
//var ConfigMan = require("../config/ConfigMan");


var GameMan = cc.Class.extend({
    FREE_WHEEL_HOURS: 12,

    ONE_HOUR_SECONDS: 60 * 60 * 1000,
    startTime: 0,
    resultCount: 0,
    rated: false,
    endTime: 0,
    canReLife: true,
    distance: 0,
    levelId: 1,
    hardMode: false,
    giftCount: 0,
    lastShowLevel: 0,

    totalFailCount: 0,
    poped3StarTips: false,

    setHardMode: function (hardMode) {
        this.hardMode = hardMode;
    },

    canPop3StarTips: function () {
        return !this.poped3StarTips;
    },

    setPop3StarTips: function () {
        this.poped3StarTips = true;
    },

    isHardMode: function () {
        return this.hardMode;
    },

    getPlayerLevel: function () {
        if (this.isHardMode()) {
            return game.playerMan.getHardLevel();
        } else {
            return game.playerMan.getLevel();
        }
    },

    ctor: function () {
    },

    init: function () {
        this.rated = game.playerMan.player.rated;
        this.chooseLatestLevel();
    },

    chooseLatestLevel: function () {
        if (game.playerMan.getLevel() <= this.getLevelList().length) {
            this.levelId = game.playerMan.getLevel();
        } else {
            this.setHardMode(true);
            this.levelId = game.playerMan.getHardLevel();
        }
    },

    getLevelList: function () {
        return ConfigMan.getInstance().getLevelList();
    },

    updateScore: function () {
        game.eventDispatcher.dispatchEvent(EventsName.EVENT_NAME_UPDATE_SCORE);
    },

    gameOver: function () {
        //game.analyseManager.trackFailedProgressionEvent("level", game.playerMan.getLevel());
        this.resultCount++;
    },

    getCurrentStar: function (costTime) {
        //cc.log("costTime:" + costTime);
        var levelCfg = this.getCurConfig();
        var star = 1;
        if (costTime <= levelCfg.starTime) {
            star = 3;
        } else if (costTime <= levelCfg.starTime * 2) {
            star = 2;
        }
        return star;
    },

    getProgressPercent: function (costTime) {
        var levelCfg = this.getCurConfig();
        return Math.max(0, 1 - (costTime / levelCfg.starTime / 3)) * 100;
    },

    gameWin: function (costTime) {
        var star = this.getCurrentStar(costTime);
        this.currentStar = star;
        var hasPssed = false;
        var levelIdAndStar = this.levelId + "-" + star;
        if (!this.isHardMode()) {
            if (game.playerMan.getLevelStar(this.levelId) > 0) {
                hasPssed = true;
            }
            this.updateLevelStar(this.levelId, star);
            if (!hasPssed) {
                game.analyseManager.trackEvent("level_pass", {
                    "level": this.levelId
                });
                game.analyseManager.trackEvent("level_pass_star", {
                    "level": levelIdAndStar
                });
                cc.log("track event level_pass:" + this.levelId);
            }
            this.resultCount++;
            this.levelId++;
            if (this.levelId <= this.getLevelList().length) {
                game.gcManager.reportScore(this.levelId, game.config.getLeaderBoardKey());
                game.playerMan.setLevel(this.levelId);
            }
        } else {
            if (game.playerMan.getHardLevelStar(this.levelId) > 0) {
                hasPssed = true;
            }
            this.updateHardLevelStar(this.levelId, star);
            if (!hasPssed) {
                game.analyseManager.trackEvent("level_pass_hard", {
                    "level": this.levelId
                });
                game.analyseManager.trackEvent("level_pass_hard_star", {
                    levelStarKey: levelIdAndStar
                });
                cc.log("track event level_pass_hard:" + this.levelId);
            }
            this.resultCount++;
            this.levelId++;
            if (this.levelId <= this.getLevelList().length) {
                game.gcManager.reportScore(this.levelId, game.config.getHardBoardKey());
                game.playerMan.setHardLevel(this.levelId);
            }
        }
    },

    skipLevel: function () {
        if (!this.isHardMode()) {
            this.levelId++;
            if (this.levelId <= this.getLevelList().length) {
                game.playerMan.setLevel(this.levelId);
            }
        } else {
            this.levelId++;
            if (this.levelId <= this.getLevelList().length) {
                game.playerMan.setHardLevel(this.levelId);
            }
        }
    },

    updateLevelStar: function (level, star) {
        var oldStar = game.playerMan.getLevelData(this.levelId, "star") || 0;
        if (star > oldStar) {
            cc.log("updateLevelStar:oldStar:" + oldStar + ",star:" + star);
            game.playerMan.updateLevelData(level, "star", star);
        }
    },

    updateHardLevelStar: function (level, star) {
        var oldStar = game.playerMan.getLevelData(this.levelId, "hardStar") || 0;
        if (star > oldStar) {
            cc.log("updateHardLevelStar:oldStar:" + oldStar + ",star:" + star);
            game.playerMan.updateLevelData(level, "hardStar", star);
        }
    },

    resumeGame: function () {
        this.levelId--;
    },

    chooseLevel: function (levelId) {
        this.levelId = levelId;
    },

    getDisplayLevel: function () {
        return this.levelId;
    },

    getCurConfig: function () {
        var levelList = this.getLevelList();
        if (levelList) {
            return levelList[this.levelId - 1];
        }
        return null;
    },

    hasNextLevel: function () {
        var levelList = this.getLevelList();
        if (this.levelId > levelList.length) {
            return false;
        }
        return true;
    },

    switchFail: function () {
        this.totalFailCount++;
    },

    showAds: function (success) {
        cc.log("GameMan showAds:" + success + ",isNewPlayer:" + game.playerMan.isNewPlayer());
        if (game.playerMan.isNewPlayer()) {
            if (success) {
                if (this.levelId > 4) {
                    this._showInterstitialAds();
                }
            } else {
                if (this.totalFailCount % 2 === 0) {
                    this._showInterstitialAds();
                }
            }
        } else {
            this._showInterstitialAds();
        }
    },

    _showInterstitialAds: function () {
        if (game.playerMan.getLevel() >= 3) {
            var AdsPlace = require("../../common/enum/AdsPlace");
            game.adsManager.showInterstitial(AdsPlace.Pass);
        }
    },

    showRegisterNotification: function () {
        if (this.resultCount > 0 && this.resultCount % 3 === 0) {
            game.logicMan.registerNotification();
        }
    },

    showAdsAndRate: function (success) {
        var count = 4;
        if (cc.sys.os === cc.sys.OS_ANDROID) {
            count = 5;
        }
        var lastShowedRateDay = Math.floor((Date.now() - game.playerMan.player.lastShowRateTime) / (24 * 3600 * 1000));
        if (!this.rated && (this.resultCount > 0 && this.resultCount % count === 0) && lastShowedRateDay >= 2) {
            if (!game.rateManager.launchAppReview()) {
                game.popupMan.popupRateDlg(function () {
                    this.rated = true;
                    game.playerMan.setRated(true);
                }.bind(this), function () {
                    this.rated = true;
                    this.showAds(success);
                }.bind(this));
            } else {
                this.rated = true;
            }
            game.playerMan.setLastShowRateTime();
        } else {
            this.showAds(success);
        }
    },

    restartGame: function () {
        game.logicMan.registerNotification();
        this.startGame();
        game.eventDispatcher.dispatchEvent(EventsName.EVENT_NAME_UPDATE_SCORE);
        game.eventDispatcher.dispatchEvent(EventsName.EVENT_NAME_UPDATE_BG_SPRITE);
    },

    startGame: function () {
        //game.analyseManager.trackStartProgressionEvent("level", game.playerMan.getLevel());
    },

    enterGame: function () {
        //game.analyseManager.trackStartProgressionEvent("level", game.playerMan.getLevel());
    },

    leaveGame: function () {
        this.startTime = 0;
        this.distance = 0;
    },

    canShowRewardedVideo: function () {
        return (this.canReLife && game.adsManager.isRewardVideoReady());
    },

    getShareConfig: function () {
        var shareList = ConfigMan.getInstance().getShareList();
        var randomNum = game.utils.randomNextInt(shareList.length);
        return shareList[randomNum];
    },

    getFriendHelpShare: function () {
        var desc = game.utils.sprintf("砖块破坏者我已经%d关了，帮我继续玩，让我冲上榜首。", game.playerMan.getLevel());
        var shareConfig = this.getShareConfig();
        var share = shareConfig.copy();
        share.desc = desc;
        return share;
    },

    getFriendChallengeShare: function () {
        var desc = game.utils.sprintf("砖块破坏者我已经%d关了，你能超越我吗？", game.playerMan.getLevel());
        var shareConfig = this.getShareConfig();
        var share = shareConfig.copy();
        share.desc = desc;
        return share;
    },

    getWheelLeftTime: function () {
        var lastWheelTime = game.playerMan.getLastWheelTime();
        return (lastWheelTime + this.FREE_WHEEL_HOURS * this.ONE_HOUR_SECONDS - Date.now());
    },

    isFreeWheel: function () {
        var leftTime = this.getWheelLeftTime();
        if (leftTime <= 0) {
            return true;
        }
        return false;
    },

    addGiftCount: function () {
        this.giftCount++;
    },

    canShowGift: function () {
        return false;
        if (this.levelId >= 9) {
            if (this.levelId % 3 === 0) {
                if (this.giftCount < 3) {
                    this.lastShowLevel = this.levelId;
                    return true;
                }
            }
        }
        return false;
    },

    getCurrentSkinCfg: function () {
        var currentSkinId = game.playerMan.getCurrentSkinId();
        var skinCfg = ConfigMan.getInstance().getSkinCfg(currentSkinId);
        return skinCfg;
        //return skinCfg.image + ".png";
    },

    updateSkin: function (sprite) {
        var skinCfg = this.getCurrentSkinCfg();
        var spriteFrame = cc.spriteFrameCache.getSpriteFrame(skinCfg.image + ".png");
        if (spriteFrame) {
            sprite.setSpriteFrame(spriteFrame);
        } else {
            var defaultSpriteFrame = cc.spriteFrameCache.getSpriteFrame("skin_0.png");
            sprite.setSpriteFrame(defaultSpriteFrame);
        }
    },

    checkAutoPopup: function () {
        if (!this.checkDailyBonus()) {
            if (!this.checkSpecialOffer()) {
                this.checkNextDayTip();
            }
        }
    },

    checkNextDayTip: function () {
        if (this.resultCount >= 3) {
            if (!game.playerMan.player.nextDayTips) {
                //game.popupMan.popupCommonDlg(_("next_day_tips"));
                game.popupMan.popupRewardDlg(_("next_day_tips"),
                    function () {
                    }, "icon_gifts.png", 1);
                game.playerMan.setNextDayTips();
                return true;
            }
        }
        return false;
    },

    checkDailyBonus: function () {
        var lastClaimDay = game.playerMan.player.lastClaimDailyBonusDay;
        var currentDayClaimed = lastClaimDay >= game.utils.getDayByTs(Date.now());
        if (!currentDayClaimed) {
            cc.log("game.popupMan.popupDailyBonus");
            game.popupMan.popupDailyBonus();
            return true;
        }
        return false;
    },

    checkSpecialOffer: function () {
        if (this.isSpecialOfferPurchased()) {
            return false;
        }
        if (!this.showedSpecialOffer) {
            this.showedSpecialOffer = true;
            game.popupMan.popupSpeicialOffer();
            return true;
        }
        return false;
    },

    isSpecialOfferPurchased: function () {
        var specialOffer = ConfigMan.getInstance().getSpecialOfferCfg();
        var purchased = game.playerMan.isSpecialOfferPurchased(specialOffer.pid);
        cc.log("isSpecialOfferPurchased:" + purchased);
        return purchased;
    },

    adjustSkinConfigs: function () {
        if (game.playerMan.player.skinAdjusted) {
            return;
        }
        game.playerMan.setSkinAdjusted();
        var oldTaskConfigs = ConfigMan.getInstance().getOldTaskList();
        for (var i = 0; i < oldTaskConfigs.length; ++i) {
            var oldTaskConfig = oldTaskConfigs[i];
            this.adjustOldTaskConfig(oldTaskConfig);
        }
    },

    adjustOldTaskConfig: function (data) {
        var SkinRewardType = require("../enum/SkinRewardType");
        var completed = false;
        switch (data.type) {
            case SkinRewardType.None:
                completed = true;
                break;
            case SkinRewardType.LevelCount:
                if (game.playerMan.getLevel() >= data.count) {
                    completed = true;
                }
                break;
            case SkinRewardType.WatchAdCount:
                if (game.playerMan.player.interstitialAdCount >= data.count) {
                    completed = true;
                }
                break;
            case SkinRewardType.WatchRewardAdCount:
                if (game.playerMan.player.rewardedAdCount >= data.count) {
                    completed = true;
                }
                break;
            case SkinRewardType.Claimed:
                if (game.playerMan.hasSkin(data.id)) {
                    completed = true;
                }
                break;
            case SkinRewardType.Purchase:
                if (game.playerMan.hasSkin(data.id)) {
                    completed = true;
                }
                break;
        }

        if (completed) {
            game.playerMan.setClaimedSkin(data.id);
            game.playerMan.setTaskClaimed(data.id);
        }
    },

    hasCompletedTask: function () {
        var taskConfigs = ConfigMan.getInstance().getTaskList();
        for (var i = 0; i < taskConfigs.length; ++i) {
            var taskConfig = taskConfigs[i];
            if (game.playerMan.isTaskClaimed(taskConfig.id)) {
                continue;
            }
            if (this.isTaskCompleted(taskConfig)) {
                return true;
            }
        }
        return false;
    },

    isTaskCompleted: function (data) {
        var SkinRewardType = require("../enum/SkinRewardType");
        var completed = false;
        switch (data.type) {
            case SkinRewardType.None:
                completed = true;
                break;
            case SkinRewardType.LevelCount:
                if (game.playerMan.getLevel() >= data.count) {
                    completed = true;
                }
                break;
            case SkinRewardType.WatchAdCount:
                if (game.playerMan.player.interstitialAdCount >= data.count) {
                    completed = true;
                }
                break;
            case SkinRewardType.WatchRewardAdCount:
                if (game.playerMan.player.rewardedAdCount >= data.count) {
                    completed = true;
                }
                break;
            case SkinRewardType.Claimed:
                if (game.playerMan.hasSkin(data.id)) {
                    completed = true;
                }
                break;
            case SkinRewardType.Purchase:
                if (game.playerMan.hasSkin(data.id)) {
                    completed = true;
                }
                break;
        }
        return completed;
    }
});

GameMan._instance = null;
GameMan._firstUseInstance = true;

/**
 *
 * @returns {GameMan}
 */
GameMan.getInstance = function () {
    if (GameMan._firstUseInstance) {
        GameMan._firstUseInstance = false;
        GameMan._instance = new GameMan();
    }
    return GameMan._instance;
};

module.exports = GameMan;
},{"../../common/enum/AdsPlace":9,"../config/ConfigMan":36,"../config/ShareConfig":39,"../enum/SkinRewardType":96,"../events/EventsName":98}],100:[function(require,module,exports){
/**
 * Created by qinning on 15/5/12.
 */
var PlayerInfo = require("../entity/PlayerInfo");
var EventsName = require("../events/EventsName");

var PLAYER_KEY = "player_key";

var PlayerMan = cc.Class.extend({
    player: null,
    bestScoreKey: null,
    levelBoardKey: null,

    inited: false,
    ctor: function () {
    },

    initData: function () {
        if (this.inited) {
            return;
        }
        this.inited = false;
        var playerInfoStr = game.storageController.getItem(PLAYER_KEY, null);
        var player;
        if (playerInfoStr == null || playerInfoStr == "") {
            player = PlayerInfo.createDefault();
            game.storageController.setItem(PLAYER_KEY, JSON.stringify(player));
        } else {
            player = new PlayerInfo();
            player.unmarshall(JSON.parse(playerInfoStr));
        }
        this.player = player;
    },

    removedAds: function () {
        this.player.removedAds = true;
        game.adsManager.removeBannerAds("top");
        game.adsManager.removeBannerAds("bottom");
        this._flushToStorage();
    },

    setRated: function () {
        this.player.rated = true;
        this._flushToStorage();
    },

    getLevel: function () {
        if (cc.isUndefined(this.player.level)) {
            return 1;
        } else {
            return this.player.level;
        }
    },

    setLevel: function (level) {
        if (this.player.level < level) {
            this.player.level = level;
            this._flushToStorage();
        }
    },

    updateLevelData: function (level, name, data) {
        if (cc.isUndefined(this.player.levelsMap[level])) {
            this.player.levelsMap[level] = {};
        }
        this.player.levelsMap[level][name] = data;
        this._flushToStorage();
    },

    getLevelData: function (level, name) {
        return (this.player.levelsMap[level] || {})[name];
    },

    getLevelStar: function (level) {
        return this.getLevelData(level, "star") || 0;
    },

    getHardLevelStar: function (level) {
        return this.getLevelData(level, "hardStar") || 0;
    },

    addInterstitialAdCount: function () {
        this.player.interstitialAdCount++;
        this._flushToStorage();
    },

    addRewardedAdCount: function () {
        this.player.rewardedAdCount++;
        this._flushToStorage();
    },

    setHardLevel: function (level) {
        if (this.player.hardLevel < level) {
            this.player.hardLevel = level;
            this._flushToStorage();
        }
    },

    getHardLevel: function () {
        if (cc.isUndefined(this.player.hardLevel)) {
            return 1;
        } else {
            return this.player.hardLevel;
        }
    },

    getBoostCount: function (boostType) {
        return this.player.boostMap[boostType] || 0;
    },

    useBoost: function (boostType) {
        if (this.getBoostCount(boostType) > 0) {
            this.player.boostMap[boostType]--;
            this._flushToStorage();
            return true;
        }
        return false;
    },

    addBoost: function (boostType, count) {
        this.player.boostMap[boostType] += count;
        this._flushToStorage();
        game.eventDispatcher.dispatchEvent(EventsName.REFRESH_BOOST);
    },

    addDiamonds: function (diamonds) {
        if (isNaN(diamonds)) {
            cc.error("diamonds is NAN");
            return;
        }
        if (diamonds > 0) {
            game.audioPlayer.playEffectByKey("diamond_add");
        }
        this.player.diamonds += diamonds;
        this._flushToStorage();
        game.eventDispatcher.dispatchEvent(EventsName.DIAMONDS_UPDATE);
    },

    getDiamonds: function () {
        return this.player.diamonds;
    },

    setTaskClaimed: function (taskId) {
        cc.log("PlayerMan setTaskClaimed:" + taskId);
        this.player.taskMap[taskId] = true;
        this._flushToStorage();
    },

    isTaskClaimed: function (taskId) {
        cc.log("PlayerMan isTaskClaimed:" + taskId);
        return !!this.player.taskMap[taskId];
    },

    setGuided: function (guided) {
        this.player.guided = guided;
        this._flushToStorage();
    },

    setLastWheelTime: function (wheelTime) {
        this.player.lastWheelTime = wheelTime;
        this._flushToStorage();
    },

    getLastWheelTime: function () {
        return this.player.lastWheelTime;
    },

    //addPlayCount: function () {
    //    this.player.playCount++;
    //    this._flushToStorage();
    //},
    //
    //getPlayCount: function () {
    //    return this.player.playCount;
    //},

    setCurrentSkinId: function (skinId) {
        if (skinId === this.player.currentSkinId) {
            return;
        }
        var BallPool = require("../entity/BallPool");
        BallPool.drainAllPools();
        this.player.currentSkinId = skinId;
        this._flushToStorage();
    },

    getCurrentSkinId: function () {
        return this.player.currentSkinId;
    },

    setClaimedSkin: function (skinId) {
        this.player.skinMap[skinId] = true;
        this._flushToStorage();
    },

    hasSkin: function (skinId) {
        return !!this.player.skinMap[skinId];
    },

    isNewPlayer: function () {
        return (Date.now() - this.player.createDt < 24 * 3600 * 1000);
    },

    getRegisterDay: function () {
        return Math.floor((Date.now() - this.player.createDt) / (24 * 3600 * 1000)) + 1;
    },

    currentDay: function(){
        return game.utils.getDayByTs(Date.now());
    },

    checkConsecutiveLoginDay: function() {
        var today = this.currentDay();
        var days = today - this.player.lastLoginDay;
        if (days < 0) {
            cc.error("consecutive login day error, today is smaller than lastLoginDay, maybe you have adjust the time.");
            days = 0;
        }
        if (days <= 1){
            this.player.consecutiveLoginDays += days;
        }
        else{
            this.player.consecutiveLoginDays = 1;
        }

        this.player.lastLoginDay = today;
        if (this.player.consecutiveLoginDays < 1) {
            this.player.consecutiveLoginDays = 1;
        }
        return this.player.consecutiveLoginDays;
    },

    setLastClaimDailyBonusDay: function (day) {
        this.player.lastClaimDailyBonusDay = day;
        this._flushToStorage();
    },

    setNextDayTips: function () {
        this.player.nextDayTips = true;
        this._flushToStorage();
    },

    isSpecialOfferPurchased: function (pid) {
        return this.player.specialOfferMap[pid] || false;
    },

    setSpecialOfferPurchased: function (pid) {
        this.player.specialOfferMap[pid] = true;
        this._flushToStorage();
        game.eventDispatcher.dispatchEvent(EventsName.UPDATE_SPECIAL_OFFER);
    },

    setSkinAdjusted: function () {
        this.player.skinAdjusted = true;
        this._flushToStorage();
    },

    setLastShowRateTime: function () {
        this.player.lastShowRateTime = Date.now();
        this._flushToStorage();
    },

    addRewardAdCountPerDay: function () {
        this.tryClearPreviousAdCountPerDay();
        if (cc.isUndefined(this.player.rewardAdCountPerDay)) {
            this.player.rewardAdCountPerDay = 0;
        }
        this.player.rewardAdCountPerDay++;
        this._flushToStorage();
        game.eventDispatcher.dispatchEvent(EventsName.REWARDED_VIDEO_COUNT);
    },

    getRewardAdPlaceCountPerDay: function () {
        this.tryClearPreviousAdCountPerDay();
        return this.player.rewardAdCountPerDay || 0;
    },

    tryClearPreviousAdCountPerDay: function () {
        if (this.player.rewardAdRecordDay !== this.getRegisterDay()) {
            this.player.rewardAdCountPerDay = 0;
            this.player.rewardAdRecordDay = this.getRegisterDay();
        }
    },

    _flushToStorage: function () {
        game.storageController.setItem(PLAYER_KEY, JSON.stringify(this.player));
    }
});

PlayerMan._instance = null;
PlayerMan._firstUseInstance = true;

/**
 *
 * @returns {PlayerMan}
 */
PlayerMan.getInstance = function () {
    if (PlayerMan._firstUseInstance) {
        PlayerMan._firstUseInstance = false;
        PlayerMan._instance = new PlayerMan();
    }
    return PlayerMan._instance;
};

module.exports = PlayerMan;
},{"../entity/BallPool":82,"../entity/PlayerInfo":87,"../events/EventsName":98}],101:[function(require,module,exports){
/**
 * Created by oye on 15/11/21.
 */

var NoticeController = require("../controller/NoticeController");
var GameOverController = require("../controller/GameOverController");
var HelpController = require("../controller/HelpController");
var GameWinController = require("../controller/GameWinController");
var PassController = require("../controller/PassController");
var StoreController = require("../controller/StoreController");
var PauseController = require("../controller/PauseController");
var FailController = require("../controller/FailController");
var RankController = require("../controller/RankController");
var RewardVideoController = require("../controller/RewardVideoController");
var WheelController = require("../controller/WheelController");
var RewardDoubleController = require("../controller/RewardDoubleController");
var BagController = require("../controller/BagController");
var RewardGiftController = require("../controller/RewardGiftController");
var SkinController = require("../controller/SkinController");
var DailyBonusController = require("../controller/DailyBonusController");
var SpecialOfferController = require("../controller/SpecialOfferController");
var RewardNoticeController = require("../controller/RewardNoticeController");
var TaskController = require("../controller/TaskController");

var PopupMan = {

    popupCommonDlg: function (info, yesCallback) {
        var noticeNode = NoticeController.createFromCCB();
        noticeNode.controller.initWithYes(info, yesCallback, null);
        noticeNode.controller.popup();
    },

    popupYesNoCommonDlg: function (info, yesInfo, cancelInfo, yesCallback, noCallback, isShowClose, isShowAds) {
        var noticeNode = NoticeController.createFromCCB();
        noticeNode.controller.initWithYesNo(info, yesInfo, cancelInfo, yesCallback, noCallback, isShowClose, isShowAds);
        noticeNode.controller.popup();
    },

    popupRewardDlg: function (info, yesCallback, reward1Sprite, reward1Count, reward2Sprite, reward2Count) {
        var noticeNode = NoticeController.createFromCCB();
        noticeNode.controller.initWithRewardYes(info, yesCallback, reward1Sprite, reward1Count, reward2Sprite, reward2Count);
        noticeNode.controller.popup();
    },

    popupNewTipCommonDlg: function (info, yesInfo, cancelInfo, yesCallback, noCallback, isShowClose) {
        var noticeNode = NoticeController.createGuideFromCCB();
        noticeNode.controller.initWithYesNo(info, yesInfo, cancelInfo, yesCallback, noCallback, isShowClose);
        noticeNode.controller.popup();
    },

    popupGameOverDlg: function (percent, replayCallback) {
        var gameOverNode = GameOverController.createFromCCB();
        gameOverNode.controller.initWith(percent, replayCallback);
        gameOverNode.controller.popup();
    },

    popupRateDlg: function (ratedCallback, closeCallback) {
        var rateInfo = game.local.getValue("rate_info");
        this.popupYesNoCommonDlg(rateInfo,
            game.local.getValue("rate_confirm"), game.local.getValue("rate_cancel"), function () {
                //cc.sys.openURL(game.config.getPlatformDownloadUrl());
                if (game.utils.isIOS()) {
                    cc.sys.openURL(game.config.getPlatformDownloadUrl());
                } else {
                    jsb_dp.oneSdkBridge.openApplicationMarket(game.config.getPackageName());
                }
                game.adsManager.rateTime = Date.now();
                if (ratedCallback) {
                    ratedCallback();
                }
            },
            function () {
                if (closeCallback) {
                    closeCallback();
                }
            }, false);
    },

    popupHelpDlg: function () {
        var helpNode = HelpController.createFromCCB();
        helpNode.controller.popup();
    },

    popupGameWinDlg: function (replayCallback, nextCallback) {
        var gameOverNode = GameWinController.createFromCCB();
        gameOverNode.controller.initWith(replayCallback, nextCallback);
        gameOverNode.controller.popup();
    },

    popupPassDlg: function (replayCallback, nextCallback) {
        var node = PassController.createFromCCB();
        node.controller.initWith(replayCallback, nextCallback);
        node.controller.popup();
    },

    popupFailDlg: function (replayCallback, skipCallback) {
        var node = FailController.createFromCCB();
        node.controller.initWith(replayCallback, skipCallback);
        node.controller.popup();
    },

    popupStoreDlg: function (type, callback) {
        var node = StoreController.createFromCCB();
        node.controller.initWith(type, callback);
        node.controller.popup();
    },

    popupPauseDlg: function (resuemCallback) {
        var node = PauseController.createFromCCB();
        node.controller.initWith(resuemCallback);
        node.controller.popup();
    },
    popupRankDlg: function (rankType, closeCallback) {
        var node = RankController.createFromCCB();
        node.controller.init(rankType, closeCallback);
        node.controller.popup();
        return node;
    },
    popupGroupRankDlg: function () {
        if (this.lastGroupRankNode) {
            this.lastGroupRankNode.controller.closeCallback = null;
            this.lastGroupRankNode.controller.close();
        }
        var RankType = require("../enum/RankType");
        var self = this;
        this.lastGroupRankNode = this.popupRankDlg(RankType.Group, function () {
            self.lastGroupRankNode = null;
        });

    },
    popupRewardVideo: function (closeCallback) {
        var node = RewardVideoController.createFromCCB();
        node.controller.init(closeCallback);
        node.controller.popup();
    },

    popupWheelDlg: function () {
        var node = WheelController.createFromCCB();
        node.controller.popup();
    },

    popupRewardDoubleTipDlg: function (image, count, callback) {
        var node = RewardDoubleController.createFromCCB();
        node.controller.init(image, count, callback);
        node.controller.popup();
    },

    popupBagDlg: function () {
        var node = BagController.createFromCCB();
        node.controller.popup();
    },

    popupRewardGift: function (closeCallback) {
        var node = RewardGiftController.createFromCCB();
        node.controller.init(closeCallback);
        node.controller.popup();
    },

    popupSkinDlg: function () {
        var node = SkinController.createFromCCB();
        node.controller.popup();
    },

    popupDailyBonus: function () {
        var node = DailyBonusController.createFromCCB();
        node.controller.popup();
    },

    popupSpeicialOffer: function () {
        var node = SpecialOfferController.createFromCCB();
        node.controller.popup();
    },

    popupRewardNoticeDlg: function (info, yesCallback, reward1Sprite, reward1Count, reward2Sprite, reward2Count) {
        var noticeNode = RewardNoticeController.createFromCCB();
        noticeNode.controller.initWithRewardYes(info, yesCallback, reward1Sprite, reward1Count, reward2Sprite, reward2Count);
        noticeNode.controller.popup();
    },

    popupTaskDlg: function () {
        var node = TaskController.createFromCCB();
        node.controller.popup();
    }
};

module.exports = PopupMan;
},{"../controller/BagController":46,"../controller/DailyBonusController":48,"../controller/FailController":50,"../controller/GameOverController":52,"../controller/GameWinController":53,"../controller/HelpController":54,"../controller/NoticeController":59,"../controller/PassController":62,"../controller/PauseController":63,"../controller/RankController":64,"../controller/RewardDoubleController":65,"../controller/RewardGiftController":66,"../controller/RewardNoticeController":67,"../controller/RewardVideoController":68,"../controller/SkinController":69,"../controller/SpecialOfferController":71,"../controller/StoreController":72,"../controller/TaskController":74,"../controller/WheelController":77,"../enum/RankType":93}],102:[function(require,module,exports){
/**
 * Created by qinning on 2018/1/1.
 */

var SceneType = require("../enum/SceneType");
var MenuScene = require("../scene/MenuScene");
var LevelScene = require("../scene/LevelScene");
var PackageScene = require("../scene/PackageScene");
var GameScene = require("../scene/GameScene");
var GameBridge = require("../../common/bridge/GameBridge");

var SceneMan = cc.Class.extend({

    sceneMap: null,

    lastScene: null,
    curScene: null,

    ctor: function () {
        this.sceneMap = {};
        this.register();
        this.lastScene = SceneType.NONE;
        this.curScene = SceneType.MENU;
    },

    setCurScene: function (scene) {
        this.curScene = scene;
    },

    register: function () {
        this.sceneMap[SceneType.MENU] = GameBridge.getMenuScene;
        this.sceneMap[SceneType.PACKAGE] = function () {
            return new PackageScene();
        };
        this.sceneMap[SceneType.LEVEL] = function () {
            return new LevelScene();
        };
        this.sceneMap[SceneType.GAME] = function () {
            return new GameScene();
        };
    },

    switchScene: function (sceneType) {
        this.lastScene = this.curScene;
        this.curScene = sceneType;
        var scene = this.sceneMap[this.curScene];
        if (scene) {
            cc.director.runScene(scene());
        }
    },

    switchLastScene: function () {
        this.switchScene(this.lastScene);
    }
});

SceneMan._instance = null;
SceneMan._firstUseInstance = true;

/**
 *
 * @returns {SceneMan}
 */
SceneMan.getInstance = function () {
    if (SceneMan._firstUseInstance) {
        SceneMan._firstUseInstance = false;
        SceneMan._instance = new SceneMan();
    }
    return SceneMan._instance;
};

module.exports = SceneMan;
},{"../../common/bridge/GameBridge":3,"../enum/SceneType":94,"../scene/GameScene":104,"../scene/LevelScene":105,"../scene/MenuScene":107,"../scene/PackageScene":108}],103:[function(require,module,exports){
/**
 * Created by qinning on 2017/1/23.
 */

var PaymentInfo = require("../../common/entity/PaymentInfo");
var PaymentCode = require("../../common/enum/PaymentCode");
var ProductInfo = require("../../common/entity/ProductInfo");
var StoreType = require("../enum/StoreType");
var ConfigMan = require("../config/ConfigMan");
var BoostType = require("../enum/BoostType");
var EventsName = require("../events/EventsName");

var StoreHelper = cc.Class.extend({

    /**
     * @type {Array.<ProductInfo>}
     */
    productList: null,
    /**
     * @type {Array.<StoreConfig>}
     */
    storeList: null,

    inited: false,

    _rewardCB: null,

    ctor: function () {
        game.storeManager.setPaymentDelegate(this);
        this.storeList = ConfigMan.getInstance().getStoreList();

        game.adsManager.setAdListener(this);
    },

    init: function () {
        if (this.inited) {
            return;
        }
        this.inited = true;
        this.requestProducts();
        this.getUnverifiedReceiptList();
    },

    clear: function () {
        game.adsManager.setAdListener(null);
    },

    onRewardedVideoFinished: function (isRewarded) {
        cc.log("onRewardedVideoFinished:" + isRewarded);
        this._isRewarded = isRewarded;
        if (isRewarded && cc.sys.os !== cc.sys.OS_ANDROID) {
            this.onRewardedVideoReward();
        }
    },

    onShowVideoAdBegin: function () {
        cc.log("GameNode onShowVideoAdBegin");
        this._isRewarded = false;
    },

    onShowVideoAdEnd: function () {
        cc.log("GameNode onShowVideoAdEnd");
        var time = 100;
        if (cc.sys.os === cc.sys.OS_ANDROID) {
            time = 1000;
        }
        setTimeout(function () {
            if (this._isRewarded && cc.sys.os === cc.sys.OS_ANDROID) {
                this.onRewardedVideoReward();
            }
            if (!this._isRewarded) {
                if (this._rewardCB) {
                    this._rewardCB(false);
                    this._rewardCB = null;
                }
            }
        }.bind(this), time);
    },

    onRewardedVideoReward: function () {
        if (this._rewardCB) {
            this._rewardCB(true);
            this._rewardCB = null;
            return;
        }
        if (game.playerMan.getRewardAdPlaceCountPerDay() > game.config.rewardAdMaxCountPerDay) {
            cc.log("StoreHelper onRewardedVideoReward has reached max count:" + game.playerMan.getRewardAdPlaceCountPerDay());
            return;
        }
        game.playerMan.addRewardAdCountPerDay();
        var freeEntity = this.getStoreEntityByType(StoreType.FREE);
        game.popupMan.popupRewardNoticeDlg(game.local.getValue("reward_video_diamonds"),
            function () {
                game.playerMan.addDiamonds(freeEntity.count);
            }, this.getBoostImage(BoostType.DIAMOND), freeEntity.count);
    },

    /**
     * @param pid
     * @returns {StoreConfig | null}
     */
    getStoreEntity: function (pid) {
        for (var i = 0; i < this.storeList.length; ++i) {
            if (this.storeList[i].pid === pid) {
                return this.storeList[i];
            }
        }
        return null;
    },

    getStoreEntityByType: function (type) {
        for (var i = 0; i < this.storeList.length; ++i) {
            if (this.storeList[i].type === type) {
                return this.storeList[i];
            }
        }
        return null;
    },

    getBoostImage: function (boostType) {
        switch (boostType) {
            case BoostType.SPLIT:
                return "store_3_multiple.png";
            case BoostType.THREE_BALL:
                return "store_3_new.png";
            case BoostType.DIAMOND:
                return "icon_diamond_1.png";
        }
    },

    _getNumFromString: function (text) {
        return text.replace(/[^0-9.]/ig, "");
    },

    updatePrice: function (product) {
        var storeProduct = this.getStoreEntity(product.productId);
        if (storeProduct) {
            storeProduct.price = product.price;
            try {
                if (storeProduct.original_price) {
                    var priceStr = this._getNumFromString(product.price);
                    var priceNum = Number(priceStr);
                    storeProduct.original_price = product.price.replace(priceStr,
                        (priceNum * (storeProduct.discount_multi + 1)).toFixed(2));
                }
            } catch (ex) {
                cc.error("update price:" + ex);
            }
        }
    },

    checkAndShowRewardVideo: function (name, cb) {
        if (game.adsManager.isRewardVideoReady()) {
            this._rewardCB = cb;
            game.adsManager.showRewardVideoAd(name);
        } else {
            cc.log("reward video not ready");
        }
    },

    /**
     * @param {StoreConfig} storeEntity
     */
    buyProduct: function (storeEntity) {
        switch (storeEntity.type) {
            case StoreType.NEW_3:
            case StoreType.SPLIT:
            case StoreType.FIRST_PURCHASE:
            case StoreType.DIAMOND:
                game.storeManager.payForProduct(storeEntity.pid);
                break;
            case StoreType.FREE:
                this.checkAndShowRewardVideo(game.utils.isIOS() ? "daoju01" : "store");
                break;
            case StoreType.REMOVE_ADS:
                this.buyRemoveAds(storeEntity.pid);
                break;
            case StoreType.RESTORE:
                game.storeManager.restoreCompletedTransactions();
                break;
            case StoreType.NEW_AND_SPLIT:
                this.buyBoosts(storeEntity);
                break;
        }
    },

    buyRemoveAds: function (pid) {
        if (game.playerMan.player.removedAds) {
            game.popupMan.popupCommonDlg(game.local.getValue("removed_all_ads_tips"));
        } else {
            if (cc.sys.os === cc.sys.OS_ANDROID) {
                game.popupMan.popupYesNoCommonDlg(game.local.getValue("purchase_no_ad_tips"),
                    game.local.getValue("buy_title"), game.local.getValue("cancel_title"), function () {
                        game.storeManager.payForProduct(pid);
                    }, null, false);
            } else {
                game.popupMan.popupYesNoCommonDlg(game.local.getValue("purchase_no_ad_tips"),
                    game.local.getValue("buy_title"), game.local.getValue("restore_title"), function () {
                    game.storeManager.payForProduct(pid);
                }, function () {
                    game.storeManager.restoreCompletedTransactions();
                }, true);
            }
        }
    },

    buySkin: function (skinCfg) {
        if (!game.playerMan.hasSkin(skinCfg.id)) {
            if (game.playerMan.getDiamonds() >= skinCfg.count) {
                game.playerMan.setClaimedSkin(skinCfg.id);
                game.playerMan.setCurrentSkinId(skinCfg.id);
                game.playerMan.addDiamonds(-skinCfg.count);
                game.eventDispatcher.dispatchEvent(EventsName.UPDATE_SKIN);
            } else {
                game.popupMan.popupCommonDlg(_("diamond_not_enough"));
            }
        }
    },

    useSkin: function (skinCfg) {
        game.playerMan.setCurrentSkinId(skinCfg.id);
        game.eventDispatcher.dispatchEvent(EventsName.UPDATE_SKIN);
    },

    buyBoosts: function (storeEntity) {
        if (game.playerMan.getDiamonds() >= storeEntity.count) {
            game.playerMan.addDiamonds(-storeEntity.count);
            var splitCount = storeEntity.data.multiple_3;
            var threeBallCount = storeEntity.data.new_3;
            var splitImage = this.getBoostImage(BoostType.SPLIT);
            var new3Image = this.getBoostImage(BoostType.THREE_BALL);
            game.popupMan.popupRewardDlg(game.local.getValue("purchase_boost_success"),
                function () {
                    game.playerMan.addBoost(BoostType.SPLIT, splitCount);
                    game.playerMan.addBoost(BoostType.THREE_BALL, threeBallCount);
                }, splitImage, splitCount, new3Image, threeBallCount);
        } else {
            game.popupMan.popupCommonDlg(_("diamond_not_enough"));
        }
    },

    requestProducts: function () {
        var productIds = [];
        for (var i = 0; i < this.storeList.length; ++i) {
            var entity = this.storeList[i];
            if (entity && entity.pid) {
                productIds.push(entity.pid);
            }
        }
        cc.log("requestproducts:" + JSON.stringify(productIds));
        game.storeManager.requestProduct(productIds);
    },

    getUnverifiedReceiptList: function () {
        game.storeManager.getUnverifiedReceiptList();
    },

    /**
     * @param {PaymentCode} error
     * @param {PaymentInfo} paymentInfo
     */
    onPaymentCompleted: function (error, paymentInfo) {
        var paymentSuccess = false;
        if (error === PaymentCode.PAYMENT_CODE_SUCCESS) {
            this._onPaymentSuccess(paymentInfo, true);
            paymentSuccess = true;
        } else {
            game.popupMan.popupCommonDlg(game.local.getValue("purchase_fail"));
        }
        game.eventDispatcher.dispatchEvent(EventsName.PURCHASE_END, paymentSuccess);
    },

    /**
     * @param {Array.<PaymentInfo>} paymentInfoList
     */
    onGetUnverifiedReceiptList: function (paymentInfoList) {
        for (var i = 0; i < paymentInfoList.length; ++i) {
            this._onPaymentSuccess(paymentInfoList[i], false);
        }
    },

    /**
     * on get product list.
     * @param {Array.<ProductInfo>} productList
     */
    onGetProductList: function (productList) {
        this.productList = productList;
        for (var i = 0; i < productList.length; ++i) {
            var product = productList[i];
            this.updatePrice(product);
        }
    },

    /**
     * @param {PaymentInfo} paymentInfo
     * @param hasNotice
     * @private
     */
    _onPaymentSuccess: function (paymentInfo, hasNotice) {
        var storeEntity = this.getStoreEntity(paymentInfo.productId);
        var splitImage = this.getBoostImage(BoostType.SPLIT);
        var new3Image = this.getBoostImage(BoostType.THREE_BALL);
        switch (storeEntity.type) {
            case StoreType.REMOVE_ADS:
                game.playerMan.removedAds();
                if (hasNotice) {
                    game.popupMan.popupCommonDlg(game.local.getValue("purchase_no_ad_success"));
                }
                if (cc.sys.os === cc.sys.OS_IOS) {
                    game.storeManager.consume(paymentInfo.purchaseId);
                }
                break;
            case StoreType.NEW_3:
            case StoreType.SPLIT:
                game.popupMan.popupRewardDlg(game.local.getValue("purchase_boost_success"), function () {
                    game.playerMan.addBoost(storeEntity.type, storeEntity.count);
                    game.storeManager.consume(paymentInfo.purchaseId);
                }, storeEntity.image, storeEntity.count);
                break;
            case StoreType.FIRST_PURCHASE:
                var diamondCount = storeEntity.data.diamonds;
                var skinId = storeEntity.data.skin;
                var skinImage = storeEntity.data.skin_image;
                game.popupMan.popupRewardDlg(game.local.getValue("purchase_diamond_success"),
                    function () {
                        game.playerMan.addDiamonds(diamondCount);
                        game.playerMan.setClaimedSkin(skinId);
                        game.storeManager.consume(paymentInfo.purchaseId);
                        game.playerMan.setSpecialOfferPurchased(paymentInfo.productId);
                        game.popupMan.popupRewardDlg(game.local.getValue("skin_claimed"),
                            function () {
                            }, skinImage, 1);
                    }, this.getBoostImage(BoostType.DIAMOND), diamondCount);
                break;
            case StoreType.NEW_AND_SPLIT:
                var splitCount = storeEntity.data.multiple_3;
                var threeBallCount = storeEntity.data.new_3;
                game.popupMan.popupRewardDlg(game.local.getValue("purchase_boost_success"),
                    function () {
                        game.playerMan.addBoost(BoostType.SPLIT, splitCount);
                        game.playerMan.addBoost(BoostType.THREE_BALL, threeBallCount);
                        game.storeManager.consume(paymentInfo.purchaseId);
                    }, splitImage, splitCount, new3Image, threeBallCount);
                break;
            case StoreType.DIAMOND:
                var count = storeEntity.count;
                game.popupMan.popupRewardDlg(game.local.getValue("purchase_diamond_success"),
                    function () {
                        game.playerMan.addDiamonds(count);
                        game.storeManager.consume(paymentInfo.purchaseId);
                    }, storeEntity.image, count);
                break;
        }
    },

    popupBoostRewardDlg: function (splitCount, threeBallCount, callback) {
        var new3Image = this.getBoostImage(BoostType.THREE_BALL);
        var splitImage = this.getBoostImage(BoostType.SPLIT);

        var image1 = undefined;
        var count1 = 0;
        var image2 = undefined;
        var count2 = 0;
        if (threeBallCount > 0) {
            image1 = new3Image;
            count1 = threeBallCount;
            if (splitCount > 0) {
                image2 = splitImage;
                count2 = splitCount;
            }
        } else {
            image1 = splitImage;
            count1 = splitCount;
        }

        game.popupMan.popupRewardNoticeDlg(game.local.getValue("reward_video_boosts"),
            function () {
                game.playerMan.addBoost(BoostType.SPLIT, splitCount);
                game.playerMan.addBoost(BoostType.THREE_BALL, threeBallCount);
                if (callback) {
                    callback();
                }
            }, image1, count1, image2, count2);
    }
});

StoreHelper._instance = null;
StoreHelper._firstUseInstance = true;

/**
 *
 * @returns {StoreHelper}
 */
StoreHelper.getInstance = function () {
    if (StoreHelper._firstUseInstance) {
        StoreHelper._firstUseInstance = false;
        StoreHelper._instance = new StoreHelper();
    }
    return StoreHelper._instance;
};

module.exports = StoreHelper;
},{"../../common/entity/PaymentInfo":6,"../../common/entity/ProductInfo":8,"../../common/enum/PaymentCode":10,"../config/ConfigMan":36,"../enum/BoostType":89,"../enum/StoreType":97,"../events/EventsName":98}],104:[function(require,module,exports){
var GameController = require("../controller/GameController");
var GameMan = require("../model/GameMan");

var GameScene = cc.Scene.extend({
    _gameType: 0,
    _isBackClicked: false,

    ctor: function () {
        this._super();
        game.adsManager.removeBannerAds("bottom");
        var gameNode = GameController.createFromCCB();
        this.addChild(gameNode);
    },

    onEnter:function () {
        this._super();

        //cc.eventManager.addListener({
        //    event: cc.EventListener.KEYBOARD,
        //    onKeyReleased: function (keyCode, event) {
        //        if (keyCode === cc.KEY.back) {
        //            if (!this._isBackClicked) {
        //                this._isBackClicked = true;
        //                game.sceneMan.switchLastScene();
        //            }
        //        }
        //    }.bind(this)
        //}, this);
    },

    onExit: function () {
        game.dialogManager.closeAll();
        this._super();
    }
});

module.exports = GameScene;

},{"../controller/GameController":51,"../model/GameMan":99}],105:[function(require,module,exports){
var MenuController = require("../controller/MenuController");
var StoreHelper = require("../model/StoreHelper");
var LevelController = require("../controller/LevelController");

var LevelScene = cc.Scene.extend({

    ctor: function () {
        this._super();
        var layer = LevelController.createFromCCB();
        this.addChild(layer);
    },

    onEnter:function () {
        this._super();

        cc.eventManager.addListener({
            event: cc.EventListener.KEYBOARD,
            onKeyReleased: function (keyCode, event) {
                if (keyCode === cc.KEY.back) {
                    if (!this._isBackClicked) {
                        this._isBackClicked = true;
                        game.sceneMan.switchScene(game.sceneType.PACKAGE);
                    }
                }
            }.bind(this)
        }, this);

        if (game.playerMan.getLevel() >= 3) {
            game.adsManager.showBannerAds("bottom");
        }
    },

    onExit: function () {
        game.dialogManager.closeAll();
        this._super();
    }
});

module.exports = LevelScene;
},{"../controller/LevelController":55,"../controller/MenuController":58,"../model/StoreHelper":103}],106:[function(require,module,exports){
/**
 * Created by oye on 15-4-19.
 */
var LoadingController = require("../controller/LoadingController");

var LoadingScene = cc.Scene.extend({
    ctor:function () {
        this._super();
        var layer = LoadingController.createFromCCB();
        this.addChild(layer);
    }
});

module.exports = LoadingScene;
},{"../controller/LoadingController":57}],107:[function(require,module,exports){
var MenuController = require("../controller/MenuController");
var StoreHelper = require("../model/StoreHelper");
var GameMan = require("../model/GameMan");
var PlayerMan = require("../model/PlayerMan");
var SceneMan = require("../model/SceneMan");
var SceneType = require("../enum/SceneType");
//var BricksView = require("../view/BricksView");

window.isFirstEnter = true;

var MenuScene = cc.Scene.extend({

    ctor: function () {
        this._super();

        var layer = MenuController.createFromCCB();
        this.addChild(layer);
    },

    onEnter:function () {
        this._super();

        var self = this;
        cc.eventManager.addListener({
            event: cc.EventListener.KEYBOARD,
            onKeyReleased: function (keyCode, event) {
                if (keyCode === cc.KEY.back) {
                    if (!self._isBackClicked) {
                        self._isBackClicked = true;
                        game.popupMan.popupYesNoCommonDlg(_("exit_game_confirm"), _("yes_title"), _("no_title"), function () {
                            game.logicMan.scheduleLocalNotification();
                            cc.director.end();
                        }, function () {
                            self._isBackClicked = false;
                        });
                    }
                }
            }
        }, this);

        if (game.playerMan.getLevel() >= 3) {
            game.adsManager.showBannerAds("bottom");
        }

        if (game.adsManager.showTopBanner) {
            game.adsManager.removeBannerAds("top");
        }

        this.scheduleOnce(function () {
            StoreHelper.getInstance().init();
            game.gcManager.reportScore(0, game.config.getLeaderBoardKey());
            if (!window.isFirstEnter) {
                game.crossPromMan.tryToPopupCrossPromDlg();
            } else {
                window.isFirstEnter = false;
            }
        }, 1);
    },

    onExit: function () {
        game.dialogManager.closeAll();
        this._super();
    }
});

module.exports = MenuScene;
},{"../controller/MenuController":58,"../enum/SceneType":94,"../model/GameMan":99,"../model/PlayerMan":100,"../model/SceneMan":102,"../model/StoreHelper":103}],108:[function(require,module,exports){
var MenuController = require("../controller/MenuController");
var StoreHelper = require("../model/StoreHelper");
var PackageController = require("../controller/PackageController");

var PackageScene = cc.Scene.extend({
    ctor: function () {
        this._super();
        var layer = PackageController.createFromCCB();
        this.addChild(layer);
    },

    onEnter:function () {
        this._super();

        cc.eventManager.addListener({
            event: cc.EventListener.KEYBOARD,
            onKeyReleased: function (keyCode, event) {
                if (keyCode === cc.KEY.back) {
                    if (!this._isBackClicked) {
                        this._isBackClicked = true;
                        game.sceneMan.switchScene(game.sceneType.MENU);
                    }
                }
            }.bind(this)
        }, this);
    },

    onExit: function () {
        game.dialogManager.closeAll();
        this._super();
    }
});

module.exports = PackageScene;
},{"../controller/MenuController":58,"../controller/PackageController":60,"../model/StoreHelper":103}],109:[function(require,module,exports){
var Grid = require("../entity/Grid");
var Ball = require("../entity/Ball");
var BoardController = require("../controller/BoardController");
var BallPool = require("../entity/BallPool");
var Utils = require("../../common/util/Utils");
var GridType = require("../enum/GridType");
var Board = require("../entity/Board");
var ShapeType = require("../enum/ShapeType");
var Boost = require("../entity/Boost");
var BoostType = require("../enum/BoostType");
var Obstacle = require("../entity/Obstacle");
var Wall = require("../entity/Wall");
var GameMan = require("../model/GameMan");
var StoreHelper = require("../model/StoreHelper");

var ColorConfigs = [
    cc.color(252, 178, 0),
    cc.color(81, 229, 12),
    cc.color(27, 226, 255),
    cc.color(255, 252, 29),
    cc.color(255, 56, 56),
    cc.color(248, 70, 255),
    cc.color(255, 129, 17),
    cc.color(57, 103, 249),
    cc.color(90, 181, 110),

    cc.color(255, 90, 141),
    cc.color(242, 86, 9),
    cc.color(66, 46, 176),
    cc.color(144, 85, 222),
    cc.color(23, 167, 104),
    cc.color(176, 72, 206),
    cc.color(147, 192, 26),
    cc.color(55, 70, 219)
];

var GrayColor = cc.color(82, 82, 82);

var getColor = function (type) {
    return ColorConfigs[(type - 1) % ColorConfigs.length];
};

var GameStep = {
    PRE_START: 1,
    START: 2,
    RELIFE: 3,
    WATCH_AD: 4,
    END: 5
};

var BricksView = cc.Node.extend({
    SPACE_STEP: 1 / 60,
    LIFE_POSIBILITY: 0.005,
    BOOST_POSIBILITY: 0.06,
    MAX_SPEED: 420,
    MAX_LIFE: 6,
    BOOST_SPEED: 80,
    MAX_BALL: 1000,
    TOP_INNER_WALL: 50,
    MAX_SPLIT_COUNT: 100,
    TOP_AD_WALL: 100,
    //this.TOP_AD_WALL = 100;

    /**
     * @type {LevelConfig}
     */
    config: null,

    row: 0,
    col: 0,

    ballList: null,

    gameStep: -1,

    lifeCount: 3,

    gameController: null,

    //startTime: 0,

    stoped: false,

    lastTime: 0,

    totalTime: 0,
    lastAdjustTime: 0,

    hardMode: false,

    accumulator: 0,

    _curTouchId: -1,

    ctor: function (config, gameController) {
        this._super();
        if (cc.sys.os === cc.sys.OS_IOS) {
            this.MAX_BALL = 1000;
        }
        this.hardMode = GameMan.getInstance().isHardMode();
        if (this.hardMode) {
            config = config.getHardCfg();
        }
        if (config.lifeProbability > 0) {
            this.LIFE_POSIBILITY *= config.lifeProbability;
        }
        if (config.boostProbability > 0) {
            this.BOOST_POSIBILITY *= config.boostProbability;
        }
        this.gameController = gameController;
        this.config = config;
        this.row = config.width;
        this.col = config.height;

        this.GRID_WIDTH = config.pixelWidth / config.width * 0.7;
        this.GRID_HEIGHT = config.pixelHeight / config.height * 0.7;

        this.GAP_WIDTH = config.pixelWidth / config.width - this.GRID_WIDTH;
        this.GAP_HEIGHT = config.pixelHeight / config.height - this.GRID_HEIGHT;

        var minBrickHeight = 600 + this.TOP_INNER_WALL + this.TOP_AD_WALL + 10;
        var maxBrickHeight = cc.winSize.height - minBrickHeight;
        
        this.BRICK_Y = Math.min(cc.winSize.height * 0.3, maxBrickHeight);

        this.BOARD_Y = this.BRICK_Y - cc.winSize.height * 0.16;

        this.setContentSize(cc.winSize);

        this.init();
    },

    onEnter: function () {
        this._super();
        cc.eventManager.addListener({
            event: cc.EventListener.TOUCH_ONE_BY_ONE,
            swallowTouches: true,
            onTouchBegan: this.onTouchBegan.bind(this),
            onTouchMoved: this.onTouchMoved.bind(this),
            onTouchEnded: this.onTouchEnded.bind(this),
            onTouchCancelled: this.onTouchCancelled.bind(this)
        }, this);

        this.scheduleUpdate();

        this.space.setDefaultCollisionHandler(
            this.collisionBegin.bind(this),
            this.collisionPre.bind(this),
            this.collisionPost.bind(this),
            this.collisionSeparate.bind(this)
        );
        this.gameStep = GameStep.PRE_START;
        game.eventDispatcher.addEventListener(cc.game.EVENT_HIDE, this.gameOnHide, this);

        this.showTopBannerAds();

        cc.eventManager.addListener({
            event: cc.EventListener.KEYBOARD,
            onKeyReleased: function (keyCode, event) {
                if (keyCode === cc.KEY.back) {
                    this.tryShowPause();
                }
            }.bind(this)
        }, this);
    },

    onExit: function () {
        game.eventDispatcher.removeEventListener(cc.game.EVENT_HIDE, this.gameOnHide, this);
        //this.space.removeCollisionHandler(ShapeType.BALL,
        //    ShapeType.BRICK);
        this.unscheduleUpdate();
        this.removeTopBannerAds();
        //BallPool.drainAllPools();
        this.space = null;
        this.ballList = null;
        this.boosts = null;
        this.obstacles = null;
        this.walls = null;
        this.bricks = null;
        this._super();
    },

    gameOnHide: function () {
        if (this.gameStep === GameStep.START) {
            this.tryShowPause();
        }
    },

    tryShowPause: function () {
        if (!this.stoped) {
            if (this.gameController) {
                this.gameController.showPause();
            }
        }
    },

    init: function () {
        this.initWorld();
        this.initObstacles();
        this.initBricks();
        this.initBoard();

        this.ballList = [];
        this.boosts = [];
    },

    initObstacles: function () {
        this.obstacles = [];
        this.walls = [];
        for (var i = 0; i < this.config.obstacles.length; ++i) {
            var obstacleCfg = this.config.obstacles[i];
            for (var x = 0; x < obstacleCfg.width; ++x) {
                for (var y = 0; y < obstacleCfg.height; ++y) {
                    var localCol = x + obstacleCfg.x;
                    var localRow = y + obstacleCfg.y;
                    var obstacle = BallPool.getFromPool("obstacle");
                    if (!obstacle) {
                        obstacle = new Obstacle(GrayColor, this.GRID_WIDTH, this.GRID_HEIGHT);
                    } else {
                        obstacle.reset(GrayColor, this.GRID_WIDTH, this.GRID_HEIGHT);
                    }
                    this.addChild(obstacle);
                    obstacle.setPosition(this.getGridPos(localRow, localCol));
                    this.obstacles.push(obstacle);
                }
            }
            var WALL_FILL_SIZE = cc.size(6, 6);
            var wall = new Wall();
            wall.setContentSize(cc.size(
                this.GRID_WIDTH * obstacleCfg.width + this.GAP_WIDTH * (obstacleCfg.width - 1) + WALL_FILL_SIZE.width,
                this.GRID_HEIGHT * obstacleCfg.height + this.GAP_HEIGHT * (obstacleCfg.height - 1) + WALL_FILL_SIZE.height));
            this.walls.push(wall);
            this.addChild(wall);
            var pos = cc.pAdd(this.getGridPos(obstacleCfg.y, obstacleCfg.x),
                cc.p(-0.5 * this.GRID_WIDTH, -0.5 * this.GRID_HEIGHT));
            pos = cc.pAdd(pos, cc.p(-WALL_FILL_SIZE.width * 0.5, -WALL_FILL_SIZE.height * 0.5));
            wall.initBody(this.space, pos);
        }
    },

    initBricks: function () {
        this.bricks = [];
        for (var i = 0; i < this.config.bricks.length; ++i) {
            var brickCfg = this.config.bricks[i];
            for (var x = 0; x < brickCfg.width; ++x) {
                for (var y = 0; y < brickCfg.height; ++y) {
                    var brick = this.createBrick(x, y, brickCfg);
                    this.bricks.push(brick);
                }
            }
        }
    },

    createBrick: function (x, y, brickCfg) {
        var localCol = x + brickCfg.x;
        var localRow = y + brickCfg.y;
        var brick = BallPool.getFromPool("brick");
        if (!brick) {
            brick = new Grid(getColor(brickCfg.type), this.GRID_WIDTH, this.GRID_HEIGHT, GridType.BRICK);
        } else {
            brick.reset(getColor(brickCfg.type), this.GRID_WIDTH, this.GRID_HEIGHT, GridType.BRICK);
        }
        this.addChild(brick);
        brick.initBody(this.space, this.getGridPos(localRow, localCol));
        return brick;
    },

    initBoard: function () {
        this.boardNode = new Board(this.getBallWidth());
        this.addChild(this.boardNode);
        this.boardNode.initBody(this.space, cc.p(cc.winSize.width * 0.5, this.BOARD_Y));
    },

    getBallWidth: function () {
        return Math.max(this.GRID_WIDTH, 8);
    },

    initWorld: function () {
        this.WALL_THICK = 50;
        this.INNER_WALL = 20;
        //this.TOP_INNER_WALL = 50;
        this.space = new cp.Space();
        var walls = [
            {
                "shape": cc.size(cc.winSize.width + this.WALL_THICK, this.WALL_THICK), //bottom
                "pos": cp.v(cc.winSize.width * 0.5 - this.WALL_THICK * 0.5, -this.WALL_THICK * 0.5 + this.INNER_WALL)
            },
            {
                "shape": cc.size(cc.winSize.width + this.WALL_THICK, this.WALL_THICK), //top
                "pos": cp.v(cc.winSize.width * 0.5 - this.WALL_THICK * 0.5, cc.winSize.height + this.WALL_THICK * 0.5 - this.TOP_INNER_WALL - this.TOP_AD_WALL)
            },
            {
                "shape": cc.size(this.WALL_THICK, cc.winSize.height + this.WALL_THICK), //left
                "pos": cp.v(-this.WALL_THICK * 0.5 + this.INNER_WALL, cc.winSize.height * 0.5 - this.WALL_THICK * 0.5)
            },
            {
                "shape": cc.size(this.WALL_THICK, cc.winSize.height + this.WALL_THICK), //right
                "pos": cp.v(cc.winSize.width + this.WALL_THICK * 0.5 - this.INNER_WALL, cc.winSize.height * 0.5 - this.WALL_THICK * 0.5)
            }
        ];

        for (var i = 0; i < walls.length; i++) {
            var body = new cp.Body(Infinity, Infinity);
            var wall = walls[i];
            var shape = new cp.BoxShape(body, wall.shape.width, wall.shape.height);
            shape.setElasticity(1);
            shape.setFriction(0);
            body.setPos(wall.pos);
            this.space.addStaticShape(shape);
        }

        // Gravity
        this.space.gravity = cp.v(0, 0);
        this.space.sleepTimeThreshold = 0.5;
        this.space.collisionSlop = 0.5;
        this.space.iterations = 5;
        if (cc.sys.isNative) {
            this.space.useSpatialHash(this.GRID_WIDTH + 2, 10000);
        }

        //this.initDebugMode();
    },

    initDebugMode: function () {
        this._debugNode = cc.PhysicsDebugNode.create(this.space);
        this.addChild(this._debugNode);
    },

    getGridPos: function (localRow, localCol) {
        var gridSize = this.getGridSize();
        return cc.p((cc.winSize.width - this.config.pixelWidth) * 0.5 + (gridSize.width + this.GAP_WIDTH) * (localCol + 0.5),
            (gridSize.height + this.GAP_HEIGHT) * (localRow + 0.5) + this.BRICK_Y);
    },

    getGridSize: function () {
        if (!this.lastGridSize) {
            this.lastGridSize = cc.size(this.GRID_WIDTH, this.GRID_HEIGHT);
        }
        return this.lastGridSize;
    },

    update: function (dt) {
        if (this.stoped) {
            return;
        }
        switch (this.gameStep) {
            case GameStep.PRE_START:

                break;
            case GameStep.START:
                this.updateTime(dt);
                this.updateGrids(dt);
                this.updateChipmunk(dt);
                this.updateBoost(dt);
                this.checkGameOver();
                break;
            case GameStep.RELIFE:
                if (this.gameController) {
                    this.gameController.updateLifeCount();
                }
                this.removeAllBoosts();
                this.boardNode.showBall();
                this.gameStep = GameStep.PRE_START;
                break;
            case GameStep.END:
                this.updateChipmunk(dt);
                //this.updateBoost(dt);
                break;
        }
    },

    updateTime: function (dt) {
        if (!this.eclipsedTime) {
            this.eclipsedTime = 0;
        }
        this.eclipsedTime += dt * 1000;
        //if (!this.startTime) {
        //    this.startTime = Date.now();
        //}
        if (this.gameController) {
            this.gameController.updateTime();
        }
    },

    updateBalls: function (dt) {
        for (var i = this.ballList.length - 1; i >= 0; --i) {
            var ball = this.ballList[i];
            if (ball.getPosition().y < this.boardNode.y - 40 || !this.isInView(ball)) {
                this.removeBall(ball);
            } else {
                ball.update(dt);
            }
        }
    },

    adjustBallSpeed: function (ball) {
        var vel = ball.getVel();
        var distance = cc.pLength(vel);
        //cc.log("adjustBallSpeed:" + distance);
        if (distance < this.MAX_SPEED * 0.9) {
            var radian = Math.atan(vel.x / vel.y);
            ball.setVel(cc.p(this.MAX_SPEED * Math.sin(radian), this.MAX_SPEED * Math.cos(radian)));
        }
    },

    updateGrids: function (dt) {
        for (var i = this.bricks.length - 1; i >= 0; --i) {
            var brick = this.bricks[i];
            if (brick.removeable) {
                this.removeBrick(brick);
            }
        }
    },

    updateChipmunk: function (dt) {
        if (cc.sys.os === cc.sys.OS_ANDROID) {
            if (this.ballList.length > 20) {
                this.space.step(1 / 60);
            } else {
                for (var i = 0; i < 2; ++i) {
                    this.space.step(1 / 120);
                }
            }
        } else {
            if (this.ballList.length > 20) {
                for (var i = 0; i < 2; ++i) {
                    this.space.step(1 / 120);
                }
            } else {
                for (var i = 0; i < 3; ++i) {
                    this.space.step(1 / 180);
                }
            }
        }
        //var step = this.SPACE_STEP;
        //var frameTime = Math.min(dt, 0.25);
        //this.accumulator += frameTime;
        //while (this.accumulator >= step) {
        //    this.space.step(step);
        //    this.accumulator -= step;
        //}
        this.updateBalls(dt);
        this.adjustRandomVel(dt);
    },

    adjustRandomVel: function (dt) {
        var RANDOM_MAX_COUNT = 10;
        if (this.totalTime - this.lastAdjustTime > 5) {
            this.lastAdjustTime = this.totalTime;
            if (this.ballList.length < 10) {
                for (var i = this.ballList.length - 1; i >= 0; --i) {
                    var ball = this.ballList[i];
                    var random1 = game.utils.rangeNextNumber(-RANDOM_MAX_COUNT * 0.5, RANDOM_MAX_COUNT * 0.5);
                    var random2 = game.utils.rangeNextNumber(-RANDOM_MAX_COUNT * 0.5, RANDOM_MAX_COUNT * 0.5);
                    ball.setVel(cc.pAdd(ball.getVel(), cc.p(random1, random2)));
                }
            }
        }
        this.totalTime += dt;
    },

    updateBoost: function (dt) {
        for (var i = this.boosts.length - 1; i >= 0; --i) {
            var boost = this.boosts[i];
            boost.y -= dt * this.BOOST_SPEED;
            if (cc.rectIntersectsRect(boost.getBoundingBox(), this.boardNode.getBoundingBox())) {
                switch (boost.type) {
                    case BoostType.LIFE:
                        this.onAddLife();
                        break;
                    case BoostType.SPLIT:
                        this.useSplitBallBoost();
                        break;
                    case BoostType.THREE_BALL:
                        this.useNew3BallBoost();
                        break;
                }
                this.boosts.splice(i, 1);
                boost.removeFromParent();
            }
        }
    },

    useSplitBallBoost: function () {
        this.tryShootFirstBall();
        game.audioPlayer.playEffectByKey("boost_add");
        for (var j = this.ballList.length - 1; j >= 0; --j) {
            var ball = this.ballList[j];
            this.onSplitBall(ball.getPosition());
        }
    },

    useNew3BallBoost: function () {
        this.tryShootFirstBall();
        game.audioPlayer.playEffectByKey("boost_add");
        this.onShoot3Ball();
    },

    onAddLife: function () {
        this.lifeCount++;
        if (this.gameController) {
            this.gameController.updateLifeCount();
        }
        game.audioPlayer.playEffectByKey("life_add");
    },

    onSplitBall: function (position) {
        var vel = this.MAX_SPEED;
        for (var i = 0; i < 3; ++i) {
            var angle = game.utils.randomNextInt(90);
            var symbol1 = (game.utils.randomNextInt(2) === 1 ? 1 : -1);
            var symbol2 = (game.utils.randomNextInt(2) === 1 ? 1 : -1);
            var x = 10,y = 10;
            var randomPos = cc.pAdd(position, cc.p(-x / 2 + x * game.utils.randomNextNumber(1),
                -y / 2 + y * game.utils.randomNextNumber(1)));
            this.shootBall(randomPos, cc.p(symbol1 * vel * Math.sin(Math.PI / 180 * angle),
                    symbol2 * vel * Math.cos(Math.PI / 180 * angle)));
        }
    },

    onShoot3Ball: function () {
        var vel = this.MAX_SPEED;
        for (var i = 0; i < 3; ++i) {
            var angle = game.utils.randomNextInt(90);
            var symbol = (game.utils.randomNextInt(2) === 1 ? 1 : -1);
            this.shootBall(this.getInitBallPos(), cc.p(symbol * vel * Math.sin(Math.PI / 180 * angle),
                vel * Math.cos(Math.PI / 180 * angle)));
        }
    },

    switchPassDlg: function () {
        game.audioPlayer.playEffectByKey("victory");
        setTimeout(function () {
            if (GameMan.getInstance().hasNextLevel()) {
                game.popupMan.popupPassDlg(function () {
                    GameMan.getInstance().resumeGame();
                    game.sceneMan.switchScene(game.sceneType.GAME);
                }, function () {
                    game.sceneMan.switchScene(game.sceneType.GAME);
                });
            } else {
                game.popupMan.popupCommonDlg(game.local.getValue("all_completed"), function () {
                    game.sceneMan.switchScene(game.sceneType.LEVEL);
                });
            }
        }, 500);
    },

    checkGameOver: function () {
        var self = this;
        if (this.bricks.length === 0) {
            this.gameStep = GameStep.END;
            this.showBannerAds();
            GameMan.getInstance().gameWin(this.eclipsedTime / 1000);
            var star = GameMan.getInstance().currentStar;
            if (star < 3 && GameMan.getInstance().canPop3StarTips()) {
                GameMan.getInstance().setPop3StarTips();
                game.popupMan.popupYesNoCommonDlg(_("star_3_tips"), _("retry_title"), _("no_title"), function () {
                    GameMan.getInstance().resumeGame();
                    game.sceneMan.switchScene(game.sceneType.GAME);
                }, function () {
                    self.switchPassDlg();
                });
            } else {
                this.switchPassDlg();
            }
        } else if (this.ballList.length === 0) {
            if (this.lifeCount > 0) {
                this.lifeCount--;
                this.gameStep = GameStep.RELIFE;
            } else {

                if (game.adsManager.isRewardVideoReady()) {
                    this.gameStep = GameStep.WATCH_AD;
                    game.popupMan.popupYesNoCommonDlg(game.local.getValue("watch_ads_relife"),
                        game.local.getValue("relife_yes"),
                        game.local.getValue("relife_no"),
                        function () {
                            self.watchAdAndRelife();
                        },
                        function () {
                            self.switchToFail();
                        }, false, true);
                } else {
                    self.switchToFail();
                }
            }
        }
    },

    switchToRelife: function () {
        StoreHelper.getInstance().popupBoostRewardDlg(1, 1, function () {
            this.lifeCount = 2;
            this.gameStep = GameStep.RELIFE;
        }.bind(this));
    },

    switchToFail: function () {
        GameMan.getInstance().switchFail();
        this.gameStep = GameStep.END;
        game.popupMan.popupFailDlg(function () {
            game.sceneMan.switchScene(game.sceneType.GAME);
        }, function () {
            GameMan.getInstance().skipLevel();
            game.sceneMan.switchScene(game.sceneType.GAME);
        });
    },

    isInView: function (ball) {
        var worldPos = ball.getPosition();
        if (worldPos.x < 0 || worldPos.x > cc.winSize.width || worldPos.y < 0 || worldPos.y > cc.winSize.height) {
            return false;
        }
        return true;
    },

    tryShootFirstBall: function () {
        if (this.gameStep === GameStep.PRE_START) {
            this.gameStep = GameStep.START;
            this.shootBall(this.getInitBallPos(), cc.p(0, this.MAX_SPEED));
            this.boardNode.hideBall();
        }
    },

    onTouchBegan:function(touch, event) {
        if (this._curTouchId > 0) {
            return false;
        }
        this._curTouchId = touch.getID();
        if (this.gameController && this.gameController.ndHelp.visible) {
            this.gameController.ndHelp.visible = false;
            game.storageController.setItem("first_enter", "false");
            return false;
        }

        this.tryShootFirstBall();

        var touchLocation = touch.getLocation();
        touchLocation = this.getParent().convertToNodeSpace(touchLocation);
        this.lastTouchPos = touchLocation;
        //this.boardNode.setPosX(this.lastTouchPos.x);
        return true;
    },

    onTouchMoved:function(touch, event) {
        if (touch.getID() !== this._curTouchId) {
            return false;
        }
        var touchLocation = touch.getLocation();
        touchLocation = this.getParent().convertToNodeSpace(touchLocation);
        if (this.lastTouchPos) {
            var offset = (touchLocation.x - this.lastTouchPos.x);
            if (Math.abs(offset) > 2) {
                var X_OFFSET = this.INNER_WALL + this.getBallWidth() * 0.5 + 2;
                var x = this.boardNode.x + offset * 1.6;
                if (x < X_OFFSET) {
                    x = X_OFFSET;
                } else if (x > cc.winSize.width - X_OFFSET) {
                    x = cc.winSize.width - X_OFFSET;
                }
                this.boardNode.setPosX(x);
                this.lastTouchPos = touchLocation;
            }
        }
        return true;
    },

    onTouchEnded:function(touch, event) {
        if (touch.getID() !== this._curTouchId) {
            return false;
        }
        this.lastSelectGrid = null;
        this.lastTouchPos = null;
        this._curTouchId = -1;
    },

    onTouchCancelled:function(touch, event) {
    },

    collisionBegin : function ( arbiter, space ) {
        //cc.log('collision begin');
        return true;
    },

    collisionPre : function ( arbiter, space ) {
        //cc.log('collision pre');
        var shapes = arbiter.getShapes();
        for (var i = 0; i < shapes.length; ++i) {
            var shape = shapes[i];
            if (shape.collision_type === ShapeType.BRICK) {
                var body = shape.getBody();
                if (body.userData) {
                    body.userData.removeable = true;
                    this.generateBoost(body.userData.getPosition());
                }
            } else if (shape.collision_type === ShapeType.BALL) {
                if (this.gameStep === GameStep.START) {
                    this.playKnockAudio();
                }
            }
        }
        return true;
    },

    collisionPost : function ( arbiter, space ) {
        //cc.log('collision post');
    },

    collisionSeparate : function ( arbiter, space ) {
        //cc.log('collision separate');
        var shapes = arbiter.getShapes();
        var ballShape = null;
        var boardShape = null;
        for (var i = 0; i < shapes.length; ++i) {
            if (shapes[i].collision_type === ShapeType.BALL) {
                var body = shapes[i].getBody();
                if (body && body.userData) {
                    this.adjustBallSpeed(body.userData);
                }
                ballShape = shapes[i];
            } else if (shapes[i].collision_type === ShapeType.BOARD) {
                boardShape = shapes[i];
            }
        }
        if (ballShape && boardShape) {
            if (ballShape.body && ballShape.body.userData && boardShape.body && boardShape.body.userData) {
                var ball = ballShape.body.userData;
                var board = boardShape.body.userData;
                if (ball.getPosition().y < board.y + board.height * 0.5) {
                    return;
                }
                var boardShapeX1 = ball.getPosition().x - (board.x - board.width / 2);
                var x = boardShapeX1 / boardShape.body.userData.width * 100 / 50 - 1;
                x = Math.max(Math.min(0.9, x), -0.9);
                var y = Math.sqrt(1 - x * x);
                ball.setVel(cc.p(this.MAX_SPEED * x, this.MAX_SPEED * y));
            }
        }
    },

    playKnockAudio: function () {
        if (Date.now() - this.lastTime > 50) {
            this.lastTime = Date.now();
            game.audioPlayer.playEffectByKey("knock");
        }
    },

    getInitBallPos: function () {
        return cc.pAdd(this.boardNode.getPosition(), cc.p(0, 30));
    },

    shootBall: function (position, vel) {
        if (this.ballList.length > this.MAX_BALL) {
            return;
        }
        var ball = BallPool.getFromPool("ball");
        if (!ball) {
            ball = new Ball(this.getBallWidth());
        } else {
            ball.reset(this.getBallWidth());
        }
        this.addChild(ball);
        this.ballList.push(ball);
        ball.initBody(this.space, position);
        ball.setVel(vel);
    },

    removeBall: function (ball) {
        var index = this.ballList.indexOf(ball);
        if (index > -1) {
            this.ballList.splice(index, 1);
        }
        ball.removeBody();
        BallPool.putInPool("ball", ball);
        ball.removeFromParent();
    },

    removeBrick: function (brick) {
        var index = this.bricks.indexOf(brick);
        if (index > -1) {
            this.bricks.splice(index, 1);
        }
        brick.removeBody();
        if (brick.isGift) {
            this.stop();
            game.popupMan.popupRewardGift(function () {
                this.resume();
            }.bind(this));
        } else {
            BallPool.putInPool("brick", brick);
        }
        brick.removeFromParent();
    },

    generateBoost: function (pos) {
        var boostType;

        var hasBoost = false;
        if (this.hardMode) {
            hasBoost = game.utils.randomNextInt(400) < 400 * this.BOOST_POSIBILITY / this.ballList.length;
        } else {
            hasBoost = game.utils.randomNextInt(100) < 100 * this.BOOST_POSIBILITY / this.ballList.length;
        }

        if (GameMan.getInstance().levelId <= 2) {
            if (cc.isUndefined(this.generateBoostCount)) {
                this.generateBoostCount = 0;
            }
            if (this.generateBoostCount < 3) {
                hasBoost = true;
                this.generateBoostCount++;
            }
        }
        if (hasBoost) {
            boostType = game.utils.randomNextInt(2) + 2;
        }

        var hasLife = false;

        if (!hasBoost) {
            hasLife = game.utils.randomNextNumber(100) < (100 * this.LIFE_POSIBILITY / this.ballList.length);
            if (hasLife) {
                var lifeBoostCount = 0;
                for (var i = 0; i < this.boosts.length; ++i) {
                    if (this.boosts[i].type === BoostType.LIFE) {
                        lifeBoostCount++;
                    }
                }
                if (this.lifeCount + lifeBoostCount >= this.MAX_LIFE) {
                    hasLife = false;
                } else {
                    boostType = BoostType.LIFE;
                }
            }
        }

        if (hasLife || hasBoost) {
            var boost = new Boost(boostType);
            boost.setPosition(pos);
            this.addChild(boost);
            //boost.runAction(cc.sequence(cc.moveTo((pos.y / 100), cc.p(pos.x, 0)), cc.callFunc(this.onRemoveBoost, this)));
            this.boosts.push(boost);
        }
    },

    onRemoveBoost: function (boost) {
        var index = this.boosts.indexOf(boost);
        if (index > -1) {
            this.boosts.splice(index, 1);
            boost.removeFromParent();
        }
    },

    removeAllBoosts: function () {
        for (var i = 0; i < this.boosts.length; ++i) {
            var boost = this.boosts[i];
            if (boost) {
                boost.removeFromParent();
            }
        }
        this.boosts = [];
    },

    stop: function () {
        this.stoped = true;
        //this.showBannerAds();
    },

    resume: function () {
        this.stoped = false;
        //game.adsManager.removeBannerAds("bottom");
    },

    showBannerAds: function () {
        //if (game.playerMan.getLevel() >= 3) {
        //    game.adsManager.showBannerAds("bottom");
        //}
    },

    showTopBannerAds: function () {
        if (game.playerMan.getLevel() >= 3) {
            if (game.adsManager.showTopBanner) {
                //if 1 > 0
                if (game.playerMan.getRegisterDay() > game.adsManager.topBannerDay) {
                    game.adsManager.showBannerAds("top");
                }
            }
        }
    },

    removeTopBannerAds: function () {
        //if (game.adsManager.showTopBanner) {
        //    game.adsManager.removeBannerAds("top");
        //}
    },

    watchAdAndRelife: function () {
        var self = this;
        StoreHelper.getInstance().checkAndShowRewardVideo(game.utils.isIOS() ? "fuhuo01" : "fuhuo01", function (rewarded) {
            if (rewarded) {
                self.switchToRelife();
            } else {
                self.switchToFail();
            }
        });
    }
});

module.exports = BricksView;
},{"../../common/util/Utils":31,"../controller/BoardController":47,"../entity/Ball":81,"../entity/BallPool":82,"../entity/Board":83,"../entity/Boost":84,"../entity/Grid":85,"../entity/Obstacle":86,"../entity/Wall":88,"../enum/BoostType":89,"../enum/GridType":91,"../enum/ShapeType":95,"../model/GameMan":99,"../model/StoreHelper":103}]},{},[33])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
