(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/**
 * Created by qinning on 15/4/14.
 */
var VERSION_ASSET_ID = "@version";
var MANIFEST_ASSET_ID = "@manifest";
var AssetsManager = cc.Class.extend({
    /**
     * {jsb.AssetsManager}
     */
    _am : null,
    /**
     * {number}失败次数
     */
    _failCount : 0,
    /**
     * {number}最大错误重试次数
     */
    _maxFailCount : 1,
    ctor:function(){

    },
    purge:function() {
        if(this._am){
            this._am.release();
        }
        this._am = null;
    },

    retryDownAssets: function () {
        this._failCount = 0;
        this._maxFailCount = 5;
        if(this._am) {
            this._am.downloadFailedAssets();
        }
    },

    downLoadAssets : function(projectManifestPath,storagePath,updateCallBack,endCallBack) {
        this._failCount = 0;
        this._maxFailCount = 5;
        this._am = new jsb.AssetsManager(projectManifestPath, storagePath);
        this._am.retain();
        if (!this._am.getLocalManifest().isLoaded()) {
            endCallBack("error_local_manifest_not_loaded");
            return;
        }
        var that = this;
        var listener = new jsb.EventListenerAssetsManager(this._am, function (event) {
            switch (event.getEventCode()) {
                case jsb.EventAssetsManager.UPDATE_PROGRESSION:
                    var msg = event.getMessage();
                    cc.log("UPDATE_PROGRESSION:" + msg);
                    var assetId = event.getAssetId();
                    cc.log("assetId:"+assetId);
                    if(assetId == VERSION_ASSET_ID || assetId == MANIFEST_ASSET_ID) {
                        updateCallBack(1, "update manifest");
                    } else {
                        updateCallBack(event.getPercent(), msg);
                    }
                    break;
                case jsb.EventAssetsManager.UPDATE_FAILED:
                    cc.log("Update failed. " + event.getMessage());
                    that._failCount++;
                    if (that._failCount < that._maxFailCount) {
                        that._am.downloadFailedAssets();
                    }
                    else {
                        cc.log("Reach maximum fail count, exit update process");
                        that._failCount = 0;
                        endCallBack(event.getEventCode());
                    }
                    break;
                case jsb.EventAssetsManager.UPDATE_FINISHED:
                case jsb.EventAssetsManager.ALREADY_UP_TO_DATE:
                    endCallBack(null);
                    break;

                case jsb.EventAssetsManager.ERROR_NO_LOCAL_MANIFEST:
                    cc.log("No local manifest file found, skip assets update.");
                    endCallBack(event.getEventCode());
                    break;
                case jsb.EventAssetsManager.ERROR_DOWNLOAD_MANIFEST:
                    endCallBack(event.getEventCode());
                    cc.log("Fail to download manifest file, update skipped.");
                    break;
                case jsb.EventAssetsManager.ERROR_PARSE_MANIFEST:
                    endCallBack(event.getEventCode());
                    cc.log("Fail to parse manifest file, update skipped.");
                    break;
                case jsb.EventAssetsManager.ERROR_UPDATING:
                    cc.log("Asset update error: " + event.getMessage());
                    endCallBack(event.getEventCode());
                    break;
                case jsb.EventAssetsManager.ERROR_DECOMPRESS:
                    cc.log(event.getMessage());
                    endCallBack(event.getEventCode());
                    break;
                default:
                    cc.log("default: " + event.getEventCode());
                    break;
            }
        });

        cc.eventManager.addListener(listener, 1);
        this._am.update();
    }
});

AssetsManager._instance = null;
AssetsManager._firstUseInstance = true;

/**
 *
 * @returns {AssetsManager}
 */
AssetsManager.getInstance = function () {
    if (AssetsManager._firstUseInstance) {
        AssetsManager._firstUseInstance = false;
        AssetsManager._instance = new AssetsManager();
    }
    return AssetsManager._instance;
};


module.exports = AssetsManager;
},{}],2:[function(require,module,exports){
/**
 * Created by qinning on 15/4/27.
 */


var AudioEngineWrapper = {
    //Used for native
    _musicId: -1,
    _musicVolume: 1.0,
    _effectVolume: 1.0,
    _audioIdMap: {},

    useJsbAudioEngine: function() {
        return (cc.sys.isNative);
    },

    getMusicVolume: function () {
        var volume = 0;
        if (this.useJsbAudioEngine()) {
            volume = this._musicVolume;
        } else {
            volume = cc.audioEngine.getMusicVolume();
        }
        return volume;
    },

    setMusicVolume: function (volume) {
        if (this.useJsbAudioEngine()) {
            this._musicVolume = volume;
            jsb.AudioEngine.setVolume(this._musicId, volume);
        } else {
            cc.audioEngine.setMusicVolume(volume);
        }
    },

    getEffectsVolume: function () {
        var volume;
        if (this.useJsbAudioEngine()) {
            volume = this._effectVolume;
        } else {
            volume = cc.audioEngine.getEffectsVolume();
        }
        return volume;
    },

    setEffectsVolume: function (volume) {
        if (this.useJsbAudioEngine()) {
            this._effectVolume = volume;
            var audioIds = Object.keys(this._audioIdMap);
            audioIds.forEach (function (audioId) {
                jsb.AudioEngine.setVolume(parseInt(audioId), volume);
            });
        } else {
            cc.audioEngine.setEffectsVolume(volume);
        }
    },

    playEffect: function (url, loop) {
        var audioId;
        if (this.useJsbAudioEngine()) {
            audioId = jsb.AudioEngine.play2d(url, loop, this._effectVolume);
            this._audioIdMap[audioId] = audioId;
        } else {
            audioId = cc.audioEngine.playEffect(url, loop);
        }
        return audioId;
    },

    stopEffect: function (audioId) {
        if (this.useJsbAudioEngine()) {
            this._nativeStopAudio(audioId);
            delete this._audioIdMap[audioId];
        } else {
            cc.audioEngine.stopEffect(audioId);
        }
    },

    stopAllEffects: function () {
        if (this.useJsbAudioEngine()) {
            var audioIds = Object.keys(this._audioIdMap);
            var self = this;
            audioIds.forEach(function (audioId) {
                self._nativeStopAudio(audioId);
            });
            this._audioIdMap = {};
        } else {
            cc.audioEngine.stopAllEffects();
        }
    },

    playMusic: function (url, loop) {
        if (this.useJsbAudioEngine()) {
            if (-1 !== this._musicId) {
                this._nativeStopAudio(this._musicId);
            }
            this._musicId = jsb.AudioEngine.play2d(url, loop, this._musicVolume);
        } else {
            cc.audioEngine.playMusic(url, loop);
        }
    },

    isMusicPlaying: function () {
        var result;
        if (this.useJsbAudioEngine()) {
            result = (jsb.AudioEngine.getState(this._musicId) === 1);
        } else {
            result = cc.audioEngine.isMusicPlaying();
        }
        return result;
    },

    resumeMusic: function () {
        if (this.useJsbAudioEngine()) {
            jsb.AudioEngine.resume(this._musicId);
        } else {
            cc.audioEngine.resumeMusic();
        }
    },

    pauseMusic: function () {
        if (this.useJsbAudioEngine()) {
            jsb.AudioEngine.pause(this._musicId);
        } else {
            cc.audioEngine.pauseMusic();
        }
    },

    _nativeStopAudio: function (audioId) {
        jsb.AudioEngine.stop(audioId);
    },

    stopMusic: function () {
        if (this.useJsbAudioEngine()) {
            this._nativeStopAudio(this._musicId);
            this._musicId = -1;
        } else {
            cc.audioEngine.stopMusic();
        }
    },

    preloadEffect: function (effectName) {
        if (this.useJsbAudioEngine()) {
            jsb.AudioEngine.preload(effectName);
        }
    },

    unloadEffect: function (effectName) {
        if (this.useJsbAudioEngine()) {
            jsb.AudioEngine.uncache(effectName);
        }
    }
};

var ACTION_TYPE = {
    ACTION_NULL: 0,
    ACTION_PAUSE: 1,
    ACTION_RESUME: 2
};

var PLAY_TYPE = {
    PLAY_TYPE_NORMAL: 0,
    PLAY_TYPE_FADE_OUT_FADE_IN: 1
};

var AudioPlayer = cc.Class.extend({
    lastMusicVolume: 0,
    suffix: null,
    effectMap: null,
    playType: PLAY_TYPE.PLAY_TYPE_NORMAL,
    actionType: ACTION_TYPE.ACTION_NULL,
    musicName: null,
    loop: false,
    ctor: function () {
        if (cc.sys.os === cc.sys.OS_ANDROID) {
            this.suffix = "res/audio_ogg/%s.ogg";
        } else {
            this.suffix = "res/audio_mp3/%s.mp3";
        }
        this.effectMap = {};
        var isMusicOn = this.isMusicOn();
        this.lastMusicVolume = 1;
        this.setMusicOn(isMusicOn);
    },

    beginSchedule: function () {
        cc.director.getScheduler().scheduleCallbackForTarget(this, this.update, 0.1, cc.REPEAT_FOREVER, 0, false);
    },

    stopSchedule: function () {
        cc.director.getScheduler().unscheduleCallbackForTarget(this, this.update);
    },

    update: function (dt) {
        dt *= 0.5;
        var isFinish = false;
        var volume = cc.audioEngine.getMusicVolume();
        if (this.playType == PLAY_TYPE.PLAY_TYPE_FADE_OUT_FADE_IN) {
            if (volume > 0.001) {
                if (this.actionType == ACTION_TYPE.ACTION_PAUSE) {
                    volume -= dt;
                    if (volume < 0.001) {
                        volume = 0.01;
                        this.playMusicByKey(this.musicName, this.loop);
                        this.actionType = ACTION_TYPE.ACTION_RESUME;
                    }
                    cc.audioEngine.setMusicVolume(volume);
                } else if (this.actionType == ACTION_TYPE.ACTION_RESUME) {
                    volume += dt;
                    if (volume > 0.99) {
                        volume = 0.99;
                        isFinish = true;
                    }
                    cc.audioEngine.setMusicVolume(volume);
                }
            } else {
                this.playMusicByKey(this.musicName, this.loop);
            }
            if (isFinish) {
                this.actionType = ACTION_TYPE.ACTION_NULL;
                this.playType = PLAY_TYPE.PLAY_TYPE_NORMAL;
                this.stopSchedule();
            }
        } else {
            if (volume > 0.001) {
                if (this.actionType == ACTION_TYPE.ACTION_PAUSE) {
                    volume -= dt;
                    if (volume < 0.001) {
                        volume = 0.01;
                        isFinish = true;
                        this.pauseMusic();
                    }
                    cc.audioEngine.setMusicVolume(volume);
                } else if (this.actionType == ACTION_TYPE.ACTION_RESUME) {
                    volume += dt;
                    if (volume > 0.99) {
                        volume = 0.99;
                        isFinish = true;
                    }
                    cc.audioEngine.setMusicVolume(volume);
                }
            } else {
                isFinish = true;
            }
            if (isFinish) {
                this.actionType = ACTION_TYPE.ACTION_NULL;
                this.stopSchedule();
            }
        }
    },

    playEffectByKey: function (effectName, loop) {
        if (!this.isEffectOn()) {
            return;
        }
        var fileName = game.utils.sprintf(this.suffix, effectName);
        var key = "";
        if (cc.sys.isNative) {
            if (jsb.fileUtils.isFileExist(fileName)) {
                key = AudioEngineWrapper.playEffect(fileName, loop);
            } else {
                cc.log(game.utils.sprintf("effect file %s not found", fileName));
            }
        } else {
            if (cc.loader.getRes(fileName)) {
                key = AudioEngineWrapper.playEffect(fileName, loop);
            }
        }
        if (key) {
            this.effectMap[fileName] = key;
        }
    },

    playMusicByKey: function (musicName, loop) {
        this.actionType = ACTION_TYPE.ACTION_NULL;
        this.playType = PLAY_TYPE.PLAY_TYPE_NORMAL;
        if (this.isMusicOn()) {
            if (this.lastMusicVolume != 0) {
                AudioEngineWrapper.setMusicVolume(this.lastMusicVolume);
            } else {
                AudioEngineWrapper.setMusicVolume(1);
            }
        }
        var fileName = game.utils.sprintf(this.suffix, musicName);
        if (cc.sys.isNative) {
            if (jsb.fileUtils.isFileExist(fileName)) {
                AudioEngineWrapper.playMusic(fileName, loop);
            } else {
                cc.log(game.utils.sprintf("music file %s not found", fileName));
            }
        } else {
            if (cc.loader.getRes(fileName)) {
                AudioEngineWrapper.playMusic(fileName, loop);
            }
        }
    },

    isPlayingMusic: function () {
        return AudioEngineWrapper.isMusicPlaying();
    },

    resumeMusic: function () {
        AudioEngineWrapper.resumeMusic();
    },

    resumeMusicSlowly: function () {
        var volume = AudioEngineWrapper.getMusicVolume();
        if (volume < 0.0001 || volume >= 0.99) {
            return;
        }
        if (this.actionType == ACTION_TYPE.ACTION_NULL) {
            this.beginSchedule();
        }
        AudioEngineWrapper.setMusicVolume(0.01);
        this.resumeMusic();
        this.actionType = ACTION_TYPE.ACTION_RESUME;
    },

    stopMusic: function () {
        AudioEngineWrapper.stopMusic();
    },

    stopEffect: function (effectName) {
        var fileName = game.utils.sprintf(this.suffix, effectName);
        var effectKey = this.effectMap[fileName];
        if (effectKey) {
            AudioEngineWrapper.stopEffect(effectKey);
            delete this.effectMap[fileName];
        }
    },

    stopAllEffects: function () {
        AudioEngineWrapper.stopAllEffects();
    },

    isEffectOn: function () {
        var isOn = game.storageController.getItem("effect_on", "true");
        if (isOn == "true") {
            return true;
        }
        return false;
    },

    isMusicOn: function () {
        var isOn = game.storageController.getItem("music_on", "true");
        if (isOn == "true") {
            return true;
        }
        return false;
    },

    isVibrateOn: function () {
        var isOn = game.storageController.getItem("vibrate_on", "true");
        if (isOn == "true") {
            return true;
        }
        return false;
    },

    pauseMusic: function () {
        AudioEngineWrapper.pauseMusic();
    },

    pauseMusicSlowly: function () {
        if (!this.isPlayingMusic()) {
            return;
        }
        if (AudioEngineWrapper.getMusicVolume() < 0.0001) {
            return;
        }
        if (this.actionType == ACTION_TYPE.ACTION_NULL) {
            this.beginSchedule();
        }
        //AudioEngineWrapper.setMusicVolume(0.99);
        this.actionType = ACTION_TYPE.ACTION_PAUSE;
    },

    playMusicSlowlyByKey: function (musicName, loop) {
        if (!this.isPlayingMusic()) {
            this.playMusicByKey(musicName, loop);
            return;
        }

        this.playType = PLAY_TYPE.PLAY_TYPE_FADE_OUT_FADE_IN;
        this.musicName = musicName;
        this.loop = loop;

        if (this.actionType == ACTION_TYPE.ACTION_NULL) {
            this.beginSchedule();
        }
        this.actionType = ACTION_TYPE.ACTION_PAUSE;
    },
    
    setEffectOn: function (isOn) {
        game.storageController.setItem("effect_on", "" + isOn);
    },

    setVibrateOn: function (isOn) {
        game.storageController.setItem("vibrate_on", "" + isOn);
    },

    setMusicOn: function (isOn) {
        if (isOn) {
            if (this.lastMusicVolume != 0) {
                AudioEngineWrapper.setMusicVolume(this.lastMusicVolume);
            } else {
                AudioEngineWrapper.setMusicVolume(1);
            }
        } else {
            this.lastMusicVolume = AudioEngineWrapper.getMusicVolume();
            AudioEngineWrapper.setMusicVolume(0);
        }
        game.storageController.setItem("music_on", "" + isOn);
    },

    setMusicVolume: function (volume) {
        if (this.isMusicOn()) {
            AudioEngineWrapper.setMusicVolume(volume);
        }
    },

    preloadEffect: function (effectName) {
        var fileName = game.utils.sprintf(this.suffix, effectName);
        cc.log("preload effect:" + fileName);
        AudioEngineWrapper.preloadEffect(fileName);
    },

    unloadEffect: function (effectName) {
        var fileName = game.utils.sprintf(this.suffix, effectName);
        cc.log("unload effect:" + fileName);
        AudioEngineWrapper.unloadEffect(fileName);
    },

    vibrateShort: function () {
        if (!this.isVibrateOn()) {
            return;
        }
        if (cc.sys.isNative) {
            if (cc.sys.os === cc.sys.OS_ANDROID) {
                return;
            }
            jsb_dp.oneSdkBridge.vibrateShort();
        }
    },

    vibrateLong: function () {
        if (!this.isVibrateOn()) {
            return;
        }
        if (cc.sys.isNative) {
            if (cc.sys.os === cc.sys.OS_ANDROID) {
                return;
            }
            jsb_dp.oneSdkBridge.vibrateLong();
        }
    }
});

AudioPlayer._instance = null;
AudioPlayer._firstUseInstance = true;

/**
 *
 * @returns {AudioPlayer}
 */
AudioPlayer.getInstance = function () {
    if (AudioPlayer._firstUseInstance) {
        AudioPlayer._firstUseInstance = false;
        AudioPlayer._instance = new AudioPlayer();
    }
    return AudioPlayer._instance;
};

module.exports = AudioPlayer;
},{}],3:[function(require,module,exports){
var GameBridge = {
    getMenuScene: function () {
        var MenuScene = require("../../many_bricks/scene/MenuScene");
        return new MenuScene();
    },

    getConfig: function () {
        return require("../../many_bricks/config/Config");
    },

    getPopupMan: function () {
        return require("../../many_bricks/model/PopupMan");
    },

    getLoadingScene: function () {
        var LoadingScene = require("../../many_bricks/scene/LoadingScene");
        return new LoadingScene();
    },

    getGameMan: function () {
        var GameMan = require("../../many_bricks/model/GameMan");
        return GameMan.getInstance();
    }
};

module.exports = GameBridge;
},{"../../many_bricks/config/Config":39,"../../many_bricks/model/GameMan":116,"../../many_bricks/model/PopupMan":118,"../../many_bricks/scene/LoadingScene":124,"../../many_bricks/scene/MenuScene":125}],4:[function(require,module,exports){
/**
 * Created by qinning on 15/4/23.
 */
var Utils = require("../util/Utils");

var BaseCCBController = function() {
};

BaseCCBController.prototype.onDidLoadFromCCB = function() {
    var self = this;
    var oldOnEnter = this.rootNode["onEnter"];
    this.rootNode["onEnter"] = function() {
        if(cc.isFunction(oldOnEnter)){
            oldOnEnter.apply(self.rootNode, arguments);
        }
        self.onEnter();
    };
    var oldOnExit = this.rootNode["onExit"];
    this.rootNode["onExit"] = function() {
        if (cc.isFunction(oldOnExit)) {
            oldOnExit.apply(self.rootNode, arguments);
        }
        self.onExit();
    };
    this._visitNodes();
};

BaseCCBController.prototype.onEnter = function() {
};

BaseCCBController.prototype.onExit = function() {
};

function setScaleWithParentSize(label) {
    cc.log("setScaleWithParentSize");
    var parent = label.getParent();
    var parentSize = parent.getContentSize();
    var fontSize = label.getContentSize();

    if (!label.__origin_scale) {
        label.__origin_scale = {
            x: label.getScaleX(),
            y: label.getScaleY()
        };
    }

    var size = {
        width : fontSize.width * label.__origin_scale.x,
        height : fontSize.height * label.__origin_scale.y
    };

    // a clean hacking, save us to calc the label height manually. :]
    // parentSize.height *= label.__origin_scale.y;

    if (size.width > parentSize.width || size.height > parentSize.height) {
        var x = Math.min(parentSize.width / size.width, 1) * label.__origin_scale.x;
        var y = Math.min(parentSize.height / size.height, 1) * label.__origin_scale.y;

        var scale = Math.min(x, y);
        label.setScale(scale);
    } else {
        //maybe reused, reset origin size
        label.setScale(label.__origin_scale.x);
    }
}

BaseCCBController.prototype._visitNodes = function () {
    var TouchedNode = require("../ext/TouchedNode");
    Utils.walkNode(this.rootNode, function(nd) {
        if (nd.___visited) {
            return true;
        }
        nd.___visited = true;
        if (!game.config.menuNoScale) {
            var isMenuItem = Utils.isNodeMenuItem(nd);
            if (isMenuItem || (Utils.isNodeButton(nd) && nd.zoomOnTouchDown)) {
                if (nd.zoomOnTouchDown) {
                    nd.zoomOnTouchDown = false;
                }
                var node = new TouchedNode(isMenuItem);
                nd.addChild(node);
            }
        }

        if (nd.getString != null && nd.setString != null) {
            var parent = nd.getParent();
            //cc.log("_visitNodes tag:" + parent.getTag());
            if (parent && parent.getTag() === 79) {
                var isBMFont = false;
                if(Utils.isLabelBMFont(nd)) {
                    isBMFont = true;
                }
                //cc.log("_visitNodes nd._className:" + nd._className);
                //cc.log("_visitNodes isBMFont:" + isBMFont);
                if(isBMFont) {
                    if (cc.sys.isNative) {
                        //cc.log("_visitNodes 2");
                        // maybe repeat call in onEnter
                        if (!nd.__origin_setstring) {
                            nd.__origin_setstring = nd.setString;
                            nd.setString = function(newString) {
                                this.__origin_setstring(newString);
                                // here we start to hack
                                setScaleWithParentSize(this);
                            }.bind(nd);
                        }
                    } else {
                        nd.setString = function(newString, needUpdateLabel) {
                            // origin code copied from CCLabelBMFont.js setString

                            newString = String(newString);
                            if (needUpdateLabel == null)
                                needUpdateLabel = true;
                            if (newString == null || !cc.isString(newString))
                                newString = newString + "";

                            //this._initialString = newString;
                            this._setString(newString, needUpdateLabel);

                            // here we start to hack
                            // set the dimension according to it's parent who has a tag 79
                            // needUpdateLabel == true, it prevents the loop been called recursively.
                            if (needUpdateLabel == true) {
                                setScaleWithParentSize(this);
                            }

                        }.bind(nd);
                    }
                }
            }

            var str = nd.getString();
            var searchStr = "&key.";
            if (str.substr(0, searchStr.length) == searchStr) {
                var key = str.substr(searchStr.length);
                var value = _(key);
                nd.setString(value);
            }
        }

        return true;
    });
};

module.exports = BaseCCBController;
},{"../ext/TouchedNode":14,"../util/Utils":35}],5:[function(require,module,exports){
/**
 * Created by qinning on 2017/8/29.
 */


var CrossPromController = function () {
    BaseCCBController.call(this);
    this._crossPromPic = null;

    this._corssPromConfig = null;
};

game.utils.inherits(CrossPromController, BaseCCBController);

CrossPromController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);

    if (this._infoLabel) {
        if (game.local.isChinese()) {
            this._infoLabel.setString("马上玩");
        } else {
            this._infoLabel.setString("Play");
        }
    }
};

CrossPromController.prototype.closeClicked = function (sender) {
    AudioHelper.playBtnSound();
    this.close();
};

CrossPromController.prototype.downloadClicked = function (sender) {
    AudioHelper.playBtnSound();
    cc.sys.openURL(this._corssPromConfig.downloadUrl);
    this.close();
};

CrossPromController.prototype.initWith = function (config, texture) {
    this._corssPromConfig = config;
    this._crossPromPic.setTexture(texture);
};

CrossPromController.prototype.popup = function () {
    game.dialogManager.popup(this.rootNode);
};

CrossPromController.prototype.close = function () {
    game.dialogManager.close(this.rootNode);
};

CrossPromController.createFromCCB = function(ccbName) {
    var node = game.utils.loadNodeFromCCB(ccbName, null, "CrossPromController", new CrossPromController());
    return node;
};

module.exports = CrossPromController;
},{}],6:[function(require,module,exports){

var NumberAnimation = cc.Class.extend({
    animing: false,
    startNum: 0,
    endNum: 0,
    step: 0,
    time: 0.8,
    label: null,

    ctor: function (label) {
        this.label = label;
    },

    playNumAnim: function (startNum, endNum) {
        this.animing = true;
        this.startNum = startNum;
        this.endNum = endNum;
        this.elapsedTime = 0;
        this.step = (this.endNum - this.startNum) / this.time;
    },

    update: function (dt) {
        if (this.animing) {
            this.elapsedTime += dt;
            cc.log("number:" + (this.startNum + this.step * this.elapsedTime));
            this.label.setString(Math.floor(this.startNum + this.step * this.elapsedTime));
            if (this.elapsedTime >= this.time) {
                this.label.setString(this.endNum);
                this.animing = false;
            }
        }
    },

    destroy: function () {
        this.label = null;
    }

});

module.exports = NumberAnimation;
},{}],7:[function(require,module,exports){
/**
 * Created by qinning on 2017/1/23.
 */

var PaymentInfo = function() {
    this.purchaseId = null;
    this.productId = null;
    this.receipt = null;
    this.signature = null;

    this.info = "";
};

PaymentInfo.prototype.unmarshal = function(jsonObj) {
    this.purchaseId = jsonObj["purchaseId"] || "";
    this.productId = jsonObj["productId"] || "";
    this.receipt = jsonObj["receipt"] || "";
    this.signature = jsonObj["signature"] || "";
    this.info = jsonObj["info"] || "";
};

module.exports = PaymentInfo;
},{}],8:[function(require,module,exports){
/**
 * Created by oye on 15-5-17.
 */
var PlayerInfo = function(){
    this.playerId = "";
    this.bestScore = 0;
    this.removedAds = false;
    this.level = 0;
    this.progress = 0;
    this.levelMap = null;
    this.rated = false;
};

PlayerInfo.prototype.unmarshall = function (json) {
    this.playerId = json["playerId"];
    this.bestScore = json["bestScore"] || 0;
    this.removedAds = json["removedAds"] || false;
    this.level = json["level"] || 1;
    this.progress = json["progress"] || 0;
    this.levelMap = json["levelMap"] || {};
    this.rated = json["rated"] || false;
};

PlayerInfo.createDefault = function () {
    var playerInfo = new PlayerInfo();
    playerInfo.hintsCount = 5;
    playerInfo.bestScore = 0;
    playerInfo.removedAds = false;
    playerInfo.level = 1;
    playerInfo.progress = 0;
    playerInfo.levelMap = {};
    playerInfo.rated = false;
    return playerInfo;
};

module.exports = PlayerInfo;

},{}],9:[function(require,module,exports){
/**
 * Created by qinning on 2017/1/23.
 */

var ProductInfo = function () {
    this.productId = 0;
    this.price = 0;
    this.description = null;
    this.title = null;
};

ProductInfo.prototype.unmarshal = function (jsonObj) {
    this.productId = jsonObj["productId"];
    this.price = jsonObj["price"];
    this.description = jsonObj["description"];
    this.title = jsonObj["title"];
};

module.exports = ProductInfo;
},{}],10:[function(require,module,exports){
var AdsPlace = {
    Pass: 1,
    Home: 2,
    BackGround: 3,
    Refresh: 4,
    FirstEnter: 5,
    Num: 5
};

AdsPlace.getName = function (place) {
    switch (place) {
        case AdsPlace.Pass:
            return "pass";
        case AdsPlace.Home:
            return "home";
        case AdsPlace.BackGround:
            return "background";
        case AdsPlace.Refresh:
            return "refresh";
        case AdsPlace.FirstEnter:
            return "first_enter";
        default:
            return "unknown";
    }
};

module.exports = AdsPlace;
},{}],11:[function(require,module,exports){
/**
 * Created by qinning on 2017/1/23.
 */

var PaymentCode = {
    PAYMENT_CODE_SUCCESS: 0,
    PAYMENT_CODE_FAIL: 1
};

module.exports = PaymentCode;
},{}],12:[function(require,module,exports){
/**
 * Created by alanmars on 15/4/17.
 */
var EventPackage = cc.Class.extend({
    callback: null,
    target: null,
    listener: null,

    ctor: function (callback, target, listener) {
        this.callback = callback;
        this.target = target;
        this.listener = listener;
    }
});

var EventUserData = cc.Class.extend({
    userData: null,

    ctor: function (userData, target, listener) {
        this.userData = userData;
    },

    getUserData: function() {
        return this.userData;
    }
});
var EventDispatcher = (function () {
    var instance;

    function createInstance() {
        var listenersMap = {};
        var listenersCustomMap = {};
        return {
            /**
             * @param {string} eventName
             * @param {function} callback
             * @param {object} target
             */
            addEventListener: function (eventName, callback, target) {

                var shouldAdd = true;
                var eventPackages = listenersMap[eventName];
                if (cc.isUndefined(eventPackages)) {
                    eventPackages = [];
                    listenersMap[eventName] = eventPackages;
                }
                else {
                    for (var i = 0; i < eventPackages.length; ++i) {
                        var eventPackage = eventPackages[i];
                        if (eventPackage.callback === callback && eventPackage.target === target) {
                            shouldAdd = false;
                            break;
                        }
                    }
                }

                if (shouldAdd) {
                    eventPackages.push(new EventPackage(callback, target, null));
                }
            },

            /**
             * @param {string} eventName
             * @param {function} callback
             * @param {object} target
             */
            removeEventListener: function (eventName, callback, target) {
                if (listenersMap[eventName]) {
                    /**
                     * @type {Array.<EventPackage>}
                     */
                    var eventPackages = listenersMap[eventName];
                    if (!cc.isUndefined(eventPackages) && eventPackages.length > 0) {
                        var newPackages = [];
                        for (var i = 0; i < eventPackages.length; ++i) {
                            /**
                             * @type {EventPackage}
                             */
                            var eventPackage = eventPackages[i];
                            if (eventPackage.callback === callback && eventPackage.target === target) {
                                //cc.eventManager.removeListener(eventPackage.listener);
                            }
                            else {
                                newPackages.push(eventPackage);
                            }
                        }
                        listenersMap[eventName] = newPackages;
                    }
                }
            },

            /**
             * @param {string} eventName
             * @param {object} userData
             */
            dispatchEvent: function (eventName, userData) {
                if (listenersMap[eventName]) {
                    var eventPackages = listenersMap[eventName];
                    if (!cc.isUndefined(eventPackages) && eventPackages.length > 0) {
                        var eventData = new EventUserData(userData);
                        for (var i = 0; i < eventPackages.length; ++i) {
                            var eventPackage = eventPackages[i];
                            if (eventPackage.callback != null) {
                                eventPackage.callback.call(eventPackage.target, eventData);
                            }
                        }
                    }
                }
            },

            /**
             * @param {string} eventName
             * @param {function} callback
             * @param {object} target
             */
            addCustomEventListener: function (eventName, callback, target) {
                var eventListener = cc.eventManager.addCustomListener(eventName, function (event) {
                    callback.call(target, event);
                });

                var shouldAdd = true;
                var eventPackages = listenersCustomMap[eventName];
                if (cc.isUndefined(eventPackages)) {
                    eventPackages = [];
                    listenersCustomMap[eventName] = eventPackages;
                }
                else {
                    for (var i = 0; i < eventPackages.length; ++i) {
                        var eventPackage = eventPackages[i];
                        if (eventPackage.callback === callback && eventPackage.target === target) {
                            shouldAdd = false;
                            break;
                        }
                    }
                }

                if (shouldAdd) {
                    eventPackages.push(new EventPackage(callback, target, eventListener));
                }
            },

            /**
             * @param {string} eventName
             * @param {function} callback
             * @param {object} target
             */
            removeCustomEventListener: function (eventName, callback, target) {
                if (listenersCustomMap[eventName]) {
                    /**
                     * @type {Array.<EventPackage>}
                     */
                    var eventPackages = listenersCustomMap[eventName];
                    if (!cc.isUndefined(eventPackages) && eventPackages.length > 0) {
                        var newPackages = [];
                        for (var i = 0; i < eventPackages.length; ++i) {
                            /**
                             * @type {EventPackage}
                             */
                            var eventPackage = eventPackages[i];
                            if (eventPackage.callback === callback && eventPackage.target === target) {
                                cc.eventManager.removeListener(eventPackage.listener);
                            }
                            else {
                                newPackages.push(eventPackage);
                            }
                        }
                        listenersCustomMap[eventName] = newPackages;
                    }
                }
            },

            /**
             * @param {string} eventName
             * @param {object} userData
             */
            dispatchCustomEvent: function (eventName, userData) {
                cc.eventManager.dispatchCustomEvent(eventName, userData);
            }
        };
    }

    return {
        getInstance: function () {
            if (!instance) {
                instance = createInstance();
            }
            return instance;
        }
    };
})();

module.exports = EventDispatcher;
},{}],13:[function(require,module,exports){
/**
 * Created by qinning on 15/7/2.
 */
cc.TABLEVIEW_FILL_LEFT_RIGHT = 0;
cc.TABLEVIEW_FILL_RIGHT_LEFT = 0;

/**
 * Sole purpose of this delegate is to single touch event in this version.
 */
cc.MultiColTableViewDelegate = cc.Class.extend(/** @lends cc.MultiColTableViewDelegate# */{
    gridTouched:function(table,grid){
    }
});

/**
 * Data source that governs table backend data.
 */
cc.MultiColTableViewDataSource = cc.Class.extend(/** @lends cc.TableViewDataSource# */{
    gridAtIndex:function(table,idx){
       return null;
    },
    numberOfCellsInTableView:function(table){
        return 0;
    },
    numberOfGridsInCell:function(table, idx){
        return 0;
    },
    gridSizeForTable:function(table, idx){
        return cc.size(0,0);
    }
});

cc.MultiColTableView = cc.LayerColor.extend({
    _multiTableViewDataSource: null,
    _multiTableViewDelegate: null,
    _horizontalOrder: cc.TABLEVIEW_FILL_LEFT_RIGHT,
    _gridsFreed: null,
    _curTouchLocation: null,

    _tableView: null,
    _touchNode: null,
    _gridCells: null,

    /**
     * @param dataSource
     * @param {cc.Size} size
     * @param container
     */
    ctor: function (dataSource, size, container) {
        this._super(cc.color(0, 0, 255, 0), size.width, size.height);
        this._gridsFreed = [];
        this._gridCells = {};
        this.setMultiTableViewDataSource(dataSource);
        this._tableView = new cc.TableView(this, size, container);
        this._tableView.setDelegate(this);
        this.addChild(this._tableView);
        this._touchNode = new cc.Node();
        this._tableView.addChild(this._touchNode,1);
    },

    onEnter: function () {
        this._super();
        cc.eventManager.addListener({
            event: cc.EventListener.TOUCH_ONE_BY_ONE,
            swallowTouches: false,
            onTouchBegan: this.onTouchBegan.bind(this)
        }, this._touchNode);
    },

    dequeueGrid: function () {
        if (this._gridsFreed.length == 0) {
            return null;
        } else {
            var grid = this._gridsFreed.shift();
            this._autoRelease(grid);
            return grid;
        }
    },

    _releaseCB: function () {
        this.release();
    },

    _autoRelease: function (obj) {
        var running = obj._running === undefined ? false : !obj._running;
        cc.director.getScheduler().schedule(this._releaseCB, obj, 0, 0, 0, running, obj.__instanceId);
    },

    tableCellSizeForIndex: function (table, idx) {
        var size = this.getMultiTableViewDataSource().gridSizeForTable(this, idx);
        if (table.getDirection() === cc.SCROLLVIEW_DIRECTION_HORIZONTAL) {
            size.height *= this.getMultiTableViewDataSource().numberOfGridsInCell(this, idx);
        } else {
            size.width *= this.getMultiTableViewDataSource().numberOfGridsInCell(this, idx);
        }
        return size;
    },

    tableCellAtIndex: function (table, idx) {
        var grid;
        var numberOfGridsInCell = this.getMultiTableViewDataSource().numberOfGridsInCell(this, idx);
        var cell = table.dequeueCell();
        if (!cell) {
            cell = new cc.TableViewCell();
        } else {
            var children = cell.getChildren();
            for (var i = children.length - 1; i >= 0; --i) {
                grid = children[i];
                this._gridsFreed.push(grid);
                grid.setIdx(cc.INVALID_INDEX);
                grid.retain();
                grid.removeFromParent(false);
            }
        }
        var startIndex = 0;
        for (var localIdx = 0; localIdx < idx; ++localIdx) {
            startIndex += this.getMultiTableViewDataSource().numberOfGridsInCell(this, localIdx);
        }
        var gridSize = this.getMultiTableViewDataSource().gridSizeForTable(this, idx);
        for (var gridIdx = startIndex, colIdx = 0; gridIdx < (numberOfGridsInCell + startIndex); gridIdx++, colIdx++) {
            grid = this.getMultiTableViewDataSource().gridAtIndex(this, gridIdx);
            if (grid) {
                grid.setIdx(gridIdx);
                this._gridCells[gridIdx] = grid;
                grid.setAnchorPoint(cc.p(0, 0));
                if (table.getDirection() === cc.SCROLLVIEW_DIRECTION_HORIZONTAL) {
                    if (table.getVerticalFillOrder() === cc.TABLEVIEW_FILL_TOPDOWN) {
                        grid.setPosition(cc.p(0, gridSize.height * (numberOfGridsInCell - colIdx - 1)));
                    } else {
                        grid.setPosition(cc.p(0, gridSize.height * colIdx));
                    }
                } else {
                    grid.setPosition(cc.p(gridSize.width * colIdx, 0));
                }
                cell.addChild(grid);
            }
        }
        return cell;
    },

    numberOfCellsInTableView: function (table) {
        var numberOfCells = this.getMultiTableViewDataSource().numberOfCellsInTableView(this);
        return numberOfCells;
    },

    tableCellTouched: function (table, cell) {
        if (!this.getMultiTableViewDelegate()) {
            return;
        }
        for (var i = 0; i < cell.getChildren().length; i++) {
            var grid = cell.getChildren()[i];
            grid.setContentSize(this.getMultiTableViewDataSource().gridSizeForTable(this, cell.getIdx()));
            if (grid != null && this.isTouchInside(grid, this._curTouchLocation)) {
                this.getMultiTableViewDelegate().gridTouched(this, grid);
                break;
            }
        }
    },

    scrollViewDidScroll: function (view) {
        if (this._multiTableViewDelegate && this._multiTableViewDelegate.scrollViewDidScroll) {
            this._multiTableViewDelegate.scrollViewDidScroll(this);
        }
    },

    tableCellWillRecycle: function (table, cell) {
    },

    tableCellHighlight:function(table, cell){
    },

    tableCellUnhighlight:function(table, cell){
    },

    onTouchBegan: function (touch, event) {
        this._curTouchLocation = touch.getLocation();
        return false;
    },

    getMultiTableViewDataSource: function () {
        return this._multiTableViewDataSource;
    },
    setMultiTableViewDataSource: function (dataSource) {
        this._multiTableViewDataSource = dataSource;
    },

    getMultiTableViewDelegate: function () {
        return this._multiTableViewDelegate;
    },

    setMultiTableViewDelegate: function (delegate) {
        this._multiTableViewDelegate = delegate;
    },

    setHorizontalOrder: function (order) {
        this._horizontalOrder = order;
    },
    getHorizontalOrder: function () {
        return this._horizontalOrder;
    },

    isTouchInside: function (owner, touchLocation) {
        if (!owner || !owner.getParent()) {
            return false;
        }
        touchLocation = owner.getParent().convertToNodeSpace(touchLocation);
        return cc.rectContainsPoint(owner.getBoundingBox(), touchLocation);
    },

    reloadData: function () {
        this._tableView.reloadData();
    },

    setContentOffset: function (offset, animated) {
        return this._tableView.setContentOffset(offset, animated);
    },

    getContentOffset:function () {
        return this._tableView.getContentOffset();
    },

    minContainerOffset:function () {
        return this._tableView.minContainerOffset();
    },

    maxContainerOffset:function () {
        return this._tableView.maxContainerOffset();
    },

    setDirection:function (direction) {
        this._tableView.setDirection(direction);
    },

    /**
     * determines how cell is ordered and filled in the view.
     */
    setVerticalFillOrder: function (fillOrder) {
        this._tableView.setVerticalFillOrder(fillOrder);
    },

    setContentOffsetInDuration: function (offset, dt) {
        this._tableView.setContentOffsetInDuration(offset, dt);
    },

    getViewSize: function () {
        return this._tableView.getViewSize();
    },

    getContentSize: function () {
        return this._tableView.getContentSize();
    },

    getGridAtIndex:function (idx) {
        return this._gridCells[idx];
    },

    setViewSize: function (viewSize) {
        this.setContentSize(viewSize);
        this._tableView.setViewSize(viewSize);
    },

    setBounceable: function (bounceable) {
        this._tableView.setBounceable(bounceable);
    },

    setTouchEnabled: function (touchable) {
        this._tableView.setTouchEnabled(touchable);
    },

    isDragging: function () {
        return this._tableView.isDragging();
    },

    getContainer: function () {
        return this._tableView.getContainer();
    }
});

module.exports = cc.MultiColTableView;
},{}],14:[function(require,module,exports){
/**
 * Created by zhangmingxu on 29/11/2016.
 */

var TouchedNode = cc.Node.extend({
    offsetX: 10,
    offsetY: 5,

    ctor: function (isMenuItem) {
        this._isMenuItem = isMenuItem;
        this._isTouched = false;
        this._isHover = false;
        this._isHoverPlaying = false;

        this._buttonToucher = null;
        this._buttonMouser = null;
        this._super();
        this._name = "TouchedNode";
    },

    onEnter: function () {
        this._super();

        ///Touch Events
        this._buttonToucher = cc.EventListener.create({
            event: cc.EventListener.TOUCH_ONE_BY_ONE,
            swallowTouches: false,
            onTouchBegan: this.onTouchBegan.bind(this),
            onTouchMoved: this.onTouchMoved.bind(this),
            onTouchEnded: this.onTouchEnded.bind(this)
        }, this);
        cc.eventManager.addListener(this._buttonToucher, this);

        ///Mouse Events
        if(! cc.sys.isNative) {
            this._buttonMouser = cc.EventListener.create({
                event: cc.EventListener.MOUSE,
                swallowTouches: true,
                onMouseMove: this.onMouseMove.bind(this)
            });
            cc.eventManager.addListener(this._buttonMouser, this);
        }
    },

    onExit: function() {
        if(this._buttonToucher) {
            cc.eventManager.removeListener(this._buttonToucher);
            this._buttonToucher = null;
        }
        if(! cc.sys.isNative) {
            if(this._buttonMouser) {
                cc.eventManager.removeListener(this._buttonMouser);
                this._buttonMouser = null;
            }
        }

        this._super();
    },

    onTouchBegan:function (touch, event) {
        var pos = touch.getLocation();
        var target = this.parent;
        if (target && cc.rectContainsPoint(target.getBoundingBoxToWorld(), pos)) {
            if(target.enabled && target.visible) {
                this._isTouched = true;
                this._isHover = false;
                this._playBegin(target);
                return true;
            }
        }
        return false;
    },

    onTouchMoved:function (touch, event) {

    },

    onTouchEnded:function (touch, event) {
        if(this._isTouched) {
            this._isTouched = false;
            var target = this.parent;
            if (target) {
                this._playEnd(target);
            }
        }
    },

    onMouseMove: function(event) {
        var pos = event.getLocation();
        ///NOTE: target's parent is Button
        var target = this.parent;
        if (target) {
            if(cc.rectContainsPoint(target.getBoundingBoxToWorld(), pos)) {
                if(!this._isHover && !this._isTouched) {
                    if(target.enabled && target.visible) {
                        this._isHover = true;
                        this._playHover(target, true);
                    }
                }
            } else {
                if(this._isHover) {
                    this._isHover = false;
                    this._playHover(target, false);
                }
            }
        }
    },

    _onHoverEnded: function() {
        this._isHoverPlaying = false;
    },

    _playBeginEx: function(target) {
        /**
         * NOTE: CCB has bug, CCControlButton can NOT set child, so use empty node contains button and label
         * CCNode[empty]
         *    |_CCControlButton
         *          |_TouchedNode
         */
        if(target.parent) {
            target = target.parent;
        }
        /**
         * NOTE: MenuItem is more specially
         * CCNode[empty]
         *    |_CCMenu
         *          |_CCMenuItemImage
         *                  |_TouchedNode
         */
        if(this._isMenuItem && target.parent) {
            target = target.parent;
        }
        target.stopAllActions();
        target.runAction(
            cc.sequence(
                cc.delayTime(0.01),
                cc.scaleTo(0.1, 1.1, 0.9),
                cc.delayTime(0.01)
            )
        );
    },

    _playEndEx: function(target) {
        /**
         * NOTE: CCB has bug, CCControlButton can NOT set child, so use empty node contains button and label
         * CCNode[empty]
         *    |_CCControlButton
         *          |_TouchedNode
         */
        if(target.parent) {
            target = target.parent;
        }
        /**
         * NOTE: MenuItem is more specially
         * CCNode[empty]
         *    |_CCMenu
         *          |_CCMenuItemImage
         *                  |_TouchedNode
         */
        if(this._isMenuItem && target.parent) {
            target = target.parent;
        }
        target.stopAllActions();
        target.runAction(
            cc.sequence(
                cc.delayTime(0.01),
                cc.scaleTo(0.1, 1, 1),
                cc.delayTime(0.01)
            )
        );
    },

    _playBegin: function(target) {
        /**
         * NOTE: CCB has bug, CCControlButton can NOT set child, so use empty node contains button and label
         * CCNode[empty]
         *    |_CCControlButton
         *          |_TouchedNode
         */
        if(target.parent) {
            target = target.parent;
        }
        /**
         * NOTE: MenuItem is more specially
         * CCNode[empty]
         *    |_CCMenu
         *          |_CCMenuItemImage
         *                  |_TouchedNode
         */
        if(this._isMenuItem && target.parent) {
            target = target.parent;
        }
        target.stopAllActions();
        target.runAction(
            cc.scaleTo(0.20, 0.85, 0.85)
        );
    },

    _playEnd: function(target) {
        /**
         * NOTE: CCB has bug, CCControlButton can NOT set child, so use empty node contains button and label
         * CCNode[empty]
         *    |_CCControlButton
         *          |_TouchedNode
         */
        if(target.parent) {
            target = target.parent;
        }
        /**
         * NOTE: MenuItem is more specially
         * CCNode[empty]
         *    |_CCMenu
         *          |_CCMenuItemImage
         *                  |_TouchedNode
         */
        if(this._isMenuItem && target.parent) {
            target = target.parent;
        }
        target.stopAllActions();
        target.runAction(
            cc.scaleTo(0.20 ,1, 1)
        );
    },

    _playHoverEx: function(target) {
        var bounding = target.getBoundingBox();
        if(bounding.width < this.offsetX) {
            bounding.width = this.offsetX;
        }
        if(bounding.height < this.offsetY) {
            bounding.height = this.offsetY;
        }

        /**
         * NOTE: CCB has bug, CCControlButton can NOT set child, so use empty node contains button and label
         * CCNode[empty]
         *    |_CCControlButton
         *          |_TouchedNode
         */
        if(target.parent) {
            target = target.parent;
        }
        /**
         * NOTE: MenuItem is more specially
         * CCNode[empty]
         *    |_CCMenu
         *          |_CCMenuItemImage
         *                  |_TouchedNode
         */
        if(this._isMenuItem && target.parent) {
            target = target.parent;
        }
        target.stopAllActions();
        target.runAction(
            cc.sequence(
                cc.scaleTo(0.08, (bounding.width-this.offsetX)/bounding.width, (bounding.height+this.offsetY)/bounding.height),
                cc.scaleTo(0.1, (bounding.width+this.offsetX)/bounding.width, (bounding.height-this.offsetY)/bounding.height),
                cc.delayTime(0.04),
                cc.scaleTo(0.1, 1, 1),
                cc.callFunc(this._onHoverEnded, this)
            )
        );
    },

    _playHover: function(target, isHover) {
        //cc.error("hover: target = ", target, Date.now());
        /**
         * NOTE: CCB has bug, CCControlButton can NOT set child, so use empty node contains button and label
         * CCNode[empty]
         *    |_CCControlButton
         *          |_TouchedNode
         */
        if(target.parent) {
            target = target.parent;
        }
        /**
         * NOTE: MenuItem is more specially
         * CCNode[empty]
         *    |_CCMenu
         *          |_CCMenuItemImage
         *                  |_TouchedNode
         */
        if(this._isMenuItem && target.parent) {
            target = target.parent;
        }
        target.stopAllActions();

        if(isHover) {
            target.runAction(
                cc.sequence(
                    cc.scaleTo(0.16, 1.08, 1.08),
                    cc.scaleTo(0.1, 1.06, 1.06)
                )
            );
        } else {
            target.setScale(1, 1);
        }

    }

});

module.exports = TouchedNode;
},{}],15:[function(require,module,exports){
/**
 * Created by oye on 15-5-17.
 */
var HttpClient = require("../../common/net/HttpClient");
var AdsPlace = require("../enum/AdsPlace");

var AD_CONFIG_URL = "https://qinning199.github.io/game.html";

//var ONE_MINUTE = 60 * 1000;
var AdListener = cc.Class.extend({
    onRewardedVideoFinished: function (isRewarded) {
    },

    onInterstitialAdEnd: function (channelName) {
    },

    onShowVideoAdBegin: function () {
    },

    onShowVideoAdEnd: function () {
    }
});

var AdPlaceInfo = function (interval) {
    this.interval = interval;
    this.lastShowTime = Date.now();
};


var AdsManager = cc.Class.extend({
    DEFAULT_AD_INTERVAL: 60 * 1000,

    intervalMap: {
        "0": 150,
        "1": 150,
        "2": 80,
        "3": 60
    },

    ONE_MINUTE_SECOND: 60 * 1000,

    adConfigUrl: "",

    rateTime: 0,
    ratedTime: 0,
    rateRemoveAds: false,

    isNewPlayer: true,

    adPlaceMap: {},

    /**
     * @type {AdListener}
     */
    adListener: null,

    showTopBanner: true,
    topBannerDay: 0,

    showFirstEnterAd: true,
    firstEnterShowAdDay: 2,

    lastInterstitialTime: 0,
    lastRewardedTime: 0,
    enabledInterstitialAd: true,

    ctor: function () {
        if(cc.sys.isNative) {
            jsb_dp.oneSdkBridge.onInterstitialAdFinished = this.onAdFinishedJsb.bind(this);
            jsb_dp.oneSdkBridge.onVideoAdFinished = this.onVideoAdFinishedJsb.bind(this);
            jsb_dp.oneSdkBridge.onShowVideoAdBegin = this.onShowVideoAdBeginJsb.bind(this);
            jsb_dp.oneSdkBridge.onShowVideoAdEnd = this.onShowVideoAdEndJsb.bind(this);
        }
        for (var i = 1; i <= AdsPlace.Num; ++i) {
            this.adPlaceMap[i] = new AdPlaceInfo(this.DEFAULT_AD_INTERVAL);
        }
    },

    init: function () {
        this.initInterval();
        this.adPlaceMap[AdsPlace.FirstEnter].interval = 0;
        this.logInterval("local");
    },

    initInterval: function () {
        cc.log("AdsManager initInterval");
        var day = game.playerMan.getRegisterDay();
        var interval = this.intervalMap[day];
        if (!interval) {
            var keys = Object.keys(this.intervalMap);
            var key = keys[keys.length - 1];
            cc.log("AdsManager init interval key:" + key);
            interval = this.intervalMap[key];
        }
        if (interval) {
            this.adPlaceMap[AdsPlace.Pass].interval = interval * 1000;
        }
    },

    loadRemoteData: function () {
        var adConfigUrl = game.config.getAdUrl() || AD_CONFIG_URL;
        cc.log("AdsManager loadRemoteData:" + adConfigUrl);
        var self = this;
        HttpClient.doGet(adConfigUrl, function (error, text) {
            cc.log("AdsManager remote response:" + error + ",text:" + text);
            if (!error) {
                try {
                    var adConfig = JSON.parse(text);

                    if (cc.sys.os === cc.sys.OS_ANDROID) {
                        if (adConfig && adConfig.androidConfig) {
                            adConfig = adConfig.androidConfig;
                        }
                    }

                    var estimatedRatio = adConfig.estimatedRatio;
                    if (!isNaN(estimatedRatio)) {
                        game.config.estimatedRatio = estimatedRatio;
                    }

                    var minPossibility = adConfig.minPossibility;
                    if (!isNaN(minPossibility)) {
                        game.config.minPossibility = minPossibility;
                    }

                    var intervalMap = adConfig.newIntervalMap;
                    cc.log("AdsManager intervalMap:" + JSON.stringify(intervalMap));
                    if (!cc.isUndefined(intervalMap)) {
                        self.intervalMap = intervalMap;
                        self.initInterval();
                    }

                    var showTopBanner = adConfig.showTopBanner;
                    if (!cc.isUndefined(showTopBanner)) {
                        self.showTopBanner = showTopBanner;
                    }

                    var topBannerDay = adConfig.topBannerDay;
                    if (!cc.isUndefined(topBannerDay)) {
                        self.topBannerDay = topBannerDay;
                    }

                    var showFirstEnterAd = adConfig.showFirstEnterAd;
                    if (!cc.isUndefined(showFirstEnterAd)) {
                        self.showFirstEnterAd = showFirstEnterAd;
                    }

                    var firstEnterShowAdDay = adConfig.firstEnterShowAdDay;
                    if (!cc.isUndefined(firstEnterShowAdDay)) {
                        self.firstEnterShowAdDay = firstEnterShowAdDay;
                    }

                    var backToGroundInterval = adConfig.backToGroundInterval;
                    if (!cc.isUndefined(backToGroundInterval)) {
                        self.adPlaceMap[AdsPlace.BackGround].interval = backToGroundInterval * 1000;
                    }

                    var backToHomeInterval = adConfig.backToHomeInterval;
                    if (!cc.isUndefined(backToHomeInterval)) {
                        self.adPlaceMap[AdsPlace.Home].interval = backToHomeInterval * 1000;
                    }

                    var refreshInterval = adConfig.refreshInterval;
                    if (!cc.isUndefined(refreshInterval)) {
                        self.adPlaceMap[AdsPlace.Refresh].interval = refreshInterval * 1000;
                    }

                    if (game.utils.isSelfGame()) {
                        var adsConfig = adConfig.adsConfig;
                        if (adsConfig) {
                            if (jsb_dp.oneSdkBridge.setInterstitialAdWeightConfig) {
                                jsb_dp.oneSdkBridge.setInterstitialAdWeightConfig(JSON.stringify(adsConfig));
                            }
                        }

                        var rewardAdsConfig = adConfig.rewardAdsConfig;
                        if (rewardAdsConfig) {
                            if (jsb_dp.oneSdkBridge.setRewardAdWeightConfig) {
                                jsb_dp.oneSdkBridge.setRewardAdWeightConfig(JSON.stringify(rewardAdsConfig));
                            }
                        }

                        var bannerAdsConfig = adConfig.bannerAdsConfig;
                        if (bannerAdsConfig) {
                            if (jsb_dp.oneSdkBridge.setBannerAdWeightConfig) {
                                jsb_dp.oneSdkBridge.setBannerAdWeightConfig(JSON.stringify(bannerAdsConfig));
                            }
                        }
                    }

                    var nativeAdsConfig = adConfig.nativeAdsConfig;
                    if (nativeAdsConfig) {
                        if (jsb_dp.oneSdkBridge.setNativeAdWeightConfig) {
                            jsb_dp.oneSdkBridge.setNativeAdWeightConfig(JSON.stringify(nativeAdsConfig));
                        }
                    }

                    self.logInterval("server");
                } catch (e) {
                    cc.log("AdsManager error:" + e.message);
                }
            }
        });
    },

    getRegisterDay: function () {
        return game.playerMan.getRegisterDay();
    },

    logInterval: function (tag) {
        cc.log("AdsManager " + tag + " adPlaceMap:" + JSON.stringify(this.adPlaceMap) +
            ",day:" + this.getRegisterDay() + ",showTopBanner:" + this.showTopBanner + ",topBannerDay:" + this.topBannerDay);
    },

    setIsNewPlayer: function (isNew) {
        this.isNewPlayer = isNew;
    },

    onGameOnShow: function () {
    },

    setAdListener: function (adListener) {
        this.adListener = adListener;
    },

    isRemovedAds: function () {
        return game.playerMan.player.removedAds;
    },

    showBannerAds: function (placement) {
        cc.log("AdsManager showBannerAds:" + placement);
        if (this.isRemovedAds()) return;
        if (cc.sys.isNative) {
            if (!this.isShowBannerAds(placement)) {
                jsb_dp.oneSdkBridge.showBannerAd(placement);
            }
        }
    },

    removeBannerAds: function (placement) {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.removeBannerAd(placement);
        }
    },

    isShowBannerAds: function (placement) {
        if (cc.sys.isNative) {
            return jsb_dp.oneSdkBridge.isShowBannerAd(placement);
        }
        return false;
    },

    isShowNativeAd: function (placement) {
        if (cc.sys.isNative) {
            return jsb_dp.oneSdkBridge.isShowNativeAd(placement);
        }
        return false;
    },

    showInterstitial: function (place) {
        if (!this.enabledInterstitialAd) {
            return;
        }
        if (this.isRemovedAds()) return;
        cc.log("AdsManager showInterstitial place:" + place + ", interval:" + this.adPlaceMap[place].interval + ",current interval:" +
            (Date.now() - this.adPlaceMap[place].lastShowTime));
        if (Date.now() - this.adPlaceMap[place].lastShowTime < this.adPlaceMap[place].interval) {
            return;
        }
        this.adPlaceMap[place].lastShowTime = Date.now();

        if (Date.now() - this.lastInterstitialTime < 5 * 1000) {
            cc.log("AdsManager showInterstitial interval less than 5 seconds");
            return;
        }
        if (Date.now() - this.lastRewardedTime < 5 * 1000) {
            cc.log("AdsManager showInterstitial rewarded video disable interstitial 5 seconds");
            return;
        }

        cc.log("AdsManager showInterstitial place:" + place + " showed");
        this.lastInterstitialTime = Date.now();

        var placement = "default";
        if (place === AdsPlace.Home) {
            placement = "home";
        } else if (place === AdsPlace.Refresh) {
            placement = "refresh";
        }
        this.place = place;
        game.analyseManager.trackEvent("WatchISSourceStart", {name: AdsPlace.getName(this.place)});
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.showInterstitalAd(placement);
        }
    },

    showNativeAd: function (place, posX, posY) {
        if (game.playerMan.getLevel() <= 3) {
            return;
        }
        cc.log("showNativeAd:" + place);
        if (this.isRemovedAds()) return;
        if (cc.sys.isNative) {
            if (!this.isShowNativeAd(place)) {
                jsb_dp.oneSdkBridge.showNativeAd(place, posX, posY);
            }
        }
    },

    removeNativeAd: function (place) {
        if (this.isRemovedAds()) return;
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.removeNativeAd(place);
        }
    },

    setInterstitialShowed: function (place) {
        this.adPlaceMap[place].lastShowTime = Date.now();
    },

    showCrossPromotion: function () {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.showCrossPromoteAd();
        }
    },

    isRewardVideoReady: function () {
        if (cc.sys.isNative) {
            return jsb_dp.oneSdkBridge.isRewardVideoReady();
        }
        return false;
    },

    showRewardVideoAd: function (name) {
        if (!this.isRewardVideoReady()) {
            return;
        }
        this.enabledInterstitial(false);
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.showRewardVideoAd(name);
        }
    },

    enabledInterstitial: function (enabled) {
        this.enabledInterstitialAd = enabled;
    },

    onAdFinishedJsb: function (str) {
        cc.log("onAdFinishedJsb:" + str);
        var adsFinishedObj = JSON.parse(str);
        var channelName = adsFinishedObj["channelName"];
        cc.log("channel :" + channelName + " show interstitial ads finished");

        if (this.adListener && this.adListener.onInterstitialAdEnd) {
            this.adListener.onInterstitialAdEnd(channelName);
        }
        game.analyseManager.trackEvent("WatchISSourceEnd", {name: AdsPlace.getName(this.place)});
        game.playerMan.addInterstitialAdCount();
    },

    onVideoAdFinishedJsb: function (str) {
        cc.log("onVideoAdFinishedJsb:" + str);
        var adsFinishedObj = JSON.parse(str);
        var isSkipped = adsFinishedObj.isSkipped;
        if (!isSkipped) {
            cc.log("reward video ads show success");
        } else {
            cc.log("reward video ads skipped");
        }

        if (this.adListener && this.adListener.onRewardedVideoFinished) {
            this.adListener.onRewardedVideoFinished(!isSkipped);
        }
        if (!isSkipped) {
            game.playerMan.addRewardedAdCount();
        }
    },

    onShowVideoAdBeginJsb: function () {
        if (this.adListener && this.adListener.onShowVideoAdBegin) {
            this.adListener.onShowVideoAdBegin();
        }
    },

    onShowVideoAdEndJsb: function () {
        if (this.adListener && this.adListener.onShowVideoAdEnd) {
            this.adListener.onShowVideoAdEnd();
        }
        this.enabledInterstitial(true);
        this.lastRewardedTime = Date.now();
    }
});

AdsManager.sharedDirector = null;
AdsManager.firstUseDirector = true;

AdsManager.getInstance = function () {
    if (AdsManager.firstUseDirector) {
        AdsManager.firstUseDirector = false;
        AdsManager.sharedDirector = new AdsManager();
    }
    return AdsManager.sharedDirector;
};

module.exports = AdsManager;
},{"../../common/net/HttpClient":29,"../enum/AdsPlace":10}],16:[function(require,module,exports){
/**
 * Created by oye on 15-5-17.
 */

var AnalyseManager = cc.Class.extend({
    g_pAnalytics: null,
    ctor: function () {
    },

    initAnalytics: function () {
    },

    trackLoginEvent: function () {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.trackLogin();
        }
    },

    /**
     * @param {number} amountNum
     * @param {string} itemType
     * @param {string} itemId
     * @param {string} receipt
     */
    trackPurchaseEvent: function (amountNum, itemType, itemId, receipt) {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.trackPurchase(amountNum, itemType, itemId, receipt);
        }
    },

    trackStartProgressionEvent: function (name, value) {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.trackStartProgression(name, value);
        }
    },

    trackCompletedProgressionEvent: function (name, value) {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.trackCompletedProgression(name, value);
        }
    },

    trackFailedProgressionEvent: function (name, value) {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.trackFailProgression(name, value);
        }
    },

    /**
     * track error event
     * @param {string} errorMsg
     */
    trackErrorEvent: function (errorMsg) {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.trackError(errorMsg);
        }
    },

    trackEvent: function (name, obj) {
        if (cc.sys.isNative) {
            var info = "";
            if (obj) {
                info = JSON.stringify(obj);
            }
            jsb_dp.oneSdkBridge.trackEvent(name, info);
        }
    },

    addVirtualCurrency: function (reason, value) {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.addVirtualCurrency(reason, value);
        }
    },

    consumeVirtualCurrency: function (itemName, itemCount, virutalCurrency) {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.consumeVirtualCurrency(itemName, itemCount, virutalCurrency);
        }
    },

    consumeItem: function (itemName, itemCount) {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.consumeItem(itemName, itemCount);
        }
    },

    trackChargeRequest: function (orderId, iapId, currencyAmount, currencyType, virtualCurrencyAmount, paymentType) {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.trackChargeRequest(orderId, iapId, currencyAmount, currencyType, virtualCurrencyAmount, paymentType);
        }
    },

    trackChargeSuccess: function (orderId) {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.trackChargeSuccess(orderId);
        }
    },

    missionBegan: function (missionId) {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.missionBegan(missionId);
        }
    },

    missionCompleted: function (missionId) {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.missionCompleted(missionId);
        }
    },

    missionFailed: function (missionId, reason) {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.missionFailed(missionId, reason);
        }
    },

    trackPlayerLevel: function (level) {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.setPlayerLevel(level);
        }
    }
});

AnalyseManager.sharedDirector = null;
AnalyseManager.firstUseDirector = true;

AnalyseManager.getInstance = function () {
    if (AnalyseManager.firstUseDirector) {
        AnalyseManager.firstUseDirector = false;
        AnalyseManager.sharedDirector = new AnalyseManager();
    }
    return AnalyseManager.sharedDirector;
};

module.exports = AnalyseManager;
},{}],17:[function(require,module,exports){
/**
 * Created by oye on 15-5-17.
 */
var CaptureListener = cc.Class.extend({
    onCaptureAudio: function (audioDecible) {
    }
});


var CaptureManager = cc.Class.extend({

    ctor: function () {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.onCaptureAudio = this.onCaptureAudio.bind(this);
        }
    },

    setCaptureListener: function (listener) {
        this.listener = listener;
    },

    captureAudio: function () {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.captureAudio();
        }
    },

    getAudioDecible: function () {
        if (cc.sys.isNative) {
            return jsb_dp.oneSdkBridge.getAudioDecible();
        }
        return 0;
    },

    onCaptureAudio: function (audioDecibleString) {
        var audioObj = JSON.parse(audioDecibleString);
        var audioDecible = audioObj["audioDecible"];
        if (this.listener) {
            this.listener.onCaptureAudio(audioDecible);
        }
    }
});

CaptureManager.sharedDirector = null;
CaptureManager.firstUseDirector = true;

CaptureManager.getInstance = function () {
    if (CaptureManager.firstUseDirector) {
        CaptureManager.firstUseDirector = false;
        CaptureManager.sharedDirector = new CaptureManager();
    }
    return CaptureManager.sharedDirector;
};

module.exports = CaptureManager;
},{}],18:[function(require,module,exports){
/**
 * Created by qinning on 2017/8/29.
 */

var HttpClient = require("../../common/net/HttpClient");

var CrossPromData = function () {
    this.scoreLimit = 0;
    this.imageUrl = "";
    this.downloadUrl = "";
    this.weight = 0;
    this.appId = "";
};

var CrossPromManager = cc.Class.extend({
    cachedTexture: null,
    cachedConfig: null,
    crossProms: null,
    ctor: function () {
    },

    tryToLoadFromRemote: function () {
        var crossPromUrl = game.config.getCrossPromUrl();

        var self = this;
        HttpClient.doGet(crossPromUrl, function (error, text) {
            if (!error) {
                try {
                    cc.log("cross promotion tryToLoadFromRemote downloaded");
                    var data = JSON.parse(text);
                    var open = data.open || false;
                    if (!open) {
                        return;
                    }
                    var scoreLimit = data.scoreLimit || 0;
                    //if (!cc.isUndefined(game.playerMan.player.bestScore)) {
                    //    if (game.playerMan.player.bestScore < scoreLimit) {
                    //        cc.log("cross promotion tryToLoadFromRemote game.playerMan.player.bestScore:" + game.playerMan.player.bestScore);
                    //        return;
                    //    }
                    //}
                    if (!cc.isUndefined(game.playerMan.player.level)) {
                        if (game.playerMan.player.level < scoreLimit) {
                            return;
                        }
                    }
                    var maxPopCount = data.maxPopCount || 3;
                    self.downloadedShow = data.downloadedShow || false;
                    self.crossProms = data["crossProms"];
                    self.maxPopCount = maxPopCount;
                    self.tryToDownloadPromoImg();
                } catch (e) {
                }
            }
        });
    },

    tryToDownloadPromoImg: function () {
        if (this.maxPopCount <= 0) {
            return;
        }
        if (this.cachedConfig || this.cachedTexture) {
            return;
        }
        this.maxPopCount--;
        cc.log("cross promotion tryToDownloadPromoImg check");
        var self = this;
        if (!cc.isUndefined(this.crossProms) && cc.isArray(this.crossProms) && this.crossProms.length > 0) {
            var randomConfig = this.getRandomConfig(this.crossProms);
            this.removeCrossPromoCfg(randomConfig);
            //game.utils.download
            cc.log("cross promotion tryToDownloadPromoImg start download");
            game.utils.loadRemoteImg(randomConfig.imageUrl, function (error, tex, extra) {
                if (!error && tex) {
                    cc.log("cross promotion tryToDownloadPromoImg downloaded:" + self.downloadedShow);
                    self.cachedTexture = tex;
                    self.cachedTexture.retain();
                    self.cachedConfig = randomConfig;
                    if (self.downloadedShow) {
                        self.downloadedShow = false;
                        self.tryToPopupCrossPromDlg();
                    }
                }
            }, null);
        }
    },

    removeCrossPromoCfg: function (crossPromCfg) {
        for (var i = 0; i < this.crossProms.length; ++i) {
            if (this.crossProms[i] === crossPromCfg) {
                this.crossProms.splice(i, 1);
                break;
            }
        }
    },


    getRandomConfig: function (crossProms) {
        var totalWeight = 0;
        var i;
        for (i = 0; i < crossProms.length; ++i) {
            totalWeight += crossProms[i].weight;
        }

        var randomNum = game.utils.randomNextInt(totalWeight);

        var curWeight = 0;
        for (i = 0; i < crossProms.length; ++i) {
            curWeight += crossProms[i].weight;
            if (curWeight > randomNum) {
                return crossProms[i];
            }
        }

        return crossProms[0];
    },

    popupCrossPromDlg: function (crossPromsConfig, texture) {
        var CrossPromController = require("../controller/CrossPromController");
        var crossPromNode = CrossPromController.createFromCCB("res/cross/cross_prom_view.ccbi");
        crossPromNode.controller.initWith(crossPromsConfig, texture);
        crossPromNode.controller.popup();
    },

    tryToPopupCrossPromDlg: function () {
        cc.log("cross promotion tryToPopupCrossPromDlg start");
        if (this.cachedConfig && this.cachedTexture) {
            cc.log("cross promotion tryToPopupCrossPromDlg poped");
            this.popupCrossPromDlg(this.cachedConfig, this.cachedTexture);
            this.cachedTexture.release();
            this.cachedConfig = null;
            this.cachedTexture = null;
            this.tryToDownloadPromoImg();
        }
    }
});

CrossPromManager.sharedDirector = null;
CrossPromManager.firstUseDirector = true;

CrossPromManager.getInstance = function () {
    if (CrossPromManager.firstUseDirector) {
        CrossPromManager.firstUseDirector = false;
        CrossPromManager.sharedDirector = new CrossPromManager();
    }
    return CrossPromManager.sharedDirector;
};


module.exports = CrossPromManager;
},{"../../common/net/HttpClient":29,"../controller/CrossPromController":5}],19:[function(require,module,exports){
/**
 * Created by oye on 15-5-17.
 */
var GCManager = cc.Class.extend({

    ctor: function () {
    },

    isGameCenterAvailable: function () {
        if (cc.sys.isNative) {
            return jsb_dp.oneSdkBridge.isGameCenterAvailable();
        }
        return false;
    },

    reportScore: function (score, leaderBoardKey) {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.reportScore(score, leaderBoardKey);
        }
    },

    showLeaderboard: function (leaderBoardKey) {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.showLeaderboard(leaderBoardKey);
        }
    },

    reportAchievement: function (percentCompleted, archievementKey) {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.reportAchievement(percentCompleted, archievementKey);
        }
    },

    showAchievements: function (leaderBoardkey) {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.showAchievements(leaderBoardkey);
        }
    },

    highScoreForLeaderboard: function (leaderBoardKey) {
        if (cc.sys.isNative) {
            return jsb_dp.oneSdkBridge.highScoreForLeaderboard(leaderBoardKey);
        }
        return 0;
    },

    progressForAchievement: function (archievementKey) {
        if (cc.sys.isNative) {
            return jsb_dp.oneSdkBridge.progressForAchievement(archievementKey);
        }
        return 0;
    }
});

GCManager.sharedDirector = null;
GCManager.firstUseDirector = true;

GCManager.getInstance = function () {
    if (GCManager.firstUseDirector) {
        GCManager.firstUseDirector = false;
        GCManager.sharedDirector = new GCManager();
    }
    return GCManager.sharedDirector;
};

module.exports = GCManager;
},{}],20:[function(require,module,exports){
/**
 * Created by qinning on 2017/3/11.
 */

var LocalizationManager = cc.Class.extend({

    _isLoaded: false,
    curLanguage: null,
    ctor: function () {
        if (cc.sys.language === cc.sys.LANGUAGE_ARABIC || cc.sys.language === cc.sys.LANGUAGE_RUSSIAN) {
            var searchPathArr = jsb.fileUtils.getSearchPaths();
            searchPathArr.unshift("res/ru");
            cc.log("search paths:" + JSON.stringify(searchPathArr));
            jsb.fileUtils.setSearchPaths(searchPathArr);
        }
    },

    reload: function () {
        if (this._isLoaded) {
            return;
        }
        if (game.utils.isSelfGame()) {
            this.curLanguage = game.utils.loadJson("res/config/languages/strings-zhs.json");
        } else {
            var fileName = "res/config/languages/strings-" + cc.sys.language + ".json";
            cc.log("local file:" + fileName);
            if (game.utils.isFileExist(fileName)) {
                this.curLanguage = game.utils.loadJson(fileName);
            } else {
                this.curLanguage = game.utils.loadJson("res/config/languages/strings-en.json");
            }
        }
        this._isLoaded = true;
    },

    getValue: function (key) {
        var value = this.curLanguage[key] || key;
        return value;
    },

    isChinese: function () {
        if (game.utils.isSelfGame()) {
            return true;
        }
        return false;
    }
});

LocalizationManager.sharedDirector = null;
LocalizationManager.firstUseDirector = true;

LocalizationManager.getInstance = function () {
    if (LocalizationManager.firstUseDirector) {
        LocalizationManager.firstUseDirector = false;
        LocalizationManager.sharedDirector = new LocalizationManager();
    }
    return LocalizationManager.sharedDirector;
};


module.exports = LocalizationManager;
},{}],21:[function(require,module,exports){
/**
 * Created by oye on 15-5-17.
 */
var NotificationManager = cc.Class.extend({

    ctor: function () {
    },

    registerNotification: function () {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.registerNotification();
        }
    },

    /**
     *
     * @param timeFromNow
     * @param alertText
     * @param alertAction
     * @param badgeNumber
     * @param sound
     */
    scheduleNotification: function (timeFromNow, alertText, alertAction, badgeNumber) {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.scheduleNotification(timeFromNow, alertText, alertAction, badgeNumber);
        }
    },

    unscheduleNotification: function () {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.unscheduleNotification();
        }
    }
});

NotificationManager.sharedDirector = null;
NotificationManager.firstUseDirector = true;

NotificationManager.getInstance = function () {
    if (NotificationManager.firstUseDirector) {
        NotificationManager.firstUseDirector = false;
        NotificationManager.sharedDirector = new NotificationManager();
    }
    return NotificationManager.sharedDirector;
};


module.exports = NotificationManager;
},{}],22:[function(require,module,exports){
/**
 * Created by oye on 15-5-17.
 */
var RateManager = cc.Class.extend({

    ctor: function () {
    },

    init: function () {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.initRateParams(3, 1, 0.5, 0.5, true);
        }
    },

    rate: function () {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.launchRate();
        }
    },

    likeInFacebook: function (url) {
        cc.sys.openURL(url);
    },

    launchAppReview: function () {
        if (cc.sys.isNative) {
            return jsb_dp.oneSdkBridge.launchAppReview();
        }
        return false;
    }
});

RateManager.sharedDirector = null;
RateManager.firstUseDirector = true;

RateManager.getInstance = function () {
    if (RateManager.firstUseDirector) {
        RateManager.firstUseDirector = false;
        RateManager.sharedDirector = new RateManager();
    }
    return RateManager.sharedDirector;
};

module.exports = RateManager;
},{}],23:[function(require,module,exports){
/**
 * Created by oye on 15-5-17.
 */
var RemoteConfigManager = cc.Class.extend({

    remoteReceivedCB: null,
    ctor: function () {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.onRemoteConfigReceived = this.onRemoteConfigReceived.bind(this);
        }
    },

    setRemoteConfigReceivedCallback: function (callback) {
        this.remoteReceivedCB = callback;
    },

    onRemoteConfigReceived: function () {
        if (this.remoteReceivedCB) {
            this.remoteReceivedCB();
        }
    },

    setDefaultRemoteConfig: function (params) {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.setDefaultRemoteConfig(JSON.stringify(params));
        }
    },

    fetchRemoteConfig: function () {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.fetchRemoteConfig();
        }
    },

    getRemoteConfig: function (key) {
        if (cc.sys.isNative) {
            return jsb_dp.oneSdkBridge.getRemoteConfig(key);
        }
        return "";
    },

    activateRemoteFetched: function () {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.activateRemoteFetched();
        }
    }

});

RemoteConfigManager.sharedDirector = null;
RemoteConfigManager.firstUseDirector = true;

RemoteConfigManager.getInstance = function () {
    if (RemoteConfigManager.firstUseDirector) {
        RemoteConfigManager.firstUseDirector = false;
        RemoteConfigManager.sharedDirector = new RemoteConfigManager();
    }
    return RemoteConfigManager.sharedDirector;
};

module.exports = RemoteConfigManager;
},{}],24:[function(require,module,exports){
/**
 * Created by oye on 15-5-17.
 */

var ShareManager = cc.Class.extend({
    ctor: function () {
    },

    shareWithSystem: function (tips) {
        if (cc.sys.isNative) {
            var fileName = "";
            //if (cc.sys.os === cc.sys.OS_IOS) {
            //    fileName = game.utils.getScreenShot("capture_screen.jpg");
            //}
            jsb_dp.oneSdkBridge.systemShare(fileName, tips);
        }
    },

    openAppWithIdentifier: function (appId) {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.openAppWithIdentifier(appId);
        }
    },

    sendEmail: function (address, title, body) {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.sendEmail(address, title, body);
        }
    }
});

ShareManager.sharedDirector = null;
ShareManager.firstUseDirector = true;

ShareManager.getInstance = function () {
    if (ShareManager.firstUseDirector) {
        ShareManager.firstUseDirector = false;
        ShareManager.sharedDirector = new ShareManager();
    }
    return ShareManager.sharedDirector;
};

module.exports = ShareManager;
},{}],25:[function(require,module,exports){
/**
 * Created by oye on 15-5-17.
 */
var PaymentInfo = require("../entity/PaymentInfo");
var PaymentCode = require("../enum/PaymentCode");
var ProductInfo = require("../entity/ProductInfo");

var PaymentDelegate = cc.Class.extend({
    /**
     * @param {PaymentCode} error
     * @param {PaymentInfo} paymentInfo
     */
    onPaymentCompleted: function (error, paymentInfo) {
    },

    /**
     * @param {Array.<PaymentInfo>} paymentInfoList
     */
    onGetUnverifiedReceiptList: function (paymentInfoList) {
    },

    /**
     * on get product list.
     * @param {Array.<ProductInfo>} productList
     */
    onGetProductList: function (productList) {
    }
});

var StoreManager = cc.Class.extend({
    /**
     * @type {PaymentDelegate}
     */
    paymentDelegate: null,

    /**
     * @param {Array.<PaymentInfo>} paymentInfoList
     */
    productList: null,

    ctor: function () {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.onGetProductList = this.onGetProductList.bind(this);
            jsb_dp.oneSdkBridge.onPurchase = this.onPurchase.bind(this);
            jsb_dp.oneSdkBridge.onConsume = this.onConsume.bind(this);
            jsb_dp.oneSdkBridge.onGetUnverifiedReceiptList = this.onGetUnverifiedReceiptList.bind(this);
        }
    },

    /**
     * set payment delegate.
     * @param {PaymentDelegate} paymentDelegate
     */
    setPaymentDelegate: function (paymentDelegate) {
        this.paymentDelegate = paymentDelegate;
    },

    onGetProductList: function (jsonResult) {
        cc.log("onGetProductList: " + jsonResult);
        if (jsonResult) {
            var products = JSON.parse(jsonResult);
            if (products && products.length > 0) {
                var productList = [];
                for (var i = 0; i < products.length; ++i) {
                    var productInfo = new ProductInfo();
                    productInfo.unmarshal(products[i]);
                    productList.push(productInfo);
                }
                this.paymentDelegate && this.paymentDelegate.onGetProductList(productList);
                this.productList = productList;
            }
        }
    },

    onPurchase: function (jsonResult) {
        cc.log("onPurchase: " + jsonResult);
        var purchaseResult = JSON.parse(jsonResult);
        var purchaseData;
        if (purchaseResult.errorCode === PaymentCode.PAYMENT_CODE_SUCCESS) {
            purchaseData = JSON.parse(jsonResult);
            this._paymentCompleted(PaymentCode.PAYMENT_CODE_SUCCESS, purchaseData);
        } else {
            purchaseData = JSON.parse(jsonResult);
            this._paymentCompleted(PaymentCode.PAYMENT_CODE_FAIL, purchaseData);
        }
    },

    onConsume: function (jsonInfo) {
        cc.log("onConsume: " + jsonInfo);
    },

    onGetUnverifiedReceiptList: function (purchaseListString) {
        cc.log("onGetUnverifiedReceiptList: " + purchaseListString);
        if (purchaseListString && purchaseListString.length > 0) {
            var purchaseJsonList = JSON.parse(purchaseListString);
            if (purchaseJsonList && purchaseJsonList.length > 0) {
                var purchaseInfoList = [];
                for (var i = 0; i < purchaseJsonList.length; ++i) {
                    var paymentMsg = purchaseJsonList[i];
                    var paymentInfo = new PaymentInfo();
                    paymentInfo.unmarshal(paymentMsg);
                    purchaseInfoList.push(paymentInfo);
                }
                this.paymentDelegate && this.paymentDelegate.onGetUnverifiedReceiptList(purchaseInfoList);
            }
        }

    },

    _paymentCompleted: function (error, paymentMsg) {
        var paymentInfo = new PaymentInfo();
        paymentInfo.unmarshal(paymentMsg);
        if (error === PaymentCode.PAYMENT_CODE_SUCCESS) {
            if (paymentMsg) {
                this.paymentDelegate && this.paymentDelegate.onPaymentCompleted(PaymentCode.PAYMENT_CODE_SUCCESS, paymentInfo);
            } else {
                this.paymentDelegate && this.paymentDelegate.onPaymentCompleted(PaymentCode.PAYMENT_CODE_FAIL, paymentInfo);
            }
        } else {
            this.paymentDelegate && this.paymentDelegate.onPaymentCompleted(PaymentCode.PAYMENT_CODE_FAIL, paymentInfo);
        }
        //if (cc.sys.os !== cc.sys.OS_ANDROID) {
        //    this.consume(paymentInfo.purchaseId);
        //}
    },

    _getNumFromString: function (text) {
        return text.replace(/[^0-9.]/ig, "");
    },

    requestProduct: function (productIds) {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.getProductsInfo(productIds);
        }
    },

    payForProduct: function (productId) {
        cc.log("payForProduct:" + productId);
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.purchase(productId);
        }
    },

    consume: function (transactionId) {
        cc.log("consume:" + transactionId);
        if (cc.sys.isNative) {
            if (transactionId && transactionId.length > 0) {
                jsb_dp.oneSdkBridge.consume(transactionId);
            }
        }
    },

    restoreCompletedTransactions: function () {
        cc.log("restoreCompletedTransactions");
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.restoreTransactions();
        }
    },

    getUnverifiedReceiptList: function () {
        cc.log("getUnverifiedReceiptList");
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.getUnverifiedReceiptList();
        }
    },

    _getProductById: function (productId) {
        if (this.productList && this.productList.length > 0) {
            for (var i = 0; i < this.productList.length; ++i) {
                var product = this.productList[i];
                if (product.productId === productId) {
                    return product;
                }
            }
        }
        return null;
    }
});

StoreManager.sharedDirector = null;
StoreManager.firstUseDirector = true;

StoreManager.getInstance = function () {
    if (StoreManager.firstUseDirector) {
        StoreManager.firstUseDirector = false;
        StoreManager.sharedDirector = new StoreManager();
    }
    return StoreManager.sharedDirector;
};

module.exports = StoreManager;
},{"../entity/PaymentInfo":7,"../entity/ProductInfo":9,"../enum/PaymentCode":11}],26:[function(require,module,exports){
var EffectMan = cc.Class.extend({
    ctor: function () {
    },

    playFlyCoins: function (startWorld, endWorld, coinNum, startCallback, endCallback) {
        var parentNode = cc.director.getRunningScene();
        var self = this;
        coinNum = 10;
        //cc.loader.loadRes("prefabs/coins_anim", function (err, prefab) {
            var i = 0;
            while (i < coinNum) {
                var func = function (node, isStart, isEnd) {
                    return function () {
                        var cb = null;
                        if (isStart) {
                            cb = startCallback;
                        } else if (isEnd) {
                            cb = endCallback;
                        }
                        self.showFlyAnim(startWorld, endWorld, node, parentNode, cb);
                    }
                };
                var newNode = new cc.Sprite("#icon_diamond_effect.png");
                newNode.scale = 0.8;
                newNode.retain();
                var isStart = (i === 0);
                var isEnd = (i === coinNum - 1);
                setTimeout(func(newNode, isStart, isEnd), 100 * i);
                i++;
            }
        //});
    },

    showFlyAnim: function (starWorld, endWorld, animNode, parentNode, callback) {
        var start = starWorld;
        var end = endWorld;
        var speed = 500;
        var length = Math.sqrt((start.x - end.x) * (start.x - end.x) + (start.y - end.y) * (start.y - end.y));
        var delay = length / speed;
        parentNode.addChild(animNode, 1000);
        animNode.release();
        animNode.setPosition(start);
        var controlPoints = [
            start,
            this.getPerpendicularPoint(start, end, 50, 0.5),
            end
        ];
        animNode.runAction(cc.sequence(cc.bezierTo(delay, controlPoints), cc.callFunc(function () {
            if (callback) {
                callback();
            }
        }, this), cc.removeSelf()));
    },

    getPerpendicularPoint: function(from, to, dis, factor) {
        var vec = {x: from.x - to.x, y: from.y - to.y};
        var perpendicularVec = {x: vec.y, y: -vec.x};
        var centerPoint = this.lerpPosition(from, to, factor);
        var perpendicularVecLen = Math.sqrt(perpendicularVec.x * perpendicularVec.x + perpendicularVec.y * perpendicularVec.y);
        var perpendicularVecNoraml = {
            x: perpendicularVec.x / perpendicularVecLen,
            y: perpendicularVec.y / perpendicularVecLen
        };
        return new cc.p(centerPoint.x + perpendicularVecNoraml.x * dis,
            centerPoint.y + Math.abs(perpendicularVecNoraml.y * dis));
    },

    lerpPosition: function(pos0,pos1,step){
        return {x:(pos1.x - pos0.x)*step + pos0.x, y:(pos1.y - pos0.y)*step + pos0.y};
    }
});

EffectMan._instance = null;

/**
 * @returns {EffectMan}
 */
EffectMan.getInstance = function() {
    if(!EffectMan._instance) {
        EffectMan._instance = new EffectMan();
    }
    return EffectMan._instance;
}

module.exports = EffectMan;
},{}],27:[function(require,module,exports){
var DAY_IN_SECONDS = 24 * 60 * 60;

var NOTIFICATION_DAYS = [1, 3, 7, 15, 30];
var AdsPlace = require("../enum/AdsPlace");

var LogicMan = cc.Class.extend({
    _isRegisterGameEventListener: false,
    _start: false,
    ctor: function() {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge = jsb_dp.OneSDKJSBridge.getInstance();
            if (jsb_dp.LogicJSBridge && jsb_dp.LogicJSBridge.getInstance) {
                jsb_dp.logicBridge = jsb_dp.LogicJSBridge.getInstance();
            }
        }

        var EventDispatcher = require("../events/EventDispatcher");
        var NotificationManager = require("../manager/NotificationManager");
        var AnalyseManager = require("../manager/AnalyseManager");
        var StoreManager = require("../manager/StoreManager");
        var GCManager = require("../manager/GCManager");
        var RateManager = require("../manager/RateManager");
        var PlayerMan = require("../model/PlayerMan");
        var StorageController = require("../storage/StorageController");
        var AdsManager = require("../manager/AdsManager");
        var AudioPlayer = require("../audio/AudioPlayer");
        var Utils = require("../util/Utils");
        var ShareManager = require("../manager/ShareManager");
        var DialogManager = require("../popup/DialogManager");
        var AssetsManager = require("../assets/AssetsManager");

        var BaseCCBController = require("../controller/BaseCCBController");
        var AudioHelper = require("../util/AudioHelper");
        var CaptureManager = require("../manager/CaptureManager");
        var LocalizationManager = require("../manager/LocalizationManager");
        var CrossPromManager = require("../manager/CrossPromManager");
        var EffectMan = require("../model/EffectMan");
        //var ABTest = require("../ABTest/ABTest");
        var RemoteConfigManager = require("../manager/RemoteConfigManager");

        window.game = {};
        window.game.utils = Utils;
        window.game.eventDispatcher = EventDispatcher.getInstance();
        window.game.logicMan = this;
        window.game.notificationManager = NotificationManager.getInstance();
        window.game.analyseManager = AnalyseManager.getInstance();
        window.game.storeManager = StoreManager.getInstance();
        window.game.gcManager = GCManager.getInstance();
        window.game.rateManager = RateManager.getInstance();
        window.game.playerMan = PlayerMan.getInstance();
        window.game.storageController = StorageController.getInstance();
        window.game.adsManager = AdsManager.getInstance();
        window.game.audioPlayer = AudioPlayer.getInstance();
        window.game.shareManager = ShareManager.getInstance();
        window.game.dialogManager = DialogManager.getInstance();
        window.game.assetsManager = AssetsManager.getInstance();
        window.game.captureManager = CaptureManager.getInstance();
        window.game.local = LocalizationManager.getInstance();
        window.game.effectMan = EffectMan.getInstance();
        //window.game.abtest = ABTest;
        window.game.remoteConfig = RemoteConfigManager.getInstance();

        window.BaseCCBController = BaseCCBController;
        window.AudioHelper = AudioHelper;

        var GameBridge = require("../bridge/GameBridge");
        window.GameBridge = GameBridge;
        window.game.config = GameBridge.getConfig();
        window.game.popupMan = GameBridge.getPopupMan();
        window.game.gameMan = GameBridge.getGameMan();

        window.game.crossPromMan = CrossPromManager.getInstance();

        _ = function (key) {
            return game.local.getValue(key);
        };
    },

    init: function () {
    },

    registerGameEventListener: function() {
        if(!this._isRegisterGameEventListener) {
            this._isRegisterGameEventListener = true;
            game.eventDispatcher.addCustomEventListener(cc.game.EVENT_SHOW, this.gameOnShow, this);
            game.eventDispatcher.addCustomEventListener(cc.game.EVENT_HIDE, this.gameOnHide, this);
        }
    },

    purge: function() {
        game.eventDispatcher.removeCustomEventListener(cc.game.EVENT_SHOW, this.gameOnShow, this);
        game.eventDispatcher.removeCustomEventListener(cc.game.EVENT_HIDE, this.gameOnHide, this);
    },

    gameOnShow: function() {
        game.notificationManager.unscheduleNotification();

        game.adsManager.onGameOnShow();

        setTimeout(function () {
            if (game.playerMan.getLevel() >= 4) {
                game.adsManager.showInterstitial(AdsPlace.BackGround);
            }
        }.bind(this), 100);
    },

    gameOnHide: function() {
        if (cc.sys.isNative) {
            this.scheduleLocalNotification();
        }
        game.adsManager.setInterstitialShowed(AdsPlace.BackGround);
        this.lastHideTime = Date.now();
    },

    registerNotification: function () {
        game.notificationManager.registerNotification();
    },

    startGame: function (notInitPlayer) {
        if (this._start) {
            return;
        }
        this._start = true;
        game.notificationManager.unscheduleNotification();
        this.registerGameEventListener();

        if (!notInitPlayer) {
            game.playerMan.initData();
        }
        game.adsManager.init();
        game.adsManager.loadRemoteData();
        game.analyseManager.initAnalytics();
        game.gcManager.isGameCenterAvailable();
        game.rateManager.init(3, 1, 0.5, 0.5, true);
        game.analyseManager.trackLoginEvent();
        game.crossPromMan.tryToLoadFromRemote();
        game.adsManager.setIsNewPlayer(game.playerMan.isNewPlayer());
    },

    scheduleLocalNotification: function () {
        if (!cc.sys.isNative) {
            return;
        }


        var leftTimeSeconds = Math.floor(game.gameMan.getWheelLeftTime() / 1000);
        if (leftTimeSeconds < 30 * 60) {
            leftTimeSeconds = 30 * 60;
        }
        var index = 1;
        //wheel notification.
        game.notificationManager.scheduleNotification(leftTimeSeconds,
            _("wheel_is_ready"), game.local.getValue("app_name"), index++);

        //daily bonus notification.
        var lastClaimDay = game.playerMan.player.lastClaimDailyBonusDay;
        var currentDayClaimed = (lastClaimDay >= game.utils.getDayByTs(Date.now()));
        var dailyBonusSeconds = 0;
        if (currentDayClaimed) {
            var nextDayTime = (game.utils.getDayByTs(Date.now()) + 1) * (24 * 3600 * 1000);
            dailyBonusSeconds = (nextDayTime - Date.now()) / 1000;
        }
        if (dailyBonusSeconds <= 60 * 60) {
            dailyBonusSeconds = 60 * 60;
        }
        game.notificationManager.scheduleNotification(dailyBonusSeconds,
            _("daily_bonus_is_ready"), game.local.getValue("app_name"), index++);

        var maxTime = Math.max(leftTimeSeconds, dailyBonusSeconds);

        //normal notification.
        for (var i = 0; i < NOTIFICATION_DAYS.length; ++i) {
            game.notificationManager.scheduleNotification(maxTime + DAY_IN_SECONDS * NOTIFICATION_DAYS[i],
                game.local.getValue(game.utils.sprintf("noti_tips%d", i + 1)), game.local.getValue("app_name"), index++);
        }
    },

    rsyncUserDataFromGC: function () {
        //var highLevel = game.gcManager.highScoreForLeaderboard(game.config.getLeaderBoardKey());
        //if (highLevel > game.playerMan.getLevel()) {
        //    game.playerMan.setLevel(highLevel);
        //}
    }
});

LogicMan._instance = null;
LogicMan._firstUseInstance = true;

/**
 *
 * @returns {LogicMan}
 */
LogicMan.getInstance = function () {
    if (LogicMan._firstUseInstance) {
        LogicMan._firstUseInstance = false;
        LogicMan._instance = new LogicMan();
    }
    return LogicMan._instance;
};

module.exports = LogicMan;
},{"../assets/AssetsManager":1,"../audio/AudioPlayer":2,"../bridge/GameBridge":3,"../controller/BaseCCBController":4,"../enum/AdsPlace":10,"../events/EventDispatcher":12,"../manager/AdsManager":15,"../manager/AnalyseManager":16,"../manager/CaptureManager":17,"../manager/CrossPromManager":18,"../manager/GCManager":19,"../manager/LocalizationManager":20,"../manager/NotificationManager":21,"../manager/RateManager":22,"../manager/RemoteConfigManager":23,"../manager/ShareManager":24,"../manager/StoreManager":25,"../model/EffectMan":26,"../model/PlayerMan":28,"../popup/DialogManager":30,"../storage/StorageController":32,"../util/AudioHelper":33,"../util/Utils":35}],28:[function(require,module,exports){
/**
 * Created by qinning on 15/5/12.
 */
var PlayerInfo = require("../entity/PlayerInfo");

var PLAYER_KEY = "player_key";

var PlayerMan = cc.Class.extend({
    player: null,
    bestScoreKey: null,
    levelBoardKey: null,
    ctor: function () {
    },

    initData: function () {
        var playerInfoStr = game.storageController.getItem(PLAYER_KEY, null);
        var player;
        if (playerInfoStr == null || playerInfoStr == "") {
            player = PlayerInfo.createDefault();
            game.storageController.setItem(PLAYER_KEY, JSON.stringify(player));
        } else {
            player = new PlayerInfo();
            player.unmarshall(JSON.parse(playerInfoStr));
        }
        this.player = player;
    },

    getBestScore: function () {
        return this.player.bestScore;
    },

    getLevel: function () {
        if (cc.isUndefined(this.player.level)) {
            return 1;
        } else {
            return this.player.level;
        }
    },

    setLevel: function (level) {
        this.player.level = level;
        this._flushToStorage();
    },

    updateLevelStar: function (level, levelStar) {
        if (cc.isUndefined(this.player.levelMap[level]) || this.player.levelMap[level] < levelStar) {
            this.player.levelMap[level] = levelStar;
            game.gcManager.reportScore(level, this.getLevelBoardKey());
            this._flushToStorage();
        }
    },

    getLevelStar: function (level) {
        return this.player.levelMap[level] || 0;
    },

    addLevel: function () {
        game.gcManager.reportScore(this.player.level, this.getLevelBoardKey());
        this.player.level++;
        this.player.progress = 0;
        this._flushToStorage();
    },

    updateBestScore: function (newBestScore) {
        if (newBestScore > this.player.bestScore) {
            this.player.bestScore = newBestScore;
            game.gcManager.reportScore(newBestScore, this.getBestScoreBoardKey());
            this._flushToStorage();
            return true;
        }
        return false;
    },

    getLevelBoardKey: function () {
        return this.levelBoardKey || game.config.getLeaderBoardKey();
    },

    getBestScoreBoardKey: function () {
        return this.bestScoreKey || game.config.getLeaderBoardKey();
    },

    setLevelBoardKey: function (key) {
        this.levelBoardKey = key;
    },

    setBestScoreBoardKey: function (bestScoreKey) {
        this.bestScoreKey = bestScoreKey;
    },

    updateProgress: function (progress) {
        if (this.player.progress < progress) {
            this.player.progress = progress;
            this._flushToStorage();
        }
    },

    removedAds: function () {
        this.player.removedAds = true;
        game.adsManager.removeBannerAds();
        this._flushToStorage();
    },

    setRated: function () {
        this.player.rated = true;
        this._flushToStorage();
    },

    _flushToStorage: function () {
        game.storageController.setItem(PLAYER_KEY, JSON.stringify(this.player));
    }
});

PlayerMan._instance = null;
PlayerMan._firstUseInstance = true;

/**
 *
 * @returns {PlayerMan}
 */
PlayerMan.getInstance = function () {
    if (PlayerMan._firstUseInstance) {
        PlayerMan._firstUseInstance = false;
        PlayerMan._instance = new PlayerMan();
    }
    return PlayerMan._instance;
};

module.exports = PlayerMan;
},{"../entity/PlayerInfo":8}],29:[function(require,module,exports){
/**
 * Created by qinning on 15/4/22.
 */
var HttpClient = {

    /**
     * get request,jsb ok,html5 shows  No 'Access-Control-Allow-Origin' header is present on the requested resource
     * @param {string} url
     * @param {function} callback
     */
    doGet: function (url, callback) {
        var xhr = cc.loader.getXMLHttpRequest();
        xhr.open("GET", url, true);

        xhr.onreadystatechange = function () {
            cc.log("readyState:"+xhr.readyState+",status:"+xhr.status+",statuText:"+xhr.statusText+",,,responseText:"+xhr.responseText);
            if (xhr.readyState == 4 && xhr.status == 200) {
                var httpStatus = xhr.statusText;
                var response = xhr.responseText;
                callback(null,response);
            }else{
                callback(xhr.statusText);
            }
        };
        xhr.send();
    },

    /**
     *
     * @param {string} url
     * @param {string} param
     * @param {Object.<string,string>} headers
     * @param {Function} callback
     */
    doPost: function (url, params, headers, callback) {
        var xhr = cc.loader.getXMLHttpRequest();
        xhr.open("POST", url);
        for (var key in headers) {
            xhr.setRequestHeader(key, headers[key]);
        }
        xhr.onreadystatechange = function () {
            if (xhr.readyState == 4) {
                if (xhr.status >= 200 && xhr.status <= 207) {
                    callback(null, xhr.responseText);
                } else {
                    callback(xhr.status, xhr.statusText);
                }
            }
        };
        try {
            xhr.send(params);
        } catch (e) {
        }
    }
};

module.exports = HttpClient;
},{}],30:[function(require,module,exports){
var ModalLayer = require("./ModalLayer");

var DialogManager = cc.Class.extend({
    DIALOG_ZORDER_BEGIN: 999,
    DIALOG_ZORDER_STEP: 2,

    /**
     * @types {ModalLayer}
     */
    _overlay: null,
    _scaleFactor: 0,
    /**
     * @types {Array.<ModalLayer>}
     */
    _dialogStack: null,

    ctor: function () {
    },

    createOverlay: function () {
        this._overlay = new ModalLayer();
        this._overlay.setColor(cc.color.BLACK);
        this._overlay.setOpacity(190);
        this._overlay.setContentSize(cc.size(cc.winSize.width, cc.winSize.height));
        this._overlay.setLocalZOrder(999);
        this._overlay.retain();
        this._scaleFactor = 1.0;
        this._dialogStack = [];
    },

    popup: function (dlg, param) {
        dlg.ignoreAnchorPointForPosition(false);
        dlg.setScale(this._scaleFactor);
        var dlgLen = this._dialogStack.length;
        cc.log("dlgLen:" + dlgLen);
        if (dlgLen == 0) {
            dlg.setLocalZOrder(this.DIALOG_ZORDER_BEGIN);
        }
        else {
            dlg.setLocalZOrder(this._dialogStack[dlgLen - 1].getLocalZOrder() + this.DIALOG_ZORDER_STEP);
        }
        this._dialogStack.push(dlg);
        this._overlay.setLocalZOrder(dlg.getLocalZOrder() - 1);

        if (this._overlay.getParent() == null) {
            this.attachScene(this._overlay);
        }

        if (param && param.overlayColor) {
            this._overlay.setColor(param.overlayColor);
        } else {
            this._overlay.setColor(cc.color.BLACK);
        }

        if (param && param.overlayOpacity) {
            this._overlay.setOpacity(param.overlayOpacity);
        } else {
            this._overlay.setOpacity(190);
        }

        if (param && param.popupAnim) {
            if (dlg.getChildren() && dlg.getChildren().length > 0) {
                //this._overlay.setLocalZOrder(dlg.getLocalZOrder() + 1);
                this.popupDialogAnim(dlg.getChildren()[0], function () {
                    //this._overlay.setLocalZOrder(dlg.getLocalZOrder() - 1);
                }, this);
            }
        }

        this.attachScene(dlg);

        game.eventDispatcher.dispatchEvent("dialog_poped");
    },

    popupDialogAnim: function (panel,callback,callbackTarget) {
        panel.setScale(0.8, 0.8);
        panel.runAction(cc.sequence(
            cc.scaleTo(0.066, 1.05, 1.05).easing(cc.easeOut(2)),
            cc.scaleTo(0.05, 0.98, 0.98).easing(cc.easeOut(2)),
            cc.scaleTo(0.084, 1, 1).easing(cc.easeOut(2)),
            cc.callFunc(callback, callbackTarget)
        ));
    },

    attachScene: function (node) {
        cc.director.getRunningScene().addChild(node);
    },

    close: function (dlg, dispose) {
        if (cc.isUndefined(dispose)) {
            dispose = true;
        }
        var closeIndex;
        var dlgLen = this._dialogStack.length;
        for (closeIndex = dlgLen - 1; closeIndex >= 0; --closeIndex) {
            if (dlg === this._dialogStack[closeIndex]) {
                break;
            }
        }

        if (closeIndex >= 0) {
            this._dialogStack.splice(closeIndex, 1);
            dlgLen = this._dialogStack.length;
            dlg.removeFromParent(dispose);
        } else {
            return;
        }

        if (dlgLen === 0) {
            this._overlay.removeFromParent(false);
        } else {
            var topIndex = dlgLen - 1;

            if (topIndex >= 0) {
                this._overlay.setLocalZOrder(this._dialogStack[topIndex].getLocalZOrder() - 1);
            } else {
                this._overlay.removeFromParent(false);
                this._dialogStack.length = 0;
            }
        }
        game.eventDispatcher.dispatchEvent("dialog_closed");
    },

    closeAll: function () {
        var dlgLen = this._dialogStack.length;
        while (dlgLen != 0) {
            var modalLayer = this._dialogStack[dlgLen - 1];
            this.close(modalLayer, true);
            dlgLen = this._dialogStack.length;
        }
    },

    isTopestDialog: function (node) {
        return (this._dialogStack[this._dialogStack.length - 1] === node);
    }

});

DialogManager._instance = null;
DialogManager._firstUseInstance = true;

/**
 *
 * @returns {DialogManager}
 */
DialogManager.getInstance = function () {
    if (DialogManager._firstUseInstance) {
        DialogManager._firstUseInstance = false;
        DialogManager._instance = new DialogManager();
    }
    return DialogManager._instance;
};

module.exports = DialogManager;
},{"./ModalLayer":31}],31:[function(require,module,exports){
/**
 * Created by qinning on 15/4/28.
 */
var ModalLayer = cc.LayerColor.extend({
    ctor:function(){
        this._super();
        cc.eventManager.addListener({
            event: cc.EventListener.TOUCH_ONE_BY_ONE,
            swallowTouches: true,
            onTouchBegan: this.onTouchBegan.bind(this)
        }, this);
    },
    onTouchBegan:function(touch, event) {
        if(!this.isVisible() || (!this.isTouchInside(this,touch))){
            return false;
        }
        return true;
    },
    isTouchInside: function (owner,touch) {
        if(!owner || !owner.getParent()){
            return false;
        }
        var touchLocation = touch.getLocation(); // Get the touch position
        touchLocation = owner.getParent().convertToNodeSpace(touchLocation);
        return cc.rectContainsPoint(owner.getBoundingBox(), touchLocation);
    }
});

module.exports = ModalLayer;
},{}],32:[function(require,module,exports){
/**
 * Created by qinning on 15/4/23.
 */

var StorageController = cc.Class.extend({
    setItem: function (key, value) {
        cc.sys.localStorage.setItem(key, value);
    },
    getItem: function (key, defaultValue) {
        var value = cc.sys.localStorage.getItem(key);
        if (value == "" || value == null) {
            return defaultValue;
        }
        return value;
    },
    removeItem: function (key) {
        cc.sys.localStorage.removeItem(key);
    }
});

StorageController._instance = null;
StorageController._firstUseInstance = true;

/**
 *
 * @returns {StorageController}
 */
StorageController.getInstance = function () {
    if (StorageController._firstUseInstance) {
        StorageController._firstUseInstance = false;
        StorageController._instance = new StorageController();
    }
    return StorageController._instance;
};

module.exports = StorageController;
},{}],33:[function(require,module,exports){
/**
 * Created by oye on 16/3/12.
 */

var AudioHelper = {
    playBtnSound: function () {
        game.audioPlayer.playEffectByKey("enter");
    }
};

module.exports = AudioHelper;
},{}],34:[function(require,module,exports){
var FileCacheStub = function() {
    this.cachedFiles = [];
};

FileCacheStub.prototype.cacheFile = function(filename) {
    if (cc.sys.isNative) {
        if(cc.sys.os == cc.sys.OS_ANDROID) {
            // cc.log("FileCacheStub.prototype.cacheFile.android");
            if(jsb.fileUtils.cacheFile) {
                var ret = jsb.fileUtils.cacheFile(filename);
                // cc.log("FileCacheStub.prototype.cacheFile ----> cache:" + filename + ", ret:" + ret);
                this.cachedFiles.push(filename);
            }
        }
    }
};

FileCacheStub.prototype.clear = function() {
    if (cc.sys.isNative) {
        if(cc.sys.os == cc.sys.OS_ANDROID) {
            if (jsb.fileUtils.uncacheFile) {
                this.cachedFiles.forEach(function (filename) {
                    jsb.fileUtils.uncacheFile(filename);
                    // cc.log("FileCacheStub.prototype.dispose ----> uncached file " + filename);
                });
            }
            this.cachedFiles = [];
        }
    }
};

module.exports = FileCacheStub;
},{}],35:[function(require,module,exports){
/**
 * Created by oye on 15-4-19.
 */


var Utils = {
    /**
     * Generate a random integer value which meets [0, upperValue)
     * @param {number} upperValue
     * @returns {number}
     */
    randomNextInt: function(upperValue) {
        return Math.floor(Math.random() * upperValue);
    },

    /**
     * generate a random number value which meets [0, upperValue)
     * @param upperValue
     * @returns {number}
     */
    randomNextNumber: function (upperValue) {
        return Math.random() * upperValue;
    },

    /**
     * random a integer from [min, max]
     * @param {number} min
     * @param {number} max
     * @returns {number}
     */
    rangeNextInt: function(min, max) {
        return min + this.randomNextInt(max - min + 1);
    },

    rangeNextNumber: function (min, max) {
        return min + this.randomNextNumber(max - min);
    },

    /**
     * Generate a random number value which meets [lowerValue, upperValue)
     * @param {number} lowerValue
     * @param {number} upperValue
     * @returns {number}
     */
    randomNextNumberInRange: function (lowerValue, upperValue) {
        return Math.random() * (upperValue - lowerValue) + lowerValue;
    },

    /**
     * Generate a random integer value which meets [lowerValue, upperValue)
     * @param {number} lowerValue
     * @param {number} upperValue
     * @returns {number}
     */
    randomNextIntInRange: function (lowerValue, upperValue) {
        return Math.floor(Math.random() * (upperValue - lowerValue) + lowerValue);
    },

    /**
     * 格式化字符串
     * @returns {string}
     */
    sprintf: function () {
        var i = 0, a, f = arguments[i++], o = [], m, p, c, x, s = '';
        while (f) {
            if (m = /^[^\x25]+/.exec(f)) {
                o.push(m[0]);
            }
            else if (m = /^\x25{2}/.exec(f)) {
                o.push('%');
            }
            else if (m = /^\x25(?:(\d+)\$)?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-fosuxX])/.exec(f)) {
                if (((a = arguments[m[1] || i++]) == null) || (a == undefined)) {
                    throw('Too few arguments.');
                }
                if (/[^s]/.test(m[7]) && (typeof(a) != 'number')) {
                    throw('Expecting number but found ' + typeof(a));
                }
                switch (m[7]) {
                    case 'b':
                        a = a.toString(2);
                        break;
                    case 'c':
                        a = String.fromCharCode(a);
                        break;
                    case 'd':
                        a = parseInt(a);
                        break;
                    case 'e':
                        a = m[6] ? a.toExponential(m[6]) : a.toExponential();
                        break;
                    case 'f':
                        a = m[6] ? parseFloat(a).toFixed(m[6]) : parseFloat(a);
                        break;
                    case 'o':
                        a = a.toString(8);
                        break;
                    case 's':
                        a = ((a = String(a)) && m[6] ? a.substring(0, m[6]) : a);
                        break;
                    case 'u':
                        a = Math.abs(a);
                        break;
                    case 'x':
                        a = a.toString(16);
                        break;
                    case 'X':
                        a = a.toString(16).toUpperCase();
                        break;
                }
                a = (/[def]/.test(m[7]) && m[2] && a >= 0 ? '+' + a : a);
                c = m[3] ? m[3] == '0' ? '0' : m[3].charAt(1) : ' ';
                x = m[5] - String(a).length - s.length;
                p = m[5] ? str_repeat(c, x) : '';
                o.push(s + (m[4] ? a + p : p + a));
            }
            else {
                throw('sprintf params error');
            }
            f = f.substring(m[0].length);
        }
        return o.join('');
    },

    getDistance : function(point1,point2){
        return Math.sqrt((point1.x - point2.x) * (point1.x - point2.x) + (point1.y - point2.y) * (point1.y - point2.y));
    },

    arrayContain : function (arr, element) {
        if(arr && arr.length > 0) {
            for(var i = 0; i < arr.length; ++i) {
                if(arr[i] == element) {
                    return true;
                }
            }
        }
        return false;
    },

    /**
     * @param {string} ccbFileName
     * @param {string} containerNode
     * @param {string} controllerName
     * @param {object | cc.Node} controllerNode
     * @returns {cc.Node | null}
     */
    loadNodeFromCCB : function(ccbFileName,containerNode,controllerName,controllerNode, keepController){
        cc.log("load node from ccb:" + ccbFileName);
        Utils.setTrackValue("ccbName", ccbFileName);
        if(!cc.isUndefined(controllerName) && !cc.isUndefined(controllerNode)){
            cc.BuilderReader.registerController(controllerName,controllerNode);
        }
        var node = cc.BuilderReader.load(ccbFileName, containerNode);
        if (controllerName && controllerNode && !keepController) {
            cc.BuilderReader._controllerClassCache[controllerName] = undefined;
        }
        node.retain();
        cc.log("load node retain:" + ccbFileName);
        this.executeInNextFrame(function () {
            cc.log("load node release:" + ccbFileName);
            node.release();
        });
        return node;
    },

    registerController: function (controllerName, controllerNode) {
        cc.BuilderReader.registerController(controllerName, controllerNode);
    },

    unRegisterController: function (controllerName) {
        cc.BuilderReader._controllerClassCache[controllerName] = undefined;
    },

    /**
     *
     * @param {function} subType
     * @param {function} superType
     */
    inherits: function(subType, superType) {
        var subPrototype = Object.create(superType.prototype);
        subPrototype.constructor = subType;
        subType.prototype = subPrototype;
    },

    /**
     *
     * @param {string} url
     * @returns {Object}
     */
    loadJson: function (url) {
        if (!cc.sys.isNative) {
            return cc.loader.getRes(url);
        } else {
            if(jsb.fileUtils.isFileExist(url)) {
                return JSON.parse(jsb.fileUtils.getStringFromFile(url));
            } else {
                return null;
            }
        }
    },

    loadPlist: function (url) {
        if (!cc.sys.isNative) {
            return cc.loader.getRes(url);
        } else {
            if(jsb.fileUtils.isFileExist(url)) {
                return cc.plistParser.parse(jsb.fileUtils.getStringFromFile(url));
            } else {
                return null;
            }
        }
    },

    getScreenShot: function (fileName) {
        cc.log("fileName:" + fileName);
        var tex = new cc.RenderTexture(cc.winSize.width, cc.winSize.height, cc.Texture2D.PIXEL_FORMAT_RGBA8888);
        tex.setPosition(cc.p(cc.winSize.width / 2, cc.winSize.height / 2));
        tex.begin();
        cc.director.getRunningScene().visit();
        tex.end();

        var imgPath = jsb.fileUtils.getWritablePath();
        if (imgPath.length == 0) {
            return "";
        }
        var result = tex.saveToFile(fileName, cc.IMAGE_FORMAT_JPEG);
        if (result) {
            imgPath += fileName;
            cc.log("save image:" + imgPath);
            return imgPath;
        }
        return "";
    },

    isPad: function () {
        if (jsb_dp.oneSdkBridge.isPad) {
            return jsb_dp.oneSdkBridge.isPad();
        }
        var winSize = cc.winSize;
        if (!!GameBridge.getConfig().horizontalGame) {
            return (winSize.width / winSize.height < 1.5);
        } else {
            return (winSize.height / winSize.width < 1.5);
        }
    },

    getFormatRotation: function (rotation) {
        return ((rotation % 360) + 360) % 360;
    },

    doClipping: function (maskLayer, clipLayer) {
        if(maskLayer && clipLayer){
            var clipParentNode = clipLayer.getParent();
            clipLayer.retain();
            clipLayer.removeFromParent(false);

            maskLayer.removeFromParent(false);
            maskLayer.visible = true;

            var clippingNode = new cc.ClippingNode(maskLayer);
            clippingNode.alphaThreshold = 1;
            clippingNode.addChild(clipLayer);
            clipLayer.release();

            clipParentNode.addChild(clippingNode);
        }
    },

    isPixelCollision: function (spr1, spr2) {
        if (cc.sys.isNative) {
            return jsb_dp.oneSdkBridge.isPixelCollision(spr1, spr2);
        } else {
            return cc.rectIntersectsRect(spr1.getBoundingBox(), spr2.getBoundingBox());
        }
    },

    scaleCCLabelBMFont: function (label, maxWidth) {
        if (label.width > maxWidth) {
            var scaleFactor = maxWidth / label.width;
            label.scaleX = label.scaleY = scaleFactor;
        } else {
            label.scaleX = label.scaleY = 1.0;
        }
    },

    scaleCCLabelBMFontWithMaxScale: function (label, maxWidth, maxScale) {
        if (label.width * label.scaleX > maxWidth) {
            label.scaleX = label.scaleY = maxWidth / label.width;
        }
        if (label.scaleX > maxScale) {
            label.scaleX = label.scaleY = maxScale;
        }
    },

    /**
     *
     * @param {cc.Node} node
     */
    walkNode: function (node, cb) {
        if(node) {
            var more = cb(node);
            if(more) {
                for(var k in node.children) {
                    more = this.walkNode(node.children[k], cb);
                    if(!more)
                        break;
                }
            }
            return more;
        }
        else {
            return true;
        }
    },

    isNodeButton: function(nd) {
        return (nd instanceof cc.ControlButton);
    },

    isNodeMenuItem: function(nd) {
        return (nd instanceof cc.MenuItem || nd instanceof cc.MenuItemImage);
    },

    isLabelBMFont:function (nd) {
        return (nd instanceof cc.LabelBMFont || nd instanceof cc.Label);
    },

    /**
     * Load an image with the given url
     * @param {string} url
     * @param {function} callback - function(error, texture, extra)
     * @param {*} extra
     */
    loadRemoteImg: function (url, callback, extra) {
        if (!cc.sys.isNative) {
            cc.loader.loadImg(url, {isCrossOrigin: true}, function (error, img) {
                var texture2d = new cc.Texture2D();
                texture2d.initWithElement(img);
                texture2d.handleLoadedTexture();
                callback(error, texture2d, extra);
            });
        } else {
            cc.loader.loadImg(url, {isCrossOrigin: true}, function (error, texture2d) {
                callback(error, texture2d, extra);
            });
        }
    },

    playCCBAnimation: function(node, anmName){
        var animMgr = node.animationManager;
        var seqId;
        if(anmName) {
            if (cc.sys.isNative){
                seqId = animMgr.getSequenceId(anmName);
            }
            else{
                seqId = animMgr._getSequenceId(anmName);
            }
        } else {
            seqId = animMgr.getAutoPlaySequenceId();
        }

        if (seqId != -1){
            if(!anmName) {
                animMgr.runAnimationsForSequenceIdTweenDuration(seqId, 0);
            } else {
                animMgr.runAnimationsForSequenceNamed(anmName);
            }
            return true;
        } else {
            cc.log("animation " + anmName + " not exists!");
            return false;
        }
    },

    randomScaleAnim: function (spr, startScale, totalTime) {
        totalTime = this.randomNextNumberInRange(totalTime * 0.8, totalTime * 1.2);
        var delayTime = this.randomNextNumber(totalTime / 2);

        var scaleBigTime = 0.3 * (totalTime - delayTime) * 2;
        var scaleSmallTime = 0.1 * (totalTime - delayTime) * 2;
        var scaleNormalTime = 0.1 * (totalTime - delayTime) * 2;

        spr.stopAllActions();
        spr.setScale(0);
        spr.runAction(cc.sequence(cc.delayTime(delayTime),
            cc.scaleTo(scaleBigTime, 1.1 * startScale).easing(cc.easeInOut(2)) ,
            cc.scaleTo(scaleSmallTime, 0.9 * startScale).easing(cc.easeInOut(2)),
            cc.scaleTo(scaleNormalTime, 1 * startScale).easing(cc.easeInOut(2))));
    },

    getFormatTime: function (time) {
        var decimals = time - Math.floor(time);
        time = Math.floor(time);
        if (time <= 60) {
            return "" + (time + decimals).toFixed(2);
        } else if (time <= 3600) {
            return Math.floor(time / 60) + ":" + ((time % 60) + decimals).toFixed(2);
        } else {
            return Math.floor(time / 3600) + ":" + Math.floor(time % 3600 / 60) + ":" + ((time % (3600 * 60)) + decimals).toFixed(2);
        }
    },

    getLongFormatTime: function (time) {
        return Math.floor(time / 3600) + ":" + Math.floor(time % 3600 / 60) + ":" + (time % (3600 * 60));
    },

    seekNodeByTag: function (rootNode, tag) {
        if (null === rootNode){
            return null;
        }
        if(rootNode.getTag() === tag){
            return rootNode;
        }
        var arrayRootChildren = rootNode.getChildren();
        if(arrayRootChildren && arrayRootChildren.length > 0) {
            var length = arrayRootChildren.length;
            for(var i = 0; i < length; i++) {
                var child = arrayRootChildren[i];
                if (null !== child){
                    var res = this.seekNodeByTag(child, tag);
                    if (null !== res) {
                        return res;
                    }
                }
            }
        }
        return null;
    },

    autoRelease: function (obj) {
        Utils.executeInNextFrame(function () {
            obj.release();
        });
    },

    executeInNextFrame: function (callback) {
        setTimeout(function () {
            if (callback) {
                callback();
            }
        }, 0);
    },

    isIOS: function () {
        if (cc.sys.os === cc.sys.OS_IOS) {
            return true;
        }
        return false;
    },

    getDayByTs: function(ts) {
        return Math.floor(ts / (1000 * 3600 * 24));
    },

    isSelfGame: function () {
        if (cc.sys.os === cc.sys.OS_IOS) {
            if (cc.sys.language === cc.sys.LANGUAGE_CHINESE) {
                return true;
            }
        } else {
            //var platformName = jsb_dp.oneSdkBridge.getChannelName();
            //if (platformName === "taptap") {
            //    return true;
            //}
            return this.isAndroidAndSelfGame();
        }
        return false;
    },

    isAndroidAndSelfGame: function () {
        return false;
        var platformName = jsb_dp.oneSdkBridge.getChannelName();
        if (platformName === "taptap") {
            return true;
        }
        return false;
    },

    getDashPointsNode: function (points, dashArray, dashOffset) {
        var lastx = points[0].x,
            lasty = points[0].y;

        var dx, dy;

        var totalLength = 0;
        var length = 0;

        var dashLength = dashArray.length;
        var dashIndex = 0;

        var from = dashOffset;
        var drawLength = dashArray[dashIndex];
        var to = dashOffset + drawLength;

        var x1, y1;
        var x, y;

        var parent = new cc.Node();

        var addDotNode = function (x1, y1) {
            var dot = new cc.Sprite("#skin_0.png");
            parent.addChild(dot);
            dot.setPosition(cc.p(x1, y1));
            dot.scale = 0.2;
            dot.opacity = 150;
            dot.setColor(cc.color.GRAY);
        };

        for (var i = 0, l = points.length; i < l; i++) {
            x = points[i].x;
            y = points[i].y;

            if (i !== 0) {
                dx = x - lastx;
                dy = y - lasty;

                length = Math.sqrt(dx * dx + dy * dy);

                if (!x1) x1 = lastx;
                if (!y1) y1 = lasty;

                while (length > 0) {
                    if (totalLength + length < from) {
                        totalLength += length;
                        length = 0;

                        x1 = x;
                        y1 = y;

                        continue;
                    }

                    if (totalLength <= from) {
                        var difLength = from - totalLength;
                        var p = difLength / length;

                        x1 = x1 + p * (x - x1);
                        y1 = y1 + p * (y - y1);

                        //ctx.moveTo(x1, y1);
                        addDotNode(x1, y1);

                        length -= difLength;
                        totalLength += difLength;
                    }

                    if ((totalLength + length) < to) {
                        x1 = x;
                        y1 = y;

                        //ctx.lineTo(x1, y1);
                        addDotNode(x1, y1);

                        totalLength += length;
                        length = 0;
                    }
                    else if ((totalLength + length) >= to) {
                        var difLength = to - totalLength;
                        var p = difLength / length;

                        x1 = x1 + p * (x - x1);
                        y1 = y1 + p * (y - y1);

                        //ctx.lineTo(x1, y1);
                        addDotNode(x1, y1);

                        length -= difLength;
                        totalLength += difLength;

                        from = to + dashArray[++dashIndex % dashLength];
                        to = from + dashArray[++dashIndex % dashLength];
                    }
                }
            } else {
                //addDotNode(x, y);
            }

            lastx = x;
            lasty = y;
        }
        return parent;
    },

    isFileExist: function (fileName) {
        if (cc.sys.isNative) {
            if (jsb.fileUtils.isFileExist(fileName)) {
                return true;
            }
        } else {
            if (cc.loader.getRes(fileName)) {
                return true;
            }
        }
        return false;
    },

    /**
     * 判断宽高比是否大于2，如果大于2，则使用刘海屏适配方式来显示UI
     * @returns {boolean}
     */
    isNotchScreen: function () {
        if (cc.sys.isNative) {
            return jsb_dp.oneSdkBridge.isNotchScreen();
        }
        return false;
    },

    loadIterator: function (funcList, callback) {
        var self = this;
        var func = funcList.shift();
        if (func) {
            Utils.executeInNextFrame(function () {
                func();
                self.loadIterator(funcList, callback);
            });
        } else {
            if (callback) {
                callback();
            }
        }
    },

    getTotalMemory: function () {
        if (cc.sys.isNative) {
            if (!this.totalMemory) {
                this.totalMemory = jsb_dp.oneSdkBridge.getTotalMemory();
            }
            return this.totalMemory;
        }
        return 0;
    },

    isLowAndroid: function () {
        if (cc.sys.os === cc.sys.OS_ANDROID) {
            cc.log("memory: ", this.getTotalMemory());
            return (this.getTotalMemory() <= 1536);
        }
        return false;
    },

    setTrackValue: function (name, value) {
        if (cc.sys.isNative) {
            jsb_dp.oneSdkBridge.setTrackValue(name, value);
        }
    },

    getReverseString: function (str) {
        return str.split('').reverse().join('');
    },

    getCurrentFPS: function () {
        if (game.utils.isLowAndroid()) {
            game.config.lowAndroidFPS;
        }
        return 60;
    }
};

module.exports = Utils;
},{}],36:[function(require,module,exports){
/**
 * Created by XinCheng on 8/18/16.
 */

var EasingFunctions = {
    // no easing, no acceleration
    linear: function (t) { return t; },
    // accelerating from zero velocity
    easeInQuad: function (t) { return t*t; },
    // decelerating to zero velocity
    easeOutQuad: function (t) { return t*(2-t); },
    // acceleration until halfway, then deceleration
    easeInOutQuad: function (t) { return t<0.5 ? 2*t*t : -1+(4-2*t)*t; },
    // accelerating from zero velocity
    easeInCubic: function (t) { return t*t*t; },
    // decelerating to zero velocity
    easeOutCubic: function (t) { return (--t)*t*t+1; },
    // acceleration until halfway, then deceleration
    easeInOutCubic: function (t) { return t<0.5 ? 4*t*t*t : (t-1)*(2*t-2)*(2*t-2)+1; },
    // accelerating from zero velocity
    easeInQuart: function (t) { return t*t*t*t; },
    // decelerating to zero velocity
    easeOutQuart: function (t) { return 1-(--t)*t*t*t; },
    // acceleration until halfway, then deceleration
    easeInOutQuart: function (t) { return t<0.5 ? 8*t*t*t*t : 1-8*(--t)*t*t*t; },
    // accelerating from zero velocity
    easeInQuint: function (t) { return t*t*t*t*t; },
    // decelerating to zero velocity
    easeOutQuint: function (t) { return 1+(--t)*t*t*t*t; },
    // acceleration until halfway, then deceleration
    easeInOutQuint: function (t) { return t<0.5 ? 16*t*t*t*t*t : 1+16*(--t)*t*t*t*t; },

    easeOutElastic: function(t){  var p = 0.4; return Math.pow(2,-10*t) * Math.sin((t-p/4)*(2*Math.PI)/p) + 1; },

    elastic: function(t, x) { return Math.pow(2, 10 * (t-1)) * Math.cos(20*Math.PI*x/3*t); },

    // 弹跳
    bounce: function(t) {
        for(var a = 0, b = 1; 1; a += b, b /= 2) {
            if (t >= (7 - 4 * a) / 11) {
                return -Math.pow((11 - 6 * a - 11 * t) / 4, 2) + Math.pow(b, 2);
            }
        }
    },

    //三次贝塞尔算法
    bseBase: function(t, p0, p1, p2, p3){
        var x = p0.x * (1 - t) * (1 - t) * (1 - t) + p1.x * 3 * t * (1 - t) * (1 - t) + p2.x * 3 * t * t * (1 - t) + p3.x * t * t * t;
        var y = p0.y * (1 - t) * (1 - t) * (1 - t) + p1.y * 3 * t * (1 - t) * (1 - t) + p2.y * 3 * t * t * (1 - t) + p3.y * t * t * t;
        return {x:x,y:y};
    },

    doShaking: function (t) {
        return -Math.sin(2 * Math.PI * 3 * t) * Math.pow((1 - t), 2);
    }

};

var Wheel = cc.Class.extend({
    target: null,                               // the target node you want to rotate
    bCurve: [0.42, -0.08, 0.58, 1.10],          // magic curve
    fps: 0,                                     // fps
    nRound: 1,                                  // move nRound x 360

    frameCount: 0,
    elapsedTime: 0,
    totalRotationTime: 0,
    startRotation: 0,       // the start rotation
    movement: 0,             // the movement degrees
    easyFunction: null,
    endCallback: null,
    targetRotation: 0,
    wheelItemAngle: 0,
    lastTime: 0,
    lastRotation: 0,
    speed: 0,

    _lotteryReseting: false,
    _isHighRotating: false,
    _startUpdate: false,


    /*
     * target: the node you want to rotate
     * fps: 30fps by default
     */
    ctor: function (target, fps) {
        this.target = target;
        this.fps = fps || 60;
    },

    /**
     * rotate the target node to the specified value
     * the index should start with 0
     * @param {number} rotationTime
     * @param {number} targetRotation
     * @param {number} wheelItemAngle
     * @param {Function} rollEndCallback
     */
    rotate: function (rotationTime, targetRotation, wheelItemAngle, rollEndCallback) {
        // I am moving
        if (this._startUpdate) {
            return;
        }

        this.targetRotation = targetRotation;
        this.frameCount = 0;
        this.totalRotationTime = rotationTime;

        this.startRotation = this.target.rotation % 360;
        this.movement = targetRotation - this.startRotation;
        this.wheelItemAngle = wheelItemAngle;

        this.lastTime = Date.now();
        this.lastRotation = 0;
        this._isHighRotating = false;
        this._lotteryReseting = false;

        this.easyFunction = this.defaultEasyFunction;
        //// use bezier
        //if (Array.isArray(params.easyFunction)) {
        //    this.bCurve = params.easyFunction;
        //    this.easyFunction = this.defaultEasyFunction;
        //}
        //// provide a function
        //else if (typeof easyFunction === 'function') {
        //    this.easyFunction = params.easyFunction;
        //}
        //// provide a functionName
        //else {
        //    this.easyFunction = EasingFunctions[params.easyFunction] || this.defaultEasyFunction;
        //}

        this.endCallback = rollEndCallback;

        this.scheduleUpdate();
        this._startUpdate = true;
    },

    scheduleUpdate: function () {
        this.elapsedTime = 0;
        cc.director.getScheduler().scheduleUpdateForTarget(this, 0, false);
    },

    unscheduleUpdate: function () {
        cc.director.getScheduler().unscheduleUpdateForTarget(this);
        this.elapsedTime = 0;
    },

    update: function (dt) {
        if (this._startUpdate) {
            this.moveByFrame(dt);
        }
    },

    /*rotate the reel frame by frame*/
    moveByFrame: function (dt) {
        // calculate elapsed time
        this.elapsedTime += dt;

        // calculate the moving progress
        var progress = this.easyFunction(this.elapsedTime / this.totalRotationTime);

        // do the rotation
        this.target.rotation = progress * this.movement + this.startRotation;

        //var hasStop = false;
        // stop here
        if (this.targetRotation <= this.target.rotation) {
            this.target.rotation = this.targetRotation;
            this.unscheduleUpdate();
            this._startUpdate = false;

            //game.audio.stopEffect("slots/roulette-bg");

            if (this.endCallback) {
                this.endCallback();
            }
        }

        this.speed = (this.target.rotation - this.lastRotation) / (Date.now() - this.lastTime) * 1000;

        this.lastTime = Date.now();
        this.lastRotation = this.target.rotation;
    },

    /* Use bezier Curive as default */
    defaultEasyFunction: function (t) {
        var bez = this.bCurve;
        var coord = EasingFunctions.bseBase(t, {x: 0, y: 0}, {x: bez[0], y: bez[1]}, {x: bez[2], y: bez[3]}, {
            x: 1,
            y: 1
        });
        return coord.y;
    },

    getTargetRotation: function () {
        return this.targetRotation;
    },

    getSpeed: function () {
        return this.speed;
    }
});


module.exports = Wheel;

},{}],37:[function(require,module,exports){
/**
 * A brief explanation for "project.json":
 * Here is the content of project.json file, this is the global configuration for your game, you can modify it to customize some behavior.
 * The detail of each field is under it.
 {
    "project_type": "javascript",
    // "project_type" indicate the program language of your project, you can ignore this field

    "debugMode"     : 1,
    // "debugMode" possible values :
    //      0 - No message will be printed.
    //      1 - cc.error, cc.assert, cc.warn, cc.log will print in console.
    //      2 - cc.error, cc.assert, cc.warn will print in console.
    //      3 - cc.error, cc.assert will print in console.
    //      4 - cc.error, cc.assert, cc.warn, cc.log will print on canvas, available only on web.
    //      5 - cc.error, cc.assert, cc.warn will print on canvas, available only on web.
    //      6 - cc.error, cc.assert will print on canvas, available only on web.

    "showFPS"       : true,
    // Left bottom corner fps information will show when "showFPS" equals true, otherwise it will be hide.

    "frameRate"     : 60,
    // "frameRate" set the wanted frame rate for your game, but the real fps depends on your game implementation and the running environment.

    "id"            : "gameCanvas",
    // "gameCanvas" sets the id of your canvas element on the web page, it's useful only on web.

    "renderMode"    : 0,
    // "renderMode" sets the renderer type, only useful on web :
    //      0 - Automatically chosen by engine
    //      1 - Forced to use canvas renderer
    //      2 - Forced to use WebGL renderer, but this will be ignored on mobile browsers

    "engineDir"     : "frameworks/cocos2d-html5/",
    // In debug mode, if you use the whole engine to develop your game, you should specify its relative path with "engineDir",
    // but if you are using a single engine file, you can ignore it.

    "modules"       : ["cocos2d"],
    // "modules" defines which modules you will need in your game, it's useful only on web,
    // using this can greatly reduce your game's resource size, and the cocos console tool can package your game with only the modules you set.
    // For details about modules definitions, you can refer to "../../frameworks/cocos2d-html5/modulesConfig.json".

    "jsList"        : [
    ]
    // "jsList" sets the list of js files in your game.
 }
 *
 */

cc.game.onStart = function() {
    if (!cc.sys.isNative && document.getElementById("cocosLoading"))
        document.body.removeChild(document.getElementById("cocosLoading"));

    cc.view.enableRetina(false);
    cc.view.adjustViewPort(true);

    var LogicMan = require("./common/model/LogicMan");
    LogicMan.getInstance().init();

    var Utils = require("./common/util/Utils");
    cc.view.resizeWithBrowserSize(true);
    cc.view.setDesignResolutionSize(1000, 1300, cc.ResolutionPolicy.SHOW_ALL);
    //if (cc.sys.isNative) {
    //    var width = 0;
    //    var height = 0;
    //    if (!!GameBridge.getConfig().horizontalGame) {
    //        height = 640;
    //        if (Utils.isPad()) {
    //            height = 768;
    //        }
    //        width = height * cc.winSize.width / cc.winSize.height;
    //        cc.log("cc.winSize.width:" + cc.winSize.width);
    //        cc.log("cc.winSize.height:" + cc.winSize.height);
    //
    //    } else {
    //        height = 1136;
    //        if (Utils.isPad()) {
    //            height = 1024;
    //        }
    //        width = height * cc.winSize.width / cc.winSize.height;
    //    }
    //    cc.log("width:" + width);
    //    cc.log("height:" + height);
    //    cc.view.setDesignResolutionSize(width, height, cc.ResolutionPolicy.SHOW_ALL);
    //} else {
    //    if (!!GameBridge.getConfig().horizontalGame) {
    //        cc.view.setDesignResolutionSize(960, 640, cc.ResolutionPolicy.SHOW_ALL);
    //    } else {
    //        cc.view.setDesignResolutionSize(640, 960, cc.ResolutionPolicy.SHOW_ALL);
    //    }
    //}

    // The game will be resized when browser size change
    cc.BuilderReader.setResourcePath("res/");
    cc.view.resizeWithBrowserSize(true);

    game.dialogManager.createOverlay();
    window.isEditor = true;

    var AdsReminderController = require("./many_bricks/controller/AdsReminderController");
    var DiamondsController = require("./many_bricks/controller/DiamondsController");
    cc.BuilderReader.registerController("AdsReminderController", new AdsReminderController());
    cc.BuilderReader.registerController("DiamondsController", new DiamondsController());

    if (cc.sys.isNative) {
        game.local.reload();
        cc.director.runScene(new GameBridge.getMenuScene());
    } else {
        cc.loader.loadJson("res/resource_list/resource_list.json", function (error, result) {
            if (!error) {
                cc.LoaderScene.preload(result, function () {
                    game.local.reload();
                    var EditorScene = require("./many_bricks/editor/scene/EditorScene");
                    cc.director.runScene(new EditorScene());
                }, this);
            }
        });
    }
};
cc.game.run();

},{"./common/model/LogicMan":27,"./common/util/Utils":35,"./many_bricks/controller/AdsReminderController":49,"./many_bricks/controller/DiamondsController":56,"./many_bricks/editor/scene/EditorScene":93}],38:[function(require,module,exports){

var BrickConfig = function () {
    this.width = 0;
    this.height = 0;
    this.x = 0;
    this.y = 0;
    this.type = 0;
};

BrickConfig.prototype.unmarshal = function (jsonObj) {
    this.x = jsonObj[0];
    this.y = jsonObj[1];
    this.width = jsonObj[2];
    this.height = jsonObj[3];
    this.type = jsonObj[4];
};

BrickConfig.prototype.getHardCfg = function () {
    var hardCfg = new BrickConfig();
    hardCfg.x = this.x * 2;
    hardCfg.y = this.y * 2;
    hardCfg.width = this.width * 2;
    hardCfg.height = this.height * 2;
    hardCfg.type = this.type;
    return hardCfg;
};

module.exports = BrickConfig;
},{}],39:[function(require,module,exports){
/**
 * Created by oye on 16/5/19.
 */
var Config = {
    itunesDownloadUrl: "itms-apps://itunes.apple.com/app/id1372837123?action=write-review",
    googlePlayUrl: "http://bit.ly/2O8G9vx",
    iosShortUrl: "https://apple.co/2UPCwz6",
    androidShortUrl: "http://bit.ly/2O8G9vx",
    appName: "Break Bricks",
    iosLeaderBoardKey: "com.douapp.manybricks.rank",
    iosHardLeaderBoardKey: "com.douapp.manybricks.hardrank",
    googlePlayLeaderBoardKey: "CgkIouCt0-kBEAIQAQ",
    facebookFanPageUrl: "https://www.facebook.com/PlayBreakBricks/",
    iosStarRankKey: "com.douapp.manybricks.starrank",
    IS_DEBUG: false,
    IS_ENABLE_HOT_UPDATE: false,

    getStarLeaderBoardKey: function () {
        return this.iosStarRankKey;
    },

    getLeaderBoardKey: function () {
        if (cc.sys.os == cc.sys.OS_ANDROID) {
            return this.googlePlayLeaderBoardKey;
        } else {
            return this.iosLeaderBoardKey;
        }
    },

    getHardBoardKey: function () {
        if (cc.sys.os == cc.sys.OS_ANDROID) {
            return this.googlePlayLeaderBoardKey;
        } else {
            return this.iosHardLeaderBoardKey;
        }
    },

    getPlatformDownloadUrl: function () {
        if (cc.sys.os == cc.sys.OS_ANDROID) {
            return this.googlePlayUrl;
        } else {
            return this.itunesDownloadUrl;
        }
    },

    getShortPlatformDownloadUrl: function () {
        if (cc.sys.os == cc.sys.OS_ANDROID) {
            return this.androidShortUrl;
        } else {
            return this.iosShortUrl;
        }
    },

    getCrossPromUrl: function () {
        if (cc.sys.os == cc.sys.OS_ANDROID) {
            return this.androidCrossPromUrl;
        } else {
            if (game.utils.isSelfGame()) {
                return this.cnCrossPromUrl;
            }
            return this.crossPromUrl;
        }
    },
    getPackageName: function () {
        if (cc.sys.os == cc.sys.OS_ANDROID) {
            if (game.utils.isSelfGame()) {
                return "com.douapp.manybricks";
            } else {
                return "com.q1.breakbricks";
            }
        } else {
            return "com.douapp.manybricks";
        }
    },
    getAdUrl: function () {
        if (game.utils.isSelfGame()) {
            return this.cnNewAdConfigUrl;
        }
        return this.adConfigUrl;
    },
    horizontalGame: false,

    //bingchuan ad url.
    adConfigUrl: "https://onegameinc.github.io/many_bricks/game_bingchuan.html",
    //bingchuan prom url.
    crossPromUrl: "https://onegameinc.github.io/cross_promotion/config/many_bricks/cross_promotion_bingchuan.html",

    //old version cn ad url.
    cnAdConfigUrl: "https://onegameinc.github.io/many_bricks/game.html",
    //new version cn ad url.
    cnNewAdConfigUrl: "https://onegameinc.github.io/many_bricks/game_cn.html",
    //cn prom url.
    cnCrossPromUrl: "https://onegameinc.github.io/cross_promotion/config/many_bricks/cross_promotion.html",


    androidCrossPromUrl: "https://onegameinc.github.io/cross_promotion/config/many_bricks_android/cross_promotion.html",
    connectEmail: "bricks.crush.play@gmail.com",

    rewardAdMaxCountPerDay: 10,
    rewardDiamonds: 5,
    minPossibility: 0.01,
    estimatedRatio: 0.1,
    rewardDiamondMap: {
        "1": 1,
        "2": 3,
        "3": 5
    },
    relifeDiamonds: 50,
    skipDiamonds: 100,
    aimItemDiamonds: 50,
    lowAndroidFPS: 40,
    dailyDiamonds: 50
};

module.exports = Config;
},{}],40:[function(require,module,exports){
/**
 * Created by qinning on 2017/3/25.
 */
var LevelConfig = require("./LevelConfig");
//var PackageConfig = require("./PackageConfig");
var StoreConfig = require("./StoreConfig");
var WheelConfig = require("./WheelConfig");
var ShareConfig = require("./ShareConfig");
var SkinConfig = require("./SkinConfig");
var DailyBonusConfig = require("./DailyBonusConfig");
var StoreType = require("../enum/StoreType");
var TaskConfig = require("./TaskConfig");
var BoostType = require("../enum/BoostType");
var TaskOldConfig = require("./TaskOldConfig");

var LevelConfigMan = cc.Class.extend({

    levelList: null,
    storeList: null,
    wheelList: null,
    boxWheelList: null,
    shareList: null,
    skinList: null,
    dailyBonusList: null,
    storeListWithoutFirstPurchase: null,
    taskList: null,
    oldTaskList: null,
    originalLevelList: null,

    ctor: function () {
        this.storeList = [];
        this.levelList = [];
        this.wheelList = [];
        this.boxWheelList = [];
        this.shareList = [];
        this.skinList = [];
        this.dailyBonusList = [];
        this.storeListWithoutFirstPurchase = [];
        this.taskList = [];
        this.oldTaskList = [];

        this.reload();
    },

    reload: function () {
        var i;

        var jsonObj = game.utils.loadJson("res/config/store_config.json");
        var storeConfigs = jsonObj["stores"];
        for (i = 0; i < storeConfigs.length; ++i) {
            var storeConfig = new StoreConfig();
            storeConfig.unmarshal(storeConfigs[i]);
            this.storeList.push(storeConfig);

            if (storeConfig.type === StoreType.FIRST_PURCHASE) {
                this.specialOfferCfg = storeConfig;
            } else {
                this.storeListWithoutFirstPurchase.push(storeConfig);
            }
        }

        this.reloadLevelConfig();

        jsonObj = game.utils.loadJson("res/config/data_config.json");
        var wheelConfigs = jsonObj["wheel"];
        var wheelConfig;
        for (i = 0; i < wheelConfigs.length; ++i) {
            wheelConfig = new WheelConfig();
            wheelConfig.unmarshal(wheelConfigs[i]);
            this.wheelList.push(wheelConfig);
        }

        var boxWheelConfigs = jsonObj["box"];
        for (i = 0; i < boxWheelConfigs.length; ++i) {
            wheelConfig = new WheelConfig();
            wheelConfig.unmarshal(boxWheelConfigs[i]);
            this.boxWheelList.push(wheelConfig);
        }

        var shareConfigs = jsonObj["share"];
        for (i = 0; i < shareConfigs.length; ++i) {
            var shareConfig = new ShareConfig();
            shareConfig.unmarshal(shareConfigs[i]);
            this.shareList.push(shareConfig);
        }

        var dailyBonusConfigs = jsonObj["daily_bonus"];
        for (i = 0; i < dailyBonusConfigs.length; ++i) {
            var dailyBonusConfig = new DailyBonusConfig();
            dailyBonusConfig.unmarshal(dailyBonusConfigs[i]);
            if (dailyBonusConfig.type === BoostType.SKIN) {
                var getted = game.playerMan.hasSkin(dailyBonusConfig.arg1);
                if (getted) {
                    dailyBonusConfig.type = dailyBonusConfig.extra.type;
                    dailyBonusConfig.count = dailyBonusConfig.extra.count;
                    dailyBonusConfig.image = dailyBonusConfig.extra.image;
                }
            }

            this.dailyBonusList.push(dailyBonusConfig);
        }

        jsonObj = game.utils.loadJson("res/config/skins_config.json");
        var skinsConfigs = jsonObj["skins"];
        for (i = 0; i < skinsConfigs.length; ++i) {
            var skinConfig = new SkinConfig();
            skinConfig.unmarshal(skinsConfigs[i]);
            this.skinList.push(skinConfig);
        }

        jsonObj = game.utils.loadJson("res/config/task_config.json");
        var taskConfigs = jsonObj["tasks"];
        for (i = 0; i < taskConfigs.length; ++i) {
            var taskConfig = new TaskConfig();
            taskConfig.unmarshal(taskConfigs[i]);
            this.taskList.push(taskConfig);
        }

        jsonObj = game.utils.loadJson("res/config/task_old_config.json");
        var taskConfigs = jsonObj["tasks"];
        for (i = 0; i < taskConfigs.length; ++i) {
            var taskConfig = new TaskOldConfig();
            taskConfig.unmarshal(taskConfigs[i]);
            this.oldTaskList.push(taskConfig);
        }
    },

    reloadLevelConfig: function () {
        this.levelList = [];
        var levelConfigGroup = game.remoteConfig.getRemoteConfig("level_config_group");
        cc.log("remote config level_config_group:" + levelConfigGroup);
        var defaultConfigName = "res/config/level_configs.json";
        var levelConfigName = defaultConfigName;
        if (levelConfigGroup && levelConfigGroup.length > 0) {
            levelConfigName = "res/config/level_configs-" + levelConfigGroup + ".json";
            if (!game.utils.isFileExist(levelConfigName)) {
                levelConfigName = defaultConfigName;
            }
        }
        var jsonObj = game.utils.loadJson(levelConfigName);
        var levelConfigs = jsonObj["levels"];
        this.originalLevelList = levelConfigs;
        for (var i = 0; i < levelConfigs.length; ++i) {
            var levelConfig = new LevelConfig();
            levelConfig.unmarshal(levelConfigs[i]);
            this.levelList.push(levelConfig);
        }
    },

    onRemoteConfigReceived: function () {
        this.reloadLevelConfig();
    },

    getStoreList: function () {
        return this.storeList;
    },

    getStoreListWithoutFirstPurchase: function () {
        return this.storeListWithoutFirstPurchase;
    },

    getLevelList: function () {
        return this.levelList;
    },

    getLevelConfig: function (levelId) {
        return this.levelList[levelId - 1];
    },

    getOriginalLevelConfig: function (levelId) {
        return this.originalLevelList[levelId - 1];
    },

    getWheelList: function () {
        return this.wheelList;
    },

    getBoxWheelList: function () {
        return this.boxWheelList;
    },

    getShareList: function () {
        return this.shareList;
    },

    getSkinList: function () {
        return this.skinList;
    },

    getSkinListByType: function (type) {
        var list = [];
        for (var i = 0; i < this.skinList.length; ++i) {
            if (type === this.skinList[i].type) {
                list.push(this.skinList[i]);
            }
        }
        return list;
    },

    getTaskList: function () {
        return this.taskList;
    },

    getOldTaskList: function () {
        return this.oldTaskList;
    },

    getSkinCfg: function (skinId) {
        for (var i = 0; i < this.skinList.length; ++i) {
            if (skinId == this.skinList[i].id) {
                return this.skinList[i];
            }
        }
        return null;
    },

    getDailyBonusList: function () {
        return this.dailyBonusList;
    },

    getSpecialOfferCfg: function () {
        return this.specialOfferCfg;
    }

    //getPackage: function (packageId) {
    //    for (var i = 0; i < this.packageList.length; ++i) {
    //        if (this.packageList[i].id === packageId) {
    //            return this.packageList[i];
    //        }
    //    }
    //    return null;
    //}
});

LevelConfigMan._instance = null;
LevelConfigMan._firstUseInstance = true;

/**
 *
 * @returns {LevelConfigMan}
 */
LevelConfigMan.getInstance = function () {
    if (LevelConfigMan._firstUseInstance) {
        LevelConfigMan._firstUseInstance = false;
        LevelConfigMan._instance = new LevelConfigMan();
    }
    return LevelConfigMan._instance;
};

module.exports = LevelConfigMan;

},{"../enum/BoostType":103,"../enum/StoreType":113,"./DailyBonusConfig":41,"./LevelConfig":42,"./ShareConfig":43,"./SkinConfig":44,"./StoreConfig":45,"./TaskConfig":46,"./TaskOldConfig":47,"./WheelConfig":48}],41:[function(require,module,exports){
/**
 * Created by qinning on 2017/12/15.
 */

var DailyBonusConfig = function () {
    this.id = 0;
    this.type = 0;
    this.count = 0;
    //this.probability = 0;
    this.image = "";
    this.arg1 = "";
};

DailyBonusConfig.prototype.unmarshal = function (jsonObj) {
    this.id = jsonObj["id"];
    this.type = jsonObj["type"];
    this.count = jsonObj["count"];
    //this.probability = jsonObj["probability"];
    this.image = jsonObj["image"];
    this.arg1 = jsonObj["arg1"];
    this.extra = jsonObj["extra"];
};

module.exports = DailyBonusConfig;


},{}],42:[function(require,module,exports){
/**
 * Created by qinning on 2017/3/25.
 */
var BrickConfig = require("./BrickConfig");

var LevelConfig = function () {
    this.lifeProbability = 0;
    this.boostProbability = 0;
    this.pixelWidth = 0;
    this.pixelHeight = 0;
    this.width = 0;
    this.height = 0;
    /**
     * @type {Array.<BrickConfig>}
     */
    this.obstacles = [];
    /**
     * @type {Array.<BrickConfig>}
     */
    this.bricks = [];
    this.starTime = 0;
};

LevelConfig.prototype.unmarshal = function (jsonObj) {
    this.lifeProbability = jsonObj["l"] || 0;
    this.boostProbability = jsonObj["b"] || 0;
    this.pixelWidth = jsonObj["pixelWidth"];
    this.pixelHeight = jsonObj["pixelHeight"];
    this.width = jsonObj["width"];
    this.height = jsonObj["height"];
    var i;
    var obstacles = jsonObj["obstacles"];
    for (i = 0; i < obstacles.length; ++i) {
        var obstacle = obstacles[i];
        var obstacleCfg = new BrickConfig();
        obstacleCfg.unmarshal(obstacle);
        this.obstacles.push(obstacleCfg);
    }

    var bricks = jsonObj["bricks"];
    for (i = 0; i < bricks.length; ++i) {
        var brick = bricks[i];
        var brickCfg = new BrickConfig();
        brickCfg.unmarshal(brick);
        this.bricks.push(brickCfg);
    }
    this.starTime = jsonObj["starTime"] || 0;
};

LevelConfig.prototype.getHardCfg = function () {
    var levelCfg = new LevelConfig();
    levelCfg.lifeProbability = this.lifeProbability;
    levelCfg.boostProbability = this.boostProbability * 0.9;
    levelCfg.pixelWidth = this.pixelWidth;
    levelCfg.pixelHeight = this.pixelHeight;
    levelCfg.width = this.width * 2;
    levelCfg.height = this.height * 2;
    levelCfg.obstacles = [];
    levelCfg.bricks = [];
    levelCfg.starTime = this.starTime * 1.2;
    var i;
    for (i = 0; i < this.obstacles.length; ++i) {
        levelCfg.obstacles.push(this.obstacles[i].getHardCfg());
    }
    for (i = 0; i < this.bricks.length; ++i) {
        levelCfg.bricks.push(this.bricks[i].getHardCfg());
    }
    return levelCfg;
};

module.exports = LevelConfig;
},{"./BrickConfig":38}],43:[function(require,module,exports){
/**
 * Created by qinning on 2017/12/15.
 */

var ShareConfig = function () {
    this.id = 0;
    this.image = "";
    this.desc = "";
};

ShareConfig.prototype.unmarshal = function (jsonObj) {
    this.id = jsonObj["id"];
    this.image = jsonObj["image"];
    this.desc = jsonObj["desc"];
};

ShareConfig.prototype.copy = function () {
    var config = new ShareConfig();
    config.id = this.id;
    config.image = this.image;
    config.desc = this.desc;
    return config;
};

module.exports = ShareConfig;


},{}],44:[function(require,module,exports){
/**
 * Created by qinning on 2017/12/15.
 */

var SkinConfig = function () {
    this.id = 0;
    this.count = "";
    this.image = 0;
    this.scale = 1;
    this.type = 0;
};

SkinConfig.prototype.unmarshal = function (jsonObj) {
    this.id = jsonObj["id"];
    this.count = jsonObj["count"];
    this.image = jsonObj["image"];
    this.scale = jsonObj["scale"] || 1;
    this.type = jsonObj["type"] || 2;
};

module.exports = SkinConfig;


},{}],45:[function(require,module,exports){
/**
 * Created by qinning on 2017/12/15.
 */

var StoreConfig = function () {
    this.id = 0;
    this.type = 0;
    this.name = "";
    this.price = 0;
    this.count = 1;
    this.image = "";
    this.pid = "";
    this.key = "";
    this.hot = false;
    this.best = false;
    this.data = null;
    this.original_price = 0;
    this.discount_multi = 0;
    this.extra = 0;
    this.priceUS = 0;
};

StoreConfig.prototype.unmarshal = function (jsonObj) {
    this.id = jsonObj["id"];
    this.type = jsonObj["type"];
    this.name = jsonObj["name"];
    this.price = jsonObj["price"];
    this.count = jsonObj["count"];
    this.image = jsonObj["image"];
    this.pid = jsonObj["pid"];
    if (cc.sys.os === cc.sys.OS_ANDROID) {
        this.pid = jsonObj["pid_gp"];
    }
    this.key = jsonObj["key"];
    this.hot = jsonObj["hot"];
    this.best = jsonObj["best"];
    this.data = jsonObj["data"] || {};
    this.original_price = jsonObj["original_price"];
    this.discount_multi = jsonObj["discount_multi"];
    this.extra = jsonObj["extra"] || 0;
    this.priceUS = parseFloat(this.price.substr(1));
};

module.exports = StoreConfig;


},{}],46:[function(require,module,exports){
/**
 * Created by qinning on 2017/12/15.
 */

var TaskConfig = function () {
    this.id = 0;
    this.type = 0;
    this.count = "";
    this.rewardCount = 0;
};

TaskConfig.prototype.unmarshal = function (jsonObj) {
    this.id = jsonObj["id"];
    this.type = jsonObj["type"];
    this.count = jsonObj["count"];
    this.rewardCount = jsonObj["rewardCount"];
};

module.exports = TaskConfig;


},{}],47:[function(require,module,exports){

/**
 * Created by qinning on 2017/12/15.
 */

var TaskOldConfig = function () {
    this.id = 0;
    this.count = "";
    this.image = 0;
    this.scale = 1;
    this.type = 0;
};

TaskOldConfig.prototype.unmarshal = function (jsonObj) {
    this.id = jsonObj["id"];
    this.type = jsonObj["type"];
    this.count = jsonObj["count"];
    this.image = jsonObj["image"];
    this.scale = jsonObj["scale"] || 1;
};

module.exports = TaskOldConfig;


},{}],48:[function(require,module,exports){
/**
 * Created by qinning on 2017/12/15.
 */

var WheelConfig = function () {
    this.id = 0;
    this.type = 0;
    this.count = 0;
    this.probability = 0;
    this.image = "";
    this.scale = 1;
};

WheelConfig.prototype.unmarshal = function (jsonObj) {
    this.id = jsonObj["id"];
    this.type = jsonObj["type"];
    this.count = jsonObj["count"];
    this.probability = jsonObj["probability"];
    this.image = jsonObj["image"];
    this.scale = jsonObj["scale"] || 1;
};

module.exports = WheelConfig;


},{}],49:[function(require,module,exports){
var EventsName = require("../events/EventsName");

var AdsReminderController = function () {
    BaseCCBController.call(this);

    this.spReminder = null;
    this.lbReminder = null;
};

game.utils.inherits(AdsReminderController, BaseCCBController);

AdsReminderController.prototype.onEnter = function () {
    BaseCCBController.prototype.onEnter.call(this);
    game.eventDispatcher.addEventListener(EventsName.REWARDED_VIDEO_COUNT, this.onUpdateReminder, this);
};

AdsReminderController.prototype.onExit = function () {
    game.eventDispatcher.removeEventListener(EventsName.REWARDED_VIDEO_COUNT, this.onUpdateReminder, this);
    BaseCCBController.prototype.onExit.call(this);
};

AdsReminderController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);
    this.onUpdateReminder();
};

AdsReminderController.prototype.onUpdateReminder = function () {
    var count = game.config.rewardAdMaxCountPerDay - game.playerMan.getRewardAdPlaceCountPerDay();
    if (count < 0) {
        count = 0;
    }
    this.lbReminder.setString(count);
};

AdsReminderController.createFromCCB = function() {
    var node = game.utils.loadNodeFromCCB("res/menu/ads_reminder_view.ccbi", null, "AdsReminderController", new AdsReminderController(), true);
    return node;
};

module.exports = AdsReminderController;
},{"../events/EventsName":115}],50:[function(require,module,exports){


var AimHelpController = function () {
    BaseCCBController.call(this);
    this.spHand = null;
};

game.utils.inherits(AimHelpController, BaseCCBController);

AimHelpController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);
    //this.lbHelpInfo.setString(game.local.getValue("aim_help_content"));
    //this.lbHelpInfo.setAlignment(cc.TEXT_ALIGNMENT_CENTER);
};

AimHelpController.prototype.getHandWorldPosition = function () {
    return this.spHand.parent.convertToWorldSpace(this.spHand.getPosition());
};

module.exports = AimHelpController;
},{}],51:[function(require,module,exports){
var EventsName = require("../events/EventsName");

var AimItemController = function () {
    BaseCCBController.call(this);

    this.btnAimItem = null;
    this.lbAimPrice = null;
    //this.lbAimTips = null;

    this.hided = false;
};

game.utils.inherits(AimItemController, BaseCCBController);

AimItemController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);
    this.lbAimPrice.setString(game.config.aimItemDiamonds);
};

AimItemController.prototype.tryAimItemClicked = function () {
    var StoreHelper = require("../model/StoreHelper");
    StoreHelper.getInstance().tryAimItem(game.gameMan.levelId, function () {
        game.gameMan.tryAimItem();
        this.playHideAnim();
    }.bind(this));
};

AimItemController.prototype.playHideAnim = function () {
    if (this.hided) {
        return;
    }
    this.hided = true;
    this.btnAimItem.enabled = false;
    game.utils.playCCBAnimation(this.rootNode, "hide");

    this.rootNode.runAction(cc.sequence(cc.delayTime(0.5), cc.hide()));
};

AimItemController.createFromCCB = function() {
    var node = game.utils.loadNodeFromCCB("res/menu/aim_item_view.ccbi", null, "AimItemController", new AimItemController(), true);
    return node;
};

module.exports = AimItemController;
},{"../events/EventsName":115,"../model/StoreHelper":121}],52:[function(require,module,exports){
//var SkinItemController = require("./SkinItemController");
//var ConfigMan = require("../config/ConfigMan");
//var EventsName = require("../events/EventsName");
//
//var GRID_SIZE = cc.size(350, 500);
//
//var StoreItemCellView = cc.TableViewCell.extend({
//    entity: null,
//    itemNode: null,
//    ctor: function () {
//        this._super();
//        this.itemNode = SkinItemController.createFromCCB();
//        this.addChild(this.itemNode);
//        this.itemNode.setPosition(cc.p(GRID_SIZE.width * 0.5, GRID_SIZE.height * 0.5));
//    },
//
//    initWith: function (entity, idx, inited) {
//        this.entity = entity;
//        this.itemNode.controller.initWith(entity, idx);
//    }
//});
var BoostType = require("../enum/BoostType");
var GameMan = require("../model/GameMan");

var BagController = function () {
    BaseCCBController.call(this);
    this.lbBoostName1 = null;
    this.lbBoostName2 = null;
    this.lbBoostDesc1 = null;
    this.lbBoostDesc2 = null;
    this.lbShareTips = null;
};

game.utils.inherits(BagController, BaseCCBController);

BagController.prototype.onEnter = function () {
    BaseCCBController.prototype.onEnter.call(this);
};

BagController.prototype.onExit = function () {
    BaseCCBController.prototype.onExit.call(this);
};

BagController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);
    this.lbBoostName1.setString(_("boost_split_title") + " X" + (game.playerMan.getBoostCount(BoostType.SPLIT)));
    this.lbBoostName2.setString(_("boost_new_title") + " X" + (game.playerMan.getBoostCount(BoostType.THREE_BALL)));
    this.lbBoostDesc1.setString(_("boost_split_desc"));
    this.lbBoostDesc2.setString(_("boost_new_desc"));
    this.lbShareTips.setString("");//_("bag_share_tips"));
    this.lbTitle.setString(_("bag_title"));
};

BagController.prototype.backClicked = function (sender) {
    AudioHelper.playBtnSound();

    this.close();
};

BagController.prototype.shareClicked = function (sender) {
    AudioHelper.playBtnSound();
    var share = GameMan.getInstance().getShareConfig();
    game.shareManager.wxShare(share, function (shared) {

    });
};

BagController.prototype.popup = function () {
    game.dialogManager.popup(this.rootNode);
};

BagController.prototype.close = function () {
    game.dialogManager.close(this.rootNode);
};

BagController.createFromCCB = function() {
    var node = game.utils.loadNodeFromCCB("res/menu/bag_view.ccbi", null, "BagController", new BagController());
    return node;
};

module.exports = BagController;
},{"../enum/BoostType":103,"../model/GameMan":116}],53:[function(require,module,exports){
var GameMan = require("../model/GameMan");

var BoardController = function () {
    BaseCCBController.call(this);

    this.spCircle = null;
    this.ndBoard = null;
    this.spBall = null;
};

game.utils.inherits(BoardController, BaseCCBController);

BoardController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);
    GameMan.getInstance().updateSkin(this.spBall);
};

BoardController.prototype.initWith = function (ballWidth) {
    var scale = GameMan.getInstance().getCurrentSkinCfg().scale;
    this.spBall.scaleX = ballWidth / this.spBall.width * scale;
    this.spBall.scaleY = ballWidth / this.spBall.height * scale;
};

BoardController.prototype.hideBall = function () {
    this.spBall.visible = false;
};

BoardController.prototype.showBall = function () {
    this.spBall.visible = true;
};

BoardController.createFromCCB = function(ballWidth) {
    var node = game.utils.loadNodeFromCCB("res/game/board_view.ccbi", null, "BoardController", new BoardController());
    node.controller.initWith(ballWidth);
    return node;
};

module.exports = BoardController;
},{"../model/GameMan":116}],54:[function(require,module,exports){
var ConfigMan = require("../config/ConfigMan");
var DailyBonusItemController = require("./DailyBonusItemController");
var BoostType = require("../enum/BoostType");
var StoreHelper = require("../model/StoreHelper");

var DailyBonusController = function () {
    BaseCCBController.call(this);
    this.DAILY_BONUS_COUNT = 7;
    this.DAILY_BONUS_TAG = 200;
    this.ndContainer = null;

    this.lblTitle = null;

    this.ndDailyBonus = null;

    this.btnDouble = null;
    this.btnClaim = null;

    this.lblClaim = null;
    this.lblDouble = null;

    this.dailyBonusNodes = [];

    //user data.
    this.configs = null;

    this.curConfig = null;

    this.claimed = false;
};

game.utils.inherits(DailyBonusController, BaseCCBController);

DailyBonusController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);
    this.lblTitle.setString(_("daily_bonus_title"));
    this.lblClaim.setString(_("claim_title"));
    this.lblDouble.setString(_("double_title"));

    this.configs = ConfigMan.getInstance().getDailyBonusList();

    for (var i = 0; i < this.DAILY_BONUS_COUNT; ++i) {
        var node = this.ndDailyBonus.getChildByTag(this.DAILY_BONUS_TAG + i);
        var itemNode = DailyBonusItemController.createFromCCB();
        this.dailyBonusNodes.push(itemNode);
        node.addChild(itemNode);
    }

    this.initUI();
};

DailyBonusController.prototype.initUI = function () {
    var lastClaimDay = game.playerMan.player.lastClaimDailyBonusDay;
    var consecutiveDay = game.playerMan.checkConsecutiveLoginDay();
    var currentDayClaimed = lastClaimDay >= game.utils.getDayByTs(Date.now());
    consecutiveDay %= 7;
    consecutiveDay = consecutiveDay || 7;
    this.claimed = currentDayClaimed;

    this.btnClaim.enabled = !currentDayClaimed;
    this.btnDouble.enabled = !currentDayClaimed;

    cc.log("consecutiveDay:" + consecutiveDay + ",dailyBonusNodes length:" + this.dailyBonusNodes.length + ",currentDayClaimed:" + currentDayClaimed);
    for (var i = 1; i <= 7; ++i) {
        cc.log("initUI:" + i);
        var config = this.configs[i - 1];
        var node = this.dailyBonusNodes[i - 1];
        if (!node) {
            cc.log("daily bonus node is null:" + i);
            continue;
        }
        var controller = node.controller;
        if (!controller) {
            cc.log("daily bonus controller is null:" + i);
            continue;
        }
        if (i < consecutiveDay) {
            controller.initWith(config, i, false, true);
        }
        else if (i === consecutiveDay) {
            controller.initWith(config, i, true, currentDayClaimed);
            this.curConfig = config;
        }
        else {
            controller.initWith(config, i, false, false);
        }
    }

    if (consecutiveDay === 3) {
        this.btnDouble.enabled = false;
    }
};

DailyBonusController.prototype.popupClaimReward = function (config, double, callback) {
    //var count = double ? config.count * 2 : config.count;
    var param = double ? 2 : 1;
    var count = config.count;
    var splitCount = 0;
    var threeBallCount = 0;
    var rewardName = game.utils.isIOS() ? "daily_bonus_tips" : "daily_bonus_tips";
    if (config.type === BoostType.SPLIT) {
        splitCount = count;
    } else if (config.type === BoostType.THREE_BALL) {
        threeBallCount = count;
    } else if (config.type === BoostType.GIFT) {
        splitCount = game.utils.randomNextIntInRange(2, 4);
        threeBallCount = game.utils.randomNextIntInRange(2, 4);
    } else if (config.type === BoostType.SKIN) {
        game.popupMan.popupRewardNoticeDlg(game.local.getValue("skin_claimed"),
            function () {
                game.playerMan.setClaimedSkin(config.arg1);
                if (callback) {
                    callback();
                }
            }, config.image, 1);
        return;
    } else if (config.type === BoostType.DIAMOND) {
        var diamondCount = config.count;
        if (double) {
            game.popupMan.popupRewardNoticeDlg(game.local.getValue("reward_video_diamonds"),
                function () {
                    game.playerMan.addDiamonds(diamondCount, rewardName);
                    if (callback) {
                        callback();
                    }
                }, config.image, diamondCount);
        } else {
            StoreHelper.getInstance().popupRewardDoubleDlg(diamondCount, BoostType.DIAMOND, rewardName, function () {
                if (callback) {
                    callback();
                }
            }.bind(this));
        }
        return;
    }
    splitCount = splitCount * param;
    threeBallCount = threeBallCount * param;
    if (double) {
        StoreHelper.getInstance().popupBoostRewardDlg(splitCount, threeBallCount, function () {
            callback && callback();
        });
    } else {
        if (splitCount > 0) {
            StoreHelper.getInstance().popupRewardDoubleDlg(splitCount, BoostType.SPLIT, rewardName, function () {
                callback && callback();
            }.bind(this));
        }
        if (threeBallCount > 0) {
            StoreHelper.getInstance().popupRewardDoubleDlg(threeBallCount, BoostType.THREE_BALL, rewardName, function () {
                callback && callback();
            }.bind(this));
        }
    }
};

DailyBonusController.prototype.claimClicked = function (sender) {
    AudioHelper.playBtnSound();
    if (!this.claimed) {
        var self = this;
        this.popupClaimReward(this.curConfig, false, function () {
            self.setClaimed();
        });
    }
    this.close();
};

DailyBonusController.prototype.doubleClicked = function (sender) {
    AudioHelper.playBtnSound();
    if (!this.claimed) {
        var self = this;
        StoreHelper.getInstance().checkAndShowRewardVideo(game.utils.isIOS() ? "shuangbeilibao" : "dailybonus", function (rewarded) {
            if (rewarded) {
                this.popupClaimReward(this.curConfig, true, function () {
                    self.setClaimed();
                });
                this.close();
            }
        }.bind(this));
    }
};

DailyBonusController.prototype.setClaimed = function () {
    game.playerMan.setLastClaimDailyBonusDay(game.utils.getDayByTs(Date.now()));
    this.claimed = true;
};

DailyBonusController.prototype.backClicked = function (sender) {
    AudioHelper.playBtnSound();

    this.close();
};

DailyBonusController.prototype.popup = function () {
    game.dialogManager.popup(this.rootNode, {popupAnim: true});
};

DailyBonusController.prototype.close = function () {
    game.dialogManager.close(this.rootNode);
};

DailyBonusController.prototype.onExit = function () {
};

DailyBonusController.createFromCCB = function() {
    cc.BuilderReader.registerController("DailyBonusItemController", new DailyBonusItemController());
    //cc.BuilderReader.registerController("TitleController", new TitleController());
    var node = game.utils.loadNodeFromCCB("res/menu/daily_bonus_view.ccbi", null, "DailyBonusController", new DailyBonusController());
    cc.BuilderReader._controllerClassCache["DailyBonusItemController"] = undefined;
    return node;
};

module.exports = DailyBonusController;
},{"../config/ConfigMan":40,"../enum/BoostType":103,"../model/StoreHelper":121,"./DailyBonusItemController":55}],55:[function(require,module,exports){
var BoostType = require("../enum/BoostType");

var DailyBonusItemController = function () {
    BaseCCBController.call(this);

    this.spBlack = null;
    this.spItem = null;
    this.spCurrent = null;
    this.spClaimed = null;
    this.lblCount = null;
    this.lblDay = null;

    this.dailyBonusCfg = null;
};

game.utils.inherits(DailyBonusItemController, BaseCCBController);

DailyBonusItemController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);
};
/**
 * @param {DailyBonusConfig} data
 * @param {number} day
 * @param {boolean} current
 * @param {boolean} claimed
 */
//day, state, rewardObj, claimed
DailyBonusItemController.prototype.initWith = function (data, day, current, claimed) {
    this.dailyBonusCfg = data;

    if (data.type === BoostType.SKIN) {
        var getted = game.playerMan.hasSkin(data.arg1);
        if (getted) {
            data.type = data.extra.type;
            data.count = data.extra.count;
            data.image = data.extra.image;
        }
    }

    this.spBlack.visible = claimed;
    this.spItem.setSpriteFrame(data.image);
    //game.utils.scaleCCLabelBMFont(this.spItem, 59);
    if (!claimed) {
        this.spCurrent.visible = current;
    } else {
        this.spCurrent.visible = false;
    }

    this.spClaimed.visible = claimed;
    this.lblCount.setString("x" + data.count);
    this.lblDay.setString(game.utils.sprintf(_("day_title"), day));
};

DailyBonusItemController.prototype.getContentSize = function () {
    return this.spBgSelected.getContentSize();
};

DailyBonusItemController.createFromCCB = function() {
    return game.utils.loadNodeFromCCB("res/menu/daily_bonus_item_view.ccbi", null, "DailyBonusItemController", new DailyBonusItemController());
};

module.exports = DailyBonusItemController;
},{"../enum/BoostType":103}],56:[function(require,module,exports){
var EventsName = require("../events/EventsName");
var NumberAnimation = require("../../common/entity/NumberAnimation");

var DiamondsController = function () {
    BaseCCBController.call(this);

    this.lbDiamonds = null;

    this.numberAnimation = null;
};

game.utils.inherits(DiamondsController, BaseCCBController);

DiamondsController.prototype.onEnter = function () {
    BaseCCBController.prototype.onEnter.call(this);
    game.eventDispatcher.addEventListener(EventsName.DIAMONDS_UPDATE, this.onUpdateDiamonds, this);
    cc.director.getScheduler().scheduleCallbackForTarget(this, this.onUpdate, 0.05, cc.REPEAT_FOREVER, 0, false);
};

DiamondsController.prototype.onExit = function () {
    this.numberAnimation.destroy();
    cc.director.getScheduler().unscheduleCallbackForTarget(this, this.onUpdate);
    game.eventDispatcher.removeEventListener(EventsName.DIAMONDS_UPDATE, this.onUpdateDiamonds, this);
    BaseCCBController.prototype.onExit.call(this);
};

DiamondsController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);
    this.numberAnimation = new NumberAnimation(this.lbDiamonds);
    this.lbDiamonds.setString(game.playerMan.getDiamonds());
};

DiamondsController.prototype.onUpdateDiamonds = function (event) {
    var data = event.getUserData();
    var diamonds = data.diamonds;
    var delta = data.delta;
    this.numberAnimation.playNumAnim(diamonds - delta, diamonds);
};

DiamondsController.prototype.diamondClicked = function (sender) {
    AudioHelper.playBtnSound();
    var StoreType = require("../enum/StoreType");
    game.popupMan.popupStoreDlg(StoreType.DIAMOND);
};

DiamondsController.prototype.onUpdate = function (dt) {
    this.numberAnimation.update(dt);
};

DiamondsController.createFromCCB = function() {
    var node = game.utils.loadNodeFromCCB("res/menu/diamond_view.ccbi", null, "DiamondsController", new DiamondsController(), true);
    return node;
};

module.exports = DiamondsController;
},{"../../common/entity/NumberAnimation":6,"../enum/StoreType":113,"../events/EventsName":115}],57:[function(require,module,exports){
/**
 * Created by qinning on 2017/12/15.
 */
var GameMan = require("../model/GameMan");

var FailController = function () {
    BaseCCBController.call(this);
    this._replayCallback = null;
    this._nextCallback = null;

    this.spFailCn = null;
    this.spFailEn = null;

    this.lblReward = null;
    //this.lblRelife = null;
    this.lblWheel = null;

    this.lblSkip = null;
    //this.ndSkipMask = null;
    //new
    this.lblSkipCostDiamonds = null;

    //this.btnSkip = null;
};

game.utils.inherits(FailController, BaseCCBController);

FailController.prototype.onExit = function () {
    this._replayCallback = null;
    game.eventDispatcher.removeEventListener("dialog_poped", this.onDialogPoped, this);
    game.eventDispatcher.removeEventListener("dialog_closed", this.onDialogClosed, this);
    this.removeNativeAd();
};

FailController.prototype.onEnter = function () {
    game.eventDispatcher.addEventListener("dialog_poped", this.onDialogPoped, this);
    game.eventDispatcher.addEventListener("dialog_closed", this.onDialogClosed, this);
    //this.showNativeAd();
    if (game.adsManager.showTopBanner) {
        game.adsManager.removeBannerAds("top");
    }
};

FailController.prototype.onDialogPoped = function () {
    this.updateNativeAd();
};

FailController.prototype.onDialogClosed = function () {
    this.updateNativeAd();
};

FailController.prototype.updateNativeAd = function () {
    if (game.dialogManager.isTopestDialog(this.rootNode)) {
        this.showNativeAd();
    } else {
        this.removeNativeAd();
    }
};

FailController.prototype.showNativeAd = function () {
    game.adsManager.showNativeAd("fail", 0, 0);
};

FailController.prototype.removeNativeAd = function () {
    game.adsManager.removeNativeAd("fail");
};

FailController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);
    this.lblWheel.setString(_("lucky_wheel_title"));
    this.lblReward.setString(_("watch_ads_get_boosts"));
    this.lblSkip.setString(_("skip_level_title"));
    //this.lblSkipCostDiamonds.setString("x" + game.config.skipDiamonds);
    game.audioPlayer.playEffectByKey("fail");

    //200 diamonds to skip.

    // if (game.gameMan.canSkip()) {
    //     cc.log("can skip");
    //     this.ndSkipMask.visible = false;
    //     this.btnSkip.enabled = true;
    // } else {
    //     cc.log("can not skip");
    //     this.ndSkipMask.visible = true;
    //     this.btnSkip.enabled = false;
    // }
};

FailController.prototype.initWith = function (replayCallback, skipCallback) {
    this._replayCallback = replayCallback;
    this._skipCallback = skipCallback;
};

FailController.prototype.onAnimEnd = function () {
    GameMan.getInstance().tryShowFailPopup();
};

FailController.prototype.restartClicked = function (sender) {
    game.audioPlayer.playEffectByKey("enter");
    GameMan.getInstance().showAds(false);
    if (this._replayCallback) {
        this._replayCallback();
    }
    this.close();
};

FailController.prototype.homeClicked = function (sender) {
    game.audioPlayer.playEffectByKey("enter");
    GameMan.getInstance().showAds(false);
    game.sceneMan.switchScene(game.sceneType.MENU);
};

FailController.prototype.watchAdsClicked = function (sender) {
    game.audioPlayer.playEffectByKey("enter");
    var StoreHelper = require("../model/StoreHelper");
    StoreHelper.getInstance().checkAndShowRewardVideo(game.utils.isIOS() ? "failgift" : "jili06", null, "FailAndWatchDiamondsAds");
};

FailController.prototype.relifeClicked = function (sender) {
    //game.audioPlayer.playEffectByKey("enter");
    //var StoreHelper = require("../model/StoreHelper");
    //StoreHelper.getInstance().checkAndShowRewardVideo(function () {
    //});
};

FailController.prototype.skipClicked = function (sender) {
    var StoreHelper = require("../model/StoreHelper");
    StoreHelper.getInstance().checkAndShowRewardVideo(game.utils.isIOS() ? "tiaoguo01" : "skip", function (rewarded) {
        if (rewarded) {
            game.analyseManager.trackEvent("WatchAdsToSkipLevel", {"level": GameMan.getInstance().levelId});
            if (this._skipCallback) {
                this._skipCallback();
            }
        }
    }.bind(this));
}

FailController.prototype.wheelClicked = function (sender) {
    AudioHelper.playBtnSound();
    var WheelType = require("../enum/WheelType");
    game.popupMan.popupWheelDlg(WheelType.DailyBonus);
};

FailController.prototype.popup = function () {
    game.dialogManager.popup(this.rootNode);
};

FailController.prototype.close = function () {
    game.dialogManager.close(this.rootNode);
};

FailController.createFromCCB = function() {
    var node = game.utils.loadNodeFromCCB("res/notice/fail_view.ccbi", null, "FailController", new FailController());
    return node;
};

module.exports = FailController;
},{"../enum/WheelType":114,"../model/GameMan":116,"../model/StoreHelper":121}],58:[function(require,module,exports){
var EventsName = require("../events/EventsName");
var BricksView = require("../view/BricksView");
var GameMan = require("../model/GameMan");
var BoostType = require("../enum/BoostType");
var HelpController = require("./HelpController");
var StoreType = require("../enum/StoreType");
var AimItemController = require("./AimItemController");
var AimHelpController = require("./AimHelpController");

var GameController = function () {
    BaseCCBController.call(this);
    this.LIFE_START_TAG = 100;
    this.LIFE_COUNT = 6;

    this.ndLifeNode = null;
    this.lbTime = null;
    this.lb3New = null;
    this.lb3Multiple = null;
    this._gameNode = null;
    this.ndHelp = null;
    this.ndAimHelp = null;

    this.ndBoost1 = null;
    this.ndBoost2 = null;

    this.ndLifeNodes = null;

    this.spTopProgress = null;

    this.spYellow1 = null;
    this.spYellow2 = null;
    this.spYellow3 = null;

    this.spBlack1 = null;
    this.spBlack2 = null;
    this.spBlack3 = null;

    this.lbLevel = null;

    this.ndAnimItem = null;

    this.ndTopContainer = null;
    this.ndTopBg = null;

    this.ndLeft = null;
    this.ndRight = null;

    this.spYellows = [];
    this.spBlacks = [];
};

game.utils.inherits(GameController, BaseCCBController);

GameController.prototype.onEnter = function () {
    game.eventDispatcher.addEventListener(EventsName.UPDATE_LEVEL, this.onUpdateLevel, this);
    game.eventDispatcher.addEventListener(EventsName.REFRESH_BOOST, this.onUpdateBoost, this);
    game.eventDispatcher.addEventListener(EventsName.UPDATE_AIM_ITEM, this.onUpdateAimItem, this);
};

GameController.prototype.onExit = function () {
    game.eventDispatcher.removeEventListener(EventsName.REFRESH_BOOST, this.onUpdateBoost, this);
    game.eventDispatcher.removeEventListener(EventsName.UPDATE_LEVEL, this.onUpdateLevel, this);
    game.eventDispatcher.removeEventListener(EventsName.UPDATE_AIM_ITEM, this.onUpdateAimItem, this);
    this._gameCoreNode = null;
};

GameController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);

    this.ndLifeNodes = [];
    for (var i = 0; i < this.LIFE_COUNT; ++i) {
        var lifeNode = this.ndLifeNode.getChildByTag(this.LIFE_START_TAG + i);
        this.ndLifeNodes.push(lifeNode);
    }

    this.spYellows = [this.spYellow1, this.spYellow2, this.spYellow3];
    this.spBlacks = [this.spBlack1, this.spBlack2, this.spBlack3];

    var config = null;
    var levelId = null;
    if (window.isEditor) {
        config = game.gameMan.levelCfg;
        levelId = 0;
    } else {
        config = GameMan.getInstance().getCurConfig();
        levelId = GameMan.getInstance().levelId;
    }

    this._gameCoreNode = new BricksView(config, this);
    this._gameNode.addChild(this._gameCoreNode);

    this.lbLevel.setString(game.utils.sprintf(_("level_title"), levelId));

    this.updateLifeCount();
    this.updateBoost();

    var firstEnter = game.storageController.getItem("first_enter", "true");
    if (firstEnter === "true") {
        this.ndHelp.visible = true;
    } else {
        this.ndHelp.visible = false;
    }

    this.updateTime();

    if (game.utils.isNotchScreen()) {
        this.ndTopContainer.height += 70;
        this.ndTopBg.height += 70;
    }
    if (window.isEditor) {
        var xOffset = cc.winSize.width - 640;
        this.ndLeft.width = this.ndLeft.width + xOffset * 0.5;
        this.ndRight.width = this.ndRight.width + xOffset * 0.5;
    }
    this.onUpdateAimItem();
    this.ndAimHelp.visible = false;
};

GameController.prototype.showAimHelp = function () {
    this.ndAimHelp.visible = true;
};

GameController.prototype.onUpdateAimItem = function () {
    if (game.gameMan.canTryAimItem()) {
        this.ndAnimItem.visible = true;
        cc.log("game controller can use aim item");
    } else {
        this.ndAnimItem.visible = false;
        cc.log("game controller not use aim item");
    }
};

GameController.prototype.updateLifeCount = function () {
    var nowLifeCount = this._gameCoreNode.lifeCount;
    for (var i = 0; i < this.LIFE_COUNT; ++i) {
        var lifeNode = this.ndLifeNodes[i];
        if (lifeNode) {
            lifeNode.visible = (nowLifeCount > i);
        }
    }
};

GameController.prototype.onUpdateBoost = function () {
    this.updateBoost();
};

GameController.prototype.updateBoost = function () {
    this.lb3New.setString(game.playerMan.getBoostCount(BoostType.THREE_BALL));
    this.lb3Multiple.setString(game.playerMan.getBoostCount(BoostType.SPLIT));
};

GameController.prototype.updateTime = function () {
    var costTime = 0;
    if (this._gameCoreNode.eclipsedTime) {
        costTime = this._gameCoreNode.eclipsedTime / 1000;
    }
    this.lbTime.setString(game.utils.getLongFormatTime(costTime));

    var percent = GameMan.getInstance().getProgressPercent(costTime);
    this.spTopProgress.setPreferredSize(cc.size(150 * percent * 0.01, 8));
    var star = GameMan.getInstance().getCurrentStar(costTime);
    this.updateStar(star);
};

GameController.prototype.updateStar = function (star) {
    for (var i = 0; i < 3; ++i) {
        this.spYellows[i].visible = (star >= i + 1);
        this.spBlacks[i].visible = (star < i + 1);
    }
};

GameController.prototype.pauseClicked = function () {
    AudioHelper.playBtnSound();
    if (window.isEditor) {
        var EditorScene = require("../editor/scene/EditorScene");
        cc.director.runScene(new EditorScene());
    } else {
        this.showPause();
    }
};

GameController.prototype.showPause = function () {
    this._gameCoreNode.stop();
    var self = this;
    game.popupMan.popupPauseDlg(function () {
        self._gameCoreNode.resume();
    });
};

//GameController.prototype.storeClicked = function () {
//    AudioHelper.playBtnSound();
//    this._gameCoreNode.stop();
//    var self = this;
//    game.popupMan.popupStoreDlg(StoreType.DIAMOND, function () {
//        self._gameCoreNode.resume();
//    });
//};

GameController.prototype.new3Clicked = function () {
    AudioHelper.playBtnSound();
    if (game.playerMan.useBoost(BoostType.THREE_BALL)) {
        this._gameCoreNode.useNew3BallBoost();
        this.updateBoost();
    } else {
        this._gameCoreNode.stop();
        //GameMan.getInstance().showAds();
        var self = this;
        game.popupMan.popupStoreDlg(StoreType.DIAMOND, function () {
            self._gameCoreNode.resume();
        });
    }
};

GameController.prototype.multiple3Clicked = function () {
    AudioHelper.playBtnSound();
    if (game.playerMan.useBoost(BoostType.SPLIT)) {
        this._gameCoreNode.useSplitBallBoost();
        this.updateBoost();
    } else {
        this._gameCoreNode.stop();
        //GameMan.getInstance().showAds();
        var self = this;
        game.popupMan.popupStoreDlg(StoreType.DIAMOND, function () {
            self._gameCoreNode.resume();
        });
    }
};

GameController.prototype.storeClicked = function (sender) {
    AudioHelper.playBtnSound();
    game.analyseManager.trackEvent("ClickStoreInGame");
    this._gameCoreNode.stop();
    var self = this;
    game.popupMan.popupStoreDlg(StoreType.DIAMOND, function () {
        self._gameCoreNode.resume();
    });
};

GameController.prototype.skinClicked = function (sender) {
    AudioHelper.playBtnSound();
    game.analyseManager.trackEvent("ClickSkinsInGame");
    this._gameCoreNode.stop();
    var self = this;
    game.popupMan.popupStoreDlg(StoreType.SKIN, function () {
        self._gameCoreNode.resume();
    });
};

GameController.createFromCCB = function() {
    game.utils.registerController("HelpController", new HelpController());
    game.utils.registerController("AimHelpController", new AimHelpController());
    game.utils.registerController("AimItemController", new AimItemController());
    var node = game.utils.loadNodeFromCCB("res/game/game_view.ccbi", null, "GameController", new GameController());
    game.utils.unRegisterController("AimItemController");
    game.utils.unRegisterController("HelpController");
    game.utils.unRegisterController("AimHelpController");
    return node;
};

module.exports = GameController;
},{"../editor/scene/EditorScene":93,"../enum/BoostType":103,"../enum/StoreType":113,"../events/EventsName":115,"../model/GameMan":116,"../view/BricksView":127,"./AimHelpController":50,"./AimItemController":51,"./HelpController":61}],59:[function(require,module,exports){
var GameMan = require("../model/GameMan");
var GameMode = require("../enum/GameMode");

var GameOverController = function () {
    BaseCCBController.call(this);
    this._bestScoreLabel = null;
    this._scoreLabel = null;

    this._iconEnglish = null;
    this._iconChinese = null;
    this._newRecordLabel = null;

    this._replayCallback = null;
};

game.utils.inherits(GameOverController, BaseCCBController);

GameOverController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);
    this._newRecordLabel.visible = false;
};

GameOverController.prototype.initWith = function (percent, callback) {
    if (GameMan.getInstance().gameMode === GameMode.GAME_MODE_ENDLESS) {
        this._bestScoreLabel.setString(game.utils.sprintf(game.local.getValue("best_score_title"), game.playerMan.getBestScore()));
        this._scoreLabel.setString(percent);
        this._newRecordLabel.setString(game.local.getValue("new_record_title"));
        if (GameMan.getInstance().isNewRecord) {
            this._newRecordLabel.visible = true;
            this._newRecordLabel.runAction(cc.sequence(cc.fadeOut(0.3), cc.fadeIn(0.3)).repeatForever());
        }
    } else {
        this._bestScoreLabel.setString(game.utils.sprintf(game.local.getValue("level_title"), GameMan.getInstance().levelConfig.id));
        this._scoreLabel.setString(game.utils.sprintf("%d%%", percent));
    }
    this._replayCallback = callback;
};

GameOverController.prototype.homeClicked = function (sender) {
    AudioHelper.playBtnSound();
    var reScene = new cc.TransitionFade(0.5, GameBridge.getMenuScene(), cc.color(255, 255, 255));
    cc.director.runScene(reScene);
};

GameOverController.prototype.replayClicked = function (sender) {
    AudioHelper.playBtnSound();
    if (this._replayCallback) {
        this._replayCallback();
    }
    this.close();
};

GameOverController.prototype.rankClicked = function (sender) {
    AudioHelper.playBtnSound();
    game.gcManager.showLeaderboard(game.config.getLeaderBoardKey());
};

GameOverController.prototype.shareClicked = function (sender) {
    AudioHelper.playBtnSound();
    game.shareManager.shareWithSystem(game.utils.sprintf(game.local.getValue("share_tips"),
        game.playerMan.getBestScore(), game.config.getPlatformDownloadUrl()));
};

GameOverController.prototype.popup = function () {
    //game.dialogManager.popup(this.rootNode);
    //game.dialogManager.popup(this.rootNode, {"overlayOpacity": 100});
    game.dialogManager.popup(this.rootNode, {"overlayColor": cc.color(243, 243, 243), "overlayOpacity": 210});
};

GameOverController.prototype.close = function () {
    game.dialogManager.close(this.rootNode);
};

GameOverController.createFromCCB = function() {
    var node = game.utils.loadNodeFromCCB("res/menu/game_over_view.ccbi", null, "GameOverController", new GameOverController());
    return node;
};

module.exports = GameOverController;
},{"../enum/GameMode":104,"../model/GameMan":116}],60:[function(require,module,exports){
var GameMan = require("../model/GameMan");

var GameWinController = function () {
    BaseCCBController.call(this);
    this.YELLOW_COLOR = cc.color(254, 175, 25);

    this._nextNode = null;

    this._resultLabel = null;

    this._replayCallback = null;
    this._nextCallback = null;
};

game.utils.inherits(GameWinController, BaseCCBController);

GameWinController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);

    this._resultLabel.setString(game.local.getValue("mission_completed_title"));
    var hasNextLevel = GameMan.getInstance().hasNextLevel();
    if (!hasNextLevel) {
        this._nextNode.visible = false;
    }
};

GameWinController.prototype.initWith = function (callback, nextCallback) {
    this._replayCallback = callback;
    this._nextCallback = nextCallback;
};

GameWinController.prototype.homeClicked = function (sender) {
    AudioHelper.playBtnSound();
    var reScene = new cc.TransitionFade(0.5, GameBridge.getMenuScene(), cc.color(255, 255, 255));
    cc.director.runScene(reScene);
};

GameWinController.prototype.nextClicked = function (sender) {
    AudioHelper.playBtnSound();
    if (this._nextCallback) {
        this._nextCallback();
    }
    this.close();
};

GameWinController.prototype.replayClicked = function (sender) {
    if (this._replayCallback) {
        this._replayCallback();
    }
    this.close();
};

GameWinController.prototype.rankClicked = function (sender) {
    AudioHelper.playBtnSound();
    game.gcManager.showLeaderboard(game.config.getLeaderBoardKey());
};

GameWinController.prototype.shareClicked = function (sender) {
    AudioHelper.playBtnSound();
    game.shareManager.shareWithSystem(game.utils.sprintf(game.local.getValue("share_tips"),
        game.playerMan.getBestScore(), game.config.getPlatformDownloadUrl()));
};

GameWinController.prototype.popup = function () {
    game.dialogManager.popup(this.rootNode, {"overlayColor": cc.color(243, 243, 243), "overlayOpacity": 210});
};

GameWinController.prototype.close = function () {
    game.dialogManager.close(this.rootNode);
};

GameWinController.createFromCCB = function() {
    var node = game.utils.loadNodeFromCCB("res/menu/game_win_view.ccbi", null, "GameWinController", new GameWinController());
    return node;
};

module.exports = GameWinController;
},{"../model/GameMan":116}],61:[function(require,module,exports){


var HelpController = function () {
    BaseCCBController.call(this);
    this.lbHelpInfo = null;
};

game.utils.inherits(HelpController, BaseCCBController);

HelpController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);
    this.lbHelpInfo.setString(game.local.getValue("help_content"));
    this.lbHelpInfo.setAlignment(cc.TEXT_ALIGNMENT_CENTER);
};

module.exports = HelpController;
},{}],62:[function(require,module,exports){
var GameScene = require("../scene/GameScene");
var StoreHelper = require("../model/StoreHelper");
var MultiColTableView = require("../../common/ext/MultiColTableView");
var LevelItemController = require("./LevelItemController");
var LevelConfigMan = require("../config/ConfigMan");
var LockStatus = require("../enum/LockStatus");
var GameMan = require("../model/GameMan");
var TitleController = require("./TitleController");

var GRID_SIZE = [137.5, 120];

var LevelItemCellView = cc.TableViewCell.extend({
    levelEntity: null,
    levelItemNode: null,
    ctor: function () {
        this._super();
        this.levelItemNode = LevelItemController.createFromCCB();
        this.addChild(this.levelItemNode);

        this.levelItemNode.setPosition(cc.p(GRID_SIZE[0] * 0.5, GRID_SIZE[1] * 0.5));
    },

    initWith: function (levelEntity, idx) {
        this.levelEntity = levelEntity;
        this.levelItemNode.controller.initWith(levelEntity, idx);
    },

    showAppearAnim: function () {
        this.levelItemNode.controller.showAppearAnim();
    },

    showDisappearAnim: function () {
        this.levelItemNode.controller.showDisappearAnim();
    }
});

var LevelController = function () {
    BaseCCBController.call(this);
    this.ndContainer = null;
    this.lbLevelName = null;

    //user data.
    this._levelList = null;
};

game.utils.inherits(LevelController, BaseCCBController);

LevelController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);

    this._levelList = GameMan.getInstance().getLevelList();
    this.showLevelTableView();

    var userLevel = GameMan.getInstance().getPlayerLevel();
    if (userLevel > this._levelList.length) {
        userLevel = this._levelList.length;
    }
    var curRow = 0;
    if (userLevel % this.numberOfGridsInCell() === 0) {
        curRow = Math.floor(userLevel / this.numberOfGridsInCell());
    } else {
        curRow = Math.floor(userLevel / this.numberOfGridsInCell()) + 1;
    }

    var yOffset = -(this.numberOfCellsInTableView() - curRow + 1) * this.gridSizeForTable().height +
        this._tableView.getViewSize().height;

    if (yOffset < this._tableView.minContainerOffset().y) {
        yOffset = this._tableView.minContainerOffset().y;
    } else if (yOffset >= this._tableView.maxContainerOffset().y) {
        yOffset = this._tableView.maxContainerOffset().y;
    }

    this._tableView.setContentOffset(cc.p(0, yOffset));
};

LevelController.prototype.showLevelTableView = function () {
    var size = this.ndContainer.getContentSize();
    this._tableView = new MultiColTableView(this, size, null);
    this._tableView.setDirection(cc.SCROLLVIEW_DIRECTION_VERTICAL);
    this._tableView.setVerticalFillOrder(cc.TABLEVIEW_FILL_TOPDOWN);
    this._tableView.setMultiTableViewDelegate(this);
    this._tableView.ignoreAnchorPointForPosition(false);
    this._tableView.setAnchorPoint(cc.p(0, 0));
    this.ndContainer.addChild(this._tableView);
    this._tableView.reloadData();
};

LevelController.prototype.scrollViewDidScroll = function (view) {
};

LevelController.prototype.scrollViewDidZoom = function (view) {
};

LevelController.prototype.gridAtIndex = function(multiTable,  idx) {
    var cell = multiTable.dequeueGrid();
    if (!cell) {
        cell = new LevelItemCellView();
    }

    if (idx < this._levelList.length) {
        var levelEntity = this._levelList[idx];
        cell.initWith(levelEntity, idx);
        cell.visible = true;
    } else {
        cell.visible = false;
    }

    return cell;
};

LevelController.prototype.numberOfCellsInTableView = function(multiTable) {
    var gridsInCell = this.numberOfGridsInCell(multiTable);
    if (this._levelList.length % gridsInCell === 0) {
        return Math.floor(this._levelList.length / gridsInCell);
    } else {
        return Math.floor(this._levelList.length / gridsInCell) + 1;
    }
};

LevelController.prototype.numberOfGridsInCell = function(multiTable, colIdx) {
    return 4;
};

LevelController.prototype.gridSizeForTable = function(table, colIdx) {
    return cc.size(GRID_SIZE[0], GRID_SIZE[1]);
};

LevelController.prototype.gridTouched = function(table, grid) {
    //console.log("grid touched at index: " + grid.getIdx());
    AudioHelper.playBtnSound();
    if (grid.getIdx() < GameMan.getInstance().getPlayerLevel()) {
        if (this.clicked) {
            return;
        }
        this.clicked = true;
        GameMan.getInstance().chooseLevel(grid.getIdx() + 1);
        game.sceneMan.switchScene(game.sceneType.GAME);
    }
};

LevelController.prototype.backClicked = function (sender) {
    AudioHelper.playBtnSound();
    game.sceneMan.switchScene(game.sceneType.MENU);
};

LevelController.createFromCCB = function() {
    var node = game.utils.loadNodeFromCCB("res/menu/level_view.ccbi", null, "LevelController", new LevelController());
    return node;
};

module.exports = LevelController;
},{"../../common/ext/MultiColTableView":13,"../config/ConfigMan":40,"../enum/LockStatus":107,"../model/GameMan":116,"../model/StoreHelper":121,"../scene/GameScene":122,"./LevelItemController":63,"./TitleController":86}],63:[function(require,module,exports){
var LockStatus = require("../enum/LockStatus");
var GameMan = require("../model/GameMan");

var LevelItemController = function () {
    BaseCCBController.call(this);

    this.lbLevel = null;
    this.spPlayed = null;
    this.spLocked = null;

    this.spCurrent = null;

    this.ndStar = null;

    this.spYellow1 = null;
    this.spYellow2 = null;
    this.spYellow3 = null;

    this.spBlack1 = null;
    this.spBlack2 = null;
    this.spBlack3 = null;

    this.spYellows = [];
    this.spBlacks = [];

    this.idx = 0;
};

game.utils.inherits(LevelItemController, BaseCCBController);

LevelItemController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);
    this.spYellows = [this.spYellow1, this.spYellow2, this.spYellow3];
    this.spBlacks = [this.spBlack1, this.spBlack2, this.spBlack3];
};

LevelItemController.prototype.showAppearAnim = function () {
    game.utils.randomScaleAnim(this.rootNode, 1, 0.8);
};

LevelItemController.prototype.showDisappearAnim = function () {
    this.rootNode.runAction(cc.scaleTo(0.4, 0));
};

/**
 * @param {LevelConfig} data
 * @param {number} idx
 */
LevelItemController.prototype.initWith = function (data, idx) {
    cc.log("LevelItemController initWith");
    this.idx = idx;
    this.lbLevel.setString(idx + 1);
    var level = idx + 1;

    this.spCurrent.visible = false;
    this.spLocked.visible = false;
    this.spPlayed.visible = false;
    this.ndStar.visible = false;
    this.lbLevel.visible = true;
    var curLevel = GameMan.getInstance().getPlayerLevel();
    if (curLevel === idx + 1) {
        this.spCurrent.visible = true;
        this.lbLevel.y = 0;
    } else if (curLevel > idx + 1) {
        this.spPlayed.visible = true;
        this.ndStar.visible = true;
        var star = 0;
        if (GameMan.getInstance().isHardMode()) {
            star = game.playerMan.getHardLevelStar(level) || 0;
        } else {
            star = game.playerMan.getLevelStar(level) || 0;
        }
        cc.log("LevelItemController star:" + star);
        for (var i = 0; i < 3; ++i) {
            this.spYellows[i].visible = (star >= i + 1);
            this.spBlacks[i].visible = (star < i + 1);
        }
        this.lbLevel.y = 11;
    } else {
        this.lbLevel.y = 0;
        //this.lbLevel.visible = false;
        this.spLocked.visible = true;
    }
};

LevelItemController.prototype.levelClicked = function () {
    AudioHelper.playBtnSound();
    if (this.idx < GameMan.getInstance().getPlayerLevel()) {
        GameMan.getInstance().chooseLevel(this.idx + 1);
        game.sceneMan.switchScene(game.sceneType.GAME);
    }
};

LevelItemController.prototype.getContentSize = function () {
    return this.spPlayed.getContentSize();
};

LevelItemController.createFromCCB = function() {
    return game.utils.loadNodeFromCCB("res/menu/level_item_view.ccbi", null, "LevelItemController", new LevelItemController());
};

module.exports = LevelItemController;
},{"../enum/LockStatus":107,"../model/GameMan":116}],64:[function(require,module,exports){
var MenuScene = require("../scene/MenuScene");
var PlayerMan = require("../model/PlayerMan");
var StoreHelper = require("../model/StoreHelper");
var GameScene = require("../scene/GameScene");
var SceneType = require("../enum/SceneType");
var GameMan = require("../model/GameMan");
var SceneMan = require("../model/SceneMan");
var AdsReminderController = require("../controller/AdsReminderController");
var DiamondsController = require("../controller/DiamondsController");

var LoadingController = function () {
    BaseCCBController.call(this);
    this.bgEnSprite = null;
    this.bgCnSprite = null;
};

game.utils.inherits(LoadingController, BaseCCBController);

LoadingController.prototype.onEnter = function () {
    BaseCCBController.prototype.onEnter.call(this);

    cc.BuilderReader.registerController("AdsReminderController", new AdsReminderController());
    cc.BuilderReader.registerController("DiamondsController", new DiamondsController());

    game.playerMan = PlayerMan.getInstance();
    game.playerMan.initData();

    var LogicMan = require("../../common/model/LogicMan");
    LogicMan.getInstance().startGame(true);

    var ResourcesMan = require("../model/ResourcesMan");

    game.sceneMan = SceneMan.getInstance();
    game.sceneType = SceneType;

    game.gameMan.init();
    game.gameMan.checkRemoteConfig();
    //game.gameMan.adjustSkinConfigs();

    game.analyseManager.trackEvent("Loading");
    var isFirstEnterGame = true;
    var firstOpenGame = game.storageController.getItem("firstOpenGame", "true");
    if (firstOpenGame != "true") {
        isFirstEnterGame = false;
    } else {
        game.storageController.setItem("firstOpenGame", "false");
    }

    var myLogo = game.utils.isSelfGame();

    cc.log("isFirstEnterGame:" + isFirstEnterGame);

    this.bgCnSprite.visible = false;
    this.bgEnSprite.visible = false;
    var sprite = myLogo ? this.bgCnSprite : this.bgEnSprite;
    sprite.visible = true;
    sprite.opacity = 0;
    var WAIT_TIME = 2000;
    sprite.runAction(cc.sequence(cc.fadeIn(0.5), cc.callFunc(function () {
        var time = Date.now();
        ResourcesMan.getInstance().preload(function () {
            var loadTime = Date.now() - time;
            cc.log("loadTime:" + loadTime);
            var delayTime = Math.max(WAIT_TIME - loadTime, 200);
            sprite.runAction(cc.sequence(cc.delayTime(delayTime / 1000), cc.fadeOut(0.5), cc.callFunc(function () {
                if (isFirstEnterGame) {
                    GameMan.getInstance().chooseLatestLevel();
                    game.sceneMan.switchScene(game.sceneType.GAME);
                    game.analyseManager.trackEvent("EnterFirstLevel");
                } else {
                    cc.director.runScene(new MenuScene());
                }
            }, this)));
        });
    }, this)));
};

LoadingController.prototype.onExit = function () {
    BaseCCBController.prototype.onExit.call(this);
};

LoadingController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);
};

LoadingController.createFromCCB = function() {
    var node = game.utils.loadNodeFromCCB("res/menu/loading_view.ccbi", null, "LoadingController", new LoadingController());
    return node;
};

module.exports = LoadingController;
},{"../../common/model/LogicMan":27,"../controller/AdsReminderController":49,"../controller/DiamondsController":56,"../enum/SceneType":109,"../model/GameMan":116,"../model/PlayerMan":117,"../model/ResourcesMan":119,"../model/SceneMan":120,"../model/StoreHelper":121,"../scene/GameScene":122,"../scene/MenuScene":125}],65:[function(require,module,exports){
//var PackageScene = require("../scene/PackageScene");
//var StoreHelper = require("../model/StoreHelper");
//var LevelScene = require("../scene/LevelScene");
//var GameScene = require("../scene/GameScene");
var GameMan = require("../model/GameMan");
var StoreHelper = require("../model/StoreHelper");
var EventsName = require("../events/EventsName");

game.firstEnter = true;

var MenuController = function () {
    BaseCCBController.call(this);

    //this.spPlayEn = null;
    //this.spPlayCn = null;
    //this.spLevelsEn = null;
    //this.spLevelsCn = null;
    this.spIconEn = null;
    this.spIconCn = null;

    this._rankItem = null;
    this._supportItem = null;
    this._storeItem = null;
    this._rateItem = null;
    this._soundItem = null;

    //this.spHardCn = null;
    //this.spHardEn = null;

    this.spHardHint = null;

    //this.btnGiftEn = null;
    //this.btnGiftCn = null;
    //
    //this.btnWheelCn = null;
    //this.btnWheelEn = null;

    this.spGiftBg = null;
    this.ndSpecialOffer = null;

    this.ndGifts = null;

    this.spTaskReminder = null;
    this.spSkinReminder = null;

    this.lbStarCount = null;
};

game.utils.inherits(MenuController, BaseCCBController);

MenuController.prototype.onEnter = function () {
    BaseCCBController.prototype.onEnter.call(this);
    /*
    setTimeout(function () {
        var firstOpenGame = game.storageController.getItem("firstOpenGame", "true");
        if (firstOpenGame != "true") {
            if (game.firstEnter && GameMan.getInstance().isFreeWheel()) {
                game.popupMan.popupWheelDlg();
            }
        } else {
            game.storageController.setItem("firstOpenGame", "false");
        }
        game.firstEnter = false;
    }, 300);
    */
    setTimeout(function () {
        var firstOpenGame = game.storageController.getItem("firstOpenGame", "true");
        if (firstOpenGame != "true") {
            GameMan.getInstance().checkAutoPopup(game.firstEnter);
        } else {
            game.storageController.setItem("firstOpenGame", "false");
        }
        game.firstEnter = false;
    }, 300);
    game.gameMan.showFirstEnterHomeAd();
    this.updateTaskReminder();
    //this.intervalKey = setInterval(this.onUpdate.bind(this), 1000);
    game.eventDispatcher.addEventListener(EventsName.UPDATE_SPECIAL_OFFER, this.updateSpeicialOffer, this);
    game.eventDispatcher.addEventListener(EventsName.TASK_UPDATE, this.updateTaskReminder, this);
};

MenuController.prototype.onExit = function () {
    clearInterval(this.intervalKey);
    game.eventDispatcher.removeEventListener(EventsName.TASK_UPDATE, this.updateTaskReminder, this);
    game.eventDispatcher.removeEventListener(EventsName.UPDATE_SPECIAL_OFFER, this.updateSpeicialOffer, this);
};

MenuController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);

    game.analyseManager.trackEvent("EnterMenu");
    //this.createClubButton();
    this.updateSoundItem();
    this.updateGiftItem();
    //this.spPlayEn.visible = false;
    //this.spPlayCn.visible = false;
    //this.spLevelsEn.visible = false;
    //this.spLevelsCn.visible = false;
    this.spIconEn.visible = false;
    this.spIconCn.visible = false;
    //this.spHardCn.visible = false;
    //this.spHardEn.visible = false;
    //this.btnGiftEn.visible = false;
    //this.btnGiftCn.visible = false;
    //this.btnWheelCn.visible = false;
    //this.btnWheelEn.visible = false;

    if (game.local.isChinese()) {
        //this.spPlayCn.visible = true;
        //this.spLevelsCn.visible = true;
        this.spIconCn.visible = true;
        //this.spHardCn.visible = true;
        //this.btnGiftCn.visible = true;
        //this.btnWheelCn.visible = true;
    } else {
        //this.spPlayEn.visible = true;
        //this.spLevelsEn.visible = true;
        this.spIconEn.visible = true;
        //this.spHardEn.visible = true;
        //this.btnGiftEn.visible = true;
        //this.btnWheelEn.visible = true;
    }
    this.ndGifts.visible = true;

    this.spGiftBg.runAction(cc.rotateBy(3, 360).repeatForever());
    this.updateSpeicialOffer();
    this.updateSkinReminder();

    this.lbStarCount.setString(game.gameMan.getTotalStarCount());
};

MenuController.prototype.updateSpeicialOffer = function () {
    this.ndSpecialOffer.visible = !GameMan.getInstance().isSpecialOfferPurchased();
};

MenuController.prototype.onUpdate = function () {
    this.updateGiftItem();
};

MenuController.prototype.updateGiftItem = function () {
    if (game.adsManager.isRewardVideoReady()) {
        this.ndGifts.visible = true;
    } else {
        this.ndGifts.visible = false;
    }
};

MenuController.prototype.updateSoundItem = function () {
    var isSoundOn = game.audioPlayer.isEffectOn();
    if (isSoundOn) {
        this._soundItem.setNormalImage(new cc.Sprite("#btn_sound_on.png"));
        this._soundItem.setSelectedImage(new cc.Sprite("#btn_sound_on.png"));
    } else {
        this._soundItem.setNormalImage(new cc.Sprite("#btn_sound_off.png"));
        this._soundItem.setSelectedImage(new cc.Sprite("#btn_sound_off.png"));
    }
};

MenuController.prototype.storeClicked = function (sender) {
    AudioHelper.playBtnSound();
    var StoreType = require("../enum/StoreType");
    game.popupMan.popupStoreDlg(StoreType.DIAMOND);
};

MenuController.prototype.shareClicked = function (sender) {
    AudioHelper.playBtnSound();
    game.shareManager.shareWithSystem(game.utils.sprintf(game.local.getValue("share_tips"),
        game.playerMan.getLevel(), game.config.getPlatformDownloadUrl()));
};

MenuController.prototype.rankClicked = function (sender) {
    AudioHelper.playBtnSound();
    game.gcManager.showLeaderboard(game.config.getLeaderBoardKey());
};

MenuController.prototype.supportClicked = function (sender) {
    AudioHelper.playBtnSound();
    game.shareManager.sendEmail(game.config.connectEmail,
        game.local.getValue("feed_back_title"), game.local.getValue("feed_back_content"));
};

MenuController.prototype.rateClicked = function (sender) {
    AudioHelper.playBtnSound();
    cc.sys.openURL(game.config.getPlatformDownloadUrl());
};

MenuController.prototype.playClicked = function (sender) {
    AudioHelper.playBtnSound();
    if (this.played) {
        return;
    }
    this.played = true;
    GameMan.getInstance().chooseLatestLevel();
    game.sceneMan.switchScene(game.sceneType.GAME);
};

MenuController.prototype.packageClicked = function (sender) {
    AudioHelper.playBtnSound();
    if (this.played) {
        return;
    }
    this.played = true;
    GameMan.getInstance().setHardMode(false);
    game.sceneMan.switchScene(game.sceneType.LEVEL);
};

MenuController.prototype.soundClicked = function (sender) {
    AudioHelper.playBtnSound();
    game.audioPlayer.setEffectOn(!game.audioPlayer.isEffectOn());
    game.audioPlayer.setMusicOn(!game.audioPlayer.isMusicOn());
    this.updateSoundItem();
};

MenuController.prototype.wheelClicked = function (sender) {
    AudioHelper.playBtnSound();
    var WheelType = require("../enum/WheelType");
    game.popupMan.popupWheelDlg(WheelType.DailyBonus);
};

MenuController.prototype.dailyBonusClicked = function (sender) {
    AudioHelper.playBtnSound();
    game.popupMan.popupDailyBonus();
};

MenuController.prototype.hardClicked = function (sender) {
    AudioHelper.playBtnSound();
    if (this.played) {
        return;
    }
    this.played = true;
    game.storageController.setItem("hard_reminded", "false");
    this.spHardHint.visible = false;
    GameMan.getInstance().setHardMode(true);
    game.sceneMan.switchScene(game.sceneType.LEVEL);
};

MenuController.prototype.giftClicked = function (sender) {
    AudioHelper.playBtnSound();
    StoreHelper.getInstance().checkAndShowRewardVideo(game.utils.isIOS() ? "shouye" : "jili04");
};

MenuController.prototype.taskClicked = function (sender) {
    AudioHelper.playBtnSound();
    game.analyseManager.trackEvent("ClickTasks");
    game.popupMan.popupTaskDlg();

    game.storageController.setItem("click_task", "true");
    this.updateTaskReminder();
};

MenuController.prototype.updateTaskReminder = function () {
    var clickSkin = game.storageController.getItem("click_task", "false");
    if (clickSkin == "false") {
        this.spTaskReminder.visible = true;
    } else {
        if (GameMan.getInstance().hasCompletedTask()) {
            this.spTaskReminder.visible = true;
        } else {
            this.spTaskReminder.visible = false;
        }
    }
};

MenuController.prototype.updateSkinReminder = function () {
    var clickSkin = game.storageController.getItem("click_skin_new", "false");
    if (clickSkin == "false") {
        this.spSkinReminder.visible = true;
    } else {
        this.spSkinReminder.visible = false;
    }
};

MenuController.prototype.specialOfferClicked = function (sender) {
    AudioHelper.playBtnSound();
    game.popupMan.popupSpeicialOffer();
};

MenuController.prototype.skinClicked = function (sender) {
    AudioHelper.playBtnSound();
    game.analyseManager.trackEvent("ClickSkins");
    var StoreType = require("../enum/StoreType");
    game.popupMan.popupStoreDlg(StoreType.SKIN);
    game.storageController.setItem("click_skin_new", "true");
    this.updateSkinReminder();
};

MenuController.prototype.settingClicked = function (sender) {
    AudioHelper.playBtnSound();
    game.popupMan.popupSettingDlg();
};

MenuController.prototype.removeAdsClicked = function (sender) {
    var StoreType = require("../enum/StoreType");
    var StoreHelper = require("../model/StoreHelper");
    var removeAdEntity = StoreHelper.getInstance().getStoreEntityByType(StoreType.REMOVE_ADS);
    StoreHelper.getInstance().buyProduct(removeAdEntity);
};

MenuController.createFromCCB = function() {
    var node = game.utils.loadNodeFromCCB("res/menu/menu_view.ccbi", null, "MenuController", new MenuController());
    return node;
};

MenuController.time = 0;

module.exports = MenuController;
},{"../enum/StoreType":113,"../enum/WheelType":114,"../events/EventsName":115,"../model/GameMan":116,"../model/StoreHelper":121}],66:[function(require,module,exports){


var NoticeController = function () {
    BaseCCBController.call(this);
    this._okItem = null;
    this._cancelItem = null;
    this._confirmItem = null;
    this._closeItem = null;
    this._infoLabel = null;

    this._okLabel = null;
    this._cancelLabel = null;
    this._confirmLabel = null;

    this.ndReward1 = null;
    this.ndReward2 = null;

    this.spReward1 = null;
    this.lbReward1 = null;
    this.spReward2 = null;
    this.lbReward2 = null;
    this.lbReward2Info = null;

    this.spReward = null;
    this.lbReward = null;
    this.lbRewardInfo = null;

    this.sprAd = null;

    this._okCallFunc = null;
    this._failCallFunc = null;
};

game.utils.inherits(NoticeController, BaseCCBController);

NoticeController.prototype.onEnter = function () {
    BaseCCBController.prototype.onEnter.call(this);
    //game.adsManager.showNativeAd("notice", 0, 0);
};

NoticeController.prototype.onExit = function () {
    //game.adsManager.removeNativeAd("notice");
    BaseCCBController.prototype.onExit.call(this);
};

NoticeController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);
    this._titleLabel.setString(game.local.getValue("notice_title"));
    this.ndReward1.visible = false;
    this.ndReward2.visible = false;
    this._infoLabel.visible = false;
    this.sprAd.visible = false;
};

NoticeController.prototype.initWithYes = function (info, okCallFunc) {
    this._infoLabel.visible = true;
    this._infoLabel.setString(info);
    this._infoLabel.setAlignment(cc.TEXT_ALIGNMENT_CENTER);
    this._okCallFunc = okCallFunc;
    this._confirmItem.visible = true;
    this._okItem.visible = false;
    this._cancelItem.visible = false;
    this._okLabel.visible = false;
    this._cancelLabel.visible = false;
    this._closeItem.visible = false;
    this._confirmLabel.visible = true;
    this._confirmLabel.setString(game.local.getValue("confirm_info"));
    this._confirmLabel.setAlignment(cc.TEXT_ALIGNMENT_CENTER);
};

NoticeController.prototype.initWithYesNo = function (info, yesInfo, cancelInfo, okCallFunc, failCallFunc, showClose, isShowAds) {
    this._infoLabel.visible = true;
    this._infoLabel.setString(info);
    this._infoLabel.setAlignment(cc.TEXT_ALIGNMENT_CENTER);
    this._okCallFunc = okCallFunc;
    this._failCallFunc = failCallFunc;
    if (this._confirmItem) {
        this._confirmItem.visible = false;
    }
    this._okItem.visible = true;
    this._cancelItem.visible = true;
    this._okLabel.visible = true;
    this._cancelLabel.visible = true;
    if (this._confirmLabel) {
        this._confirmLabel.visible = false;
    }
    this._okLabel.setString(yesInfo);
    this._cancelLabel.setString(cancelInfo);
    this._okLabel.setAlignment(cc.TEXT_ALIGNMENT_CENTER);
    this._cancelLabel.setAlignment(cc.TEXT_ALIGNMENT_CENTER);
    this._closeItem.visible = showClose;
    this.sprAd.visible = !!isShowAds;
    if (isShowAds) {
        this.rootNode.scheduleOnce(function () {
            game.utils.playCCBAnimation(this.rootNode, "loop");
        }.bind(this), 1);
    }
};

NoticeController.prototype.initWithRewardYes = function (info, okCallFunc, reward1Sprite, reward1Count,
                                                      reward2Sprite, reward2Count) {
    this._infoLabel.visible = false;
    var spriteFrame;
    if (reward1Sprite && reward2Sprite) {
        this.ndReward2.visible = true;
        this.lbReward2Info.setString(info);
        this.lbReward2Info.setAlignment(cc.TEXT_ALIGNMENT_CENTER);
        spriteFrame = cc.spriteFrameCache.getSpriteFrame(reward1Sprite);
        if (spriteFrame) {
            this.spReward1.setSpriteFrame(spriteFrame);
        }
        this.lbReward1.setString("x" + reward1Count);
        spriteFrame = cc.spriteFrameCache.getSpriteFrame(reward2Sprite);
        if (spriteFrame) {
            this.spReward2.setSpriteFrame(spriteFrame);
        }
        this.lbReward2.setString("x" + reward2Count);
    } else {
        this.ndReward1.visible = true;
        this.lbRewardInfo.setString(info);
        this.lbRewardInfo.setAlignment(cc.TEXT_ALIGNMENT_CENTER);
        spriteFrame = cc.spriteFrameCache.getSpriteFrame(reward1Sprite);
        if (spriteFrame) {
            this.spReward.setSpriteFrame(spriteFrame);
        }
        this.lbReward.setString("x" + reward1Count);
    }

    this._okCallFunc = okCallFunc;
    this._confirmItem.visible = true;
    this._okItem.visible = false;
    this._cancelItem.visible = false;
    this._okLabel.visible = false;
    this._cancelLabel.visible = false;
    this._closeItem.visible = false;
    this._confirmLabel.visible = true;
    this._confirmLabel.setString(game.local.getValue("confirm_info"));
    this._confirmLabel.setAlignment(cc.TEXT_ALIGNMENT_CENTER);
};

NoticeController.prototype.okClicked = function (sender) {
    AudioHelper.playBtnSound();
    if (this._okCallFunc) {
        this._okCallFunc();
    }
    this.close();
};

NoticeController.prototype.cancelClicked = function (sender) {
    AudioHelper.playBtnSound();
    if (this._failCallFunc) {
        this._failCallFunc();
    }
    this.close();
};

NoticeController.prototype.closeClicked = function (sender) {
    AudioHelper.playBtnSound();
    this.close();
};

NoticeController.prototype.confirmClicked = function (sender) {
    AudioHelper.playBtnSound();
    if (this._okCallFunc) {
        this._okCallFunc();
    }
    this.close();
};

NoticeController.prototype.popup = function () {
    game.dialogManager.popup(this.rootNode, {popupAnim: true});
};

NoticeController.prototype.close = function () {
    game.dialogManager.close(this.rootNode);
};


NoticeController.createFromCCB = function() {
    var node = game.utils.loadNodeFromCCB("res/notice/notice_view.ccbi", null, "NoticeController", new NoticeController());
    return node;
};

NoticeController.createGuideFromCCB = function() {
    var node = game.utils.loadNodeFromCCB("res/notice/new_tip_view.ccbi", null, "NoticeController", new NoticeController());
    return node;
};

module.exports = NoticeController;
},{}],67:[function(require,module,exports){
var GameScene = require("../scene/GameScene");
var StoreHelper = require("../model/StoreHelper");
var MultiColTableView = require("../../common/ext/MultiColTableView");
var PackageItemController = require("./PackageItemController");
var LevelConfigMan = require("../config/ConfigMan");
var LockStatus = require("../enum/LockStatus");
var GameMan = require("../model/GameMan");
var LevelScene = require("../scene/LevelScene");
var TitleController = require("./TitleController");

//var CELL_WIDTH = 520;

var PackageItemCellView = cc.TableViewCell.extend({
    packageEntity: null,
    packageItemNode: null,

    ctor: function () {
        this._super();
        this.packageItemNode = PackageItemController.createFromCCB();
        this.addChild(this.packageItemNode);
        var size = this.packageItemNode.controller.getContentSize();
        this.packageItemNode.setPosition(cc.p(cc.winSize.width * 0.5, size.height * 0.5));
    },

    initWith: function (packageEntity, idx) {
        cc.log("PackageItemCellView initWith:idx:" + idx);
        this.packageEntity = packageEntity;
        this.packageItemNode.controller.initWith(packageEntity, idx);
    },

    refresh: function () {
        this.packageItemNode.controller.refresh();
    },

    showAppearAnim: function () {
        this.packageItemNode.controller.showAppearAnim(false);
    },

    showDisappearAnim: function () {
        this.packageItemNode.controller.showDisappearAnim();
    }
});

var PackageController = function () {
    BaseCCBController.call(this);
    this.lbChapterName = null;
    this.ndContainer = null;
    this.lbLevelName = null;
    this._tableView = null;

    //user data.
    this.packageConfigs = null;
};

game.utils.inherits(PackageController, BaseCCBController);

PackageController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);

    this.packageConfigs = LevelConfigMan.getInstance().getPackageList();

    this.showLevelTableView();

    var packageId = 1;
    var packageInfo = GameMan.getInstance().getMinUnCompletedPackage();
    if (!packageInfo || (packageInfo.id > this.packageConfigs.length)) {
        packageId = 1;
    } else {
        packageId = packageInfo.id;
    }
    cc.log("packageId:" + packageId);
    var curRow = 0;
    if (packageId % this.numberOfGridsInCell() === 0) {
        curRow = Math.floor(packageId / this.numberOfGridsInCell());
    } else {
        curRow = Math.floor(packageId / this.numberOfGridsInCell()) + 1;
    }

    var yOffset = -(this.numberOfCellsInTableView() - curRow + 1) * this.gridSizeForTable().height +
        this._tableView.getViewSize().height;

    if (yOffset < this._tableView.minContainerOffset().y) {
        yOffset = this._tableView.minContainerOffset().y;
    } else if (yOffset >= this._tableView.maxContainerOffset().y) {
        yOffset = this._tableView.maxContainerOffset().y;
    }

    this._tableView.setContentOffset(cc.p(0, yOffset));

    for (var i = 0; i < this.numberOfCellsInTableView(); ++i) {
        var cell = this._tableView.getGridAtIndex(i);
        if (cell) {
            cell.showAppearAnim();
        }
    }

    this.lbLevelName.setString(game.local.getValue("package_title"));
};

PackageController.prototype.showLevelTableView = function () {
    this._tableView = new MultiColTableView(this, this.ndContainer.getContentSize(), null);
    this._tableView.setDirection(cc.SCROLLVIEW_DIRECTION_VERTICAL);
    this._tableView.setVerticalFillOrder(cc.TABLEVIEW_FILL_TOPDOWN);
    this._tableView.setMultiTableViewDelegate(this);
    this._tableView.ignoreAnchorPointForPosition(false);
    this._tableView.setAnchorPoint(cc.p(0, 0));
    this.ndContainer.addChild(this._tableView);
    this._tableView.reloadData();
};

PackageController.prototype.scrollViewDidScroll = function (view) {
};

PackageController.prototype.scrollViewDidZoom = function (view) {
};

PackageController.prototype.gridAtIndex = function(multiTable,  idx) {
    var cell = multiTable.dequeueGrid();
    if (!cell) {
        cell = new PackageItemCellView();
    }

    if (idx < this.packageConfigs.length) {
        var packageConfig = this.packageConfigs[idx];
        cell.initWith(packageConfig, idx, this.inited);
        cell.visible = true;
    } else {
        cell.visible = false;
    }

    return cell;
};

PackageController.prototype.numberOfCellsInTableView = function(multiTable) {
    return this.packageConfigs.length;
};

PackageController.prototype.numberOfGridsInCell = function(multiTable, colIdx) {
    return 1;
};

PackageController.prototype.gridSizeForTable = function(table, colIdx) {
    return cc.size(cc.winSize.width, 143);
};

PackageController.prototype.gridTouched = function(table, grid) {
    cc.log("grid touched at index: " + grid.getIdx());
    var packageEntity = grid.packageEntity;
    AudioHelper.playBtnSound();
    if (packageEntity.isLocked()) {
        game.popupMan.popupYesNoCommonDlg(game.utils.sprintf(game.local.getValue("unlock_info"), packageEntity.unlockCount),
            game.local.getValue("unlock_title"),
            game.local.getValue("cancel_title"),
            function () {
            if (game.playerMan.player.coins >= packageEntity.unlockCount) {
                game.playerMan.addCoins(-packageEntity.unlockCount);
                game.playerMan.setPackageUnlocked(packageEntity.id);
                grid.refresh();
            } else {
                game.popupMan.popupStoreDlg();
            }
        });
    } else {
        this.showCloseAnim(function () {
            GameMan.getInstance().setPackageEntity(packageEntity);
            game.sceneMan.switchScene(game.sceneType.LEVEL);
        });
    }
};

PackageController.prototype.backClicked = function (sender) {
    AudioHelper.playBtnSound();
    this.showCloseAnim(function () {
        game.sceneMan.switchScene(game.sceneType.MENU);
    });
};

PackageController.prototype.showCloseAnim = function (callback) {
    for (var i = 0; i < this.numberOfCellsInTableView(); ++i) {
        var cell = this._tableView.getGridAtIndex(i);
        if (cell) {
            cell.showDisappearAnim();
        }
    }
    this.rootNode.scheduleOnce(function () {
        if (callback) {
            callback();
        }
    }.bind(this), 0.8);
};

PackageController.createFromCCB = function() {
    cc.BuilderReader.registerController("TitleController", new TitleController());
    var node = game.utils.loadNodeFromCCB("res/menu/package_view.ccbi", null, "PackageController", new PackageController());
    cc.BuilderReader._controllerClassCache["TitleController"] = undefined;
    return node;
};

module.exports = PackageController;
},{"../../common/ext/MultiColTableView":13,"../config/ConfigMan":40,"../enum/LockStatus":107,"../model/GameMan":116,"../model/StoreHelper":121,"../scene/GameScene":122,"../scene/LevelScene":123,"./PackageItemController":68,"./TitleController":86}],68:[function(require,module,exports){
var LockStatus = require("../enum/LockStatus");

var PackageItemController = function () {
    BaseCCBController.call(this);
    this.lbName = null;
    this.lbCount = null;

    this.spBg = null;

    this.spCompleted = null;
    this.spUnCompleted = null;

    this.ndLock = null;
    this.lbUnlockCount = null;

    this.packageEntity = null;

    this.idx = 0;
};

game.utils.inherits(PackageItemController, BaseCCBController);

PackageItemController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);
};

PackageItemController.prototype.showAppearAnim = function (inited) {
    //if (!inited) {
        this.rootNode.stopAllActions();
        game.utils.playCCBAnimation(this.rootNode, "left");
        this.rootNode.scheduleOnce(function () {
            game.utils.playCCBAnimation(this.rootNode, "normal");
        }.bind(this), this.idx * 0.05);
    //} else {
    //    game.utils.playCCBAnimation(this.rootNode, "none");
    //}
};

PackageItemController.prototype.showDisappearAnim = function () {
    this.rootNode.stopAllActions();
    this.rootNode.scheduleOnce(function () {
        game.utils.playCCBAnimation(this.rootNode, "disappear");
    }.bind(this), this.idx * 0.05);
};

/**
 * @param {PackageConfig} data
 * @param {number} idx
 */
PackageItemController.prototype.initWith = function (data, idx) {
    this.packageEntity = data;
    this.idx = idx;
    this.refresh();
    game.utils.playCCBAnimation(this.rootNode, "none");
};

PackageItemController.prototype.refresh = function () {
    this.lbName.setString(game.local.getValue(game.utils.sprintf("package_%d", this.idx + 1)));
    var maxLevel = game.playerMan.getPackageUnlockLevel(this.packageEntity.id) + 1;
    if (maxLevel > this.packageEntity.count) {
        maxLevel = this.packageEntity.count;
    }
    this.lbCount.setString(maxLevel + "/" + this.packageEntity.count);
    this.spBg.setSpriteFrame(cc.spriteFrameCache.getSpriteFrame(this.packageEntity.image));
    this.spCompleted.visible = false;
    this.spUnCompleted.visible = false;
    if (maxLevel === this.packageEntity.count) {
        this.spCompleted.visible = true;
    } else {
        this.spUnCompleted.visible = true;
    }
    if (this.packageEntity.isLocked()) {
        this.ndLock.visible = true;
        this.lbUnlockCount.setString(this.packageEntity.unlockCount);
    } else {
        this.ndLock.visible = false;
    }

    if (!game.local.isChinese()) {
        this.lbName.setScale(1.0);
    }
};

PackageItemController.prototype.getContentSize = function () {
    return this.spBg.getContentSize();
};

PackageItemController.createFromCCB = function() {
    return game.utils.loadNodeFromCCB("res/menu/package_item_view.ccbi", null, "PackageItemController", new PackageItemController());
};

module.exports = PackageItemController;
},{"../enum/LockStatus":107}],69:[function(require,module,exports){
/**
 * Created by qinning on 2017/12/15.
 */
var GameMan = require("../model/GameMan");
var EventsName = require("../events/EventsName");

var PassController = function () {
    BaseCCBController.call(this);
    this._replayCallback = null;
    this._nextCallback = null;

    //this.spWinCn = null;
    //this.spWinEn = null;

    this.ndWheel = null;
    this.ndClaimDiamonds = null;
    this.ndDiamonds = null;
    this.lblDiamondReward = null;
    this.spRewardDiamonds = null;

    this.lblReward = null;
    this.lblWheel = null;

    this.spYellow1 = null;
    this.spYellow2 = null;
    this.spYellow3 = null;

    this.spBlack1 = null;
    this.spBlack2 = null;
    this.spBlack3 = null;

    this.spYellows = [];
    //this.spBlacks = [];
};

game.utils.inherits(PassController, BaseCCBController);

PassController.prototype.onExit = function () {
    this._replayCallback = null;
    this._nextCallback = null;
    game.eventDispatcher.removeEventListener("dialog_poped", this.onDialogPoped, this);
    game.eventDispatcher.removeEventListener("dialog_closed", this.onDialogClosed, this);
    this.removeNativeAd();
};

PassController.prototype.onEnter = function () {
    game.eventDispatcher.addEventListener("dialog_poped", this.onDialogPoped, this);
    game.eventDispatcher.addEventListener("dialog_closed", this.onDialogClosed, this);
    if (game.adsManager.showTopBanner) {
        game.adsManager.removeBannerAds("top");
    }
    //this.showNativeAd();
};

PassController.prototype.onDialogPoped = function () {
    this.updateNativeAd();
};

PassController.prototype.onDialogClosed = function () {
    this.updateNativeAd();
};

PassController.prototype.updateNativeAd = function () {
    if (game.dialogManager.isTopestDialog(this.rootNode)) {
        this.showNativeAd();
    } else {
        this.removeNativeAd();
    }
};

PassController.prototype.showNativeAd = function () {
    game.adsManager.showNativeAd("pass", 0, 0);
};

PassController.prototype.removeNativeAd = function () {
    game.adsManager.removeNativeAd("pass");
};

PassController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);

    this.lblReward.setString(_("watch_ads_get_boosts"));
    this.lblWheel.setString(_("lucky_wheel_title"));

    this.spYellows = [this.spYellow1, this.spYellow2, this.spYellow3];

    var star = GameMan.getInstance().currentStar;
    for (var i = 0; i < 3; ++i) {
        this.spYellows[i].visible = (star >= i + 1);
    }

    for (i = 0; i < star; ++i) {
        setTimeout(function (index) {
            return function () {
                game.audioPlayer.playEffectByKey("star_" + (index + 1));
                game.audioPlayer.vibrateShort();
            };
        }(i), 250 * (i + 1));
    }

    if (game.gameMan.getCurrentRewardDiamonds() > 0) {
        this.ndClaimDiamonds.visible = true;
        this.lblDiamondReward.setString(game.gameMan.getCurrentRewardDiamonds());
        setTimeout(this.doClaimDiamonds.bind(this), 900);
    } else {
        this.ndClaimDiamonds.visible = false;
    }
};

PassController.prototype.doClaimDiamonds = function () {
    //game.audioPlayer.playEffectByKey("coins_fly");
    var diamondPos = this.spRewardDiamonds.parent.convertToWorldSpace(this.spRewardDiamonds.getPosition());
    var diamndEndPos = this.ndDiamonds.parent.convertToWorldSpace(this.ndDiamonds.getPosition());
    game.effectMan.playFlyCoins(diamondPos, diamndEndPos, 10, function () {
        game.playerMan.addDiamonds(game.gameMan.getCurrentRewardDiamonds(), "pass_level");
    }, function () {
        //this.ndClaimDiamonds.runAction(cc.sequence(cc.delayTime(1), cc.fadeOut(0.3)));
    }.bind(this));
};

PassController.prototype.initWith = function (replayCallback, nextCallback) {
    this._replayCallback = replayCallback;
    this._nextCallback = nextCallback;
};

PassController.prototype.onAnimEnd = function () {
     var showedRate = GameMan.getInstance().showRate();
     if (!showedRate) {
         game.gameMan.tryShowPassPopup();
     }
};

PassController.prototype.onUpdateDiamonds = function () {
    this.lbDiamonds.setString(game.playerMan.getDiamonds());
};

PassController.prototype.nextClicked = function (sender) {
    game.audioPlayer.playEffectByKey("enter");
    GameMan.getInstance().showAds(true);
    if (this._nextCallback) {
        this._nextCallback();
    }
    GameMan.getInstance().showRegisterNotification();
    this.close();
};

PassController.prototype.restartClicked = function (sender) {
    game.audioPlayer.playEffectByKey("enter");
    GameMan.getInstance().showAds(true);
    if (this._replayCallback) {
        this._replayCallback();
    }
    this.close();
};

PassController.prototype.homeClicked = function (sender) {
    game.audioPlayer.playEffectByKey("enter");
    GameMan.getInstance().showAds(true);
    game.sceneMan.switchScene(game.sceneType.MENU);
};

PassController.prototype.watchAdsClicked = function (sender) {
    game.audioPlayer.playEffectByKey("enter");
    var StoreHelper = require("../model/StoreHelper");
    StoreHelper.getInstance().checkAndShowRewardVideo(game.utils.isIOS() ? "wingift" : "jili05", null, "WinAndWatchDiamondsAds");
};

PassController.prototype.wheelClicked = function (sender) {
    AudioHelper.playBtnSound();
    var WheelType = require("../enum/WheelType");
    game.popupMan.popupWheelDlg(WheelType.DailyBonus);
};

PassController.prototype.popup = function () {
    game.dialogManager.popup(this.rootNode);
};

PassController.prototype.close = function () {
    game.dialogManager.close(this.rootNode);
};

PassController.createFromCCB = function() {
    var node = game.utils.loadNodeFromCCB("res/notice/pass_view.ccbi", null, "PassController", new PassController());
    return node;
};

module.exports = PassController;
},{"../enum/WheelType":114,"../events/EventsName":115,"../model/GameMan":116,"../model/StoreHelper":121}],70:[function(require,module,exports){
/**
 * Created by qinning on 2017/12/15.
 */
var AdsPlace = require("../../common/enum/AdsPlace");
var DiamondsController = require("../controller/DiamondsController");
var AdsReminderController = require("../controller/AdsReminderController");

var PauseController = function () {
    BaseCCBController.call(this);
    this.lblReward = null;

    this.ndAdReminder = null;
    this.ndDiamonds = null;

    this._replayCallback = null;
    this._nextCallback = null;
};

game.utils.inherits(PauseController, BaseCCBController);

PauseController.prototype.onExit = function () {
    this._resumeCallback = null;
    game.eventDispatcher.removeEventListener("dialog_poped", this.onDialogPoped, this);
    game.eventDispatcher.removeEventListener("dialog_closed", this.onDialogClosed, this);
    this.removeNativeAd();
};

PauseController.prototype.onEnter = function () {
    game.eventDispatcher.addEventListener("dialog_poped", this.onDialogPoped, this);
    game.eventDispatcher.addEventListener("dialog_closed", this.onDialogClosed, this);
    //this.showNativeAd();
};

PauseController.prototype.onDialogPoped = function () {
    this.updateNativeAd();
};

PauseController.prototype.onDialogClosed = function () {
    this.updateNativeAd();
};

PauseController.prototype.updateNativeAd = function () {
    if (game.dialogManager.isTopestDialog(this.rootNode)) {
        this.showNativeAd();
    } else {
        this.removeNativeAd();
    }
};

PauseController.prototype.showNativeAd = function () {
    game.adsManager.showNativeAd("pause", 0, 99);
};

PauseController.prototype.removeNativeAd = function () {
    game.adsManager.removeNativeAd("pause");
};

PauseController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);
    this.lblReward.setString(_("watch_ads_get_boosts"));
    this.ndAdReminder.addChild(AdsReminderController.createFromCCB());
    this.ndDiamonds.addChild(DiamondsController.createFromCCB());
};

PauseController.prototype.initWith = function (resumeCallback) {
    this._resumeCallback = resumeCallback;
};

PauseController.prototype.resumeClicked = function (sender) {
    game.audioPlayer.playEffectByKey("enter");
    if (this._resumeCallback) {
        this._resumeCallback();
    }
    this.close();
};

PauseController.prototype.homeClicked = function (sender) {
    game.audioPlayer.playEffectByKey("enter");
    game.analyseManager.trackEvent("PauseHome");
    game.popupMan.popupYesNoCommonDlg(_("exit_game_confirm"), _("yes_title"), _("no_title"), function () {
        game.sceneMan.switchScene(game.sceneType.MENU);
        if (game.playerMan.getLevel() >= 4) {
            game.adsManager.showInterstitial(AdsPlace.Home);
        }
    });
};

PauseController.prototype.restartClicked = function (sender) {
    game.audioPlayer.playEffectByKey("enter");
    game.gameMan.addFailCount();
    game.sceneMan.switchScene(game.sceneType.GAME);
    game.adsManager.showInterstitial(AdsPlace.Refresh);
    game.analyseManager.trackEvent("PauseRetry");
};

PauseController.prototype.watchAdsClicked = function (sender) {
    game.audioPlayer.playEffectByKey("enter");
    var StoreHelper = require("../model/StoreHelper");
    StoreHelper.getInstance().checkAndShowRewardVideo(game.utils.isIOS() ? "pause" : "pause");
};

PauseController.prototype.popup = function () {
    game.dialogManager.popup(this.rootNode);
};

PauseController.prototype.close = function () {
    game.dialogManager.close(this.rootNode);
};

PauseController.createFromCCB = function() {
    var node = game.utils.loadNodeFromCCB("res/notice/pause_view.ccbi", null, "PauseController", new PauseController());
    return node;
};

module.exports = PauseController;
},{"../../common/enum/AdsPlace":10,"../controller/AdsReminderController":49,"../controller/DiamondsController":56,"../model/StoreHelper":121}],71:[function(require,module,exports){
//var SkinItemController = require("./SkinItemController");
//var ConfigMan = require("../config/ConfigMan");
//var EventsName = require("../events/EventsName");
//
//var GRID_SIZE = cc.size(350, 500);
//
//var StoreItemCellView = cc.TableViewCell.extend({
//    entity: null,
//    itemNode: null,
//    ctor: function () {
//        this._super();
//        this.itemNode = SkinItemController.createFromCCB();
//        this.addChild(this.itemNode);
//        this.itemNode.setPosition(cc.p(GRID_SIZE.width * 0.5, GRID_SIZE.height * 0.5));
//    },
//
//    initWith: function (entity, idx, inited) {
//        this.entity = entity;
//        this.itemNode.controller.initWith(entity, idx);
//    }
//});
var RankType = require("../enum/RankType");

var RankController = function () {
    BaseCCBController.call(this);
    this.ndContainer = null;
    this.lblTitle = null;

    this.rankType = 0;

    this.updateCount = 0;
};

game.utils.inherits(RankController, BaseCCBController);

RankController.prototype.onEnter = function () {
    BaseCCBController.prototype.onEnter.call(this);
    //this.rootNode.schedule(this.onUpdate.bind(this));
    this.intervalKey = setInterval(this.onUpdate.bind(this), 500);
};

RankController.prototype.onExit = function () {
    //this.rootNode.unschedule(this.onUpdate.bind(this));
    clearInterval(this.intervalKey);
    if (this.closeCallback) {
        this.closeCallback();
    }
    this.closeCallback = null;
    BaseCCBController.prototype.onExit.call(this);
};

RankController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);
    ////onewx.social.loadShareCanvas(this.ndContainer);
    //this.onUpdate(0);
};

RankController.prototype.init = function (rankType, closeCallback) {
    this.rankType = rankType;
    this.closeCallback = closeCallback;
    if (rankType === RankType.Friends) {
        this.lblTitle.setString(game.local.getValue("friends_rank_title"));
    } else {
        this.lblTitle.setString(game.local.getValue("group_rank_title"));
    }
    if (this.rankType === RankType.Friends) {
        onewx.social.initFriend();
    } else {
        onewx.social.initGroup();
    }
    this.refreshRank();
};

RankController.prototype.refreshRank = function () {
    this.updateCount = 0;
    this.onUpdate(0);
};

RankController.prototype.onUpdate = function () {
    if (this.updateCount <= 10) {
        onewx.social.loadShareCanvas(this.ndContainer);
        this.updateCount++;
    }
};

RankController.prototype.prevClicked = function (sender) {
    AudioHelper.playBtnSound();
    onewx.social.onPageChange(this.ndContainer, -1);
    this.refreshRank();
};

RankController.prototype.nextClicked = function (sender) {
    AudioHelper.playBtnSound();
    onewx.social.onPageChange(this.ndContainer, 1);
    this.refreshRank();
};

RankController.prototype.backClicked = function (sender) {
    AudioHelper.playBtnSound();

    this.close();
};

RankController.prototype.challengeClicked = function (sender) {
    AudioHelper.playBtnSound();
    game.sceneMan.switchScene(game.sceneType.GAME);
};

RankController.prototype.popup = function () {
    game.dialogManager.popup(this.rootNode);
};

RankController.prototype.close = function () {
    game.dialogManager.close(this.rootNode);
};

RankController.createFromCCB = function() {
    var node = game.utils.loadNodeFromCCB("res/menu/rank_view.ccbi", null, "RankController", new RankController());
    return node;
};

module.exports = RankController;
},{"../enum/RankType":108}],72:[function(require,module,exports){
var StoreHelper = require("../model/StoreHelper");

var ReliveController = function () {
    BaseCCBController.call(this);

    this.lbCostDiamonds = null;

    this._reliveCallback = null;
    this._cancelCallback = null;
};

game.utils.inherits(ReliveController, BaseCCBController);

ReliveController.prototype.onExit = function () {
    BaseCCBController.prototype.onExit.call(this);
    this._reliveCallback = null;
    this._cancelCallback = null;
};

ReliveController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);

    this.lbCostDiamonds.setString("x" + game.config.relifeDiamonds);
};

ReliveController.prototype.watchAdsClicked = function (sender) {
    game.audioPlayer.playEffectByKey("enter");
    var StoreHelper = require("../model/StoreHelper");
    StoreHelper.getInstance().checkAndShowRewardVideo(game.utils.isIOS() ? "relive" : "relive");
};

ReliveController.prototype.reliveClicked = function (sender) {
    AudioHelper.playBtnSound();
    if (StoreHelper.getInstance().reliveLevel(game.gameMan.levelId)) {
        if (this._reliveCallback) {
            this._reliveCallback();
        }
        this.close();
    }
};

ReliveController.prototype.closeClicked = function (sender) {
    AudioHelper.playBtnSound();
    if (this._cancelCallback) {
        this._cancelCallback();
    }
    this.close();
};

ReliveController.prototype.initWith = function (reliveCallback, cancelCallback) {
    this._reliveCallback = reliveCallback;
    this._cancelCallback = cancelCallback;
};

ReliveController.prototype.popup = function () {
    game.dialogManager.popup(this.rootNode, {popupAnim: true});
};

ReliveController.prototype.close = function () {
    game.dialogManager.close(this.rootNode);
};

ReliveController.createFromCCB = function() {
    var node = game.utils.loadNodeFromCCB("res/notice/relife_view.ccbi", null, "ReliveController", new ReliveController());
    return node;
};

module.exports = ReliveController;
},{"../model/StoreHelper":121}],73:[function(require,module,exports){
var StoreHelper = require("../model/StoreHelper");

var RewardDoubleController = function () {
    BaseCCBController.call(this);

    this._titleLabel = null;

    this.lbReward = null;
    this.spReward = null;
    this.spRewardBg = null;

    //this.btnCloseCn = null;
    //this.btnCloseEn = null;

    this.lbDouble = null;

    this.closeCallback = null;

    this.doubled = false;
    this.rewardName = "";
};

game.utils.inherits(RewardDoubleController, BaseCCBController);

RewardDoubleController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);
    //this.btnCloseCn.visible = false;
    //this.btnCloseEn.visible = false;
    //this.spTitleCn.visible = false;
    //this.spTitleEn.visible = false;
    //if (game.local.isChinese()) {
    //    this.btnCloseCn.visible = true;
    //    //this.spTitleCn.visible = true;
    //} else {
    //    this.btnCloseEn.visible = true;
    //    //this.spTitleEn.visible = true;
    //}
    this.lbDouble.setString(_("double_rewards"));

    game.audioPlayer.playEffectByKey("get_diamonds");
};

RewardDoubleController.prototype.init = function (image, count, rewardName, closeCallback) {
    console.log("RewardDoubleController.prototype.init");
    this.spReward.setSpriteFrame(image);
    this.lbReward.setString("X" + count);
    this.closeCallback = closeCallback;
    this.rewardName = rewardName;

    this.spRewardBg.runAction(cc.rotateBy(2, 360).repeatForever());
};

RewardDoubleController.prototype.closeClicked = function (sender) {
    AudioHelper.playBtnSound();
    this.close();
};

RewardDoubleController.prototype.watchAdsClicked = function (sender) {
    AudioHelper.playBtnSound();
    var self = this;
    StoreHelper.getInstance().checkAndShowRewardVideo(this.rewardName, function (rewarded) {
        if (rewarded) {
            self.doubled = true;
            self.close();
        }
    });
};

RewardDoubleController.prototype.popup = function () {
    game.dialogManager.popup(this.rootNode, {overlayOpacity: 210});
};

RewardDoubleController.prototype.close = function () {
    game.dialogManager.close(this.rootNode);
    if (this.closeCallback) {
        this.closeCallback(this.doubled);
        this.closeCallback = null;
    }
};

RewardDoubleController.createFromCCB = function() {
    var node = game.utils.loadNodeFromCCB("res/notice/reward_double_view.ccbi", null, "RewardDoubleController", new RewardDoubleController());
    return node;
};

module.exports = RewardDoubleController;
},{"../model/StoreHelper":121}],74:[function(require,module,exports){
var StoreHelper = require("../model/StoreHelper");
var GameMan = require("../model/GameMan");
var BoostType = require("../enum/BoostType");

var RewardGiftController = function () {
    BaseCCBController.call(this);

    this.lbTitle = null;

    this.lbTips = null;
    this.lbButton = null;

    this.closeCallback = null;
};

game.utils.inherits(RewardGiftController, BaseCCBController);

RewardGiftController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);
    this.lbTitle.setString(_("gift_title"));
    this.lbTips.setString(_("gift_tips"));
    this.lbButton.setString(_("gift_button"));

    //this.lbTips.setAlignment(cc.TEXT_ALIGNMENT_CENTER);
};

RewardGiftController.prototype.init = function (closeCallback) {
    this.closeCallback = closeCallback;
};

RewardGiftController.prototype.closeClicked = function (sender) {
    AudioHelper.playBtnSound();
    this.close();
};

RewardGiftController.prototype.giftClicked = function (sender) {
    AudioHelper.playBtnSound();
    var self = this;
    var share = GameMan.getInstance().getShareConfig();
    game.shareManager.wxGroupShare(share, "gift_share", function (shared) {
        if (shared) {
            var splitCount = game.utils.randomNextIntInRange(2, 3);
            var threeBallCount = game.utils.randomNextIntInRange(2, 3);
            StoreHelper.getInstance().popupBoostRewardDlg(splitCount, threeBallCount, function () {
                self.close();
            });
        } else {
            game.utils.showWXToast("需要分享到群");
        }
    });
};

RewardGiftController.prototype.popup = function () {
    game.dialogManager.popup(this.rootNode, {overlayOpacity: 210});
};

RewardGiftController.prototype.close = function () {
    game.dialogManager.close(this.rootNode);
    if (this.closeCallback) {
        this.closeCallback();
        this.closeCallback = null;
    }
};

RewardGiftController.createFromCCB = function() {
    var node = game.utils.loadNodeFromCCB("res/notice/reward_gift_view.ccbi", null, "RewardGiftController", new RewardGiftController());
    return node;
};

module.exports = RewardGiftController;
},{"../enum/BoostType":103,"../model/GameMan":116,"../model/StoreHelper":121}],75:[function(require,module,exports){


var RewardNoticeController = function () {
    BaseCCBController.call(this);
    this.ndReward1 = null;
    this.ndReward2 = null;

    this.spReward1 = null;
    this.lbReward1 = null;
    this.spReward2 = null;
    this.lbReward2 = null;

    this.spReward = null;
    this.lbReward = null;

    this.lblOk = null;

    this._okCallFunc = null;
};

game.utils.inherits(RewardNoticeController, BaseCCBController);

RewardNoticeController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);
    this.ndReward1.visible = false;
    this.ndReward2.visible = false;

    game.audioPlayer.playEffectByKey("get_diamonds");

    //this.spBg.runAction(cc.rotateBy(2, 360).repeatForever());
};

RewardNoticeController.prototype.initWithRewardYes = function (info, okCallFunc, reward1Sprite, reward1Count,
                                                      reward2Sprite, reward2Count) {
    var spriteFrame;
    if (reward1Sprite && reward2Sprite) {
        this.ndReward2.visible = true;
        //this.lbReward2Info.setString(info);
        //this.lbReward2Info.setAlignment(cc.TEXT_ALIGNMENT_CENTER);
        spriteFrame = cc.spriteFrameCache.getSpriteFrame(reward1Sprite);
        if (spriteFrame) {
            this.spReward1.setSpriteFrame(spriteFrame);
        }
        this.lbReward1.setString("x" + reward1Count);
        spriteFrame = cc.spriteFrameCache.getSpriteFrame(reward2Sprite);
        if (spriteFrame) {
            this.spReward2.setSpriteFrame(spriteFrame);
        }
        this.lbReward2.setString("x" + reward2Count);
    } else {
        this.ndReward1.visible = true;
        //this.lbRewardInfo.setString(info);
        //this.lbRewardInfo.setAlignment(cc.TEXT_ALIGNMENT_CENTER);
        spriteFrame = cc.spriteFrameCache.getSpriteFrame(reward1Sprite);
        if (spriteFrame) {
            this.spReward.setSpriteFrame(spriteFrame);
        }
        this.lbReward.setString("x" + reward1Count);
    }

    this.lblOk.setString(game.local.getValue("confirm_info"));
    this._okCallFunc = okCallFunc;
};

RewardNoticeController.prototype.okClicked = function (sender) {
    AudioHelper.playBtnSound();
    if (this._okCallFunc) {
        this._okCallFunc();
    }
    this.close();
};

RewardNoticeController.prototype.popup = function () {
    game.dialogManager.popup(this.rootNode);
};

RewardNoticeController.prototype.close = function () {
    game.dialogManager.close(this.rootNode);
};

RewardNoticeController.createFromCCB = function() {
    var node = game.utils.loadNodeFromCCB("res/notice/reward_notice_view.ccbi", null, "RewardNoticeController", new RewardNoticeController());
    return node;
};

module.exports = RewardNoticeController;
},{}],76:[function(require,module,exports){
var StoreHelper = require("../model/StoreHelper");

var RewardVideoController = function () {
    BaseCCBController.call(this);

    this._titleLabel = null;

    this.spReward1 = null;
    this.lbReward1 = null;
    this.spReward2 = null;
    this.lbReward2 = null;
    this.lbReward2Info = null;
    this.lblFree = null;

    this.closeCallback = null;
};

game.utils.inherits(RewardVideoController, BaseCCBController);

RewardVideoController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);
    this.lbReward1.setString("X1");
    this.lbReward2.setString("X1");
    this.lbReward2Info.setString(game.local.getValue("watch_ads_tips"));
    this._titleLabel.setString(game.local.getValue("watch_ads_title"));
    this.lblFree.setString(_("free_coins_title"));
};

RewardVideoController.prototype.init = function (closeCallback) {
    this.closeCallback = closeCallback;
};

RewardVideoController.prototype.closeClicked = function (sender) {
    AudioHelper.playBtnSound();
    this.close();
};

RewardVideoController.prototype.watchAdsClicked = function (sender) {
    AudioHelper.playBtnSound();
    StoreHelper.getInstance().checkAndShowRewardVideo(game.utils.isIOS() ? "jili03-IOS" : "jili03");
};

RewardVideoController.prototype.popup = function () {
    game.dialogManager.popup(this.rootNode);
};

RewardVideoController.prototype.close = function () {
    game.dialogManager.close(this.rootNode);
    if (this.closeCallback) {
        this.closeCallback();
        this.closeCallback = null;
    }
};

RewardVideoController.createFromCCB = function() {
    var node = game.utils.loadNodeFromCCB("res/notice/reward_video_view.ccbi", null, "RewardVideoController", new RewardVideoController());
    return node;
};

module.exports = RewardVideoController;
},{"../model/StoreHelper":121}],77:[function(require,module,exports){
var SkinItemController = require("./SkinItemController");
var ConfigMan = require("../config/ConfigMan");
var EventsName = require("../events/EventsName");


var SettingController = function () {
    BaseCCBController.call(this);
    this.spAudioOff = null;
    this.spAudioOn = null;
    this.lbAudio = null;
    this.lbVersion = null;
    this.ndRank = null;
    this.ndVibrate = null;

    this.spVibrateOn = null;
    this.spVibrateOff = null;
    this.lblVibrate = null;
};

game.utils.inherits(SettingController, BaseCCBController);

SettingController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);
    this.updateSoundItem();
    this.updateVibrateItem();
    var version = "web";
    if (cc.sys.isNative) {
        version = jsb_dp.oneSdkBridge.getVersion();
    }
    this.lbVersion.setString(game.utils.sprintf(_("version_title"), version));
    if (cc.sys.os === cc.sys.OS_ANDROID) {
        this.ndRank.visible = false;
        this.ndVibrate.visible = false;
    }
};

SettingController.prototype.updateSoundItem = function () {
    var isSoundOn = game.audioPlayer.isEffectOn();
    this.spAudioOff.visible = false;
    this.spAudioOn.visible = false;
    if (isSoundOn) {
        this.spAudioOn.visible = true;
        this.lbAudio.setString(_("audio_on_title"));
    } else {
        this.spAudioOff.visible = true;
        this.lbAudio.setString(_("audio_off_title"));
    }
};

SettingController.prototype.updateVibrateItem = function () {
    var isSoundOn = game.audioPlayer.isVibrateOn();
    this.spVibrateOff.visible = false;
    this.spVibrateOn.visible = false;
    if (isSoundOn) {
        this.spVibrateOn.visible = true;
        this.lblVibrate.setString(_("vibrate_on_title"));
    } else {
        this.spVibrateOff.visible = true;
        this.lblVibrate.setString(_("vibrate_off_title"));
    }
};

SettingController.prototype.soundClicked = function (sender) {
    AudioHelper.playBtnSound();
    game.audioPlayer.setEffectOn(!game.audioPlayer.isEffectOn());
    game.audioPlayer.setMusicOn(!game.audioPlayer.isMusicOn());
    this.updateSoundItem();
};

SettingController.prototype.shareClicked = function (sender) {
    AudioHelper.playBtnSound();
    game.shareManager.shareWithSystem(game.utils.sprintf(game.local.getValue("share_tips"),
        game.playerMan.getLevel(), game.config.getShortPlatformDownloadUrl()));
};

SettingController.prototype.rankClicked = function (sender) {
    AudioHelper.playBtnSound();
    game.gcManager.showLeaderboard(game.config.getLeaderBoardKey());
};

SettingController.prototype.supportClicked = function (sender) {
    AudioHelper.playBtnSound();
    game.shareManager.sendEmail(game.config.connectEmail,
        game.local.getValue("feed_back_title"), game.local.getValue("feed_back_content"));
};

SettingController.prototype.rateClicked = function (sender) {
    AudioHelper.playBtnSound();
    cc.sys.openURL(game.config.getPlatformDownloadUrl());
};

SettingController.prototype.fanPageClicked = function (sender) {
    AudioHelper.playBtnSound();
    cc.sys.openURL(game.config.facebookFanPageUrl);
};

SettingController.prototype.likeUsClicked = function (sender) {
    AudioHelper.playBtnSound();
    cc.sys.openURL(game.config.getPlatformDownloadUrl());
};

SettingController.prototype.vibrateClicked = function (sender) {
    AudioHelper.playBtnSound();
    game.audioPlayer.setVibrateOn(!game.audioPlayer.isVibrateOn());
    this.updateVibrateItem();
};

SettingController.prototype.backClicked = function (sender) {
    AudioHelper.playBtnSound();

    this.close();
};

SettingController.prototype.popup = function () {
    game.dialogManager.popup(this.rootNode, {popupAnim: true});
};

SettingController.prototype.close = function () {
    game.dialogManager.close(this.rootNode);
};

SettingController.createFromCCB = function() {
    var node = game.utils.loadNodeFromCCB("res/notice/setting_view.ccbi", null, "SettingController", new SettingController());
    return node;
};

module.exports = SettingController;
},{"../config/ConfigMan":40,"../events/EventsName":115,"./SkinItemController":79}],78:[function(require,module,exports){
var SkinItemController = require("./SkinItemController");
var ConfigMan = require("../config/ConfigMan");
var EventsName = require("../events/EventsName");
var MultiColTableView = require("../../common/ext/MultiColTableView");

var GRID_SIZE = cc.size(270, 200);

var StoreItemCellView = cc.TableViewCell.extend({
    entity: null,
    itemNode: null,
    ctor: function () {
        this._super();
        this.itemNode = SkinItemController.createFromCCB();
        this.addChild(this.itemNode);
        this.itemNode.setPosition(cc.p(GRID_SIZE.width * 0.5, GRID_SIZE.height * 0.5));
    },

    initWith: function (entity, idx) {
        this.entity = entity;
        this.itemNode.controller.initWith(entity, idx);
    }
});

var SkinController = function () {
    BaseCCBController.call(this);
    this.ndContainer = null;

    this.lblTitle = null;

    this._tableView = null;

    //user data.
    this.configs = null;
};

game.utils.inherits(SkinController, BaseCCBController);

SkinController.prototype.onEnter = function () {
    BaseCCBController.prototype.onEnter.call(this);
    game.eventDispatcher.addEventListener(EventsName.UPDATE_SKIN, this.onUpdateSkin, this);
};

SkinController.prototype.onExit = function () {
    game.eventDispatcher.removeEventListener(EventsName.UPDATE_SKIN, this.onUpdateSkin, this);
    BaseCCBController.prototype.onExit.call(this);
};

SkinController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);
    this.lblTitle.setString(_("skin_title"));

    this.configs = ConfigMan.getInstance().getSkinList();
    this.showTableView();
};

SkinController.prototype.onUpdateSkin = function (event) {
    this.showTableView();
};

SkinController.prototype.showTableView = function () {
    if (!this._tableView) {
        var size = this.ndContainer.getContentSize();
        this._tableView = new MultiColTableView(this, size, null);
        this._tableView.setDirection(cc.SCROLLVIEW_DIRECTION_VERTICAL);
        this._tableView.setVerticalFillOrder(cc.TABLEVIEW_FILL_TOPDOWN);
        this._tableView.setMultiTableViewDelegate(this);
        this._tableView.ignoreAnchorPointForPosition(false);
        this._tableView.setAnchorPoint(cc.p(0, 0));
        this.ndContainer.addChild(this._tableView);
    } else {
        this._offset = this._tableView.getContentOffset();
    }
    this._tableView.reloadData();
    if (this._offset) {
        this._tableView.setContentOffset(this._offset);
        this._offset = null;
    }
};

SkinController.prototype.scrollViewDidScroll = function (view) {
};

SkinController.prototype.scrollViewDidZoom = function (view) {
};

SkinController.prototype.gridAtIndex = function(multiTable,  idx) {
    var cell = multiTable.dequeueGrid();
    if (!cell) {
        cell = new StoreItemCellView();
    }

    if (idx < this.configs.length) {
        var skinCfg = this.configs[idx];
        cell.initWith(skinCfg, idx);
        cell.visible = true;
    } else {
        cell.visible = false;
    }

    return cell;
};

SkinController.prototype.numberOfCellsInTableView = function(multiTable) {
    var gridsInCell = this.numberOfGridsInCell(multiTable);
    return Math.ceil(this.configs.length / gridsInCell);
};

SkinController.prototype.numberOfGridsInCell = function(multiTable, colIdx) {
    return 2;
};

SkinController.prototype.gridSizeForTable = function(table, colIdx) {
    return cc.size(270, 220);
};

SkinController.prototype.gridTouched = function(table, grid) {
};

SkinController.prototype.backClicked = function (sender) {
    AudioHelper.playBtnSound();

    this.close();
};

SkinController.prototype.popup = function () {
    game.dialogManager.popup(this.rootNode);
};

SkinController.prototype.close = function () {
    game.dialogManager.close(this.rootNode);
};

SkinController.prototype.onExit = function () {
    //if (this.closeCallback) {
    //    this.closeCallback();
    //    this.closeCallback = null;
    //}
};

SkinController.createFromCCB = function() {
    var node = game.utils.loadNodeFromCCB("res/menu/skin_view.ccbi", null, "SkinController", new SkinController());
    return node;
};

module.exports = SkinController;
},{"../../common/ext/MultiColTableView":13,"../config/ConfigMan":40,"../events/EventsName":115,"./SkinItemController":79}],79:[function(require,module,exports){
var SkinRewardType = require("../enum/SkinRewardType");
var EventsName = require("../events/EventsName");
var SkinType = require("../enum/SkinType");

var SkinItemController = function () {
    BaseCCBController.call(this);

    this.ndPurchase = null;
    this.ndOwned = null;
    this.ndWatchAds = null;

    this.lbDiamondPrice = null;
    this.lbUsing = null;
    this.lbRewardAdsCount = null;

    this.spSkin = null;

    this.idx = 0;
    this.skinCfg = null;
};

game.utils.inherits(SkinItemController, BaseCCBController);

SkinItemController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);
};

SkinItemController.prototype.onEnter = function() {
    BaseCCBController.prototype.onEnter.call(this);
    game.eventDispatcher.addEventListener(EventsName.UPDATE_SKIN, this.onUpdateSkin, this);
};

SkinItemController.prototype.onExit = function() {
    game.eventDispatcher.removeEventListener(EventsName.UPDATE_SKIN, this.onUpdateSkin, this);
    BaseCCBController.prototype.onExit.call(this);
};
/**
 * @param {SkinConfig} data
 * @param {number} idx
 */
SkinItemController.prototype.initWith = function (data, idx) {
    this.idx = idx;
    this.skinCfg = data;
    try {
        var spriteFrame = cc.spriteFrameCache.getSpriteFrame(data.image + ".png");
        this.spSkin.setSpriteFrame(spriteFrame);

        this.ndPurchase.visible = false;
        this.ndOwned.visible = false;
        this.ndWatchAds.visible = false;

        var owned = game.playerMan.hasSkin(this.skinCfg.id);
        if (owned) {
            this.ndOwned.visible = true;
            if (data.id === game.playerMan.getCurrentSkinId()) {
                this.lbUsing.setString(_("selected_title"));
            } else {
                this.lbUsing.setString(_("select_title"));
            }
        } else {
            switch (data.type) {
                case SkinType.WatchAds:
                    var skinRewardCount = game.playerMan.getSkinAdsCount(data.id);
                    this.ndWatchAds.visible = true;
                    this.lbRewardAdsCount.setString(game.utils.sprintf("%d/%d", skinRewardCount, data.count));
                    break;
                case SkinType.Diamonds:
                    this.ndPurchase.visible = true;
                    this.lbDiamondPrice.setString(this.skinCfg.count);
                    break;
            }
        }
    } catch (ex) {
        cc.error(ex);
    }
};

SkinItemController.prototype.onUpdateSkin = function () {
    this.initWith(this.skinCfg, this.idx);
};

SkinItemController.prototype.getContentSize = function () {
    return this.spBgSelected.getContentSize();
};

SkinItemController.prototype.purchaseClicked = function () {
    AudioHelper.playBtnSound();
    var StoreHelper = require("../model/StoreHelper");
    StoreHelper.getInstance().buySkin(this.skinCfg, "buy_skin_in_store");
};

SkinItemController.prototype.selectClicked = function () {
    AudioHelper.playBtnSound();
    game.playerMan.setCurrentSkinId(this.skinCfg.id);
    game.eventDispatcher.dispatchEvent(EventsName.UPDATE_SKIN);
};

SkinItemController.createFromCCB = function() {
    return game.utils.loadNodeFromCCB("res/menu/skin_item_view.ccbi", null, "SkinItemController", new SkinItemController());
};

module.exports = SkinItemController;
},{"../enum/SkinRewardType":111,"../enum/SkinType":112,"../events/EventsName":115,"../model/StoreHelper":121}],80:[function(require,module,exports){
var SkinRewardType = require("../enum/SkinRewardType");
var EventsName = require("../events/EventsName");
var SkinType = require("../enum/SkinType");

var SkinItemTitleController = function () {
    BaseCCBController.call(this);

    this.lbSkinTitle = null;
};

game.utils.inherits(SkinItemTitleController, BaseCCBController);

SkinItemTitleController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);
};

/**
 * @param {string} content
 */
SkinItemTitleController.prototype.initWith = function (content) {
    this.lbSkinTitle.setString(content);
};

SkinItemTitleController.createFromCCB = function() {
    return game.utils.loadNodeFromCCB("res/menu/skin_item_title_view.ccbi", null, "SkinItemTitleController", new SkinItemTitleController());
};

module.exports = SkinItemTitleController;
},{"../enum/SkinRewardType":111,"../enum/SkinType":112,"../events/EventsName":115}],81:[function(require,module,exports){
var StoreHelper = require("../model/StoreHelper");
var ConfigMan = require("../config/ConfigMan");
var EventsName = require("../events/EventsName");

var SpecialOfferController = function () {
    BaseCCBController.call(this);

    this.lbTitle = null;

    this.spReward1 = null;
    this.lbReward1 = null;
    this.lbReward2 = null;
    this.lbReward3 = null;
    //this.spReward2 = null;
    //this.lbReward2 = null;
    //this.lbLeftTime = null;

    this.lblOriginalPrice = null;
    this.lbPrice = null;
    this.lblDiscount = null;

    this.btnPurchase = null;

    /**
     * @type {StoreConfig}
     */
    this.specialOfferCfg = null;
};

game.utils.inherits(SpecialOfferController, BaseCCBController);

SpecialOfferController.prototype.onEnter = function () {
    BaseCCBController.prototype.onEnter.call(this);
    game.eventDispatcher.addEventListener(EventsName.PURCHASE_END, this.onPurchaseEnd, this);
};

SpecialOfferController.prototype.onExit = function () {
    game.eventDispatcher.removeEventListener(EventsName.PURCHASE_END, this.onPurchaseEnd, this);
    BaseCCBController.prototype.onExit.call(this);
};

SpecialOfferController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);
    this.specialOfferCfg = ConfigMan.getInstance().getSpecialOfferCfg();
    this.lbTitle.setString(_("special_offer_title"));
    this.lbReward1.setString("x" + this.specialOfferCfg.data.diamonds);
    //this.lbReward2.setString("x" + this.specialOfferCfg.data.multiple_3);
    //this.lbReward3.setString("x" + this.specialOfferCfg.data.new_3);


    this.lbPrice.setString(this.specialOfferCfg.price);
    this.lblOriginalPrice.setString(this.specialOfferCfg.original_price);
    this.lblDiscount.setString(game.utils.sprintf(_("more_title"), "" + (this.specialOfferCfg.discount_multi * 100)));
};

SpecialOfferController.prototype.init = function (closeCallback) {
    this.closeCallback = closeCallback;
};

SpecialOfferController.prototype.closeClicked = function (sender) {
    AudioHelper.playBtnSound();
    this.close();
};

SpecialOfferController.prototype.onPurchaseEnd = function (event) {
    var success = event.getUserData();
    if (success) {
        this.close();
    } else {
        this.btnPurchase.enabled = true;
    }
};

SpecialOfferController.prototype.onPurchase = function (sender) {
    AudioHelper.playBtnSound();
    this.btnPurchase.enabled = false;
    StoreHelper.getInstance().buyProduct(this.specialOfferCfg);
};

SpecialOfferController.prototype.popup = function () {
    game.dialogManager.popup(this.rootNode, {popupAnim: true});
};

SpecialOfferController.prototype.close = function () {
    game.dialogManager.close(this.rootNode);
    if (this.closeCallback) {
        this.closeCallback();
        this.closeCallback = null;
    }
};

SpecialOfferController.createFromCCB = function() {
    var node = game.utils.loadNodeFromCCB("res/store/special_offer_view.ccbi", null, "SpecialOfferController", new SpecialOfferController());
    return node;
};

module.exports = SpecialOfferController;
},{"../config/ConfigMan":40,"../events/EventsName":115,"../model/StoreHelper":121}],82:[function(require,module,exports){
var MultiColTableView = require("../../common/ext/MultiColTableView");
var StoreItemController = require("./StoreItemController");
var StoreHelper = require("../model/StoreHelper");
var SkinItemController = require("./SkinItemController");
var SkinItemTitleController = require("./SkinItemTitleController");
var ConfigMan = require("../config/ConfigMan");
var StoreType = require("../enum/StoreType");
var EventsName = require("../events/EventsName");

var StoreTab = {
    DIAMONDS: 0,
    SKINS: 1
};

var TabVisualConfig = {};
TabVisualConfig[StoreTab.DIAMONDS] = {
    tabNode: "tabDiamondsLight",
    unselectNode: "tabDiamondsDark",
    contentNode:"diamondsContentNode"
};
TabVisualConfig[StoreTab.SKINS] = {
    tabNode:"tabSkinLight",
    unselectNode:"tabSkinDark",
    contentNode:"skinContentNode"
};

var StoreSize = cc.size(571, 110);
var SkinSize = cc.size(285, 200);
var SkinTitleSize = cc.size(571, 58);

var StoreItemCellView = cc.TableViewCell.extend({
    entity: null,
    itemNode: null,
    ctor: function () {
        this._super();
        this.itemNode = StoreItemController.createFromCCB();
        this.addChild(this.itemNode);
        this.itemNode.setPosition(cc.p(StoreSize.width * 0.5, StoreSize.height * 0.5));
    },

    initWith: function (entity, idx) {
        this.entity = entity;
        this.itemNode.controller.initWith(entity, idx);
    }
});

var SkinItemCellView = cc.TableViewCell.extend({
    entity: null,
    itemNode: null,
    ctor: function () {
        this._super();
        this.itemNode = SkinItemController.createFromCCB();
        this.addChild(this.itemNode);
        this.itemNode.setPosition(cc.p(SkinSize.width * 0.5, SkinSize.height * 0.5));
    },

    initWith: function (entity, idx) {
        this.entity = entity;
        this.itemNode.controller.initWith(entity, idx);
    }
});

var SkinItemTitleCellView = cc.TableViewCell.extend({
    //entity: null,
    itemNode: null,
    ctor: function () {
        this._super();
        this.itemNode = SkinItemTitleController.createFromCCB();
        this.addChild(this.itemNode);
        this.itemNode.setPosition(cc.p(SkinTitleSize.width * 0.5, SkinTitleSize.height * 0.5));
    },

    initWith: function (content) {
        //this.entity = entity;
        this.itemNode.controller.initWith(content);
    }
});

var SKIN_TITLE_COL_INDEX = 12;

var StoreController = function () {
    BaseCCBController.call(this);
    //this.lbChapterName = null;
    this.ndContainer = null;

    this.ndTitle = null;
    this.lbStoreName = null;

    this.lbDiamonds = null;

    //user data.
    this.configs = null;
    this.closeCallback = null;
};

game.utils.inherits(StoreController, BaseCCBController);

StoreController.prototype.onExit = function () {
    game.eventDispatcher.removeEventListener(EventsName.DIAMONDS_UPDATE, this.onUpdateDiamonds, this);
    game.eventDispatcher.removeEventListener(EventsName.UPDATE_AIM_ITEM, this.onUpdateAimItem, this);
    if (this.closeCallback) {
        this.closeCallback();
        this.closeCallback = null;
    }
};

StoreController.prototype.onEnter = function () {
    game.eventDispatcher.addEventListener(EventsName.UPDATE_AIM_ITEM, this.onUpdateAimItem, this);
    game.eventDispatcher.addEventListener(EventsName.DIAMONDS_UPDATE, this.onUpdateDiamonds, this);
    //this.refreshUI();
    this.onUpdateDiamonds();
};

StoreController.prototype.onUpdateDiamonds = function () {
    this.lbDiamonds.setString(game.playerMan.getDiamonds());
};

StoreController.prototype.onUpdateAimItem = function () {
    var diamondsTableView = this[TabVisualConfig[StoreTab.DIAMONDS].contentNode];
    if (diamondsTableView) {
        diamondsTableView.reloadData();
    }
};

StoreController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);
    this.lbStoreName.setString(game.local.getValue("store_title"));
    this.initStoreUI();
};

StoreController.prototype.initStoreUI = function () {
    //var originalTab = this.currentTab;
    var skinConfigs = ConfigMan.getInstance().getSkinList();
    cc.log("skinConfigs length:" + skinConfigs.length);
    //this.currentTab = StoreTab.SKINS;
    this[TabVisualConfig[StoreTab.SKINS].contentNode] = this.getTableView({
        gridAtIndex: function (multiTable, idx) {
            //var cell = multiTable.dequeueGrid();
            //if (!cell) {
            //    cell = new SkinItemCellView();
            //}
            var skinCell;
            var skinTitleCell;
            if (idx === 0) {
                skinTitleCell = new SkinItemTitleCellView();
                skinTitleCell.initWith(_("watch_ads_get_skin_title"));
            } else if (idx === 1) {
                skinTitleCell = new SkinItemTitleCellView();
                skinTitleCell.visible = false;
            } else if (idx === SKIN_TITLE_COL_INDEX * 2) {
                skinTitleCell = new SkinItemTitleCellView();
                skinTitleCell.initWith(_("cost_diamonds_get_skin_title"));
            } else if (idx === SKIN_TITLE_COL_INDEX * 2 + 1) {
                skinTitleCell = new SkinItemTitleCellView();
                skinTitleCell.visible = false;
            } else {
                skinCell = new SkinItemCellView();
            }

            if (skinCell) {
                var config;
                if (idx > 1 && idx < SKIN_TITLE_COL_INDEX * 2) {
                    config = skinConfigs[idx - 2];
                } else {
                    config = skinConfigs[idx - 4];
                }
                if (config) {
                    skinCell.initWith(config, idx);
                    skinCell.visible = true;
                } else {
                    skinCell.visible = false;
                }
            }

            if (skinCell) {
                return skinCell;
            }
            return skinTitleCell;
        },

        numberOfCellsInTableView: function (multiTable) {
            var gridsInCell = this.numberOfGridsInCell(multiTable);
            return Math.ceil(skinConfigs.length / gridsInCell) + 2;
        },

        numberOfGridsInCell: function (multiTable, colIdx) {
            return 2;
        },

        gridSizeForTable: function (table, colIdx) {
            //return cc.size(200, 200);
            if (colIdx === 0) {
                return cc.size(SkinTitleSize.width, SkinTitleSize.height + 15);
            } else if (colIdx === SKIN_TITLE_COL_INDEX) {
                return cc.size(SkinTitleSize.width, SkinTitleSize.height);
            } else {
                return cc.size(SkinSize.width, SkinSize.height);
            }
        }
    }, {
        gridTouched: function (table, grid) {
            //cc.log("grid touched at index: " + grid.getIdx());
            //var entity = grid.entity;
            //AudioHelper.playBtnSound();
            //StoreHelper.getInstance().buySkin(entity);
        }
    });

    var diamondConfigs = ConfigMan.getInstance().getStoreListWithoutFirstPurchase();
    //this.currentTab = StoreTab.DIAMONDS;
    this[TabVisualConfig[StoreTab.DIAMONDS].contentNode] = this.getTableView({
        gridAtIndex: function (multiTable, idx) {
            var cell = multiTable.dequeueGrid();
            if (!cell) {
                cell = new StoreItemCellView();
            }

            if (idx < diamondConfigs.length) {
                var config = diamondConfigs[idx];
                cell.initWith(config, idx);
                cell.visible = true;
            } else {
                cell.visible = false;
            }

            return cell;
        },

        numberOfCellsInTableView: function (multiTable) {
            return diamondConfigs.length;
        },

        numberOfGridsInCell: function (multiTable, colIdx) {
            return 1;
        },

        gridSizeForTable: function (table, colIdx) {
            return StoreSize;
        }
    }, {
        gridTouched: function (table, grid) {
            //cc.log("grid touched at index: " + grid.getIdx());
            //var entity = grid.entity;
            //AudioHelper.playBtnSound();
            //StoreHelper.getInstance().buyProduct(entity);
        }
    });

    //this.currentTab = originalTab;
};

StoreController.prototype.refreshUI = function() {
    this.currentTab = this.currentTab || StoreTab.DIAMONDS;
    cc.log("StoreController.prototype.refreshUI:" + this.currentTab);
    //this.currentTab = StoreTab.SKINS;
    for(var i in TabVisualConfig) {
        //var tabNode = this[TabVisualConfig[i].tabNode];
        var unSelectNode = this[TabVisualConfig[i].unselectNode];
        var contentNode = this[TabVisualConfig[i].contentNode];
        //tabNode && tabNode.setVisible(Number(i) === this.currentTab);
        contentNode && contentNode.setVisible(Number(i) === this.currentTab);
        unSelectNode && unSelectNode.setVisible(Number(i) !== this.currentTab);
    }
};

StoreController.prototype.initWith = function (type, callback) {
    cc.log("StoreController.prototype.initWith:" + type);
    if (type === StoreType.SKIN) {
        this.currentTab = StoreTab.SKINS;
    } else if (type === StoreType.DIAMOND) {
        this.currentTab = StoreTab.DIAMONDS;
    }
    this.refreshUI();
    this.closeCallback = callback;
};

StoreController.prototype.getTableView = function (dataSource, delegate) {
    var tableView = new MultiColTableView(dataSource, this.ndContainer.getContentSize(), null);
    tableView.setDirection(cc.SCROLLVIEW_DIRECTION_VERTICAL);
    tableView.setVerticalFillOrder(cc.TABLEVIEW_FILL_TOPDOWN);
    tableView.setMultiTableViewDelegate(delegate);
    tableView.ignoreAnchorPointForPosition(false);
    tableView.setAnchorPoint(cc.p(0, 0));
    tableView.reloadData();
    this.ndContainer.addChild(tableView);
    return tableView;
};

StoreController.prototype.onClickSkin = function () {
    AudioHelper.playBtnSound();
    this.currentTab = StoreTab.SKINS;
    this.refreshUI();
};

StoreController.prototype.onClickDiamonds = function () {
    AudioHelper.playBtnSound();
    this.currentTab = StoreTab.DIAMONDS;
    this.refreshUI();
};

StoreController.prototype.backClicked = function (sender) {
    AudioHelper.playBtnSound();

    this.close();
};

StoreController.prototype.popup = function () {
    game.dialogManager.popup(this.rootNode, {popupAnim: true});
};

StoreController.prototype.close = function () {
    game.dialogManager.close(this.rootNode);
};

StoreController.createFromCCB = function() {
    var node = game.utils.loadNodeFromCCB("res/store/store_view.ccbi", null, "StoreController", new StoreController());
    return node;
};

module.exports = StoreController;
},{"../../common/ext/MultiColTableView":13,"../config/ConfigMan":40,"../enum/StoreType":113,"../events/EventsName":115,"../model/StoreHelper":121,"./SkinItemController":79,"./SkinItemTitleController":80,"./StoreItemController":83}],83:[function(require,module,exports){
var StoreType = require("../enum/StoreType");
var EventsName = require("../events/EventsName");

var StoreItemController = function () {
    BaseCCBController.call(this);

    //price
    this.lbPrice = null;
    this.spRewardedVideo = null;
    this.ndDiamondPrice = null;
    this.lbDiamondPrice = null;

    //node
    this.ndRestore = null;
    this.ndBoosts = null;
    this.ndDiamond = null;
    this.ndPurchase = null;
    this.ndOwned = null;

    //
    this.lbSplit = null;
    this.lbNewThree = null;
    this.lbDiamond = null;
    this.spDiamond = null;

    //tag
    this.spHotTag = null;
    this.spFreeTag = null;
    this.spPercentTag = null;

    this.spRedBg = null;

    this.lbTag = null;

    this.btnClaim = null;

    this.ndReminder = null;

    this.idx = 0;
};

game.utils.inherits(StoreItemController, BaseCCBController);

StoreItemController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);
};

/**
 * @param {StoreConfig} data
 * @param {number} idx
 */
StoreItemController.prototype.initWith = function (data, idx) {
    this.storeEntity = data;
    this.idx = idx;
    this.lbPrice.setString(data.price);

    try {

        this.ndRestore.visible = false;
        this.ndBoosts.visible = false;
        this.ndDiamond.visible = false;
        this.ndPurchase.visible = true;
        this.ndOwned.visible = false;

        this.lbPrice.visible = false;
        this.ndDiamondPrice.visible = false;
        this.spRewardedVideo.visible = false;

        this.spHotTag.visible = false;
        this.spFreeTag.visible = false;
        this.spPercentTag.visible = false;

        this.lbTag.visible = false;

        this.spRedBg.visible = false;

        this.btnClaim.enabled = true;

        this.ndReminder.visible = false;

        var spriteFrame;
        switch (data.type) {
            case StoreType.FREE:
                this.ndDiamond.visible = true;
                this.lbDiamond.setString(data.count);
                this.spRewardedVideo.visible = true;
                spriteFrame = cc.spriteFrameCache.getSpriteFrame(data.image);
                if (spriteFrame) {
                    this.spDiamond.setSpriteFrame(spriteFrame);
                }
                //tag
                this.spFreeTag.visible = true;
                this.lbTag.visible = true;
                this.lbTag.setString(_("free_coins_title"));
                this.ndReminder.visible = true;
                break;
            case StoreType.REMOVE_ADS:
                this.ndDiamond.visible = true;
                this.lbDiamond.setString(game.local.getValue("remove_ads_title"));
                spriteFrame = cc.spriteFrameCache.getSpriteFrame(data.image);
                if (spriteFrame) {
                    this.spDiamond.setSpriteFrame(spriteFrame);
                }
                this.lbPrice.visible = true;
                this.spHotTag.visible = true;
                this.lbTag.visible = true;
                this.lbTag.setString(_("hot_title"));
                break;
            case StoreType.AIM_ITEM:
                this.ndDiamond.visible = true;
                this.lbDiamond.setString(game.local.getValue("aim_item_title"));
                spriteFrame = cc.spriteFrameCache.getSpriteFrame(data.image);
                if (spriteFrame) {
                    this.spDiamond.setSpriteFrame(spriteFrame);
                }
                //this.lbPrice.visible = true;

                if (game.playerMan.player.hasAimItem) {
                    this.ndOwned.visible = true;
                    this.ndPurchase.visible = false;
                } else {
                    this.ndPurchase.visible = true;
                    this.lbPrice.visible = true;
                }
                // this.spHotTag.visible = true;
                // this.lbTag.visible = true;
                // this.lbTag.setString(_("hot_title"));
                break;
            case StoreType.RESTORE:
                this.ndRestore.visible = true;
                this.ndPurchase.visible = false;
                this.spRedBg.visible = true;
                break;
            case StoreType.NEW_AND_SPLIT:
                this.ndBoosts.visible = true;
                this.lbSplit.setString("x" + data.data.multiple_3);
                this.lbNewThree.setString("x" + data.data.multiple_3);
                this.ndDiamondPrice.visible = true;
                this.lbDiamondPrice.setString(data.count);
                break;
            case StoreType.DIAMOND:
                this.ndDiamond.visible = true;
                this.lbDiamond.setString(data.count);
                this.lbPrice.visible = true;
                spriteFrame = cc.spriteFrameCache.getSpriteFrame(data.image);
                if (spriteFrame) {
                    this.spDiamond.setSpriteFrame(spriteFrame);
                }
                //tag
                if (data.extra > 0) {
                    this.spPercentTag.visible = true;
                    this.lbTag.visible = true;
                    this.lbTag.setString("+" + (data.extra * 100) + "%");
                }
                break;
        }
    } catch (ex) {
        cc.error(ex);
    }
};

StoreItemController.prototype.getContentSize = function () {
    return this.spBg.getContentSize();
};

StoreItemController.prototype.purchaseClicked = function () {
    AudioHelper.playBtnSound();
    var StoreHelper = require("../model/StoreHelper");
    StoreHelper.getInstance().buyProduct(this.storeEntity);
};

StoreItemController.createFromCCB = function() {
    var node = game.utils.loadNodeFromCCB("res/store/store_item_view.ccbi", null, "StoreItemController", new StoreItemController());
    return node;
};

module.exports = StoreItemController;
},{"../enum/StoreType":113,"../events/EventsName":115,"../model/StoreHelper":121}],84:[function(require,module,exports){
var TaskItemController = require("./TaskItemController");
var ConfigMan = require("../config/ConfigMan");
var EventsName = require("../events/EventsName");
var MultiColTableView = require("../../common/ext/MultiColTableView");

var GRID_SIZE = cc.size(270, 200);

var StoreItemCellView = cc.TableViewCell.extend({
    entity: null,
    itemNode: null,
    ctor: function () {
        this._super();
        this.itemNode = TaskItemController.createFromCCB();
        this.addChild(this.itemNode);
        this.itemNode.setPosition(cc.p(GRID_SIZE.width * 0.5, GRID_SIZE.height * 0.5));
    },

    initWith: function (entity, idx) {
        this.entity = entity;
        this.itemNode.controller.initWith(entity, idx);
    }
});

var TaskController = function () {
    BaseCCBController.call(this);
    this.ndContainer = null;

    this.lblTitle = null;

    this._tableView = null;

    //user data.
    this.configs = null;
};

game.utils.inherits(TaskController, BaseCCBController);

TaskController.prototype.onEnter = function () {
    BaseCCBController.prototype.onEnter.call(this);
    //game.eventDispatcher.addEventListener(EventsName.UPDATE_SKIN, this.onUpdateSkin, this);
};

TaskController.prototype.onExit = function () {
    //game.eventDispatcher.removeEventListener(EventsName.UPDATE_SKIN, this.onUpdateSkin, this);
    BaseCCBController.prototype.onExit.call(this);
};

TaskController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);
    this.lblTitle.setString(_("task_title"));

    this.configs = ConfigMan.getInstance().getTaskList();
    this.showTableView();
};

TaskController.prototype.onUpdateSkin = function (event) {
    this.showTableView();
};

TaskController.prototype.showTableView = function () {
    if (!this._tableView) {
        var size = this.ndContainer.getContentSize();
        this._tableView = new MultiColTableView(this, size, null);
        this._tableView.setDirection(cc.SCROLLVIEW_DIRECTION_VERTICAL);
        this._tableView.setVerticalFillOrder(cc.TABLEVIEW_FILL_TOPDOWN);
        this._tableView.setMultiTableViewDelegate(this);
        this._tableView.ignoreAnchorPointForPosition(false);
        this._tableView.setAnchorPoint(cc.p(0, 0));
        this.ndContainer.addChild(this._tableView);
    } else {
        this._offset = this._tableView.getContentOffset();
    }
    this._tableView.reloadData();
    if (this._offset) {
        this._tableView.setContentOffset(this._offset);
        this._offset = null;
    }
};

TaskController.prototype.scrollViewDidScroll = function (view) {
};

TaskController.prototype.scrollViewDidZoom = function (view) {
};

TaskController.prototype.gridAtIndex = function(multiTable,  idx) {
    var cell = multiTable.dequeueGrid();
    if (!cell) {
        cell = new StoreItemCellView();
    }

    if (idx < this.configs.length) {
        var skinCfg = this.configs[idx];
        cell.initWith(skinCfg, idx);
        cell.visible = true;
    } else {
        cell.visible = false;
    }

    return cell;
};

TaskController.prototype.numberOfCellsInTableView = function(multiTable) {
    var gridsInCell = this.numberOfGridsInCell(multiTable);
    return Math.ceil(this.configs.length / gridsInCell);
};

TaskController.prototype.numberOfGridsInCell = function(multiTable, colIdx) {
    return 2;
};

TaskController.prototype.gridSizeForTable = function(table, colIdx) {
    return cc.size(270, 220);
};

TaskController.prototype.gridTouched = function(table, grid) {
};

TaskController.prototype.backClicked = function (sender) {
    AudioHelper.playBtnSound();

    this.close();
};

TaskController.prototype.popup = function () {
    game.dialogManager.popup(this.rootNode, {popupAnim: true});
};

TaskController.prototype.close = function () {
    game.dialogManager.close(this.rootNode);
};

TaskController.prototype.onExit = function () {
    //if (this.closeCallback) {
    //    this.closeCallback();
    //    this.closeCallback = null;
    //}
};

TaskController.createFromCCB = function() {
    var node = game.utils.loadNodeFromCCB("res/menu/task_view.ccbi", null, "TaskController", new TaskController());
    return node;
};

module.exports = TaskController;
},{"../../common/ext/MultiColTableView":13,"../config/ConfigMan":40,"../events/EventsName":115,"./TaskItemController":85}],85:[function(require,module,exports){
var SkinRewardType = require("../enum/SkinRewardType");
var EventsName = require("../events/EventsName");
var BoostType = require("../enum/BoostType");
var StoreHelper = require("../model/StoreHelper");

var TaskItemController = function () {
    BaseCCBController.call(this);

    this.lblGoal = null;
    this.lblGoalInfo = null;
    //this.spSkin = null;
    this.spBgSelected = null;

    this.lblSelect = null;
    this.btnSelect = null;
    this.ndSelect = null;

    this.lblDiamonds = null;

    //this.lblUsing = null;

    this.idx = 0;
    this.taskCfg = null;
};

game.utils.inherits(TaskItemController, BaseCCBController);

TaskItemController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);
};
/**
 * @param {TaskConfig} data
 * @param {number} idx
 */
TaskItemController.prototype.initWith = function (data, idx) {
    this.idx = idx;
    this.taskCfg = data;
    this.refresh();
};

TaskItemController.prototype.refresh = function () {
    var data = this.taskCfg;
    var completed = false;
    switch (data.type) {
        case SkinRewardType.None:
            this.lblGoal.visible = false;
            this.lblGoalInfo.visible = false;
            completed = true;
            break;
        case SkinRewardType.LevelCount:
            this.lblGoal.visible = true;
            this.lblGoalInfo.visible = true;
            this.lblGoal.setString(game.utils.sprintf(game.local.getValue("level_count_title"), data.count));
            if (game.playerMan.getLevel() >= data.count) {
                this.lblGoalInfo.setString(game.local.getValue("completed_title"));
                completed = true;
            } else {
                this.lblGoalInfo.setString(game.utils.sprintf("%d/%d", game.playerMan.getLevel(), data.count));
            }
            break;
        case SkinRewardType.WatchAdCount:
            this.lblGoal.visible = true;
            this.lblGoalInfo.visible = true;
            this.lblGoal.setString(game.utils.sprintf(game.local.getValue("watch_ad_count_title"), data.count));
            if (game.playerMan.player.interstitialAdCount >= data.count) {
                this.lblGoalInfo.setString(game.local.getValue("completed_title"));
                completed = true;
            } else {
                this.lblGoalInfo.setString(game.utils.sprintf("%d/%d", game.playerMan.player.interstitialAdCount, data.count));
            }
            break;
        case SkinRewardType.WatchRewardAdCount:
            this.lblGoal.visible = true;
            this.lblGoalInfo.visible = true;
            this.lblGoal.setString(game.utils.sprintf(game.local.getValue("watch_reward_ad_count_title"), data.count));
            if (game.playerMan.player.rewardedAdCount >= data.count) {
                this.lblGoalInfo.setString(game.local.getValue("completed_title"));
                completed = true;
            } else {
                this.lblGoalInfo.setString(game.utils.sprintf("%d/%d", game.playerMan.player.rewardedAdCount, data.count));
            }
            break;
        case SkinRewardType.Claimed:
            if (game.playerMan.hasSkin(data.id)) {
                this.lblGoal.visible = false;
                this.lblGoalInfo.visible = false;
                completed = true;
            } else {
                this.lblGoal.setString(_("skin_gift_title"));
                this.lblGoalInfo.setString("--");
            }
            break;
        case SkinRewardType.Purchase:
            if (game.playerMan.hasSkin(data.id)) {
                this.lblGoal.visible = false;
                this.lblGoalInfo.visible = false;
                completed = true;
            } else {
                this.lblGoal.setString(_("skin_purchase_title"));
                this.lblGoalInfo.setString("--");
            }
            break;
    }

    this.lblDiamonds.setString("x" + data.rewardCount);

    //var spriteFrame = cc.spriteFrameCache.getSpriteFrame(data.image + ".png");
    //this.spSkin.setSpriteFrame(spriteFrame);
    //this.lblUsing.setString(_("selected_title"));

    //this.lblUsing.visible = false;
    //this.ndSelect.visible = false;
    this.btnSelect.enabled = false;

    var claimed = game.playerMan.isTaskClaimed(this.taskCfg.id);
    this.ndSelect.visible = true;

    if (completed) {
        if (!claimed) {
            this.btnSelect.enabled = true;
            this.lblSelect.setString(game.local.getValue("claim_title"));
        } else {
            this.lblSelect.setString(game.local.getValue("claimed_title"));
        }
    } else {
        this.lblSelect.setString(_("uncompleted_title"));
    }
};

TaskItemController.prototype.getContentSize = function () {
    return this.spBgSelected.getContentSize();
};

TaskItemController.prototype.selectClicked = function () {
    AudioHelper.playBtnSound();
    cc.log("task claimed:" + game.playerMan.isTaskClaimed(this.taskCfg.id));
    if (!game.playerMan.isTaskClaimed(this.taskCfg.id)) {
        cc.log("task set claimed:" + this.taskCfg.id);
        game.playerMan.setTaskClaimed(this.taskCfg.id);
        var rewardCount = this.taskCfg.rewardCount;
        StoreHelper.getInstance().popupRewardDoubleDlg(rewardCount, BoostType.DIAMOND,  game.utils.isIOS() ? "tasks" : "tasks", function () {
        }.bind(this));
        this.refresh();
        game.eventDispatcher.dispatchEvent(EventsName.TASK_UPDATE);
    }
};

TaskItemController.createFromCCB = function() {
    return game.utils.loadNodeFromCCB("res/menu/task_item_view.ccbi", null, "TaskItemController", new TaskItemController());
};

module.exports = TaskItemController;
},{"../enum/BoostType":103,"../enum/SkinRewardType":111,"../events/EventsName":115,"../model/StoreHelper":121}],86:[function(require,module,exports){
/**
 * Created by qinning on 2017/12/15.
 */
var EventsName = require("../events/EventsName");

var ColorList = [
    cc.color(255, 106, 107),
    cc.color(90, 181, 110),
    cc.color(83, 183, 209),
    cc.color(243, 77, 151),
    cc.color(153, 95, 206),
    cc.color(57, 103, 249),
    cc.color(249, 112, 49),
    cc.color(232, 59, 20),
    cc.color(84, 235, 43),
    cc.color(50, 84, 117),
    cc.color(127, 127, 127)
];


var TitleController = function () {
    BaseCCBController.call(this);
    this.lbCoins = null;

    this.spCoinsAdd = null;
    this.btnAdd = null;

    this.bgNode = null;
};

game.utils.inherits(TitleController, BaseCCBController);

TitleController.prototype.onEnter = function () {
    game.eventDispatcher.addEventListener(EventsName.COINS_UPDATE, this.refresh, this);
};

TitleController.prototype.onExit = function () {
    game.eventDispatcher.removeEventListener(EventsName.COINS_UPDATE, this.refresh, this);
};

TitleController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);
    this.refresh();
    this.randomSquares();

    if (TitleController.time > 0) {
        game.utils.playCCBAnimation(this.rootNode, "Default Timeline");
    }
    TitleController.time ++;
};

TitleController.prototype.randomSquares = function () {
    for (var i = 0; i < 20; ++i) {
        var square = new cc.Sprite("#square_circle.png");

        square.setPosition(this.getRandomPos());
        square.setColor(ColorList[game.utils.randomNextInt(ColorList.length - 1)]);
        square.setOpacity(15);
        square.setScale(1.4);

        var pos1 = this.getRandomPos();
        square.setPosition(pos1);
        var pos2 = this.getRandomPos();
        var t = this.getTime(pos1, pos2);
        var moveTo1 = cc.moveTo(t, pos2);
        var moveTo2 = cc.moveTo(t, pos1);
        var action = cc.sequence(moveTo1, moveTo2).repeatForever();
        square.runAction(action);
        square.runAction(cc.rotateBy(20, 360).repeatForever());
        this.bgNode.addChild(square);
    }
};

TitleController.prototype.getTime = function (pos1, pos2) {
    return cc.pDistance(pos1, pos2) / 20;
};

TitleController.prototype.getRandomPos = function () {
    return cc.p(game.utils.randomNextInt(cc.winSize.width * 1.5) - cc.winSize.width * 0.25,
        game.utils.randomNextInt(cc.winSize.height * 1.5) - cc.winSize.height * 0.25);
};

TitleController.prototype.initWith = function (replayCallback, nextCallback) {
    this._replayCallback = replayCallback;
    this._nextCallback = nextCallback;
};

TitleController.prototype.refresh = function () {
    this.lbCoins.setString(game.playerMan.player.coins);
};

TitleController.prototype.disableAddCoins = function () {
    this.spCoinsAdd.visible = false;
    this.btnAdd.enabled = false;
    game.utils.playCCBAnimation(this.rootNode, "none");
};

TitleController.prototype.storeClicked = function (sender) {
    AudioHelper.playBtnSound();
    game.popupMan.popupStoreDlg();
};

TitleController.createFromCCB = function() {
    var node = game.utils.loadNodeFromCCB("res/menu/title_view.ccbi", null, "TitleController", new TitleController());
    return node;
};

TitleController.time = 0;

module.exports = TitleController;
},{"../events/EventsName":115}],87:[function(require,module,exports){
var StoreHelper = require("../model/StoreHelper");

var WatchAdsGet3StarController = function () {
    BaseCCBController.call(this);

    //this.btnCloseCn = null;
    //this.btnCloseEn = null;

    this.spYellow1 = null;
    this.spYellow2 = null;
    this.spYellow3 = null;

    this.spBlack1 = null;
    this.spBlack2 = null;
    this.spBlack3 = null;

    this.lbCollectTips = null;

    this.closeCallback = null;
    this.rewardName = null;
    this.watched = false;
};

game.utils.inherits(WatchAdsGet3StarController, BaseCCBController);

WatchAdsGet3StarController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);
    //this.btnCloseCn.visible = false;
    //this.btnCloseEn.visible = false;
    //if (game.local.isChinese()) {
    //    this.btnCloseCn.visible = true;
    //} else {
    //    this.btnCloseEn.visible = true;
    //}
    //game.audioPlayer.playEffectByKey("open_box");

    this.lbCollectTips.setAlignment(cc.TEXT_ALIGNMENT_CENTER);

    this.spYellows = [this.spYellow1, this.spYellow2, this.spYellow3];

    var star = game.gameMan.currentStar;
    for (var i = 0; i < 3; ++i) {
        this.spYellows[i].visible = (star >= i + 1);
    }
};

WatchAdsGet3StarController.prototype.initWith = function (rewardName, closeCallback) {
    this.closeCallback = closeCallback;
    this.rewardName = rewardName;
};

WatchAdsGet3StarController.prototype.closeClicked = function (sender) {
    AudioHelper.playBtnSound();
    this.close();
};

WatchAdsGet3StarController.prototype.watchAdsClicked = function (sender) {
    AudioHelper.playBtnSound();
    StoreHelper.getInstance().checkAndShowRewardVideo(this.rewardName, function (watched) {
        if (watched) {
            this.watched = true;
            this.close();
        }
    }.bind(this));
};

WatchAdsGet3StarController.prototype.popup = function () {
    game.dialogManager.popup(this.rootNode, {popupAnim: true});
};

WatchAdsGet3StarController.prototype.close = function () {
    game.dialogManager.close(this.rootNode);
    if (this.closeCallback) {
        this.closeCallback(this.watched);
        this.closeCallback = null;
    }
};

WatchAdsGet3StarController.createFromCCB = function() {
    var node = game.utils.loadNodeFromCCB("res/notice/watch_ads_get_3star_view.ccbi", null, "WatchAdsGet3StarController", new WatchAdsGet3StarController());
    return node;
};

module.exports = WatchAdsGet3StarController;
},{"../model/StoreHelper":121}],88:[function(require,module,exports){
var StoreHelper = require("../model/StoreHelper");

var WatchAdsGetDiamondsController = function () {
    BaseCCBController.call(this);

    //this.btnCloseCn = null;
    //this.btnCloseEn = null;

    //this.spItem = null;
    //this.lbBtnTitle = null;
    this.spDiamondBg = null;

    this.lbDiamondsCount = null;

    this.closeCallback = null;
    this.rewardName = null;
    this.watched = false;
};

game.utils.inherits(WatchAdsGetDiamondsController, BaseCCBController);

WatchAdsGetDiamondsController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);
    //this.btnCloseCn.visible = false;
    //this.btnCloseEn.visible = false;
    //if (game.local.isChinese()) {
    //    this.btnCloseCn.visible = true;
    //} else {
    //    this.btnCloseEn.visible = true;
    //}
    this.spDiamondBg.runAction(cc.rotateBy(3, 360).repeatForever());
    game.audioPlayer.playEffectByKey("open_box");
};

WatchAdsGetDiamondsController.prototype.initWith = function (rewardName, closeCallback) {
    this.closeCallback = closeCallback;
    this.rewardName = rewardName;
    this.lbDiamondsCount.setString("x" + game.config.dailyDiamonds);
};

WatchAdsGetDiamondsController.prototype.closeClicked = function (sender) {
    AudioHelper.playBtnSound();
    this.close();
};

WatchAdsGetDiamondsController.prototype.watchAdsClicked = function (sender) {
    AudioHelper.playBtnSound();
    StoreHelper.getInstance().checkAndShowRewardVideo(this.rewardName, function (watched) {
        if (watched) {
            this.watched = true;
            this.close();
        }
    }.bind(this));
};

WatchAdsGetDiamondsController.prototype.popup = function () {
    game.dialogManager.popup(this.rootNode, {overlayOpacity: 225, popupAnim: true});
};

WatchAdsGetDiamondsController.prototype.close = function () {
    game.dialogManager.close(this.rootNode);
    if (this.closeCallback) {
        this.closeCallback(this.watched);
        this.closeCallback = null;
    }
};

WatchAdsGetDiamondsController.createFromCCB = function() {
    var node = game.utils.loadNodeFromCCB("res/notice/watch_ads_get_diamonds_view.ccbi", null, "WatchAdsGetDiamondsController", new WatchAdsGetDiamondsController());
    return node;
};

module.exports = WatchAdsGetDiamondsController;
},{"../model/StoreHelper":121}],89:[function(require,module,exports){
var StoreHelper = require("../model/StoreHelper");

var WatchAdsGetItemController = function () {
    BaseCCBController.call(this);

    //this.btnCloseCn = null;
    //this.btnCloseEn = null;

    this.spItem = null;
    this.lbBtnTitle = null;

    this.closeCallback = null;
    this.rewardName = null;
    this.watched = false;
};

game.utils.inherits(WatchAdsGetItemController, BaseCCBController);

WatchAdsGetItemController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);
    //this.btnCloseCn.visible = false;
    //this.btnCloseEn.visible = false;
    //if (game.local.isChinese()) {
    //    this.btnCloseCn.visible = true;
    //} else {
    //    this.btnCloseEn.visible = true;
    //}
    game.audioPlayer.playEffectByKey("open_box");
};

WatchAdsGetItemController.prototype.initWith = function (title, spriteName, rewardName, closeCallback) {
    this.closeCallback = closeCallback;
    this.rewardName = rewardName;
    this.lbBtnTitle.setString(title);
    var spriteFrame = cc.spriteFrameCache.getSpriteFrame(spriteName);
    if (spriteFrame) {
        this.spItem.setSpriteFrame(spriteFrame);
    } else {
        cc.error("sprite frame is null:" + spriteName);
    }
};

WatchAdsGetItemController.prototype.closeClicked = function (sender) {
    AudioHelper.playBtnSound();
    this.close();
};

WatchAdsGetItemController.prototype.watchAdsItemClicked = function (sender) {
    this.watchAdsClicked(sender);
};

WatchAdsGetItemController.prototype.watchAdsClicked = function (sender) {
    AudioHelper.playBtnSound();
    StoreHelper.getInstance().checkAndShowRewardVideo(this.rewardName, function (watched) {
        if (watched) {
            this.watched = true;
            this.close();
        }
    }.bind(this));
};

WatchAdsGetItemController.prototype.popup = function () {
    game.dialogManager.popup(this.rootNode, {overlayOpacity: 225, popupAnim: true});
};

WatchAdsGetItemController.prototype.close = function () {
    game.dialogManager.close(this.rootNode);
    if (this.closeCallback) {
        this.closeCallback(this.watched);
        this.closeCallback = null;
    }
};

WatchAdsGetItemController.createFromCCB = function() {
    var node = game.utils.loadNodeFromCCB("res/notice/watch_ads_get_item_view.ccbi", null, "WatchAdsGetItemController", new WatchAdsGetItemController());
    return node;
};

module.exports = WatchAdsGetItemController;
},{"../model/StoreHelper":121}],90:[function(require,module,exports){
var StoreHelper = require("../model/StoreHelper");

var WatchAdsGetSkinController = function () {
    BaseCCBController.call(this);

    //this.btnCloseCn = null;
    //this.btnCloseEn = null;

    this.spSkin = null;
    this.lbGetSkin = null;

    this.closeCallback = null;
    this.skinCfg = null;
};

game.utils.inherits(WatchAdsGetSkinController, BaseCCBController);

WatchAdsGetSkinController.prototype.onDidLoadFromCCB  = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);
    //this.btnCloseCn.visible = false;
    //this.btnCloseEn.visible = false;
    //if (game.local.isChinese()) {.btnCloseCn
    //    this.btnCloseCn.visible = true;
    //} else {
    //    this.btnCloseEn.visible = true;
    //}
    this.lbGetSkin.setString(_("reward_video_skin"));

    game.audioPlayer.playEffectByKey("open_box");
};

WatchAdsGetSkinController.prototype.initWith = function (skinCfg) {
    this.skinCfg = skinCfg;
    var spriteFrame = cc.spriteFrameCache.getSpriteFrame(skinCfg.image + "_l.png");
    this.spSkin.setSpriteFrame(spriteFrame);
};

WatchAdsGetSkinController.prototype.closeClicked = function (sender) {
    AudioHelper.playBtnSound();
    this.close();
};

WatchAdsGetSkinController.prototype.watchAdsClicked = function (sender) {
    AudioHelper.playBtnSound();
    StoreHelper.getInstance().buySkin(this.skinCfg, "buy_skin_in_pass", function (purchased) {
        if (purchased) {
            this.close();
        }
    }.bind(this));
};

WatchAdsGetSkinController.prototype.popup = function () {
    game.dialogManager.popup(this.rootNode, {overlayOpacity: 225, popupAnim: true});
};

WatchAdsGetSkinController.prototype.close = function () {
    game.dialogManager.close(this.rootNode);
    if (this.closeCallback) {
        this.closeCallback();
        this.closeCallback = null;
    }
};

WatchAdsGetSkinController.createFromCCB = function() {
    var node = game.utils.loadNodeFromCCB("res/notice/watch_ads_get_skin_view.ccbi", null, "WatchAdsGetSkinController", new WatchAdsGetSkinController());
    return node;
};

module.exports = WatchAdsGetSkinController;
},{"../model/StoreHelper":121}],91:[function(require,module,exports){
var Wheel = require("../../common/wheel/Wheel");
var ConfigMan = require("../config/ConfigMan");
var BoostType = require("../enum/BoostType");
var StoreHelper = require("../model/StoreHelper");
var GameMan = require("../model/GameMan");
var WheelType = require("../enum/WheelType");

var WheelController = function () {
    BaseCCBController.call(this);
    this.WHEEL_TIME = 5;
    //this.WHEEL_ITEM_ANGLE = 90;

    this.WHEEL_ICON_TAG = 100;
    this.WHEEL_NUM_TAG = 200;

    this.WHEEL_COUNT = 6;

    this.WHEEL_ITEM_ANGLE = 360 / this.WHEEL_COUNT;

    this.ndWheel = null;
    //this.lblLeft = null;
    //this.lblRight = null;
    this.btnLeft = null;
    this.btnRight = null;

    this.ndDailyWheel = null;
    this.ndBox = null;

    this.btnSpinAgain = null;

    this.btnClose = null;

    //this.lblLeftTips = null;
    this.lblRightTips = null;

    this.spTitleCn = null;
    this.spTitleEn = null;

    /**
     * @type {Wheel}
     */
    this.wheel = null;

    this.wheelIcons = null;
    this.wheelNums = null;

    this.wheelList = null;
};

game.utils.inherits(WheelController, BaseCCBController);

WheelController.prototype.onEnter = function () {
    BaseCCBController.prototype.onEnter.call(this);
    this.intervalKey = setInterval(this.onUpdate.bind(this), 1000);
};

WheelController.prototype.onExit = function () {
    clearInterval(this.intervalKey);
    BaseCCBController.prototype.onExit.call(this);
};

WheelController.prototype.onDidLoadFromCCB = function() {
    BaseCCBController.prototype.onDidLoadFromCCB.call(this);

    //this.btnCloseCn.visible = false;
    //this.btnCloseEn.visible = false;
    this.spTitleCn.visible = false;
    this.spTitleEn.visible = false;
    if (game.local.isChinese()) {
        //this.btnCloseCn.visible = true;
        this.spTitleCn.visible = true;
    } else {
        //this.btnCloseEn.visible = true;
        this.spTitleEn.visible = true;
    }

    this.wheelIcons = [];
    this.wheelNums = [];
    for (var i = 0; i < this.WHEEL_COUNT; ++i) {
        var wheelIcon = game.utils.seekNodeByTag(this.ndWheel, this.WHEEL_ICON_TAG + i);
        var wheelNum = game.utils.seekNodeByTag(this.ndWheel, this.WHEEL_NUM_TAG + i);
        this.wheelIcons.push(wheelIcon);
        this.wheelNums.push(wheelNum);
    }

};

WheelController.prototype.initWith = function (wheelType) {
    this.wheelType = wheelType;
    this.ndBox.visible = false;
    this.ndDailyWheel.visible = false;
    switch (wheelType) {
        case WheelType.DailyBonus:
            this.ndDailyWheel.visible = true;
            this.wheelList = ConfigMan.getInstance().getWheelList();
            break;
        case WheelType.Box:
            this.ndBox.visible = true;
            this.wheelList = ConfigMan.getInstance().getBoxWheelList();
            break;
    }

    this.initWheelUI();
    this.updateWheelItems();
    this.wheel = new Wheel(this.ndWheel, game.utils.getCurrentFPS());
    if (wheelType === WheelType.Box) {
        this.startWheel();
    }
};

WheelController.prototype.initWheelUI = function () {
    var wheels = this.wheelList;
    for (var i = 0; i < wheels.length; ++i) {
        var wheelIcon = this.wheelIcons[i];
        var wheelNum = this.wheelNums[i];
        wheelIcon.setSpriteFrame(wheels[i].image);
        wheelNum.setString("x" + wheels[i].count);
        wheelIcon.scale *= wheels[i].scale;
    }
};

WheelController.prototype.isShowRewardedVideo = function () {
    return game.adsManager.isRewardVideoReady();
};

WheelController.prototype.onUpdate = function () {
    this.updateWheelItems();
};

WheelController.prototype.isFreeWheel = function () {
    var leftTime = GameMan.getInstance().getWheelLeftTime();
    if (leftTime <= 0) {
        return true;
    }
    return false;
};

WheelController.prototype.getLeftHour = function () {
    var leftTime = GameMan.getInstance().getWheelLeftTime();
    return Math.ceil(leftTime / (60 * 60 * 1000));
};

WheelController.prototype.updateWheelItems = function () {
    //this.lblLeft.setString(_("wheel_reward_video_btn"));
    //this.lblLeftTips.setString(_("wheel_reward_video_tips"));

    //this.lblRight.setString(_("wheel_free_btn"));
    var freeWheel = this.isFreeWheel();
    this.btnRight.enabled = freeWheel;
    if (freeWheel) {
        this.lblRightTips.setString("");
    } else {
        this.lblRightTips.setString(game.utils.sprintf(_("wheel_free_tips"), this.getLeftHour()));
    }
};

WheelController.prototype.getRandomWheel = function () {
    var wheels = this.wheelList;
    var randomNum = game.utils.randomNextInt(100);
    console.log("randomNum:" + randomNum);
    var sumProbability = 0;
    for (var i = 0; i < wheels.length; ++i) {
        if (sumProbability + wheels[i].probability > randomNum) {
            return wheels[i];
        } else {
            sumProbability += wheels[i].probability;
        }
    }
    return null;
};

WheelController.prototype.startWheel = function () {
    this.wheelConfig = this.getRandomWheel();
    var wheelId = this.wheelConfig.id;
    console.log("random wheel id:" + wheelId);
    this.wheel.rotate(this.WHEEL_TIME, 360 * 3 + (wheelId - 1) * this.WHEEL_ITEM_ANGLE, this.WHEEL_ITEM_ANGLE, this.onRotateEnd.bind(this));
    this.btnClose.enabled = false;
    this.wheelInterval = setInterval(function () {
        game.audioPlayer.playEffectByKey("wheel_pin");
    }, 100);
    game.audioPlayer.playMusicByKey("wheel_bg");
};

WheelController.prototype.onRotateEnd = function () {
    clearInterval(this.wheelInterval);
    game.audioPlayer.stopMusic();
    game.audioPlayer.playEffectByKey("wheel_stop");
    setTimeout(this.onShowReward.bind(this), 1000);
};

WheelController.prototype.onShowReward = function () {
    var wheel = this.wheelConfig;
    StoreHelper.getInstance().popupRewardDoubleDlg(wheel.count, wheel.type, game.utils.isIOS() ? "zhuanpan02" : "jili02", function () {
        this.btnClose.enabled = true;
        this.updateWheelItems();
    }.bind(this));
};

WheelController.prototype.leftClicked = function () {
    AudioHelper.playBtnSound();
    var self = this;
    if (this.isShowRewardedVideo()) {
        StoreHelper.getInstance().checkAndShowRewardVideo(game.utils.isIOS() ? "zhuanpan01" : "jili01", function (rewarded) {
            if (rewarded) {
                self.startWheel();
            }
            self.updateWheelItems();
        });
    }
};

WheelController.prototype.spinAgainClicked = function () {
    AudioHelper.playBtnSound();
    var self = this;
    if (this.isShowRewardedVideo()) {
        StoreHelper.getInstance().checkAndShowRewardVideo("spin_again", function (rewarded) {
            if (rewarded) {
                self.startWheel();
            }
            self.updateWheelItems();
        });
    }
};

WheelController.prototype.rightClicked = function () {
    AudioHelper.playBtnSound();
    game.playerMan.setLastWheelTime(Date.now());
    this.updateWheelItems();
    this.btnRight.enabled = false;
    this.startWheel();
};

WheelController.prototype.closeClicked = function () {
    AudioHelper.playBtnSound();
    this.close();
};

WheelController.prototype.popup = function () {
    game.dialogManager.popup(this.rootNode, {popupAnim: true});
};

WheelController.prototype.close = function () {
    game.dialogManager.close(this.rootNode);
};

WheelController.createFromCCB = function() {
    //var ccbiName = game.utils.isSelfGame() ? "res/wheel/wheel_view.ccbi" : "res/wheel/wheel_view_new.ccbi";
    var ccbiName = "res/wheel/wheel_view.ccbi";
    var node = game.utils.loadNodeFromCCB(ccbiName, null, "WheelController", new WheelController());
    return node;
};

module.exports = WheelController;
},{"../../common/wheel/Wheel":36,"../config/ConfigMan":40,"../enum/BoostType":103,"../enum/WheelType":114,"../model/GameMan":116,"../model/StoreHelper":121}],92:[function(require,module,exports){
/**
 * Created by qinning on 2017/12/2.
 */

var Grid = cc.LayerColor.extend({

    col: 0,
    row: 0,

    editing: false,
    used: false,

    ctor: function (color, width, height, col, row) {
        this._super(color, width, height);
        this.ignoreAnchor = false;
        //this.type = type;
        this.col = col;
        this.row = row;
    },

    setColor: function (color) {
        this._super(color);
    }
});

module.exports = Grid;
},{}],93:[function(require,module,exports){
var ConfigMan = require("../../config/ConfigMan");
var PlayerMan = require("../../model/PlayerMan");
var LevelConfig = require("../../config/LevelConfig");
//var AdsReminderController = require("../../controller/AdsReminderController");

var ColorConfigs = [
    cc.color(252, 178, 0),
    cc.color(81, 229, 12),
    cc.color(27, 226, 255),
    cc.color(255, 252, 29),
    cc.color(255, 56, 56),
    cc.color(248, 70, 255),
    cc.color(255, 129, 17),
    cc.color(57, 103, 249),
    cc.color(90, 181, 110),

    cc.color(255, 90, 141),
    cc.color(242, 86, 9),
    cc.color(66, 46, 176),
    cc.color(144, 85, 222),
    cc.color(23, 167, 104),
    cc.color(176, 72, 206),
    cc.color(147, 192, 26),
    cc.color(55, 70, 219)
];

var GridType = {
    None: 0,
    Grid: 1,
    Wall: 2
}

var GrayColor = cc.color.GRAY;
var LightGrayColor = cc.color(130, 130, 130);
var StatusList = ["brick", "obstacle", "delete"];

var EditorScene = cc.Scene.extend({

    CONTENT_WIDTH: 600,
    CONTENT_HEIGHT: 600,

    COL: 50,
    ROW: 50,

    GRID_WIDTH: 9,
    GRID_HEIGHT: 9,

    GAP_WIDTH: 3,
    GAP_HEIGHT: 3,

    brickRects: null,

    obstacleRects: null,

    //_isBrick: true,
    _status: "brick",

    _brickItem: null,

    _levelEditBox: null,

    ctor: function () {
        game.playerMan = PlayerMan.getInstance();
        game.playerMan.initData();

        game.playerMan.setBoost(2, 400);
        game.playerMan.setBoost(3, 400);

        //var LogicMan = require("../../../common/model/LogicMan");
        //LogicMan.getInstance().startGame(true);
        //cc.BuilderReader.registerController("AdsReminderController", new AdsReminderController());

        this._super();

        var scale = 1.5;
        this.xOffset = (cc.winSize.width - this.CONTENT_WIDTH * scale) * 0.5;
        this.yOffset = (cc.winSize.height - this.CONTENT_HEIGHT * scale) * 0.5;

        this.brickRects = [];
        this.obstacleRects = [];

        this.currentRects = this.brickRects;
        this.selectColor = ColorConfigs[0];
        this.selectColorIndex = 0;

        this.gridNode = new cc.Node();
        this.addChild(this.gridNode);
        this.gridNode.x = this.xOffset;
        this.gridNode.y = this.yOffset;
        this.gridNode.scale = scale;

        this.initGrids();
        this.initButtons();
        this.initColorButtons();
        this.initEditBox();

        if (game.gameMan.levelCfg) {
            this.loadConfig(game.gameMan.levelCfg.originalConfig);
        }
    },

    initEditBox: function () {
        var xOffset = 200;
        this._levelEditBox = this.createEditBox("", "Input LevelId", cc.p(cc.winSize.width * 0.5 - xOffset, 100));
        this._boostEditBox = this.createEditBox("1", "Input Boost Probability", cc.p(cc.winSize.width * 0.5, 100));
        this._star3EditBox = this.createEditBox("90", "Input 3Star Time", cc.p(cc.winSize.width * 0.5 + xOffset, 100));
    },

    createEditBox: function (content, placeHolder, position) {
        var editBox = new cc.EditBox(cc.size(270, 100), new cc.Scale9Sprite("res/common/blank.png"),
            new cc.Scale9Sprite("res/common/blank.png"));
        editBox.setString(content);
        editBox.setPosition(position);
        editBox.setFontColor(cc.color(255, 255, 255));
        //editBox.setHintCo
        editBox.setPlaceholderFontColor(cc.color(255, 0, 0));
        editBox.setPlaceHolder(placeHolder);
        editBox.setDelegate(this);
        this.addChild(editBox);
        return editBox;
    },

    initButtons: function () {
        // Bugs Item
        var brickItem = new cc.MenuItemFont("Brick", this.onBrickTypeChange, this);
        var saveItem = new cc.MenuItemFont("Save", this.onSave, this);
        var deleteItem = new cc.MenuItemFont("Back", this.onDelete, this);
        //var refreshItem = new cc.MenuItemFont("Refresh", this.onRefresh, this);
        var addItem = new cc.MenuItemFont("Add", this.onAdd, this);
        var reduceItem = new cc.MenuItemFont("Reduce", this.onReduce, this);
        var loadItem = new cc.MenuItemFont("Load", this.onLoad, this);
        var previewItem = new cc.MenuItemFont("Preview", this.onPreview, this);
        var duplicateItem = new cc.MenuItemFont("Duplicate", this.onDuplicateCheck, this);
        var reachItem = new cc.MenuItemFont("Reach", this.onReachTest, this);
        var menu = new cc.Menu(brickItem, saveItem, deleteItem, addItem, reduceItem, loadItem, previewItem, duplicateItem, reachItem);


        menu.alignItemsHorizontally();
        this.addChild(menu);
        menu.setPosition(cc.p(cc.winSize.width * 0.5, cc.winSize.height - 20));
        this._brickItem = brickItem;

        this._gridLabel = new cc.LabelTTF("", "Arial", 40);
        this.addChild(this._gridLabel);

        this._gridLabel.setAnchorPoint(cc.p(0, 0.5));

        this._gridLabel.setPosition(cc.p(100, cc.winSize.height - 80));

        this._gridLabel.setString(this.COL + "x" + this.ROW);
    },

    initColorButtons: function () {

        var items = [];
        for (var i = 0; i < ColorConfigs.length; ++i) {
            var colorItem = new cc.MenuItemFont(" O ", this.onSelectColor, this);
            colorItem.setColor(ColorConfigs[i]);
            colorItem.setTag(i);
            items.push(colorItem);
        }
        var menu = new cc.Menu(items.slice(0, items.length / 2 + 1));
        menu.alignItemsHorizontally();
        menu.setPosition(cc.p(cc.winSize.width * 0.5, cc.winSize.height - 55));
        this.addChild(menu);

        var bottomMenu = new cc.Menu(items.slice(items.length / 2 + 1));
        bottomMenu.alignItemsHorizontally();
        bottomMenu.setPosition(cc.p(cc.winSize.width * 0.5, cc.winSize.height - 90));
        this.addChild(bottomMenu);
    },

    onLoad: function (sender) {
        var levelString = this._levelEditBox.getString();
        var levelId = parseInt(levelString);
        if (isNaN(levelId)) {
            alert("level id not found:" + levelString);
        } else {
            var levelConfig = ConfigMan.getInstance().getOriginalLevelConfig(levelId);
            if (!levelConfig) {
                alert("level id not found:" + levelString);
            } else {
                this.loadConfig(levelConfig);
            }
        }
    },

    onPreview: function (sender) {
        var obj = this.generateLevelObj();
        var levelConfig = new LevelConfig();
        levelConfig.unmarshal(obj);
        levelConfig.originalConfig = obj;
        game.gameMan.levelCfg = levelConfig;
        game.gameMan.status = this._status;
        //var scene = new GameScene();
        var GameScene = require("./GameScene");
        //cc.winSize.width = cc.winSize.height * 0.5;
        cc.director.runScene(new GameScene());
    },

    onDuplicateCheck: function (sender) {
        var originalLevelList = ConfigMan.getInstance().originalLevelList;
        var foundDuplicate = false;
        for (var i = 0; i < originalLevelList.length - 1; ++i) {
            for (var j = i + 1; j < originalLevelList.length; ++j) {
                var levelCfg1 = originalLevelList[i];
                var levelCfg2 = originalLevelList[j];
                if (this.isEqualLevelCfgs(levelCfg1, levelCfg2)) {
                    alert("found duplicate level:" + (i + 1) + " and " + (j + 1));
                    foundDuplicate = true;
                    break;
                }
            }
            if (foundDuplicate) {
                break;
            }
        }
        if (!foundDuplicate) {
            alert("all is ok");
        }
    },

    onReachTest: function (sender) {
        var levelList = ConfigMan.getInstance().levelList;
        //if (this.isLevelReachable(levelList[23])) {
        //    alert("all is ok");
        //} else {
        //    alert("unreachable level");
        //}
        var findUnReachable = false;
        for (var i = 0; i < levelList.length; ++i) {
            if (!this.isLevelReachable(levelList[i])) {
                findUnReachable = true;
                alert("find unreachable level:" + (i + 1));
                break;
            }
        }
        if (!findUnReachable) {
            alert("all is ok");
        }
    },

    isLevelReachable: function (levelCfg) {
        var grids = [];
        var i, j, brickCfg, x, y;
        for (i = 0; i < levelCfg.width; ++i) {
            grids[i] = [];
            for (j = 0; j < levelCfg.height; ++j) {
                grids[i][j] = {
                    type: GridType.None,
                    find: false
                };
            }
        }
        for (i = 0; i < levelCfg.bricks.length; ++i) {
            brickCfg = levelCfg.bricks[i];
            for (x = 0; x < brickCfg.width; ++x) {
                for (y = 0; y < brickCfg.height; ++y) {
                    grids[brickCfg.x + x][brickCfg.y + y] = {
                        type: GridType.Grid,
                        find: false
                    };
                }
            }
        }
        for (i = 0; i < levelCfg.obstacles.length; ++i) {
            brickCfg = levelCfg.obstacles[i];
            for (x = 0; x < brickCfg.width; ++x) {
                for (y = 0; y < brickCfg.height; ++y) {
                    grids[brickCfg.x + x][brickCfg.y + y] = {
                        type: GridType.Wall,
                        find: false
                    };
                }
            }
        }

        var findFirstGridPoss = this.findFirstGrids(levelCfg, grids);
        if (findFirstGridPoss.length === 0) {
            return false;
        }
        for (x = 0; x < findFirstGridPoss.length; ++x) {
            var firstGridPos = findFirstGridPoss[x];
            this.searchGrid(grids, levelCfg, firstGridPos.x, firstGridPos.y);
        }
        var findGrid = false;
        for (i = 0; i < grids.length; ++i) {
            for (j = 0; j < grids[i].length; ++j) {
                if (grids[i][j].type === GridType.Grid) {
                    findGrid = true;
                    break;
                }
            }
            if (findGrid) {
                break;
            }
        }
        if (findGrid) {
            return false;
        }
        return true;
    },

    findFirstGrids: function (levelCfg, grids) {
        var i;
        var results = [];
        for (i = 0; i < levelCfg.width; ++i) {
            if (grids[i][0].type !== GridType.Wall) {
                results.push(cc.p(i, 0));
            }
        }
        return results;
    },

    searchGrid: function (grids, levelCfg, x, y) {
        if (x >= 0 && x < levelCfg.width && y >= 0 && y < levelCfg.height) {
            var grid = grids[x][y];
            if (grid.type === GridType.Wall) {
                return;
            }
            if (grid.find) {
                return;
            }
            grid.find = true;
            if (grid.type === GridType.Grid) {
                grid.type = GridType.None;
            }
            this.searchGrid(grids, levelCfg, x - 1, y);
            this.searchGrid(grids, levelCfg, x + 1, y);
            this.searchGrid(grids, levelCfg, x, y + 1);
            this.searchGrid(grids, levelCfg, x, y - 1);
        }
    },

    isEqualLevelCfgs: function (levelCfg1, levelCfg2) {
        if (JSON.stringify(levelCfg1.bricks) === JSON.stringify(levelCfg2.bricks) &&
            JSON.stringify(levelCfg1.obstacles) === JSON.stringify(levelCfg2.obstacles)) {
            return true;
        }
        return false;
    },

    generateLevelObj: function () {
        var boostProbability = Number(this._boostEditBox.getString());
        if (isNaN(boostProbability)) {
            boostProbability = 1;
        }

        var starTime = Number(this._star3EditBox.getString());
        if (isNaN(starTime)) {
            starTime = 90;
        }

        var id = parseInt(this._levelEditBox.getString());
        if (isNaN(id)) {
            id = undefined;
        }

        var obj = {
            id: id,
            b: boostProbability,
            starTime: starTime,
            pixelWidth: this.CONTENT_WIDTH,
            pixelHeight: this.CONTENT_HEIGHT,
            width: this.COL,
            height: this.ROW,
            bricks: this.brickRects,
            obstacles: this.obstacleRects
        };
        return obj;
    },

    loadConfig: function (config) {
        this.resetOldView();

        this.CONTENT_WIDTH = config.pixelWidth;
        this.CONTENT_HEIGHT = config.pixelHeight;
        this.COL = config.width;
        this.ROW = config.height;
        this.brickRects = config.bricks;
        this.obstacleRects = config.obstacles;

        //this.updateView();
        var width = this.CONTENT_WIDTH / this.COL;
        var height = this.CONTENT_HEIGHT / this.ROW;
        this.GRID_WIDTH = width * 0.75;
        this.GRID_HEIGHT = height * 0.75;
        this.GAP_WIDTH = width - this.GRID_WIDTH;
        this.GAP_HEIGHT = height - this.GRID_HEIGHT;

        this.initGrids();

        //this.brickRects = [];
        //this.obstacleRects = [];
        //this.currentRects = this.brickRects;
        //this._isBrick = true;
        //this._status = "brick";
        //this._brickItem.setString("Brick");
        if (game.gameMan.status) {
            this._status = game.gameMan.status;
        }
        this.updateBrickType();
        this._gridLabel.setString(this.COL + "x" + this.ROW);

        for (var i = 0; i < this.brickRects.length; ++i) {
            var brickRect = this.brickRects[i];
            this.markOccupiedWithRect(brickRect, ColorConfigs[brickRect[4] - 1]);
        }
        for (var i = 0; i < this.obstacleRects.length; ++i) {
            var brickRect = this.obstacleRects[i];
            this.markOccupiedWithRect(brickRect,  cc.color.WHITE);
        }
        this._levelEditBox.setString(config.id);
        this._boostEditBox.setString(config.b);
        this._star3EditBox.setString(config.starTime);
        //this.currentRects =
    },

    onSelectColor: function (sender) {
        this.selectColor = ColorConfigs[sender.getTag()];
        this.selectColorIndex = sender.getTag();
    },

    resetOldView: function () {
        this.forEachGrids(function (grid) {
            grid.removeFromParent();
        });
        this.grids = [];
    },

    updateView: function () {
        var width = this.CONTENT_WIDTH / this.COL;
        var height = this.CONTENT_HEIGHT / this.ROW;
        this.GRID_WIDTH = width * 0.75;
        this.GRID_HEIGHT = height * 0.75;
        this.GAP_WIDTH = width - this.GRID_WIDTH;
        this.GAP_HEIGHT = height - this.GRID_HEIGHT;

        this.initGrids();

        this.brickRects = [];
        this.obstacleRects = [];
        this.currentRects = this.brickRects;
        //this._isBrick = true;
        this._status = "brick";
        this._brickItem.setString("Brick");

        this._gridLabel.setString(this.COL + "x" + this.ROW);
    },

    onAdd: function () {
        this.resetOldView();
        this.COL += 4;
        this.ROW += 4;
        this.updateView();
    },

    onReduce: function () {
        this.resetOldView();
        this.COL -= 4;
        this.ROW -= 4;
        this.updateView();
    },


    onSave: function () {
        var obj = this.generateLevelObj();

        cc.log("results:" + JSON.stringify(obj));

        //alert(JSON.stringify(obj));
        var blob = new Blob([JSON.stringify(obj)]);
        var tag = document.createElement("a");
        tag.download = "level.json";
        tag.href = URL.createObjectURL(blob);
        tag.click();
        URL.revokeObjectURL(blob);
    },

    onDelete: function () {
        if (this._status !== "delete") {
            this.deleteLatestRect();
        }
    },

    onRefresh: function () {
        this.reset();
    },

    onBrickTypeChange: function () {
        this._status = StatusList[(StatusList.indexOf(this._status) + 1) % StatusList.length];
        //this._isBrick = !this._isBrick;
        this.updateBrickType();
    },

    updateBrickType: function () {
        this._brickItem.setString(this._status);
        if (this._status === "obstacle") {
            this.currentRects = this.obstacleRects;
        } else if (this._status === "brick") {
            this.currentRects = this.brickRects;
        } else {
            this.currentRects = null;
        }
    },

    initGrids: function () {
        this.grids = [];
        var Grid = require("../entity/Grid");
        for (var localCol = 0; localCol < this.COL; ++localCol) {
            this.grids.push([]);
            for (var localRow = 0; localRow < this.ROW; ++localRow) {
                var grid = new Grid(LightGrayColor, this.GRID_WIDTH, this.GRID_HEIGHT, localCol, localRow);
                this.gridNode.addChild(grid);
                grid.setPosition(this.getGridPos(localCol, localRow));
                this.grids[localCol].push(grid);
                this.markGrayHint(grid, localCol, localRow);
                grid._color = grid.color;
            }
        }
    },

    markGrayHint: function (grid, localCol, localRow) {
        var grayColor = GrayColor;
        var isLeft = (this.COL / localCol) > 2;
        var isBottom = (this.ROW / localRow) > 2;
        if (localCol === Math.floor(this.COL / 2) ||
            localCol === Math.floor(this.COL / 2) - 1 ||
            localRow === Math.floor(this.ROW / 2) ||
            localRow === Math.floor(this.ROW / 2) - 1
        ) {
            grid.setColor(grayColor);
        }

        var iii = isLeft ? 4 : 0;

        if (localCol % 5 === iii) {
            grid.setColor(grayColor);
        }

        var jjj = isBottom ? 4 : 0;

        if (localRow % 5 === jjj) {
            grid.setColor(grayColor);
        }

        //iii = isLeft ? 9 : 0;
        //jjj = isBottom ? 9 : 0;
        //
        //if (localCol % 10 === iii && localRow % 10 === jjj) {
        //    grid.setColor(cc.color.YELLOW);
        //}
    },

    reset: function () {
        for (var localCol = 0; localCol < this.COL; ++localCol) {
            for (var localRow = 0; localRow < this.ROW; ++localRow) {
                this.grids[localCol][localRow].editing = false;
                this.grids[localCol][localRow].setColor(LightGrayColor);
                this.grids[localCol][localRow].used = false;

                this.markGrayHint(this.grids[localCol][localRow], localCol, localRow);
            }
        }
        this.brickRects = [];
        this.obstacleRects = [];
        this.currentRects = this.brickRects;
        //this._isBrick = true;
        this._status = "brick";
        this._brickItem.setString("Brick");
    },

    onEnter:function () {
        this._super();
        cc.eventManager.addListener({
            event: cc.EventListener.TOUCH_ONE_BY_ONE,
            swallowTouches: true,
            onTouchBegan: this.onTouchBegan.bind(this),
            onTouchMoved: this.onTouchMoved.bind(this),
            onTouchEnded: this.onTouchEnded.bind(this),
            onTouchCancelled: this.onTouchCancelled.bind(this)
        }, this.gridNode);

        //cc.eventManager.addListener({
        //    event: cc.EventListener.KEYBOARD,
        //    onKeyReleased: function (keyCode, event) {
        //        if (keyCode === cc.KEY.backspace) {
        //            //cc.director.end();
        //            this.deleteLatestRect();
        //        }
        //    }.bind(this)
        //}, this);
    },

    onExit: function () {
        this._super();
    },

    getGridPos: function (localCol, localRow) {
        var gridSize = this.getGridSize();
        return cc.p((gridSize.width + this.GAP_WIDTH) * (localCol + 0.5),
            (gridSize.height + this.GAP_HEIGHT) * (localRow + 0.5));
    },

    getGridSize: function () {
        return cc.size(this.GRID_WIDTH, this.GRID_HEIGHT);
    },

    getFullGridSize: function () {
        return cc.size(this.GRID_WIDTH + this.GAP_WIDTH, this.GRID_HEIGHT + this.GAP_HEIGHT);
    },

    onTouchBegan:function(touch, event) {
        var grid = this.getClosestGrid(touch);
        if (!grid) {
            return false;
        }
        if (this._status === "delete") {
            this.firstGrid = grid;
            // grid.setColor(grid._color);
        } else {
            if (grid.used) {
                return false;
            }
            this.firstGrid = grid;
            grid.setColor(this.getCurrentColor());
        }
        return true;
    },

    onTouchMoved:function(touch, event) {
        if (this._status === "delete") {
            this.touchDelete(touch);
        } else {
            this.touchDraw(touch);
        }
        return true;
    },

    onTouchEnded:function(touch, event) {
        if (this._status === "delete") {
            this.touchDelete(touch);
        } else {
            this.touchDraw(touch);
        }

        if (this.firstGrid && this.lastGrid) {
            var region = this.getRegion(this.firstGrid, this.lastGrid);
            var index = this.selectColorIndex + 1;
            if (this._status !== "brick") {
                index = 0;
            }
            var rect = [region.minCol, region.minRow,
                region.maxCol - region.minCol + 1, region.maxRow - region.minRow + 1, index];
            var ccRect = cc.rect(rect[0], rect[1], rect[2], rect[3]);
            if (this._status === "delete") {
                this.deleteRectFromRects(ccRect, this.brickRects);
                this.deleteRectFromRects(ccRect, this.obstacleRects);
                this.forEachGrids(function (grid) {
                    grid.deleted = false;
                });
            } else {
                this.currentRects.push(rect);
                this.markOccupiedWithRect(rect, null);
                this.forEachGrids(function (grid) {
                    grid.editing = false;
                });
            }
        }

        this.firstGrid = null;
        this.lastGrid = null;
    },

    deleteRectFromRects: function (ccRect, rects) {
        for (var i = rects.length - 1; i >= 0; --i) {
            var brickRect = rects[i];
            var ccBrickRect = cc.rect(brickRect[0], brickRect[1], brickRect[2], brickRect[3]);
            var overlapsRect = cc.rectIntersection(ccRect, ccBrickRect);
            if (overlapsRect.width <= 0 || overlapsRect.height <= 0) {
                continue;
            }
            var resultRects = this.getOverlapsRects(overlapsRect, ccBrickRect);
            rects.splice(i, 1);
            for (var j = 0; j < resultRects.length; ++j) {
                rects.push(this.convertToJsonList(resultRects[j], brickRect[4]));
            }
        }
    },

    convertToJsonList: function (rect, color) {
        return [rect.x, rect.y, rect.width, rect.height, color];
    },

    getOverlapsRects: function (overlapsRect, brickRect) {
        var results = [
            cc.rect(brickRect.x, brickRect.y, brickRect.width, overlapsRect.y - brickRect.y),
            cc.rect(brickRect.x, cc.rectGetMaxY(overlapsRect), brickRect.width, cc.rectGetMaxY(brickRect) - cc.rectGetMaxY(overlapsRect)),
            cc.rect(brickRect.x, overlapsRect.y, overlapsRect.x - brickRect.x, overlapsRect.height),
            cc.rect(cc.rectGetMaxX(overlapsRect), overlapsRect.y, cc.rectGetMaxX(brickRect) - cc.rectGetMaxX(overlapsRect), overlapsRect.height)
        ];
        console.log("results:" + JSON.stringify(results));
        var rects = [];
        for (var i = results.length - 1; i >= 0; --i) {
            var rect = results[i];
            if (rect.width <= 0 || rect.height <= 0) {
                continue;
            }
            rects.push(rect);
        }
        return rects;
    },

    //markOccupied: function () {
    //    var region = this.getRegion(this.firstGrid, this.lastGrid);
    //
    //    for (var localCol = region.minCol; localCol <= region.maxCol; ++localCol) {
    //        for (var localRow = region.minRow; localRow <= region.maxRow; ++localRow) {
    //            this.grids[localCol][localRow].used = true;
    //        }
    //    }
    //},

    markOccupiedWithRect: function (rect, color) {
        for (var localCol = rect[0]; localCol < rect[0] + rect[2]; ++localCol) {
            for (var localRow = rect[1]; localRow < rect[1] + rect[3]; ++localRow) {
                if (this.grids[localCol]) {
                    this.grids[localCol][localRow].editing = false;
                    this.grids[localCol][localRow].used = true;
                    if (color) {
                        this.grids[localCol][localRow].setColor(color);
                    }
                } else {
                    console.log("error");
                }
            }
        }
    },

    isOccupied: function (grid) {
        var region = this.getRegion(this.firstGrid, grid);
        for (var localCol = region.minCol; localCol <= region.maxCol; ++localCol) {
            for (var localRow = region.minRow; localRow <= region.maxRow; ++localRow) {
                if (this.grids[localCol][localRow].used) {
                    return true;
                }
            }
        }
        return false;
    },

    touchDraw: function (touch) {
        if (!this.firstGrid) {
            return false;
        }
        var grid = this.getClosestGrid(touch);

        if (!grid) {
            return false;
        }

        if (grid === this.lastGrid) {
            return false;
        }

        if (this.isOccupied(grid)) {
            return false;
        }
        this.lastGrid = grid;
        this.clearRect();
        this.drawRect(grid);
        return true;
    },

    touchDelete: function (touch) {
       if (!this.firstGrid) {
           return false;
       }
       var grid = this.getClosestGrid(touch);

       if (!grid) {
           return false;
       }

       if (grid === this.lastGrid) {
           return false;
       }

       // if (this.isOccupied(grid)) {
       //     return false;
       // }
       this.lastGrid = grid;
       // this.clearRect();
       // this.drawRect(grid);
        this.drawDeleteRect(grid);
    },

    deleteLatestRect: function () {
        var rect = this.currentRects.pop();
        if (rect) {
            for (var localCol = rect[0]; localCol < rect[0] + rect[2]; ++localCol) {
                for (var localRow = rect[1]; localRow < rect[1] + rect[3]; ++localRow) {
                    var grid = this.grids[localCol][localRow];
                    grid.setColor(grid._color);
                    grid.used = false;
                }
            }
        }
    },

    clearRect: function () {
        this.forEachGrids(function (grid) {
            if (grid.editing && !grid.used) {
                grid.setColor(grid._color);
                grid.editing = false;
            }
        });
    },

    drawRect: function (grid) {
        var region = this.getRegion(this.firstGrid, grid);

        for (var localCol = region.minCol; localCol <= region.maxCol; ++localCol) {
            for (var localRow = region.minRow; localRow <= region.maxRow; ++localRow) {
                this.grids[localCol][localRow].editing = true;
                this.grids[localCol][localRow].setColor(this.getCurrentColor());
            }
        }
    },

    forEachGrids: function (cb) {
        for (var localCol = 0; localCol < this.COL; ++localCol) {
            for (var localRow = 0; localRow < this.ROW; ++localRow) {
                var grid = this.grids[localCol][localRow];
                cb(grid);
            }
        }
    },

    drawDeleteRect: function (grid) {
        var region = this.getRegion(this.firstGrid, grid);

        this.forEachGrids(function (grid) {
            if (grid.deleted) {
                grid.setColor(grid._showColor);
                grid.deleted = false;
            }
        });

        for (var localCol = region.minCol; localCol <= region.maxCol; ++localCol) {
            for (var localRow = region.minRow; localRow <= region.maxRow; ++localRow) {
                var grid = this.grids[localCol][localRow];
                // grid.editing = false;
                grid.used = false;
                grid.deleted = true;
                grid._showColor = grid.getColor();
                grid.setColor(grid._color);
            }
        }
    },

    getRegion: function (grid1, grid2) {
        var minRow = Math.min(grid1.row, grid2.row);
        var maxRow = Math.max(grid1.row, grid2.row);
        var minCol = Math.min(grid1.col, grid2.col);
        var maxCol = Math.max(grid1.col, grid2.col);
        return {
            minRow: minRow,
            maxRow: maxRow,
            minCol: minCol,
            maxCol: maxCol
        };
    },

    onTouchCancelled:function(touch, event) {
    },

    getClosestGrid: function (touch) {
        var localPos = this.gridNode.convertToNodeSpace(touch.getLocation());
        var gridSize = this.getFullGridSize();

        cc.log("localPos:" + JSON.stringify(localPos));

        var row = Math.floor(localPos.x / gridSize.width);
        var col = Math.floor(localPos.y / gridSize.height);

        cc.log("row:" + row + ",col:" + col);

        if (this.grids[row]) {
            return this.grids[row][col];
        }
        return null;
    },

    getCurrentColor: function () {
        if (this._status === "brick") {
            return this.selectColor;
        } else {
            return cc.color.WHITE;
        }
    }
    //
    //drawRect: function(region, color, clear) {
    //    if (clear){
    //        this._drawNode.clear();
    //    }
    //    if (region == null) {
    //        return;
    //    }
    //    var min = region.getMin();
    //    var max = region.getMax();
    //    max.x += 1;
    //    max.y += 1;
    //    this._drawNode.drawSegment(cc.p(min.x, min.y),
    //        cc.p(min.x, max.y), 1, color);
    //    this._drawNode.drawSegment(cc.p(min.x, max.y),
    //        cc.p(max.x, max.y), 1, color);
    //    this._drawNode.drawSegment(cc.p(max.x, max.y),
    //        cc.p(max.x, min.y), 1, color);
    //    this._drawNode.drawSegment(cc.p(max.x, min.y),
    //        cc.p(min.x, min.y), 1, color);
    //},
    //
    //drawRectFill: function (region, color) {
    //    if (region == null) {
    //        return;
    //    }
    //    this._drawNode.drawRect(region.getMin(), region.getMax(), color, 1, color);
    //}
});

module.exports = EditorScene;
},{"../../config/ConfigMan":40,"../../config/LevelConfig":42,"../../model/PlayerMan":117,"../entity/Grid":92,"./GameScene":94}],94:[function(require,module,exports){
var GameController = require("../../controller/GameController");

var GameScene = cc.Scene.extend({

    ctor: function () {
        this._super();
        var gameNode = GameController.createFromCCB();
        this.addChild(gameNode);
    }
});

module.exports = GameScene;

},{"../../controller/GameController":58}],95:[function(require,module,exports){
var GridType = require("../enum/GridType");
var ShapeType = require("../enum/ShapeType");
var GameMan = require("../model/GameMan");
var ItemCategory = require("../enum/ItemCategory");

var Ball = cc.Node.extend({

    type: GridType.BALL,
    body: null,
    sprite: null,
    addScale: 1,
    ctor: function (width) {
        this._super();
        this.bodyWidth = width;
        var skinCfg = GameMan.getInstance().getCurrentSkinCfg();
        var image = skinCfg.image + ".png";
        var sprite = new cc.PhysicsSprite("#" + image);
        this.addScale = skinCfg.scale;
        this.addChild(sprite);
        this.sprite = sprite;
        this.reset(width);
    },

    reset: function (width) {
        this.sprite.scaleX = width / this.sprite.width * this.addScale;
        this.sprite.scaleY = width / this.sprite.width * this.addScale;
    },

    updateSkin: function () {
        var skinCfg = GameMan.getInstance().getCurrentSkinCfg();
        var image = skinCfg.image + ".png";
        this.sprite.setSpriteFrame(cc.spriteFrameCache.getSpriteFrame(image));
        this.addScale = skinCfg.scale;
        this.reset(this.bodyWidth);
    },

    onExit: function () {
        this._super();
        this.removeBody();
    },

    update: function (dt) {
    },

    setAngleVel: function (w) {
        this.body.setAngVel(-cc.radiansToDegrees(w));
    },

    getBodyAngle: function () {
        return -cc.radiansToDegrees(this.body.a);
    },

    initBody: function (space, pos) {
        this.space = space;
        var bodyWidth = this.bodyWidth - 2;
        var body = new cp.Body(1, cp.momentForCircle(1, 0, bodyWidth, cp.v(0, 0)));
        var shape = new cp.CircleShape(body, bodyWidth / 2, cp.v(0, 0));
        shape.setElasticity(1);
        shape.setFriction(0);
        this.space.addShape(shape);
        this.space.addBody(body);
        shape.setCollisionType(ShapeType.BALL);
        body.userData = this;
        this.body = body;
        this.shape = shape;
        this.body.setPos(pos);
        body.setAngVel(3);

        //this.update(0);
        if (cc.sys.isNative) {
            shape.setFilter({
                group: cp.NO_GROUP,
                categories: ItemCategory.Ball,
                mask: ItemCategory.Obstacle
            });
        } else {
            shape.group = 1;
        }
        this.sprite.setBody(body);
    },

    getPosition: function () {
        return this.sprite.getPosition();
    },

    removeBody: function () {
        //console.log("Ball removeBody");
        if (this.body) {
            this.space.removeBody(this.body);
            this.space.removeShape(this.shape);
            //this.sprite.setBody(null);
            this.body = null;
            this.shape = null;
        }
    },

    setVel: function (directionPos) {
        this.body.setVel(directionPos);
    },

    getVel: function () {
        return this.body.getVel();
    }
});

module.exports = Ball;
},{"../enum/GridType":105,"../enum/ItemCategory":106,"../enum/ShapeType":110,"../model/GameMan":116}],96:[function(require,module,exports){
/**
 * Created by qinning on 2017/11/8.
 */
var Utils = require("../../common/util/Utils");

var BallPool = {
    MAX_POOL_SIZE: 300,
    _poolSize: {},
    _pool: {},

    setMaxPoolSize: function (name, count) {
        this._poolSize[name] = count;
    },

    getMaxPoolSize: function (name) {
        return this._poolSize[name] || this.MAX_POOL_SIZE;
    },

    putInPool: function (name, obj) {
        if (!this._pool[name]) {
            this._pool[name] = [];
        }
        if (this._pool[name].length < this.getMaxPoolSize(name)) {
            obj.retain && obj.retain();
            this._pool[name].push(obj);
        } else {
            cc.log("Symbol pool is full, throw away this symbol:" + name + ",max pool size:" + this.getMaxPoolSize(name));
        }
    },

    hasObject: function (name) {
        return (this._pool[name] && this._pool[name].length > 0);
    },

    removeObject: function (name, obj) {
        var list = this._pool[name];
        if (list) {
            for (var i = 0; i < list.length; i++) {
                if (obj === list[i]) {
                    // JSB release to avoid memory leak
                    obj.release && obj.release();
                    list.splice(i, 1);
                }
            }
        }
    },

    getFromPool: function (name) {
        if (this.hasObject(name)) {
            var obj = this._pool[name].pop();
            cc.sys.isNative && obj.release && Utils.autoRelease(obj);
            return obj;
        }
    },

    drainAllPools: function () {
        for (var i in this._pool) {
            if (this._pool.hasOwnProperty(i)) {
                for (var j = 0; j < this._pool[i].length; j++) {
                    var obj = this._pool[i][j];
                    // JSB release to avoid memory leak
                    obj.release && obj.release();
                }
            }
        }
        this._pool = {};
    }
};

module.exports = BallPool;
},{"../../common/util/Utils":35}],97:[function(require,module,exports){
/**
 * Created by qinning on 2017/12/2.
 */

var GridType = require("../enum/GridType");
var BoardController = require("../controller/BoardController");
var ShapeType = require("../enum/ShapeType");
var ItemCategory = require("../enum/ItemCategory");

var Board = cc.Node.extend({

    type: GridType.BOARD,

    node: null,

    shape: null,

    ctor: function (width) {
        this._super();
        this.node = BoardController.createFromCCB(width);
        this.addChild(this.node);

        this.width = this.node.controller.ndBoard.width + 16;
        this.height = this.node.controller.ndBoard.height;
    },

    onExit: function () {
        this._super();
        this.removeBody();
    },

    removeBody: function () {
        //console.log("Board removeBody");
        if (this.body) {
            //this.space.removeBody(this.body);
            if (cc.sys.isNative) {
                this.space.removeShape(this.shape);
            } else {
                this.space.removeStaticShape(this.shape);
            }
            this.body = null;
            this.shape = null;
        }
    },

    initBody: function (space, pos) {
        this.setPosition(pos);
        this.space = space;

        var body;
        if (cc.sys.isNative) {
            body = new cp.Body(0, Infinity);
        } else {
            body = new cp.Body(Infinity, Infinity);
        }
        var shape = new cp.BoxShape(body, this.width, this.height);
        shape.setElasticity(1);
        shape.setFriction(0);
        shape.setCollisionType(ShapeType.BOARD);
        //shape.layers = 1;
        this.space.addStaticShape(shape);
        body.setPos(pos);
        body.userData = this;
        this.body = body;
        this.shape = shape;
        if (cc.sys.isNative) {
            shape.setFilter({
                group: cp.NO_GROUP,
                categories: ItemCategory.Obstacle,
                mask: ItemCategory.Ball
            });
        } else {
            this.space.reindexShape(this.shape);
        }
    },

    setPosX: function (posX) {
        this.x = posX;
        this.body.setPos(cc.p(this.x, this.y));
        if (!cc.sys.isNative) {
            this.space.reindexShape(this.shape);
        }
    },

    getBoundingBox: function () {
        return this.node.controller.ndBoard.getBoundingBoxToWorld();
    },

    hideBall: function () {
        this.node.controller.hideBall();
    },

    showBall: function () {
        this.node.controller.showBall();
    }
});

module.exports = Board;
},{"../controller/BoardController":53,"../enum/GridType":105,"../enum/ItemCategory":106,"../enum/ShapeType":110}],98:[function(require,module,exports){
var BoostType = require("../enum/BoostType");

var Boost = cc.Sprite.extend({

    type: 0,
    ctor: function (type) {
        this.type = type;
        switch (type) {
            case BoostType.LIFE:
                this._super("#icon_new_life.png");
                //this.setColor(cc.color.RED);
                break;
            case BoostType.SPLIT:
                this._super("#icon_3_multiple.png");
                //this.setColor(cc.color.BLUE);
                break;
            case BoostType.THREE_BALL:
                this._super("#icon_3_new.png");
                //this.setColor(cc.color.GREEN);
                break;
            case BoostType.BOMB:
                this._super("#icon_bomb.png");
                break;
        }
    }
});

module.exports = Boost;
},{"../enum/BoostType":103}],99:[function(require,module,exports){
/**
 * Created by qinning on 2017/12/2.
 */

var ShapeType = require("../enum/ShapeType");
var ItemCategory = require("../enum/ItemCategory");

var Grid = cc.Node.extend({

    isGift: false,
    type: 0,
    removeable: false,

    sprite: null,
    ctor: function (color, width, height, type) {
        this._super();
        this.ignoreAnchor = false;
        this.sprite = new cc.Sprite("#grid.png");
        this.addChild(this.sprite);
        this.reset(color, width, height, type);
    },

    reset: function (color, width, height, type) {
        this.type = type;
        this.sprite.scaleX = width / this.sprite.width;
        this.sprite.scaleY = height / this.sprite.height;
        this.sprite.setColor(color);
        this.width = width;
        this.height = height;
    },

    onExit: function () {
        this._super();
        this.removeBody();
    },

    setGift: function () {
        this.isGift = true;
        var spriteFrame = cc.spriteFrameCache.getSpriteFrame("grid_gift.png");
        this.sprite.setSpriteFrame(spriteFrame);
        this.sprite.setColor(cc.color.WHITE);
        this.sprite.scaleX = (this.width + 4) / this.sprite.width;
        this.sprite.scaleY = (this.height + 4) / this.sprite.height;
    },

    setColor: function (color) {
        this._super();
        if (!this.isGift) {
            this.sprite.setColor(color);
        }
    },

    initBody: function (space, pos) {
        this.setPosition(pos);
        this.space = space;

        var body = new cp.Body(Infinity, Infinity);
        var shape = new cp.BoxShape(body, this.width, this.height);
        shape.setElasticity(1);
        shape.setFriction(0);
        //shape.layers = 1;
        this.space.addStaticShape(shape);
        shape.setCollisionType(ShapeType.BRICK);
        body.setPos(pos);
        this.body = body;
        body.userData = this;
        this.shape = shape;
        this.space.reindexShape(shape);
        if (cc.sys.isNative) {
            shape.setFilter({
                group: cp.NO_GROUP,
                categories: ItemCategory.Obstacle,
                mask: ItemCategory.Ball
            });
        }
    },

    removeBody: function () {
        //console.log("Grid removeBody");
        if (this.shape) {
            if (cc.sys.isNative) {
                this.space.removeShape(this.shape);
            } else {
                this.space.removeStaticShape(this.shape);
            }
            this.shape = null;
            this.body = null;
            this.removeable = false;
        }
    }
});

module.exports = Grid;
},{"../enum/ItemCategory":106,"../enum/ShapeType":110}],100:[function(require,module,exports){
/**
 * Created by qinning on 2017/12/2.
 */

var Obstacle = cc.Node.extend({

    ctor: function (color, width, height) {
        this._super(color, width, height);
        this.ignoreAnchor = false;
        this.sprite = new cc.Sprite("#grid.png");
        this.addChild(this.sprite);
        this.reset(color, width, height);
    },

    reset: function (color, width, height) {
        this.sprite.scaleX = width / this.sprite.width;
        this.sprite.scaleY = height / this.sprite.height;
        this.width = width;
        this.height = height;
        this.sprite.setColor(color);
    },

    setColor: function (color) {
        this._super();
        this.sprite.setColor(color);
    }
});

module.exports = Obstacle;
},{}],101:[function(require,module,exports){
/**
 * Created by oye on 15-5-17.
 */
var BoostType = require("../enum/BoostType");

var PlayerInfo = function(){
    this.playerId = "";
    this.bestScore = 0;
    this.removedAds = false;
    this.level = 0;
    this.progress = 0;
    this.levelMap = null;
    this.rated = false;

    this.boostMap = null;
    this.coins = 0;
    this.guided = false;

    this.hardLevel = 0;
    this.lastWheelTime = 0;
    this.currentSkinId = 0;
    this.interstitialAdCount = 0;
    this.rewardedAdCount = 0;

    this.createDt = 0;

    this.levelsMap = {};

    this.lastLoginDay = 0;
    this.consecutiveLoginDays = 1;
    this.lastClaimDailyBonusDay = 0;
    this.nextDayTips = false;

    this.skinMap = {};
    this.skinAdsCountMap = {};
    this.specialOfferMap = {};

    this.diamonds = 0;

    this.taskMap = {};
    this.skinAdjusted = false;
    this.lastShowRateTime = 0;

    this.rewardAdCountPerDay = {};
    this.rewardAdRecordDay = 0;
    this.iapCount = 0;
    this.failCountMap = {};
    this.lastLoginTime = 0;
    this.hasAimItem = false;
    this.lastDailyDiamondTime = 0;
};

PlayerInfo.prototype.unmarshall = function (json) {
    this.playerId = json["playerId"];
    this.bestScore = json["bestScore"] || 0;
    this.removedAds = json["removedAds"] || false;
    this.level = json["level"] || 1;
    this.progress = json["progress"] || 0;
    this.levelMap = json["levelMap"] || {};
    this.rated = json["rated"] || false;
    this.coins = json["coins"] || 0;
    this.guided = json["guided"] || false;
    this.boostMap = json["boostMap"] || {};
    this.hardLevel = json["hardLevel"] || 1;
    this.lastWheelTime = json["lastWheelTime"] || 0;
    this.currentSkinId = json["currentSkinId"] || 0;
    this.interstitialAdCount = json["interstitialAdCount"] || 0;
    this.rewardedAdCount = json["rewardedAdCount"] || 0;
    this.createDt = json["createDt"] || Date.now();
    this.levelsMap = json["levelsMap"] || {};
    this.lastLoginDay = json["lastLoginDay"] || 0;
    this.consecutiveLoginDays = json["consecutiveLoginDays"] || 1;
    this.lastClaimDailyBonusDay = json["lastClaimDailyBonusDay"] || 0;
    this.nextDayTips = json["nextDayTips"] || false;
    this.skinMap = json["skinMap"] || {
        "0": true
    };
    this.skinAdsCountMap = json["skinAdsCountMap"] || {};
    this.specialOfferMap = json["specialOfferMap"] || {};
    this.diamonds = json["diamonds"] || 50;
    this.taskMap = json["taskMap"] || {};
    this.skinAdjusted = json["skinAdjusted"] || false;
    this.lastShowRateTime = json["lastShowRateTime"] || 0;
    this.rewardAdCountPerDay = json["rewardAdCountPerDay"] || 0;
    this.rewardAdRecordDay = json["rewardAdRecordDay"] || 0;
    this.iapCount = json["iapCount"] || 0;
    this.failCountMap = json["failCountMap"] || {};
    this.lastLoginTime = json["lastLoginTime"] || Date.now();
    this.hasAimItem = json["hasAimItem"] || false;
    this.lastDailyDiamondTime = json["lastDailyDiamondTime"] || 0;
};

PlayerInfo.createDefault = function () {
    var playerInfo = new PlayerInfo();
    playerInfo.hintsCount = 5;
    playerInfo.bestScore = 0;
    playerInfo.removedAds = false;
    playerInfo.level = 1;
    playerInfo.progress = 0;
    playerInfo.levelMap = {};
    playerInfo.rated = false;
    playerInfo.coins = 0;
    playerInfo.guided = false;
    playerInfo.boostMap = {};
    playerInfo.boostMap[BoostType.SPLIT] = 5;
    playerInfo.boostMap[BoostType.THREE_BALL] = 5;
    playerInfo.hardLevel = 1;
    playerInfo.lastWheelTime = 0;
    playerInfo.currentSkinId = 0;
    playerInfo.interstitialAdCount = 0;
    playerInfo.rewardedAdCount = 0;
    playerInfo.createDt = Date.now();
    playerInfo.levelsMap = {};
    playerInfo.dailyBonusDt = Date.now();
    playerInfo.lastLoginDay = 0;
    playerInfo.consecutiveLoginDays = 1;
    playerInfo.lastClaimDailyBonusDay = 0;
    playerInfo.nextDayTips = false;
    playerInfo.skinMap = {
        "0": true
    };
    playerInfo.skinAdsCountMap = {};
    playerInfo.specialOfferMap = {};
    playerInfo.diamonds = 50;
    playerInfo.taskMap = {};
    playerInfo.skinAdjusted = false;
    playerInfo.lastShowRateTime = 0;
    playerInfo.rewardAdCountPerDay = 0;
    playerInfo.rewardAdRecordDay = 0;
    playerInfo.iapCount = 0;
    playerInfo.failCountMap = {};
    playerInfo.lastLoginTime = Date.now();
    playerInfo.hasAimItem = false;
    playerInfo.lastDailyDiamondTime = 0;
    return playerInfo;
};

module.exports = PlayerInfo;

},{"../enum/BoostType":103}],102:[function(require,module,exports){
/**
 * Created by qinning on 2017/12/2.
 */

var ShapeType = require("../enum/ShapeType");
var ItemCategory = require("../enum/ItemCategory");

var Wall = cc.Node.extend({

    initBody: function (space, pos) {
        this.setPosition(pos);
        this.space = space;

        var body = new cp.Body(Infinity, Infinity);
        var shape = new cp.BoxShape(body, this.width, this.height);
        shape.setElasticity(1);
        shape.setFriction(0);
        //shape.layers = 1;
        this.space.addStaticShape(shape);
        shape.setCollisionType(ShapeType.WALL);
        body.setPos(cc.pAdd(pos, cc.p(this.width * 0.5, this.height * 0.5)));
        body.userData = this;
        this.space.reindexShape(shape);
        if (cc.sys.isNative) {
            shape.setFilter({
                group: cp.NO_GROUP,
                categories: ItemCategory.Obstacle,
                mask: ItemCategory.Ball
            });
        }
    }
});

module.exports = Wall;
},{"../enum/ItemCategory":106,"../enum/ShapeType":110}],103:[function(require,module,exports){

var BoostType = {
    LIFE: 1,
    THREE_BALL: 2,
    SPLIT: 3,
    GIFT: 4,
    SKIN: 5,
    DIAMOND: 6,
    BOMB: 7,
    AIM_ITEM: 8,
    NUM: 8
};

module.exports = BoostType;
},{}],104:[function(require,module,exports){
/**
 * Created by qinning on 2017/5/7.
 */

var GameMode = {
    GAME_MODE_ENDLESS: 0,
    GAME_MODE_LEVEL: 1
};

module.exports = GameMode;
},{}],105:[function(require,module,exports){

var GridType = {
    OBSTACLE: 0,
    BRICK: 1,
    BALL: 2,
    BOARD: 3
};

module.exports = GridType;
},{}],106:[function(require,module,exports){
/**
 * Created by qinning on 2019/2/25
 **/

var ItemCategory = {
    Ball: 1 << 0,
    Obstacle: 1 << 1,
    Wall: 1 << 2
};

module.exports = ItemCategory;
},{}],107:[function(require,module,exports){
/**
 * Created by qinning on 2017/3/25.
 */

var LockStatus = {
    LOCK_STATUS_LOCK: 0,
    LOCK_STATUS_UNLOCK: 1,
    LOCK_STATUS_DOING: 2
};

module.exports = LockStatus;
},{}],108:[function(require,module,exports){

var RankType = {
    Friends: 0,
    Group: 1,
    Global:2
};

module.exports = RankType;
},{}],109:[function(require,module,exports){
/**
 * Created by qinning on 2018/1/1.
 */


var SceneType = {
    NONE: -1,
    LOADING: 0,
    MENU: 1,
    PACKAGE: 2,
    LEVEL: 3,
    GAME: 4
};

module.exports = SceneType;
},{}],110:[function(require,module,exports){

var ShapeType = {
    BALL: 1,
    BRICK: 2,
    BOARD: 3,
    WALL: 4
};

module.exports = ShapeType;
},{}],111:[function(require,module,exports){

var SkinRewardType = {
    None: 0,
    LevelCount: 1,
    WatchAdCount: 2,
    WatchRewardAdCount: 3,
    Claimed: 4,
    Purchase: 5
};

module.exports = SkinRewardType;
},{}],112:[function(require,module,exports){
/**
 * Created by qinning on 2019/2/21
 **/

var SkinType = {
    WatchAds: 1,
    Diamonds: 2
};

module.exports = SkinType;
},{}],113:[function(require,module,exports){
/**
 * Created by qinning on 2017/12/16.
 */

var StoreType = {
    FREE: 1,
    NEW_3: 2,
    SPLIT: 3,
    REMOVE_ADS: 4,
    RESTORE: 5,
    FIRST_PURCHASE: 6,
    NEW_AND_SPLIT: 7,
    DIAMOND: 8,
    SKIN: 9,
    AIM_ITEM: 10
};

module.exports = StoreType;
},{}],114:[function(require,module,exports){

var WheelType = {
    DailyBonus: 0,
    Box: 1
};

module.exports = WheelType;
},{}],115:[function(require,module,exports){
/**
 * Created by oye on 15/11/21.
 */

var EventsName = {
    EVENT_NAME_GAME_START: "event_name_start",
    EVENT_NAME_GAME_OVER: "event_name_game_over",
    EVENT_NAME_UPDATE_SCORE: "event_name_update_score",
    EVENT_NAME_UPDATE_LEFT_BULLET: "event_name_update_left_bullet",
    EVENT_NAME_UPDATE_BEST_SCORE: "event_name_update_best_score",
    EVENT_NAME_UPDATE_AUDIO: "event_name_update_audio",
    UPDATE_LEVEL: "update_level",
    COINS_UPDATE: "coins_update",
    REFRESH_BOOST: "refresh_boost",
    UPDATE_SKIN: "update_skin",
    UPDATE_SPECIAL_OFFER: "update_special_offer",
    PURCHASE_END: "purchase_end",
    DIALOG_POPED: "dialog_poped",
    DIALOG_CLOSED: "dialog_closed",
    DIAMONDS_UPDATE: "diamonds_update",
    TASK_UPDATE: "task_update",
    REWARDED_VIDEO_COUNT: "rewarded_video_count",
    UPDATE_AIM_ITEM: "update_aim_item",
    SHOW_AIM_GUIDE: "show_aim_guide"
};

module.exports = EventsName;
},{}],116:[function(require,module,exports){
/**
 * Created by qinning on 15/5/12.
 */
var EventsName = require("../events/EventsName");
var ConfigMan = require("../config/ConfigMan");
var AdsPlace = require("../../common/enum/AdsPlace");
var StoreHelper = require("../model/StoreHelper");
//var ShareConfig = require("../config/ShareConfig");
//var ConfigMan = require("../config/ConfigMan");

//var BoostProbabilityMap = {
//
//};

var GameMan = cc.Class.extend({
    FREE_WHEEL_HOURS: 12,

    ONE_HOUR_SECONDS: 60 * 60 * 1000,
    startTime: 0,
    resultCount: 0,
    rated: false,
    endTime: 0,
    canReLife: true,
    distance: 0,
    levelId: 1,
    hardMode: false,
    giftCount: 0,
    lastShowLevel: 0,

    totalFailCount: 0,
    poped3StarTips: false,
    firstEnterAdShowed: false,

    isTryAimItem: false,
    showedWatchAdsGetSkinCount: 0,
    showedWatchAdsOpenBoxCount: 0,

    canUseAimItem: function () {
        var purchasedAimItem = game.playerMan.player.hasAimItem;
        var tryAimItem = this.isTryAimItem;
        return purchasedAimItem || tryAimItem;
    },

    canTryAimItem: function () {
        var isLevelOK = game.playerMan.getLevel() >= 10;
        var purchasedAimItem = game.playerMan.player.hasAimItem;
        return isLevelOK && !purchasedAimItem;
    },

    tryAimItem: function () {
        this.isTryAimItem = true;
        game.eventDispatcher.dispatchEvent(EventsName.SHOW_AIM_GUIDE);
    },

    resetTryAnimItem: function () {
        this.isTryAimItem = false;
    },

    getBoostProbability: function (config) {
        var failCount = game.playerMan.getFailCount(config.levelId);
        var boostProbability = config.boostProbability;
        if (failCount === 4) {
            return boostProbability + 0.2;
        } else if (failCount === 5) {
            return boostProbability + 0.4;
        } else if (failCount > 5) {
            return boostProbability + 0.5;
        }
        return boostProbability;
    },

    setHardMode: function (hardMode) {
        this.hardMode = hardMode;
    },

    canPop3StarTips: function () {
        return !this.poped3StarTips;
    },

    setPop3StarTips: function () {
        this.poped3StarTips = true;
    },

    isHardMode: function () {
        return this.hardMode;
    },

    getPlayerLevel: function () {
        if (this.isHardMode()) {
            return game.playerMan.getHardLevel();
        } else {
            return game.playerMan.getLevel();
        }
    },

    ctor: function () {
    },

    init: function () {
        this.rated = game.playerMan.player.rated;
        this.chooseLatestLevel();
    },

    chooseLatestLevel: function () {
        if (this.isHardMode()) {
            this.levelId = game.playerMan.getHardLevel();
        } else {
            if (game.playerMan.getLevel() <= this.getLevelList().length) {
                this.levelId = game.playerMan.getLevel();
            } else {
                this.setHardMode(true);
                this.levelId = game.playerMan.getHardLevel();
            }
        }
    },

    getLevelList: function () {
        return ConfigMan.getInstance().getLevelList();
    },

    updateScore: function () {
        game.eventDispatcher.dispatchEvent(EventsName.EVENT_NAME_UPDATE_SCORE);
    },

    //gameOver: function () {
    //    //game.analyseManager.trackFailedProgressionEvent("level", game.playerMan.getLevel());
    //    this.resultCount++;
    //},

    getMissionKey: function () {
        if (!this.isHardMode()) {
            return "normal_level_" + this.levelId;
        } else {
            return "hard_level_" + this.levelId;
        }
    },

    onGameStart: function () {
        game.analyseManager.missionBegan(this.getMissionKey());
    },

    getCurrentStar: function (costTime) {
        //cc.log("costTime:" + costTime);
        var levelCfg = this.getCurConfig();
        var star = 1;
        if (costTime <= levelCfg.starTime) {
            star = 3;
        } else if (costTime <= levelCfg.starTime * 2) {
            star = 2;
        }
        return star;
    },

    getProgressPercent: function (costTime) {
        var levelCfg = this.getCurConfig();
        return Math.max(0, 1 - (costTime / levelCfg.starTime / 3)) * 100;
    },

    getCurrentRewardDiamonds: function () {
        if (this.isNewStarData || this.lastStar === 0) {
            var lastRewardDiamonds = game.config.rewardDiamondMap[this.lastStar] || 0;
            var currentRewardDiamonds = game.config.rewardDiamondMap[this.currentStar] || 0;
            return Math.max(currentRewardDiamonds - lastRewardDiamonds, 0);
        }
        return 0;
    },

    hasStarTag: function () {
        var hasStarTag = false;
        if (!this.isHardMode()) {
            hasStarTag = game.playerMan.getLevelData(this.levelId, "starTag") || false;
        } else {
            hasStarTag = game.playerMan.getLevelData(this.levelId, "hardStarTag") || false;
        }
        return hasStarTag;
    },

    onWatchAdsGet3Star: function (levelId) {
        var star = 3;
        if (!this.isHardMode()) {
            this.updateLevelStar(levelId, star);
        } else {
            this.updateHardLevelStar(levelId, star);
        }
        this.currentStar = 3;
    },

    gameWin: function (costTime) {
        if (!this.isHardMode()) {
            this.lastStar = game.playerMan.getLevelStar(this.levelId);
        } else {
            this.lastStar = game.playerMan.getHardLevelStar(this.levelId);
        }

        game.analyseManager.missionCompleted(this.getMissionKey());

        this.isNewStarData = this.hasStarTag();

        var star = this.getCurrentStar(costTime);

        //this.onGameWin(star);
        this.currentStar = star;
        var hasPssed = false;
        var levelIdAndStar = this.levelId + "-" + star;
        if (!this.isHardMode()) {
            if (game.playerMan.getLevelStar(this.levelId) > 0) {
                hasPssed = true;
            }
            this.updateLevelStar(this.levelId, star);
            if (!hasPssed) {
                game.analyseManager.trackEvent("level_pass", {
                    "level": this.levelId
                });
                game.analyseManager.trackEvent("level_pass_star", {
                    "level": levelIdAndStar
                });
                cc.log("track event level_pass:" + this.levelId);
            }
            this.resultCount++;
            this.levelId++;
            if (this.levelId <= this.getLevelList().length) {
                game.gcManager.reportScore(this.levelId, game.config.getLeaderBoardKey());
            }
            game.playerMan.setLevel(this.levelId);
        } else {
            if (game.playerMan.getHardLevelStar(this.levelId) > 0) {
                hasPssed = true;
            }
            this.updateHardLevelStar(this.levelId, star);
            if (!hasPssed) {
                game.analyseManager.trackEvent("level_pass_hard", {
                    "level": this.levelId
                });
                game.analyseManager.trackEvent("level_pass_hard_star", {
                    levelStarKey: levelIdAndStar
                });
                cc.log("track event level_pass_hard:" + this.levelId);
            }
            this.resultCount++;
            this.levelId++;
            if (this.levelId <= this.getLevelList().length) {
                game.gcManager.reportScore(this.levelId, game.config.getHardBoardKey());
            }
            game.playerMan.setHardLevel(this.levelId);
        }
        game.gcManager.reportScore(this.getTotalStarCount(), game.config.getStarLeaderBoardKey());
        this.hasPassed = hasPssed;
    },

    skipLevel: function () {
        if (!this.isHardMode()) {
            this.levelId++;
            if (this.levelId <= this.getLevelList().length) {
                game.playerMan.setLevel(this.levelId);
            }
        } else {
            this.levelId++;
            if (this.levelId <= this.getLevelList().length) {
                game.playerMan.setHardLevel(this.levelId);
            }
        }
    },

    updateLevelStar: function (level, star) {
        var oldStar = game.playerMan.getLevelData(this.levelId, "star") || 0;
        if (star > oldStar) {
            cc.log("updateLevelStar:oldStar:" + oldStar + ",star:" + star);
            game.playerMan.updateLevelData(level, "star", star);
            game.playerMan.updateLevelData(level, "starTag", true);
        }
    },

    updateHardLevelStar: function (level, star) {
        var oldStar = game.playerMan.getLevelData(this.levelId, "hardStar") || 0;
        if (star > oldStar) {
            cc.log("updateHardLevelStar:oldStar:" + oldStar + ",star:" + star);
            game.playerMan.updateLevelData(level, "hardStar", star);
            game.playerMan.updateLevelData(level, "hardStarTag", true);
        }
    },

    resumeGame: function () {
        this.levelId--;
    },

    chooseLevel: function (levelId) {
        this.levelId = levelId;
    },

    getDisplayLevel: function () {
        return this.levelId;
    },

    getCurConfig: function () {
        var levelList = this.getLevelList();
        if (levelList) {
            return levelList[this.levelId - 1];
        }
        return null;
    },

    hasNextLevel: function () {
        var levelList = this.getLevelList();
        if (this.levelId > levelList.length) {
            return false;
        }
        return true;
    },

    onGameFail: function () {
        this.totalFailCount++;
        this.addFailCount();
        game.analyseManager.missionFailed(this.getMissionKey(), "normal_fail");
    },

    addFailCount: function () {
        game.playerMan.addFailCount(this.levelId);
    },

    showAds: function (success) {
        cc.log("GameMan showAds:" + success + ",isNewPlayer:" + game.playerMan.isNewPlayer());
        if (game.playerMan.isNewPlayer()) {
            if (success) {
                if (this.levelId > 4) {
                    this._showInterstitialAds();
                }
            } else {
                if (this.totalFailCount % 2 === 0) {
                    this._showInterstitialAds();
                }
            }
        } else {
            this._showInterstitialAds();
        }
    },

    _showInterstitialAds: function () {
        if (game.playerMan.getLevel() >= 3) {
            var AdsPlace = require("../../common/enum/AdsPlace");
            game.adsManager.showInterstitial(AdsPlace.Pass);
        }
    },

    showRegisterNotification: function () {
        if (this.resultCount > 0 && this.resultCount % 3 === 0) {
            game.logicMan.registerNotification();
        }
    },

    showRate: function () {
        var count = 4;
        var canShowRate = false;
        var lastShowedRateDay;
        if (cc.sys.os === cc.sys.OS_ANDROID) {
            //Android 2天显示一次rate
            count = 5;
            lastShowedRateDay = Math.floor((Date.now() - game.playerMan.player.lastShowRateTime) / (24 * 3600 * 1000));
            canShowRate = lastShowedRateDay >= 2;
        } else {
            //iOS 6个小时显示一次rate
            lastShowedRateDay = Math.floor((Date.now() - game.playerMan.player.lastShowRateTime) / (3600 * 1000));
            canShowRate = lastShowedRateDay >= 6;
        }
        if (!this.rated && (this.resultCount > 0 && this.resultCount % count === 0) && canShowRate) {
            if (!game.rateManager.launchAppReview()) {
                game.popupMan.popupRateDlg(function () {
                    this.rated = true;
                    game.playerMan.setRated(true);
                }.bind(this), function () {
                    this.rated = true;
                    //this.showAds(success);
                }.bind(this));
            } else {
                this.rated = true;
            }
            game.playerMan.setLastShowRateTime();
            return true;
        } else {
            //this.showAds(success);
            return false;
        }
    },

    restartGame: function () {
        game.logicMan.registerNotification();
        this.startGame();
        game.eventDispatcher.dispatchEvent(EventsName.EVENT_NAME_UPDATE_SCORE);
        game.eventDispatcher.dispatchEvent(EventsName.EVENT_NAME_UPDATE_BG_SPRITE);
    },

    startGame: function () {
        //game.analyseManager.trackStartProgressionEvent("level", game.playerMan.getLevel());
    },

    enterGame: function () {
        //game.analyseManager.trackStartProgressionEvent("level", game.playerMan.getLevel());
    },

    leaveGame: function () {
        this.startTime = 0;
        this.distance = 0;
    },

    canShowRewardedVideo: function () {
        return (this.canReLife && game.adsManager.isRewardVideoReady());
    },

    getShareConfig: function () {
        var shareList = ConfigMan.getInstance().getShareList();
        var randomNum = game.utils.randomNextInt(shareList.length);
        return shareList[randomNum];
    },

    getFriendHelpShare: function () {
        var desc = game.utils.sprintf("砖块破坏者我已经%d关了，帮我继续玩，让我冲上榜首。", game.playerMan.getLevel());
        var shareConfig = this.getShareConfig();
        var share = shareConfig.copy();
        share.desc = desc;
        return share;
    },

    getFriendChallengeShare: function () {
        var desc = game.utils.sprintf("砖块破坏者我已经%d关了，你能超越我吗？", game.playerMan.getLevel());
        var shareConfig = this.getShareConfig();
        var share = shareConfig.copy();
        share.desc = desc;
        return share;
    },

    getWheelLeftTime: function () {
        var lastWheelTime = game.playerMan.getLastWheelTime();
        return (lastWheelTime + this.FREE_WHEEL_HOURS * this.ONE_HOUR_SECONDS - Date.now());
    },

    isFreeWheel: function () {
        var leftTime = this.getWheelLeftTime();
        if (leftTime <= 0) {
            return true;
        }
        return false;
    },

    addGiftCount: function () {
        this.giftCount++;
    },

    canShowGift: function () {
        return false;
        if (this.levelId >= 9) {
            if (this.levelId % 3 === 0) {
                if (this.giftCount < 3) {
                    this.lastShowLevel = this.levelId;
                    return true;
                }
            }
        }
        return false;
    },

    getCurrentSkinCfg: function () {
        var currentSkinId = game.playerMan.getCurrentSkinId();
        var skinCfg = ConfigMan.getInstance().getSkinCfg(currentSkinId);
        return skinCfg;
    },

    updateSkin: function (sprite) {
        var skinCfg = this.getCurrentSkinCfg();
        var spriteFrame = cc.spriteFrameCache.getSpriteFrame(skinCfg.image + ".png");
        if (spriteFrame) {
            sprite.setSpriteFrame(spriteFrame);
        } else {
            var defaultSpriteFrame = cc.spriteFrameCache.getSpriteFrame("skin_0.png");
            sprite.setSpriteFrame(defaultSpriteFrame);
        }
    },

    checkAutoPopup: function (firstEnter) {
        if (!this.checkDailyBonus()) {
            if (!this.checkWheel()) {
                if (!this.checkSpecialOffer()) {
                    if (!firstEnter) {
                        //第二天奖励tips
                        if (!this.checkNextDayTip()) {
                            //看广告获得钻石
                            if (!this.checkWatchAdsGetDiamonds()) {
                                //看广告获得皮肤
                                if (!this.checkWatchAdsGetSkin()) {
                                    //看广告打开宝箱
                                    this.checkWatchAdsOpenBox();
                                }
                            }
                        }
                    }
                }
            }
        }
    },

    checkNextDayTip: function () {
        if (this.resultCount >= 3) {
            if (!game.playerMan.player.nextDayTips) {
                //game.popupMan.popupCommonDlg(_("next_day_tips"));
                game.popupMan.popupRewardDlg(_("next_day_tips"),
                    function () {
                    }, "icon_gifts.png", 1);
                game.playerMan.setNextDayTips();
                return true;
            }
        }
        return false;
    },

    checkDailyBonus: function () {
        var lastClaimDay = game.playerMan.player.lastClaimDailyBonusDay;
        var currentDayClaimed = lastClaimDay >= game.utils.getDayByTs(Date.now());
        if (!currentDayClaimed) {
            cc.log("game.popupMan.popupDailyBonus");
            game.popupMan.popupDailyBonus();
            return true;
        }
        return false;
    },

    checkSpecialOffer: function () {
        if (this.isSpecialOfferPurchased()) {
            return false;
        }
        if (!this.showedSpecialOffer) {
            this.showedSpecialOffer = true;
            game.popupMan.popupSpeicialOffer();
            return true;
        }
        return false;
    },

    checkWheel: function () {
        if (!this.showedWheel) {
            this.showedWheel = true;
            var leftTime = GameMan.getInstance().getWheelLeftTime();
            if (leftTime <= 0) {
                var WheelType = require("../enum/WheelType");
                game.popupMan.popupWheelDlg(WheelType.DailyBonus);
                return true;
            }
        }
        return false;
    },

    isSpecialOfferPurchased: function () {
        var specialOffer = ConfigMan.getInstance().getSpecialOfferCfg();
        var purchased = game.playerMan.isSpecialOfferPurchased(specialOffer.pid);
        cc.log("isSpecialOfferPurchased:" + purchased);
        return purchased;
    },

    checkRemoteConfig: function () {
        game.remoteConfig.setRemoteConfigReceivedCallback(function () {
            //reload config.
            cc.log("config man onRemoteConfigReceived");
            ConfigMan.getInstance().onRemoteConfigReceived();
        });
        game.remoteConfig.fetchRemoteConfig();
    },

    adjustSkinConfigs: function () {
        //if (game.playerMan.player.skinAdjusted) {
        //    return;
        //}
        //game.playerMan.setSkinAdjusted();
        //var oldTaskConfigs = ConfigMan.getInstance().getOldTaskList();
        //for (var i = 0; i < oldTaskConfigs.length; ++i) {
        //    var oldTaskConfig = oldTaskConfigs[i];
        //    this.adjustOldTaskConfig(oldTaskConfig);
        //}
    },

    adjustOldTaskConfig: function (data) {
        var SkinRewardType = require("../enum/SkinRewardType");
        var completed = false;
        switch (data.type) {
            case SkinRewardType.None:
                completed = true;
                break;
            case SkinRewardType.LevelCount:
                if (game.playerMan.getLevel() >= data.count) {
                    completed = true;
                }
                break;
            case SkinRewardType.WatchAdCount:
                if (game.playerMan.player.interstitialAdCount >= data.count) {
                    completed = true;
                }
                break;
            case SkinRewardType.WatchRewardAdCount:
                if (game.playerMan.player.rewardedAdCount >= data.count) {
                    completed = true;
                }
                break;
            case SkinRewardType.Claimed:
                if (game.playerMan.hasSkin(data.id)) {
                    completed = true;
                }
                break;
            case SkinRewardType.Purchase:
                if (game.playerMan.hasSkin(data.id)) {
                    completed = true;
                }
                break;
        }

        if (completed) {
            game.playerMan.setClaimedSkin(data.id);
            game.playerMan.setTaskClaimed(data.id);
        }
    },

    hasCompletedTask: function () {
        var taskConfigs = ConfigMan.getInstance().getTaskList();
        for (var i = 0; i < taskConfigs.length; ++i) {
            var taskConfig = taskConfigs[i];
            if (game.playerMan.isTaskClaimed(taskConfig.id)) {
                continue;
            }
            if (this.isTaskCompleted(taskConfig)) {
                return true;
            }
        }
        return false;
    },

    isTaskCompleted: function (data) {
        var SkinRewardType = require("../enum/SkinRewardType");
        var completed = false;
        switch (data.type) {
            case SkinRewardType.None:
                completed = true;
                break;
            case SkinRewardType.LevelCount:
                if (game.playerMan.getLevel() >= data.count) {
                    completed = true;
                }
                break;
            case SkinRewardType.WatchAdCount:
                if (game.playerMan.player.interstitialAdCount >= data.count) {
                    completed = true;
                }
                break;
            case SkinRewardType.WatchRewardAdCount:
                if (game.playerMan.player.rewardedAdCount >= data.count) {
                    completed = true;
                }
                break;
            case SkinRewardType.Claimed:
                if (game.playerMan.hasSkin(data.id)) {
                    completed = true;
                }
                break;
            case SkinRewardType.Purchase:
                if (game.playerMan.hasSkin(data.id)) {
                    completed = true;
                }
                break;
        }
        return completed;
    },

    canSkip: function () {
        var failCount = game.playerMan.getFailCount(this.levelId);
        cc.log("skip fail count:" + failCount);
        if (failCount <= 3) {
            return false;
        } else {
            return true;
        }
    },

    showFirstEnterHomeAd: function () {
        if (this.firstEnterAdShowed) {
            return;
        }
        this.firstEnterAdShowed = true;
        //cc.log("first enter ads 1");
        if (game.playerMan.getLevel() >= 4) {
            //cc.log("first enter ads 2");
            if (game.adsManager.showFirstEnterAd) {
                //cc.log("first enter ads 3: register day:" + game.adsManager.getRegisterDay());
                if (game.adsManager.getRegisterDay() >= game.adsManager.firstEnterShowAdDay) {
                    //cc.log("first enter ads 4");
                    var lastLoginDay = game.utils.getDayByTs(game.playerMan.player.lastLoginTime);
                    var currentDay = game.utils.getDayByTs(Date.now());
                    if (lastLoginDay === currentDay) {
                        //cc.log("first enter ads 5");
                        if (currentDay - lastLoginDay >= 5 * 1000) {
                            //cc.log("first enter ads 6");
                            game.adsManager.showInterstitial(AdsPlace.FirstEnter);
                        }
                    }
                }
            }
        }
        game.playerMan.setLastLoginTime();
    },

    checkWatchAdsGetSkin: function () {
        if (this.showedWatchAdsGetSkinCount >= 2) {
            return false;
        }
        var SkinType = require("../enum/SkinType");
        var skinList = ConfigMan.getInstance().getSkinListByType(SkinType.WatchAds);
        var suitableSkinList = [];
        var skinCfg;
        var leftWatchAdsCountEqual1;
        for (var i = 0; i < skinList.length; ++i) {
            skinCfg = skinList[i];
            var owned = game.playerMan.hasSkin(skinCfg.id);
            var isWatchAdsType = (skinCfg.type === SkinType.WatchAds);
            if (isWatchAdsType) {
                leftWatchAdsCountEqual1 = (skinCfg.count - game.playerMan.getSkinAdsCount(skinCfg.id)) === 1;
            }
            if (!owned && isWatchAdsType && leftWatchAdsCountEqual1) {
                suitableSkinList.push(skinCfg);
            }
        }
        if (suitableSkinList.length <= 0) {
            return false;
        }
        var randomIndex = game.utils.randomNextInt(suitableSkinList.length);
        skinCfg = suitableSkinList[randomIndex];
        if (skinCfg) {
            game.popupMan.popupWatchAdsGetSkin(skinCfg);
            this.showedWatchAdsGetSkinCount++;
            return true;
        }
        return false;
    },

    lastPopCount: 0,
    currentStep: 3,

    tryShowPassPopup: function () {
        if (this.levelId > 6 && this.resultCount > 0) {
            if (this.resultCount - this.lastPopCount >= this.currentStep) {
                this.lastPopCount = this.resultCount;
                if (this.currentStep === 3) {
                    this.currentStep = 2;
                } else {
                    this.currentStep = 3;
                }

                if (this.showedWatchAdsGetSkinCount <= this.showedWatchAdsOpenBoxCount) {
                    if (!this.checkWatchAdsGetSkin()) {
                        if (!this.checkWatchAdsOpenBox()) {
                            //this.checkWatchAdsGetDiamonds();
                        }
                    }
                } else {
                    if (!this.checkWatchAdsOpenBox()) {
                        if (!this.checkWatchAdsGetSkin()) {
                            //this.checkWatchAdsGetDiamonds();
                        }
                    }
                }
            }
        }
    },

    tryShowFailPopup: function () {
        if (this.levelId > 6 && this.totalFailCount > 0 && this.totalFailCount % 2 === 0) {
            if (!this.checkWatchAdsGetDiamonds()) {
                return this.checkWatchAdsOpenBox();
            }
        }
        return false;
    },

    checkWatchAdsOpenBox: function () {
        if (this.showedWatchAdsOpenBoxCount >= 2) {
            return false;
        }
        game.popupMan.popupWatchAdsGetItem(_("reward_video_open_box"), "icon_gift_box.png", "open_box", function (watched) {
            if (watched) {
                StoreHelper.getInstance().onOpenBox();
            }
        });
        this.showedWatchAdsOpenBoxCount++;
        return true;
    },

    checkWatchAdsGetDiamonds: function () {
        var lastDailyDiamondTime = game.playerMan.player.lastDailyDiamondTime;
        var lastPopDay = game.utils.getDayByTs(lastDailyDiamondTime);
        var currentDay = game.utils.getDayByTs(Date.now());
        if (currentDay <= lastPopDay) {
            return false;
        }
        game.playerMan.setLastDailyDiamondsTime();
        game.popupMan.popupWatchAdsGetDiamonds("daily_diamonds", function (watched) {
            if (watched) {
                StoreHelper.getInstance().popupAddDiamondsDlg(game.config.dailyDiamonds, "daily_diamonds");
            }
        });
        return true;
    },

    getTotalStarCount: function () {
        var levelList = ConfigMan.getInstance().getLevelList();
        var starCount = 0;
        for (var i = 0; i < levelList.length; ++i) {
            var levelStarCount = game.playerMan.getLevelStar(i + 1);
            var hardLevelStarCount = game.playerMan.getHardLevelStar(i + 1);
            starCount += levelStarCount;
            starCount += hardLevelStarCount;
        }
        return starCount;
    }
});

GameMan._instance = null;
GameMan._firstUseInstance = true;

/**
 *
 * @returns {GameMan}
 */
GameMan.getInstance = function () {
    if (GameMan._firstUseInstance) {
        GameMan._firstUseInstance = false;
        GameMan._instance = new GameMan();
    }
    return GameMan._instance;
};

module.exports = GameMan;
},{"../../common/enum/AdsPlace":10,"../config/ConfigMan":40,"../enum/SkinRewardType":111,"../enum/SkinType":112,"../enum/WheelType":114,"../events/EventsName":115,"../model/StoreHelper":121}],117:[function(require,module,exports){
/**
 * Created by qinning on 15/5/12.
 */
var PlayerInfo = require("../entity/PlayerInfo");
var EventsName = require("../events/EventsName");
var BoostType = require("../enum/BoostType");

var PLAYER_KEY = "player_key";

var PlayerMan = cc.Class.extend({
    player: null,
    bestScoreKey: null,
    levelBoardKey: null,

    inited: false,
    ctor: function () {
    },

    initData: function () {
        if (this.inited) {
            return;
        }
        this.inited = false;
        var playerInfoStr = game.storageController.getItem(PLAYER_KEY, null);
        var player;
        if (playerInfoStr == null || playerInfoStr == "") {
            player = PlayerInfo.createDefault();
            game.storageController.setItem(PLAYER_KEY, JSON.stringify(player));
            game.analyseManager.addVirtualCurrency("init_player", player.diamonds);
        } else {
            player = new PlayerInfo();
            player.unmarshall(JSON.parse(playerInfoStr));
        }
        this.player = player;
    },

    removedAds: function () {
        this.player.removedAds = true;
        game.adsManager.removeBannerAds("top");
        game.adsManager.removeBannerAds("bottom");
        this._flushToStorage();
    },

    setRated: function () {
        this.player.rated = true;
        this._flushToStorage();
    },

    getLevel: function () {
        if (cc.isUndefined(this.player.level)) {
            return 1;
        } else {
            return this.player.level;
        }
    },

    setLevel: function (level) {
        if (this.player.level < level) {
            this.player.level = level;
            game.analyseManager.trackPlayerLevel(level);
            this._flushToStorage();
        }
    },

    updateLevelData: function (level, name, data) {
        if (cc.isUndefined(this.player.levelsMap[level])) {
            this.player.levelsMap[level] = {};
        }
        this.player.levelsMap[level][name] = data;
        this._flushToStorage();
    },

    getLevelData: function (level, name) {
        return (this.player.levelsMap[level] || {})[name];
    },

    getLevelStar: function (level) {
        return this.getLevelData(level, "star") || 0;
    },

    getHardLevelStar: function (level) {
        return this.getLevelData(level, "hardStar") || 0;
    },

    addInterstitialAdCount: function () {
        this.player.interstitialAdCount++;
        this._flushToStorage();
    },

    addRewardedAdCount: function () {
        this.player.rewardedAdCount++;
        this._flushToStorage();
    },

    setHardLevel: function (level) {
        if (this.player.hardLevel < level) {
            this.player.hardLevel = level;
            this._flushToStorage();
        }
    },

    getHardLevel: function () {
        if (cc.isUndefined(this.player.hardLevel)) {
            return 1;
        } else {
            return this.player.hardLevel;
        }
    },

    getBoostCount: function (boostType) {
        return this.player.boostMap[boostType] || 0;
    },

    useBoost: function (boostType) {
        if (this.getBoostCount(boostType) > 0) {
            this.player.boostMap[boostType]--;
            if (boostType === BoostType.SPLIT) {
                game.analyseManager.consumeItem("boost_split", 1);
            } else if (boostType === BoostType.THREE_BALL) {
                game.analyseManager.consumeItem("boost_new_3", 1);
            }
            this._flushToStorage();
            return true;
        }
        return false;
    },

    addBoost: function (boostType, count) {
        this.player.boostMap[boostType] += count;
        this._flushToStorage();
        game.eventDispatcher.dispatchEvent(EventsName.REFRESH_BOOST);
    },

    setBoost: function (boostType, count) {
        this.player.boostMap[boostType] = count;
        this._flushToStorage();
        game.eventDispatcher.dispatchEvent(EventsName.REFRESH_BOOST);
    },

    addDiamonds: function (diamonds, reason, buyItemName, buyItemCount, isUSDPurchased) {
        if (isNaN(diamonds)) {
            cc.error("diamonds is NAN");
            return;
        }
        if (diamonds > 0) {
            game.audioPlayer.playEffectByKey("diamond_add");
            if (!isUSDPurchased) {
                if (reason) {
                    game.analyseManager.addVirtualCurrency(reason, diamonds);
                } else {
                    game.analyseManager.addVirtualCurrency("unkonw_reason", diamonds);
                    cc.error("error addDiamonds unknown reason:" + reason);
                }
            }
        } else if (diamonds < 0) {
            if (buyItemName && buyItemCount) {
                game.analyseManager.consumeVirtualCurrency(buyItemName, buyItemCount, -diamonds);
            } else {
                cc.error("error addDiamonds unknown buyItemName:" + buyItemName + ",buyItemCount:" + buyItemCount);
                game.analyseManager.consumeVirtualCurrency("unknown_reason", 0, -diamonds);
            }
        }
        this.player.diamonds += diamonds;
        this._flushToStorage();
        game.eventDispatcher.dispatchEvent(EventsName.DIAMONDS_UPDATE, {
            "diamonds": this.player.diamonds,
            "delta": diamonds
        });
    },

    getDiamonds: function () {
        return this.player.diamonds;
    },

    setTaskClaimed: function (taskId) {
        cc.log("PlayerMan setTaskClaimed:" + taskId);
        this.player.taskMap[taskId] = true;
        this._flushToStorage();
    },

    isTaskClaimed: function (taskId) {
        cc.log("PlayerMan isTaskClaimed:" + taskId);
        return !!this.player.taskMap[taskId];
    },

    setGuided: function (guided) {
        this.player.guided = guided;
        this._flushToStorage();
    },

    setLastWheelTime: function (wheelTime) {
        this.player.lastWheelTime = wheelTime;
        this._flushToStorage();
    },

    getLastWheelTime: function () {
        return this.player.lastWheelTime;
    },

    setCurrentSkinId: function (skinId) {
        if (skinId === this.player.currentSkinId) {
            return;
        }
        var BallPool = require("../entity/BallPool");
        BallPool.drainAllPools();
        this.player.currentSkinId = skinId;
        this._flushToStorage();
    },

    getCurrentSkinId: function () {
        return this.player.currentSkinId;
    },

    setClaimedSkin: function (skinId) {
        this.player.skinMap[skinId] = true;
        this._flushToStorage();
    },

    hasSkin: function (skinId) {
        return !!this.player.skinMap[skinId];
    },

    isNewPlayer: function () {
        return (Date.now() - this.player.createDt < 24 * 3600 * 1000);
    },

    getRegisterDay: function () {
        return Math.floor((Date.now() - this.player.createDt) / (24 * 3600 * 1000)) + 1;
    },

    currentDay: function(){
        return game.utils.getDayByTs(Date.now());
    },

    checkConsecutiveLoginDay: function() {
        var today = this.currentDay();
        var days = today - this.player.lastLoginDay;
        if (days < 0) {
            cc.error("consecutive login day error, today is smaller than lastLoginDay, maybe you have adjust the time.");
            days = 0;
        }
        if (days <= 1){
            this.player.consecutiveLoginDays += days;
        }
        else{
            this.player.consecutiveLoginDays = 1;
        }

        this.player.lastLoginDay = today;
        if (this.player.consecutiveLoginDays < 1) {
            this.player.consecutiveLoginDays = 1;
        }
        return this.player.consecutiveLoginDays;
    },

    setLastClaimDailyBonusDay: function (day) {
        this.player.lastClaimDailyBonusDay = day;
        this._flushToStorage();
    },

    setNextDayTips: function () {
        this.player.nextDayTips = true;
        this._flushToStorage();
    },

    isSpecialOfferPurchased: function (pid) {
        return this.player.specialOfferMap[pid] || false;
    },

    setSpecialOfferPurchased: function (pid) {
        this.player.specialOfferMap[pid] = true;
        this._flushToStorage();
        game.eventDispatcher.dispatchEvent(EventsName.UPDATE_SPECIAL_OFFER);
    },

    setSkinAdjusted: function () {
        this.player.skinAdjusted = true;
        this._flushToStorage();
    },

    setLastShowRateTime: function () {
        this.player.lastShowRateTime = Date.now();
        this._flushToStorage();
    },

    addRewardAdCountPerDay: function () {
        this.tryClearPreviousAdCountPerDay();
        if (cc.isUndefined(this.player.rewardAdCountPerDay)) {
            this.player.rewardAdCountPerDay = 0;
        }
        this.player.rewardAdCountPerDay++;
        this._flushToStorage();
        game.eventDispatcher.dispatchEvent(EventsName.REWARDED_VIDEO_COUNT);
    },

    getRewardAdPlaceCountPerDay: function () {
        this.tryClearPreviousAdCountPerDay();
        return this.player.rewardAdCountPerDay || 0;
    },

    tryClearPreviousAdCountPerDay: function () {
        if (this.player.rewardAdRecordDay !== this.getRegisterDay()) {
            this.player.rewardAdCountPerDay = 0;
            this.player.rewardAdRecordDay = this.getRegisterDay();
        }
    },

    addIapCount: function () {
        this.player.iapCount++;
        this._flushToStorage();
    },

    addFailCount: function (levelId) {
        this.player.failCountMap[levelId] = this.getFailCount(levelId) + 1;
        this._flushToStorage();
    },

    getFailCount: function (levelId) {
        cc.log("skip fail count map:" + JSON.stringify(this.player.failCountMap));
        return this.player.failCountMap[levelId] || 0;
    },

    addSkinAdsCount: function (skinId) {
        this.player.skinAdsCountMap[skinId] = this.getSkinAdsCount(skinId) + 1;
        this._flushToStorage();
    },

    getSkinAdsCount: function (skinId) {
        return this.player.skinAdsCountMap[skinId] || 0;
    },

    setLastLoginTime: function () {
        this.player.lastLoginTime = Date.now();
        this._flushToStorage();
    },

    setLastDailyDiamondsTime: function () {
        this.player.lastDailyDiamondTime = Date.now();
        this._flushToStorage();
    },

    purchasedAimItem: function () {
        this.player.hasAimItem = true;
        this._flushToStorage();
    },

    _flushToStorage: function () {
        game.storageController.setItem(PLAYER_KEY, JSON.stringify(this.player));
    }
});

PlayerMan._instance = null;
PlayerMan._firstUseInstance = true;

/**
 *
 * @returns {PlayerMan}
 */
PlayerMan.getInstance = function () {
    if (PlayerMan._firstUseInstance) {
        PlayerMan._firstUseInstance = false;
        PlayerMan._instance = new PlayerMan();
    }
    return PlayerMan._instance;
};

module.exports = PlayerMan;
},{"../entity/BallPool":96,"../entity/PlayerInfo":101,"../enum/BoostType":103,"../events/EventsName":115}],118:[function(require,module,exports){
/**
 * Created by oye on 15/11/21.
 */

var NoticeController = require("../controller/NoticeController");
var GameOverController = require("../controller/GameOverController");
var HelpController = require("../controller/HelpController");
var GameWinController = require("../controller/GameWinController");
var PassController = require("../controller/PassController");
var StoreController = require("../controller/StoreController");
var PauseController = require("../controller/PauseController");
var FailController = require("../controller/FailController");
var RankController = require("../controller/RankController");
var RewardVideoController = require("../controller/RewardVideoController");
var WheelController = require("../controller/WheelController");
var RewardDoubleController = require("../controller/RewardDoubleController");
var BagController = require("../controller/BagController");
var RewardGiftController = require("../controller/RewardGiftController");
var SkinController = require("../controller/SkinController");
var DailyBonusController = require("../controller/DailyBonusController");
var SpecialOfferController = require("../controller/SpecialOfferController");
var RewardNoticeController = require("../controller/RewardNoticeController");
var TaskController = require("../controller/TaskController");
var SettingController = require("../controller/SettingController");
var ReliveController = require("../controller/ReliveController");
var WatchAdsGetSkinController = require("../controller/WatchAdsGetSkinController");
var WatchAdsGetItemController = require("../controller/WatchAdsGetItemController");
var WatchAdsGetDiamondsController = require("../controller/WatchAdsGetDiamondsController");
var WatchAdsGet3StarController = require("../controller/WatchAdsGet3StarController");

var PopupMan = {

    popupCommonDlg: function (info, yesCallback) {
        var noticeNode = NoticeController.createFromCCB();
        noticeNode.controller.initWithYes(info, yesCallback, null);
        noticeNode.controller.popup();
    },

    popupYesNoCommonDlg: function (info, yesInfo, cancelInfo, yesCallback, noCallback, isShowClose, isShowAds) {
        var noticeNode = NoticeController.createFromCCB();
        noticeNode.controller.initWithYesNo(info, yesInfo, cancelInfo, yesCallback, noCallback, isShowClose, isShowAds);
        noticeNode.controller.popup();
    },

    popupRewardDlg: function (info, yesCallback, reward1Sprite, reward1Count, reward2Sprite, reward2Count) {
        var noticeNode = NoticeController.createFromCCB();
        noticeNode.controller.initWithRewardYes(info, yesCallback, reward1Sprite, reward1Count, reward2Sprite, reward2Count);
        noticeNode.controller.popup();
    },

    popupNewTipCommonDlg: function (info, yesInfo, cancelInfo, yesCallback, noCallback, isShowClose) {
        var noticeNode = NoticeController.createGuideFromCCB();
        noticeNode.controller.initWithYesNo(info, yesInfo, cancelInfo, yesCallback, noCallback, isShowClose);
        noticeNode.controller.popup();
    },

    popupGameOverDlg: function (percent, replayCallback) {
        var gameOverNode = GameOverController.createFromCCB();
        gameOverNode.controller.initWith(percent, replayCallback);
        gameOverNode.controller.popup();
    },

    popupRateDlg: function (ratedCallback, closeCallback) {
        var rateInfo = game.local.getValue("rate_info");
        this.popupYesNoCommonDlg(rateInfo,
            game.local.getValue("rate_confirm"), game.local.getValue("rate_cancel"), function () {
                //cc.sys.openURL(game.config.getPlatformDownloadUrl());
                if (game.utils.isIOS()) {
                    cc.sys.openURL(game.config.getPlatformDownloadUrl());
                } else {
                    jsb_dp.oneSdkBridge.openApplicationMarket(game.config.getPackageName());
                }
                game.adsManager.rateTime = Date.now();
                if (ratedCallback) {
                    ratedCallback();
                }
            },
            function () {
                if (closeCallback) {
                    closeCallback();
                }
            }, false);
    },

    popupHelpDlg: function () {
        var helpNode = HelpController.createFromCCB();
        helpNode.controller.popup();
    },

    popupGameWinDlg: function (replayCallback, nextCallback) {
        var gameOverNode = GameWinController.createFromCCB();
        gameOverNode.controller.initWith(replayCallback, nextCallback);
        gameOverNode.controller.popup();
    },

    popupPassDlg: function (replayCallback, nextCallback) {
        var node = PassController.createFromCCB();
        node.controller.initWith(replayCallback, nextCallback);
        node.controller.popup();
    },

    popupFailDlg: function (replayCallback, skipCallback) {
        var node = FailController.createFromCCB();
        node.controller.initWith(replayCallback, skipCallback);
        node.controller.popup();
    },

    popupStoreDlg: function (type, callback) {
        var node = StoreController.createFromCCB();
        node.controller.initWith(type, callback);
        node.controller.popup();
    },

    popupPauseDlg: function (resuemCallback) {
        var node = PauseController.createFromCCB();
        node.controller.initWith(resuemCallback);
        node.controller.popup();
    },
    popupRankDlg: function (rankType, closeCallback) {
        var node = RankController.createFromCCB();
        node.controller.init(rankType, closeCallback);
        node.controller.popup();
        return node;
    },
    popupGroupRankDlg: function () {
        if (this.lastGroupRankNode) {
            this.lastGroupRankNode.controller.closeCallback = null;
            this.lastGroupRankNode.controller.close();
        }
        var RankType = require("../enum/RankType");
        var self = this;
        this.lastGroupRankNode = this.popupRankDlg(RankType.Group, function () {
            self.lastGroupRankNode = null;
        });

    },
    popupRewardVideo: function (closeCallback) {
        var node = RewardVideoController.createFromCCB();
        node.controller.init(closeCallback);
        node.controller.popup();
    },

    popupWheelDlg: function (wheelType) {
        var node = WheelController.createFromCCB();
        node.controller.initWith(wheelType);
        node.controller.popup();
    },

    popupRewardDoubleTipDlg: function (image, count, rewardName, callback) {
        var node = RewardDoubleController.createFromCCB();
        node.controller.init(image, count, rewardName, callback);
        node.controller.popup();
    },

    popupBagDlg: function () {
        var node = BagController.createFromCCB();
        node.controller.popup();
    },

    popupRewardGift: function (closeCallback) {
        var node = RewardGiftController.createFromCCB();
        node.controller.init(closeCallback);
        node.controller.popup();
    },

    popupSkinDlg: function () {
        var node = SkinController.createFromCCB();
        node.controller.popup();
    },

    popupDailyBonus: function () {
        var node = DailyBonusController.createFromCCB();
        node.controller.popup();
    },

    popupSpeicialOffer: function () {
        var node = SpecialOfferController.createFromCCB();
        node.controller.popup();
    },

    popupRewardNoticeDlg: function (info, yesCallback, reward1Sprite, reward1Count, reward2Sprite, reward2Count) {
        var noticeNode = RewardNoticeController.createFromCCB();
        noticeNode.controller.initWithRewardYes(info, yesCallback, reward1Sprite, reward1Count, reward2Sprite, reward2Count);
        noticeNode.controller.popup();
    },

    popupTaskDlg: function () {
        var node = TaskController.createFromCCB();
        node.controller.popup();
    },

    popupSettingDlg: function () {
        var node = SettingController.createFromCCB();
        node.controller.popup();
    },

    popupReliveDlg: function (reliveCallback, cancelCallback) {
        var node = ReliveController.createFromCCB();
        node.controller.initWith(reliveCallback, cancelCallback);
        node.controller.popup();
    },

    popupWatchAdsGetSkin: function (skinCfg) {
        var node = WatchAdsGetSkinController.createFromCCB();
        node.controller.initWith(skinCfg);
        node.controller.popup();
    },

    popupWatchAdsGetItem: function (title, spriteName, rewardName, closeCallback) {
        var node = WatchAdsGetItemController.createFromCCB();
        node.controller.initWith(title, spriteName, rewardName, closeCallback);
        node.controller.popup();
    },

    popupWatchAdsGetDiamonds: function (rewardName, closeCallback) {
        var node = WatchAdsGetDiamondsController.createFromCCB();
        node.controller.initWith(rewardName, closeCallback);
        node.controller.popup();
    },

    popupGet3Star: function (rewardName, closeCallback) {
        var node = WatchAdsGet3StarController.createFromCCB();
        node.controller.initWith(rewardName, closeCallback);
        node.controller.popup();
    }
};

module.exports = PopupMan;
},{"../controller/BagController":52,"../controller/DailyBonusController":54,"../controller/FailController":57,"../controller/GameOverController":59,"../controller/GameWinController":60,"../controller/HelpController":61,"../controller/NoticeController":66,"../controller/PassController":69,"../controller/PauseController":70,"../controller/RankController":71,"../controller/ReliveController":72,"../controller/RewardDoubleController":73,"../controller/RewardGiftController":74,"../controller/RewardNoticeController":75,"../controller/RewardVideoController":76,"../controller/SettingController":77,"../controller/SkinController":78,"../controller/SpecialOfferController":81,"../controller/StoreController":82,"../controller/TaskController":84,"../controller/WatchAdsGet3StarController":87,"../controller/WatchAdsGetDiamondsController":88,"../controller/WatchAdsGetItemController":89,"../controller/WatchAdsGetSkinController":90,"../controller/WheelController":91,"../enum/RankType":108}],119:[function(require,module,exports){
var FileCacheStub = require("../../common/util/FileCacheStub");

var ResourcesMan = cc.Class.extend({

    fileCacheStub: null,

    ctor: function () {
        this.fileCacheStub = new FileCacheStub();
    },

    preload: function (callback) {
        //cc.log("preload 111");
        var results = game.utils.loadJson("res/resource_list/resource_list.json");
        var audios = game.utils.loadJson("res/resource_list/audio_list.json");
        var fileCacheStub = this.fileCacheStub;

        var picList = [];
        var plistList = [];
        var cacheList = [];
        results.forEach(function (fileName) {
            var extName = cc.path.extname(fileName);
            if (extName === ".png" || extName === ".jpg") {
                picList.push(fileName);
            } else if (extName === ".plist") {
                plistList.push(fileName);
            } else if (extName === ".ccbi" || extName === ".json" || extName === ".atlas" || extName === ".ogg") {
                cacheList.push(fileName);
            }
        });

        var loadPicFuncs = [];
        for (var i = 0; i < picList.length; ++i) {
            //cc.log("preload 222");
            var loadPicFunc = function (fileName) {
                return function () {
                    cc.textureCache.addImage(fileName);
                };
            }
            loadPicFuncs.push(loadPicFunc(picList[i]));
        }

        var loadListFuc = function () {
            //cc.log("preload 333");
            plistList.forEach(function (fileName) {
                var index = fileName.indexOf(".");
                if (index >= 0) {
                    var plistName = fileName.substr(0, index);
                    cc.spriteFrameCache.addSpriteFrames(game.utils.sprintf("%s.plist", plistName),
                        game.utils.sprintf("%s.png", plistName));
                }
            });
        };

        var cacheFunc = function () {
            //cc.log("preload 444");
            cacheList.forEach(function (fileName) {
                fileCacheStub.cacheFile(fileName);
            });
        };

        var preloadAudio = function () {
            //cc.log("preload 555");
            audios.forEach(function (fileName) {
                game.audioPlayer.preloadEffect(fileName);
            });
        };

        var funcList = loadPicFuncs.concat([loadListFuc, cacheFunc, preloadAudio]);

        game.utils.loadIterator(funcList, function () {
            if (callback) {
                callback();
            }
        });
    }
});

ResourcesMan._instance = null;
ResourcesMan._firstUseInstance = true;

/**
 *
 * @returns {ResourcesMan}
 */
ResourcesMan.getInstance = function () {
    if (ResourcesMan._firstUseInstance) {
        ResourcesMan._firstUseInstance = false;
        ResourcesMan._instance = new ResourcesMan();
    }
    return ResourcesMan._instance;
};

module.exports = ResourcesMan;
},{"../../common/util/FileCacheStub":34}],120:[function(require,module,exports){
/**
 * Created by qinning on 2018/1/1.
 */

var SceneType = require("../enum/SceneType");
var MenuScene = require("../scene/MenuScene");
var LevelScene = require("../scene/LevelScene");
var PackageScene = require("../scene/PackageScene");
var GameScene = require("../scene/GameScene");
var GameBridge = require("../../common/bridge/GameBridge");

var SceneMan = cc.Class.extend({

    sceneMap: null,

    lastScene: null,
    curScene: null,

    ctor: function () {
        this.sceneMap = {};
        this.register();
        this.lastScene = SceneType.NONE;
        this.curScene = SceneType.MENU;
    },

    setCurScene: function (scene) {
        this.curScene = scene;
    },

    register: function () {
        this.sceneMap[SceneType.MENU] = GameBridge.getMenuScene;
        this.sceneMap[SceneType.PACKAGE] = function () {
            return new PackageScene();
        };
        this.sceneMap[SceneType.LEVEL] = function () {
            return new LevelScene();
        };
        this.sceneMap[SceneType.GAME] = function () {
            return new GameScene();
        };
    },

    switchScene: function (sceneType) {
        this.lastScene = this.curScene;
        this.curScene = sceneType;
        var scene = this.sceneMap[this.curScene];
        if (scene) {
            cc.director.runScene(scene());
        }
    },

    switchLastScene: function () {
        this.switchScene(this.lastScene);
    }
});

SceneMan._instance = null;
SceneMan._firstUseInstance = true;

/**
 *
 * @returns {SceneMan}
 */
SceneMan.getInstance = function () {
    if (SceneMan._firstUseInstance) {
        SceneMan._firstUseInstance = false;
        SceneMan._instance = new SceneMan();
    }
    return SceneMan._instance;
};

module.exports = SceneMan;
},{"../../common/bridge/GameBridge":3,"../enum/SceneType":109,"../scene/GameScene":122,"../scene/LevelScene":123,"../scene/MenuScene":125,"../scene/PackageScene":126}],121:[function(require,module,exports){
/**
 * Created by qinning on 2017/1/23.
 */

var PaymentInfo = require("../../common/entity/PaymentInfo");
var PaymentCode = require("../../common/enum/PaymentCode");
var ProductInfo = require("../../common/entity/ProductInfo");
var StoreType = require("../enum/StoreType");
var ConfigMan = require("../config/ConfigMan");
var BoostType = require("../enum/BoostType");
var EventsName = require("../events/EventsName");
var SkinType = require("../enum/SkinType");

var StoreHelper = cc.Class.extend({

    /**
     * @type {Array.<ProductInfo>}
     */
    productList: null,
    /**
     * @type {Array.<StoreConfig>}
     */
    storeList: null,

    inited: false,

    _rewardCB: null,

    ctor: function () {
        game.storeManager.setPaymentDelegate(this);
        this.storeList = ConfigMan.getInstance().getStoreList();

        game.adsManager.setAdListener(this);
    },

    init: function () {
        if (this.inited) {
            return;
        }
        this.inited = true;
        this.requestProducts();
        this.getUnverifiedReceiptList();
    },

    clear: function () {
        game.adsManager.setAdListener(null);
    },

    onRewardedVideoFinished: function (isRewarded) {
        cc.log("onRewardedVideoFinished:" + isRewarded);
        this._isRewarded = isRewarded;
        if (isRewarded && cc.sys.os !== cc.sys.OS_ANDROID) {
            this.onRewardedVideoReward();
        }
    },

    onShowVideoAdBegin: function () {
        cc.log("GameNode onShowVideoAdBegin");
        this._isRewarded = false;
    },

    onShowVideoAdEnd: function () {
        cc.log("GameNode onShowVideoAdEnd");
        var time = 100;
        if (cc.sys.os === cc.sys.OS_ANDROID) {
            time = 1000;
        }
        setTimeout(function () {
            if (this._isRewarded && cc.sys.os === cc.sys.OS_ANDROID) {
                this.onRewardedVideoReward();
            }
            if (!this._isRewarded) {
                if (this._rewardCB) {
                    this._rewardCB(false);
                    this._rewardCB = null;
                }
            }
        }.bind(this), time);
    },

    onRewardedVideoReward: function () {
        game.analyseManager.trackEvent("WatchRVSource", {name: this._adName});
        if (this._rewardCB) {
            this._rewardCB(true);
            this._rewardCB = null;
            return;
        }
        if (game.playerMan.getRewardAdPlaceCountPerDay() >= game.config.rewardAdMaxCountPerDay) {
            cc.log("StoreHelper onRewardedVideoReward has reached max count:" + game.playerMan.getRewardAdPlaceCountPerDay());
            return;
        }
        var name = "";
        if (this._adParam1) {
            game.analyseManager.trackEvent(this._adParam1);
            name = this._adParam1;
        } else {
            name = "unknown";
            cc.error("StoreHelper adParam is null:" + this._adParam1);
        }
        this._adParam1 = null;
        game.playerMan.addRewardAdCountPerDay();
        var freeEntity = this.getStoreEntityByType(StoreType.FREE);
        game.popupMan.popupRewardNoticeDlg(game.local.getValue("reward_video_diamonds"),
            function () {
                game.playerMan.addDiamonds(freeEntity.count, "reward_video_" + name);
            }, this.getBoostImage(BoostType.DIAMOND), freeEntity.count);
    },

    /**
     * @param pid
     * @returns {StoreConfig | null}
     */
    getStoreEntity: function (pid) {
        for (var i = 0; i < this.storeList.length; ++i) {
            if (this.storeList[i].pid === pid) {
                return this.storeList[i];
            }
        }
        return null;
    },

    getStoreEntityByType: function (type) {
        for (var i = 0; i < this.storeList.length; ++i) {
            if (this.storeList[i].type === type) {
                return this.storeList[i];
            }
        }
        return null;
    },

    getBoostImage: function (boostType) {
        switch (boostType) {
            case BoostType.SPLIT:
                return "store_3_multiple.png";
            case BoostType.THREE_BALL:
                return "store_3_new.png";
            case BoostType.DIAMOND:
                return "icon_diamond_1.png";
            case BoostType.AIM_ITEM:
                return "store_aim.png";
        }
    },

    _getNumFromString: function (text) {
        return text.replace(/[^0-9.]/ig, "");
    },

    updatePrice: function (product) {
        var storeProduct = this.getStoreEntity(product.productId);
        if (storeProduct) {
            storeProduct.price = product.price;
            try {
                if (storeProduct.original_price) {
                    var priceStr = this._getNumFromString(product.price);
                    var priceNum = Number(priceStr);
                    storeProduct.original_price = product.price.replace(priceStr,
                        (priceNum * (storeProduct.discount_multi + 1)).toFixed(2));
                }
            } catch (ex) {
                cc.error("update price:" + ex);
            }
        }
    },

    checkAndShowRewardVideo: function (name, cb, param1) {
        this._adParam1 = param1;
        this._adName = name;
        if (game.adsManager.isRewardVideoReady()) {
            this._rewardCB = cb;
            game.adsManager.showRewardVideoAd(name);
        } else {
            cc.log("reward video not ready");
        }
    },

    /**
     * @param {StoreConfig} storeEntity
     */
    buyProduct: function (storeEntity) {
        switch (storeEntity.type) {
            case StoreType.NEW_3:
            case StoreType.SPLIT:
            case StoreType.FIRST_PURCHASE:
                game.storeManager.payForProduct(storeEntity.pid);
                break;
            case StoreType.DIAMOND:
                //game.analyseManager.trackEvent("PurchaseDiamonds", {"pid": storeEntity.pid});
                game.storeManager.payForProduct(storeEntity.pid);
                break;
            case StoreType.FREE:
                this.checkAndShowRewardVideo(game.utils.isIOS() ? "daoju01" : "jili03");
                break;
            case StoreType.REMOVE_ADS:
                this.buyRemoveAds(storeEntity.pid);
                break;
            case StoreType.RESTORE:
                game.storeManager.restoreCompletedTransactions();
                break;
            case StoreType.NEW_AND_SPLIT:
                this.buyBoosts(storeEntity);
                break;
            case StoreType.AIM_ITEM:
                game.storeManager.payForProduct(storeEntity.pid);
                break;
        }
    },

    buyRemoveAds: function (pid) {
        if (game.playerMan.player.removedAds) {
            game.popupMan.popupCommonDlg(game.local.getValue("removed_all_ads_tips"));
        } else {
            if (cc.sys.os === cc.sys.OS_ANDROID) {
                game.popupMan.popupYesNoCommonDlg(game.local.getValue("purchase_no_ad_tips"),
                    game.local.getValue("buy_title"), game.local.getValue("cancel_title"), function () {
                        game.storeManager.payForProduct(pid);
                    }, null, false);
            } else {
                game.popupMan.popupYesNoCommonDlg(game.local.getValue("purchase_no_ad_tips"),
                    game.local.getValue("buy_title"), game.local.getValue("restore_title"), function () {
                    game.storeManager.payForProduct(pid);
                }, function () {
                    game.storeManager.restoreCompletedTransactions();
                }, true);
            }
        }
    },

    buySkin: function (skinCfg, rewardName, cb) {
        if (!game.playerMan.hasSkin(skinCfg.id)) {
            switch (skinCfg.type) {
                case SkinType.Diamonds:
                    if (game.playerMan.getDiamonds() >= skinCfg.count) {
                        game.playerMan.setClaimedSkin(skinCfg.id);
                        game.playerMan.setCurrentSkinId(skinCfg.id);
                        game.playerMan.addDiamonds(-skinCfg.count, "purchase_skin", "skin", 1);
                        game.eventDispatcher.dispatchEvent(EventsName.UPDATE_SKIN);
                        game.analyseManager.trackEvent("DiamondPurchaseSkin", {"skinId": skinCfg.id});
                        cb && cb(true);
                    } else {
                        this.popupLackDiamonds();
                    }
                    break;
                case SkinType.WatchAds:
                    this.checkAndShowRewardVideo(rewardName, function (rewarded) {
                        if (rewarded) {
                            game.playerMan.addSkinAdsCount(skinCfg.id);
                            if (game.playerMan.getSkinAdsCount(skinCfg.id) >= skinCfg.count) {
                                game.playerMan.setClaimedSkin(skinCfg.id);
                                game.playerMan.setCurrentSkinId(skinCfg.id);

                                game.popupMan.popupRewardNoticeDlg(game.local.getValue("skin_claimed"),
                                    function () {
                                    }, skinCfg.image + "_l.png", 1);
                                cb && cb(true);
                            }
                            game.analyseManager.trackEvent("RewardVideoPurchaseSkin", {"skinId": skinCfg.id});
                            game.eventDispatcher.dispatchEvent(EventsName.UPDATE_SKIN);
                        }
                    });
                    break;
                default:
                    cc.error("undefined skin type:" + skinCfg.type);
                    break;
            }
        }
    },

    useSkin: function (skinCfg) {
        game.playerMan.setCurrentSkinId(skinCfg.id);
        game.eventDispatcher.dispatchEvent(EventsName.UPDATE_SKIN);
    },

    buyBoosts: function (storeEntity) {
        if (game.playerMan.getDiamonds() >= storeEntity.count) {
            var splitCount = storeEntity.data.multiple_3;
            var threeBallCount = storeEntity.data.new_3;
            var splitImage = this.getBoostImage(BoostType.SPLIT);
            var new3Image = this.getBoostImage(BoostType.THREE_BALL);
            game.playerMan.addDiamonds(-storeEntity.count / 2, "buy_boosts", "boost_split", splitCount);
            game.playerMan.addDiamonds(-storeEntity.count / 2, "buy_boosts", "boost_new_3", threeBallCount);
            game.analyseManager.trackEvent("DiamondPurchaseBoosts", {"diamonds": storeEntity.count});
            game.popupMan.popupRewardDlg(game.local.getValue("purchase_boost_success"),
                function () {
                    game.playerMan.addBoost(BoostType.SPLIT, splitCount);
                    game.playerMan.addBoost(BoostType.THREE_BALL, threeBallCount);
                }, splitImage, splitCount, new3Image, threeBallCount);
        } else {
            this.popupLackDiamonds();
        }
    },

    skipLevel: function (levelId) {
        if (game.playerMan.getDiamonds() >= game.config.skipDiamonds) {
            game.playerMan.addDiamonds(-game.config.skipDiamonds, "skip_level", "skip_level", 1);
            game.analyseManager.consumeItem("skip_level", 1);
            game.analyseManager.trackEvent("DiamondPurchaseSkipLevel", {"level": levelId});
            return true;
        } else {
            this.popupLackDiamonds();
            return false;
        }
    },

    reliveLevel: function (levelId) {
        if (game.playerMan.getDiamonds() >= game.config.relifeDiamonds) {
            game.playerMan.addDiamonds(-game.config.relifeDiamonds, "revive", "revive", 1);
            game.analyseManager.consumeItem("revive", 1);
            game.analyseManager.trackEvent("DiamondPurchaseReliveLevel", {"level": levelId});
            return true;
        } else {
            this.popupLackDiamonds();
            return false;
        }
    },

    tryAimItem: function (levelId, callback) {
        this.checkAndShowRewardVideo("try_aim_item", function (rewarded) {
            if (rewarded) {
                game.analyseManager.trackEvent("RewardedVideoTryAimItem", {"level": levelId});
                callback && callback();
            }
        }.bind(this));
    },

    onOpenBox: function () {
        //open the wheel.
        var WheelType = require("../enum/WheelType");
        game.popupMan.popupWheelDlg(WheelType.Box);
    },

    popupLackDiamonds: function () {
        //game.popupMan.popupCommonDlg(_("diamond_not_enough"));
        if (!game.gameMan.isSpecialOfferPurchased()) {
            game.popupMan.popupSpeicialOffer();
        } else {
            var StoreType = require("../enum/StoreType");
            game.popupMan.popupStoreDlg(StoreType.DIAMOND);
        }
    },

    requestProducts: function () {
        var productIds = [];
        for (var i = 0; i < this.storeList.length; ++i) {
            var entity = this.storeList[i];
            if (entity && entity.pid) {
                productIds.push(entity.pid);
            }
        }
        cc.log("requestproducts:" + JSON.stringify(productIds));
        game.storeManager.requestProduct(productIds);
    },

    getUnverifiedReceiptList: function () {
        game.storeManager.getUnverifiedReceiptList();
    },

    /**
     * @param {PaymentCode} error
     * @param {PaymentInfo} paymentInfo
     */
    onPaymentCompleted: function (error, paymentInfo) {
        var paymentSuccess = false;
        if (error === PaymentCode.PAYMENT_CODE_SUCCESS) {
            this._onPaymentSuccess(paymentInfo, true);
            paymentSuccess = true;
        } else {
            game.popupMan.popupCommonDlg(game.local.getValue("purchase_fail"));
        }
        game.eventDispatcher.dispatchEvent(EventsName.PURCHASE_END, paymentSuccess);
    },

    /**
     * @param {Array.<PaymentInfo>} paymentInfoList
     */
    onGetUnverifiedReceiptList: function (paymentInfoList) {
        for (var i = 0; i < paymentInfoList.length; ++i) {
            this._onPaymentSuccess(paymentInfoList[i], false);
        }
    },

    /**
     * on get product list.
     * @param {Array.<ProductInfo>} productList
     */
    onGetProductList: function (productList) {
        this.productList = productList;
        for (var i = 0; i < productList.length; ++i) {
            var product = productList[i];
            this.updatePrice(product);
        }
    },

    /**
     * @param {PaymentInfo} paymentInfo
     * @param hasNotice
     * @private
     */
    _onPaymentSuccess: function (paymentInfo, hasNotice) {
        // var storeEntity = this.getStoreEntity()
        // var product = this._getProductById(paymentInfo.productId);
        // if (product) {
        //     // var price = this._getNumFromString(product.price) * 100;
        //     game.analyseManager.trackPurchaseEvent(price, product.title, paymentInfo.productId,
        //         paymentInfo.receipt);
        // }
        var storeEntity = this.getStoreEntity(paymentInfo.productId);
        var splitImage = this.getBoostImage(BoostType.SPLIT);
        var new3Image = this.getBoostImage(BoostType.THREE_BALL);
        var self = this;
        switch (storeEntity.type) {
            case StoreType.REMOVE_ADS:
                game.playerMan.removedAds();
                if (hasNotice) {
                    game.popupMan.popupCommonDlg(game.local.getValue("purchase_no_ad_success"));
                }
                if (cc.sys.os === cc.sys.OS_IOS) {
                    game.storeManager.consume(paymentInfo.purchaseId);
                }
                self.addIapCount(storeEntity);
                game.analyseManager.trackChargeRequest(paymentInfo.purchaseId, paymentInfo.productId, storeEntity.priceUS, "USD", 0, "IAP");
                game.analyseManager.trackChargeSuccess(paymentInfo.purchaseId);
                break;
            case StoreType.NEW_3:
            case StoreType.SPLIT:
                game.popupMan.popupRewardDlg(game.local.getValue("purchase_boost_success"), function () {
                    game.playerMan.addBoost(storeEntity.type, storeEntity.count);
                    game.storeManager.consume(paymentInfo.purchaseId);
                    self.addIapCount(storeEntity);
                }, storeEntity.image, storeEntity.count);
                break;
            case StoreType.FIRST_PURCHASE:
                var diamondCount = storeEntity.data.diamonds;
                game.popupMan.popupRewardDlg(game.local.getValue("purchase_success"),
                    function () {
                        game.playerMan.addDiamonds(diamondCount, "first_purchase", undefined, undefined, true);
                        game.storeManager.consume(paymentInfo.purchaseId);
                        game.playerMan.setSpecialOfferPurchased(paymentInfo.productId);
                        game.analyseManager.trackEvent("PurchaseSpecialOffer");
                        self.addIapCount(storeEntity);
                        //var splitCount = storeEntity.data.multiple_3;
                        //var threeBallCount = storeEntity.data.new_3;
                        //game.popupMan.popupRewardDlg(game.local.getValue("purchase_boost_success"),
                        //    function () {
                        //        game.playerMan.addBoost(BoostType.SPLIT, splitCount);
                        //        game.playerMan.addBoost(BoostType.THREE_BALL, threeBallCount);
                        //    }, splitImage, splitCount, new3Image, threeBallCount);
                        game.analyseManager.trackChargeRequest(paymentInfo.purchaseId, paymentInfo.productId, storeEntity.priceUS, "USD", diamondCount, "IAP");
                        game.analyseManager.trackChargeSuccess(paymentInfo.purchaseId);
                    }, this.getBoostImage(BoostType.DIAMOND), diamondCount);
                break;
            case StoreType.NEW_AND_SPLIT:
                var splitCount = storeEntity.data.multiple_3;
                var threeBallCount = storeEntity.data.new_3;
                game.popupMan.popupRewardDlg(game.local.getValue("purchase_boost_success"),
                    function () {
                        game.playerMan.addBoost(BoostType.SPLIT, splitCount);
                        game.playerMan.addBoost(BoostType.THREE_BALL, threeBallCount);
                        game.storeManager.consume(paymentInfo.purchaseId);
                        self.addIapCount(storeEntity);
                    }, splitImage, splitCount, new3Image, threeBallCount);
                break;
            case StoreType.DIAMOND:
                var count = storeEntity.count;
                game.popupMan.popupRewardDlg(game.local.getValue("purchase_success"),
                    function () {
                        game.playerMan.addDiamonds(count, "purchase", undefined, undefined, true);
                        game.storeManager.consume(paymentInfo.purchaseId);
                        self.addIapCount(storeEntity);
                        game.analyseManager.trackChargeRequest(paymentInfo.purchaseId, paymentInfo.productId, storeEntity.priceUS, "USD", count, "IAP");
                        game.analyseManager.trackChargeSuccess(paymentInfo.purchaseId);
                    }, storeEntity.image, count);
                break;
            case StoreType.AIM_ITEM:
                game.popupMan.popupRewardDlg(game.local.getValue("purchase_success"),
                    function () {
                        game.playerMan.purchasedAimItem();
                        game.storeManager.consume(paymentInfo.purchaseId);
                        game.analyseManager.trackEvent("PurchaseAimItem");
                        self.addIapCount(storeEntity);
                        game.analyseManager.trackChargeRequest(paymentInfo.purchaseId, paymentInfo.productId, storeEntity.priceUS, "USD", 0, "IAP");
                        game.analyseManager.trackChargeSuccess(paymentInfo.purchaseId);
                        game.eventDispatcher.dispatchEvent(EventsName.UPDATE_AIM_ITEM);
                    }, this.getBoostImage(BoostType.AIM_ITEM), 1);
                break;
        }
    },

    addIapCount: function (storeEntity) {
        game.playerMan.addIapCount();
        var iapCount = game.playerMan.player.iapCount;
        if (iapCount === 1) {
            game.analyseManager.trackEvent("FirstPurchase", {"pid": storeEntity.pid});
        } else if (iapCount === 2) {
            game.analyseManager.trackEvent("SecondPurchase", {"pid": storeEntity.pid});
        }
        if (iapCount >= 2) {
            game.analyseManager.trackEvent("MultiPurchase", {"pid": storeEntity.pid});
        }
        game.analyseManager.trackEvent("PurchaseLevel", {"levelId": game.gameMan.levelId, "pid": storeEntity.pid});
    },

    popupBoostRewardDlg: function (splitCount, threeBallCount, callback) {
        var new3Image = this.getBoostImage(BoostType.THREE_BALL);
        var splitImage = this.getBoostImage(BoostType.SPLIT);

        var image1 = undefined;
        var count1 = 0;
        var image2 = undefined;
        var count2 = 0;
        if (threeBallCount > 0) {
            image1 = new3Image;
            count1 = threeBallCount;
            if (splitCount > 0) {
                image2 = splitImage;
                count2 = splitCount;
            }
        } else {
            image1 = splitImage;
            count1 = splitCount;
        }

        game.popupMan.popupRewardNoticeDlg(game.local.getValue("reward_video_boosts"),
            function () {
                game.playerMan.addBoost(BoostType.SPLIT, splitCount);
                game.playerMan.addBoost(BoostType.THREE_BALL, threeBallCount);
                if (callback) {
                    callback();
                }
            }, image1, count1, image2, count2);
    },

    popupAddDiamondsDlg: function (count, rewardName, cb) {
        game.popupMan.popupRewardNoticeDlg(game.local.getValue("reward_video_diamonds"),
            function () {
                game.playerMan.addDiamonds(count, rewardName);
                cb && cb();
            }, this.getBoostImage(BoostType.DIAMOND), count);
    },

    popupRewardDoubleDlg: function (itemCount, type, rewardName, cb) {
        game.popupMan.popupRewardDoubleTipDlg(this.getBoostImage(type), itemCount, rewardName, function (double) {
            var count = double ? itemCount * 2 : itemCount;
            var splitCount = 0;
            var threeBallCount = 0;
            var diamondCount = 0;
            if (type === BoostType.SPLIT) {
                splitCount = count;
            } else if (type === BoostType.THREE_BALL) {
                threeBallCount = count;
            } else if (type === BoostType.DIAMOND) {
                diamondCount = count;
            }
            if (double) {
                if (splitCount > 0 || threeBallCount > 0) {
                    var self = this;
                    self.popupBoostRewardDlg(splitCount, threeBallCount, function () {
                        if (diamondCount > 0) {
                            self.popupAddDiamondsDlg(diamondCount, rewardName, cb);
                        } else {
                            cb && cb();
                        }
                    });
                } else {
                    if (diamondCount > 0) {
                        this.popupAddDiamondsDlg(diamondCount, rewardName, cb);
                    } else {
                        cb && cb();
                    }
                }
            } else {
                game.playerMan.addBoost(BoostType.SPLIT, splitCount);
                game.playerMan.addBoost(BoostType.THREE_BALL, threeBallCount);
                game.playerMan.addDiamonds(diamondCount, rewardName);
                cb && cb();
            }
        }.bind(this));
    }
});

StoreHelper._instance = null;
StoreHelper._firstUseInstance = true;

/**
 *
 * @returns {StoreHelper}
 */
StoreHelper.getInstance = function () {
    if (StoreHelper._firstUseInstance) {
        StoreHelper._firstUseInstance = false;
        StoreHelper._instance = new StoreHelper();
    }
    return StoreHelper._instance;
};

module.exports = StoreHelper;
},{"../../common/entity/PaymentInfo":7,"../../common/entity/ProductInfo":9,"../../common/enum/PaymentCode":11,"../config/ConfigMan":40,"../enum/BoostType":103,"../enum/SkinType":112,"../enum/StoreType":113,"../enum/WheelType":114,"../events/EventsName":115}],122:[function(require,module,exports){
var GameController = require("../controller/GameController");
var GameMan = require("../model/GameMan");
var StoreHelper = require("../model/StoreHelper");

var GameScene = cc.Scene.extend({
    _gameType: 0,
    _isBackClicked: false,

    ctor: function () {
        this._super();
        game.adsManager.removeBannerAds("bottom");
        game.gameMan.resetTryAnimItem();
        var gameNode = GameController.createFromCCB();
        this.addChild(gameNode);
    },

    onEnter:function () {
        this._super();
        StoreHelper.getInstance().init();
    },

    onExit: function () {
        game.dialogManager.closeAll();
        this._super();
    }
});

module.exports = GameScene;

},{"../controller/GameController":58,"../model/GameMan":116,"../model/StoreHelper":121}],123:[function(require,module,exports){
var MenuController = require("../controller/MenuController");
var StoreHelper = require("../model/StoreHelper");
var LevelController = require("../controller/LevelController");

var LevelScene = cc.Scene.extend({

    ctor: function () {
        this._super();
        var layer = LevelController.createFromCCB();
        this.addChild(layer);
    },

    onEnter:function () {
        this._super();

        cc.eventManager.addListener({
            event: cc.EventListener.KEYBOARD,
            onKeyReleased: function (keyCode, event) {
                if (keyCode === cc.KEY.back) {
                    if (!this._isBackClicked) {
                        this._isBackClicked = true;
                        game.sceneMan.switchScene(game.sceneType.MENU);
                    }
                }
            }.bind(this)
        }, this);

        if (game.playerMan.getLevel() >= 3) {
            game.adsManager.showBannerAds("bottom");
        }
    },

    onExit: function () {
        game.dialogManager.closeAll();
        this._super();
    }
});

module.exports = LevelScene;
},{"../controller/LevelController":62,"../controller/MenuController":65,"../model/StoreHelper":121}],124:[function(require,module,exports){
/**
 * Created by oye on 15-4-19.
 */
var LoadingController = require("../controller/LoadingController");

var LoadingScene = cc.Scene.extend({
    ctor:function () {
        this._super();
        var layer = LoadingController.createFromCCB();
        this.addChild(layer);
    }
});

module.exports = LoadingScene;
},{"../controller/LoadingController":64}],125:[function(require,module,exports){
var MenuController = require("../controller/MenuController");
var StoreHelper = require("../model/StoreHelper");
var GameMan = require("../model/GameMan");
var PlayerMan = require("../model/PlayerMan");
var SceneMan = require("../model/SceneMan");
var SceneType = require("../enum/SceneType");
//var BricksView = require("../view/BricksView");

window.isFirstEnter = true;

var MenuScene = cc.Scene.extend({

    ctor: function () {
        this._super();

        var layer = MenuController.createFromCCB();
        this.addChild(layer);
    },

    onEnter:function () {
        this._super();

        StoreHelper.getInstance().init();

        var self = this;
        cc.eventManager.addListener({
            event: cc.EventListener.KEYBOARD,
            onKeyReleased: function (keyCode, event) {
                if (keyCode === cc.KEY.back) {
                    if (!self._isBackClicked) {
                        self._isBackClicked = true;
                        game.popupMan.popupYesNoCommonDlg(_("exit_game_confirm"), _("yes_title"), _("no_title"), function () {
                            game.logicMan.scheduleLocalNotification();
                            cc.director.end();
                        }, function () {
                            self._isBackClicked = false;
                        });
                    }
                }
            }
        }, this);

        if (game.playerMan.getLevel() >= 3) {
            game.adsManager.showBannerAds("bottom");
        }

        if (game.adsManager.showTopBanner) {
            game.adsManager.removeBannerAds("top");
        }

        this.scheduleOnce(function () {
            game.gcManager.reportScore(0, game.config.getLeaderBoardKey());
            if (!window.isFirstEnter) {
                game.crossPromMan.tryToPopupCrossPromDlg();
            } else {
                window.isFirstEnter = false;
            }
        }, 1);
    },

    onExit: function () {
        game.dialogManager.closeAll();
        this._super();
    }
});

module.exports = MenuScene;
},{"../controller/MenuController":65,"../enum/SceneType":109,"../model/GameMan":116,"../model/PlayerMan":117,"../model/SceneMan":120,"../model/StoreHelper":121}],126:[function(require,module,exports){
var MenuController = require("../controller/MenuController");
var StoreHelper = require("../model/StoreHelper");
var PackageController = require("../controller/PackageController");

var PackageScene = cc.Scene.extend({
    ctor: function () {
        this._super();
        var layer = PackageController.createFromCCB();
        this.addChild(layer);
    },

    onEnter:function () {
        this._super();

        cc.eventManager.addListener({
            event: cc.EventListener.KEYBOARD,
            onKeyReleased: function (keyCode, event) {
                if (keyCode === cc.KEY.back) {
                    if (!this._isBackClicked) {
                        this._isBackClicked = true;
                        game.sceneMan.switchScene(game.sceneType.MENU);
                    }
                }
            }.bind(this)
        }, this);
    },

    onExit: function () {
        game.dialogManager.closeAll();
        this._super();
    }
});

module.exports = PackageScene;
},{"../controller/MenuController":65,"../controller/PackageController":67,"../model/StoreHelper":121}],127:[function(require,module,exports){
var Grid = require("../entity/Grid");
var Ball = require("../entity/Ball");
var BoardController = require("../controller/BoardController");
var BallPool = require("../entity/BallPool");
var Utils = require("../../common/util/Utils");
var GridType = require("../enum/GridType");
var Board = require("../entity/Board");
var ShapeType = require("../enum/ShapeType");
var Boost = require("../entity/Boost");
var BoostType = require("../enum/BoostType");
var Obstacle = require("../entity/Obstacle");
var Wall = require("../entity/Wall");
var GameMan = require("../model/GameMan");
var StoreHelper = require("../model/StoreHelper");
var EventsName = require("../events/EventsName");
var ItemCategory = require("../enum/ItemCategory");

var ColorConfigs = [
    cc.color(252, 178, 0),
    cc.color(81, 229, 12),
    cc.color(27, 226, 255),
    cc.color(255, 252, 29),
    cc.color(255, 56, 56),
    cc.color(248, 70, 255),
    cc.color(255, 129, 17),
    cc.color(57, 103, 249),
    cc.color(90, 181, 110),

    cc.color(255, 90, 141),
    cc.color(242, 86, 9),
    cc.color(66, 46, 176),
    cc.color(144, 85, 222),
    cc.color(23, 167, 104),
    cc.color(176, 72, 206),
    cc.color(147, 192, 26),
    cc.color(55, 70, 219)
];

var GrayColor = cc.color(82, 82, 82);

var getColor = function (type) {
    return ColorConfigs[(type - 1) % ColorConfigs.length];
};

var GameStep = {
    PRE_START: 1,
    AIM_GUIDE: 2,
    START: 3,
    RELIFE: 4,
    FAIL_AND_WAIT_RELIFE: 5,
    END: 6
};

var HINT_WALL_GROUP = 2;

var BricksView = cc.Node.extend({
    SPACE_STEP: 1 / 60,
    LIFE_POSIBILITY: 0.005,
    BOOST_POSIBILITY: 0.05,
    MAX_SPEED: 420,
    MAX_LIFE: 4,
    BOOST_SPEED: 80,
    MAX_BALL: 800,
    TOP_INNER_WALL: 60,
    MAX_SPLIT_COUNT: 100,
    TOP_AD_WALL: 100,
    HINT_BALL: 200,
    HINT_GRAY_BALL: 150,
    //this.TOP_AD_WALL = 100;
    SPLIT_BALL_ANGLE: [45, 90, 135],
    MUST_GEN_BOOST_TIME: 25,

    /**
     * @type {LevelConfig}
     */
    config: null,

    row: 0,
    col: 0,

    ballList: null,

    gameStep: -1,

    lifeCount: 2,

    gameController: null,

    //startTime: 0,

    stoped: false,

    lastTime: 0,

    totalTime: 0,
    lastAdjustTime: 0,

    hardMode: false,

    accumulator: 0,
    boostTypeMap: null,
    lastGetBoostTime: 0,
    _curTouchId: -1,

    lastRemoveTime: 0,

    currentFPS: 60,

    ctor: function (config, gameController) {
        this._super();
        if (game.utils.isLowAndroid()) {
            this.currentFPS = game.config.lowAndroidFPS;
        }
        if (game.gameMan.levelId >= 30) {
            this.MAX_LIFE = 2;
        }
        this.WIN_WIDTH = cc.winSize.width;
        this.WIN_HEIGHT = cc.winSize.height;
        this.lastGetBoostTime = Date.now();
        this.boostTypeMap = {};
        this.boostTypeList = [BoostType.SPLIT, BoostType.THREE_BALL];
        if (cc.sys.os === cc.sys.OS_IOS) {
            this.MAX_BALL = 1000;
        }
        BallPool.setMaxPoolSize("ball", this.MAX_BALL);
        BallPool.setMaxPoolSize("brick", 2000);
        if (game.utils.isNotchScreen()) {
            this.TOP_AD_WALL += 70;
        }
        this.hardMode = GameMan.getInstance().isHardMode();
        if (this.hardMode) {
            config = config.getHardCfg();
        }
        if (config.lifeProbability > 0) {
            this.LIFE_POSIBILITY *= config.lifeProbability;
        }
        if (config.boostProbability > 0) {
            this.BOOST_POSIBILITY *= GameMan.getInstance().getBoostProbability(config);
        }
        cc.log("this.BOOST_POSIBILITY:" + this.BOOST_POSIBILITY);
        this.gameController = gameController;
        this.config = config;
        this.row = config.width;
        this.col = config.height;

        this.GRID_WIDTH = config.pixelWidth / config.width * 0.7;
        this.GRID_HEIGHT = config.pixelHeight / config.height * 0.7;

        this.GAP_WIDTH = config.pixelWidth / config.width - this.GRID_WIDTH;
        this.GAP_HEIGHT = config.pixelHeight / config.height - this.GRID_HEIGHT;

        //顶部最小的能容纳整个球盘的空间
        var minBrickHeight = 600 + this.TOP_INNER_WALL + this.TOP_AD_WALL + 10;
        var maxBrickHeight = this.WIN_HEIGHT - minBrickHeight;

        if (game.utils.isNotchScreen()) {
            this.BRICK_Y = Math.min(this.WIN_HEIGHT * 0.4, maxBrickHeight);
        } else {
            this.BRICK_Y = Math.min(this.WIN_HEIGHT * 0.3, maxBrickHeight);
        }

        this.BOARD_Y = this.BRICK_Y - this.WIN_HEIGHT * 0.16;

        this.setContentSize(cc.winSize);

        this.init();
    },

    onEnter: function () {
        this._super();
        cc.eventManager.addListener({
            event: cc.EventListener.TOUCH_ONE_BY_ONE,
            swallowTouches: true,
            onTouchBegan: this.onTouchBegan.bind(this),
            onTouchMoved: this.onTouchMoved.bind(this),
            onTouchEnded: this.onTouchEnded.bind(this),
            onTouchCancelled: this.onTouchCancelled.bind(this)
        }, this);

        this.scheduleUpdate();

        this.space.setDefaultCollisionHandler(
            this.collisionBegin.bind(this),
            this.collisionPre.bind(this),
            this.collisionPost.bind(this),
            this.collisionSeparate.bind(this)
        );
        this.gameStep = GameStep.PRE_START;
        game.eventDispatcher.addCustomEventListener(cc.game.EVENT_HIDE, this.gameOnHide, this);
        game.eventDispatcher.addEventListener(EventsName.UPDATE_SKIN, this.onUpdateSkin, this);
        game.eventDispatcher.addEventListener(EventsName.SHOW_AIM_GUIDE, this.onShowAimGuide, this);

        this.showTopBannerAds();

        cc.eventManager.addListener({
            event: cc.EventListener.KEYBOARD,
            onKeyReleased: function (keyCode, event) {
                if (keyCode === cc.KEY.back) {
                    this.tryShowPause();
                }
            }.bind(this)
        }, this);

        game.gameMan.onGameStart();
    },

    onExit: function () {
        game.eventDispatcher.removeEventListener(EventsName.SHOW_AIM_GUIDE, this.onShowAimGuide, this);
        game.eventDispatcher.removeCustomEventListener(cc.game.EVENT_HIDE, this.gameOnHide, this);
        game.eventDispatcher.removeEventListener(EventsName.UPDATE_SKIN, this.onUpdateSkin, this);
        //this.space.removeCollisionHandler(ShapeType.BALL,
        //    ShapeType.BRICK);
        this.unscheduleUpdate();
        this.removeTopBannerAds();
        //BallPool.drainAllPools();
        this.space = null;
        this.ballList = null;
        this.boosts = null;
        this.obstacles = null;
        this.walls = null;
        this.bricks = null;
        this._super();
    },

    onUpdateSkin: function () {
        for (var i = 0; i < this.ballList.length; ++i) {
            this.ballList[i].updateSkin();
        }
    },

    gameOnHide: function () {
        if (this.gameStep === GameStep.START) {
            this.tryShowPause();
        }
    },

    tryShowPause: function () {
        if (!this.stoped) {
            if (this.gameController) {
                this.gameController.showPause();
            }
        }
    },

    init: function () {
        this.initWorld();
        this.initObstacles();
        this.initBricks();
        this.initBoard();
        this.initHintLines();

        this.ballList = [];
        this.boosts = [];

        this.lastAdjustTime = Date.now();
        this.lastRemoveTime = Date.now();
    },

    initHintLines: function () {
        this.drawNode = new cc.Node();
        this.addChild(this.drawNode, this.HINT_GRAY_BALL);

        var skinCfg = GameMan.getInstance().getCurrentSkinCfg();
        this.hintSprite = new cc.Sprite("#" + skinCfg.image + ".png");
        this.addChild(this.hintSprite, this.HINT_BALL);
        this.hintSprite.visible = false;
        this.hintSprite.scale = this.getBallWidth() / this.hintSprite.width * skinCfg.scale;
    },

    initObstacles: function () {
        this.obstacles = [];
        this.walls = [];
        for (var i = 0; i < this.config.obstacles.length; ++i) {
            var obstacleCfg = this.config.obstacles[i];
            for (var x = 0; x < obstacleCfg.width; ++x) {
                for (var y = 0; y < obstacleCfg.height; ++y) {
                    var localCol = x + obstacleCfg.x;
                    var localRow = y + obstacleCfg.y;
                    var obstacle = BallPool.getFromPool("obstacle");
                    if (!obstacle) {
                        obstacle = new Obstacle(GrayColor, this.GRID_WIDTH, this.GRID_HEIGHT);
                    } else {
                        obstacle.reset(GrayColor, this.GRID_WIDTH, this.GRID_HEIGHT);
                    }
                    this.addChild(obstacle);
                    obstacle.setPosition(this.getGridPos(localRow, localCol));
                    this.obstacles.push(obstacle);
                }
            }
            var WALL_FILL_SIZE = cc.size(6, 6);
            var wall = new Wall();
            wall.setContentSize(cc.size(
                this.GRID_WIDTH * obstacleCfg.width + this.GAP_WIDTH * (obstacleCfg.width - 1) + WALL_FILL_SIZE.width,
                this.GRID_HEIGHT * obstacleCfg.height + this.GAP_HEIGHT * (obstacleCfg.height - 1) + WALL_FILL_SIZE.height));
            this.walls.push(wall);
            this.addChild(wall);
            var pos = cc.pAdd(this.getGridPos(obstacleCfg.y, obstacleCfg.x),
                cc.p(-0.5 * this.GRID_WIDTH, -0.5 * this.GRID_HEIGHT));
            pos = cc.pAdd(pos, cc.p(-WALL_FILL_SIZE.width * 0.5, -WALL_FILL_SIZE.height * 0.5));
            wall.initBody(this.space, pos);
        }
    },

    initBricks: function () {
        this.bricks = [];
        for (var i = 0; i < this.config.bricks.length; ++i) {
            var brickCfg = this.config.bricks[i];
            for (var x = 0; x < brickCfg.width; ++x) {
                for (var y = 0; y < brickCfg.height; ++y) {
                    var brick = this.createBrick(x, y, brickCfg);
                    this.bricks.push(brick);
                }
            }
        }
    },

    createBrick: function (x, y, brickCfg) {
        var localCol = x + brickCfg.x;
        var localRow = y + brickCfg.y;
        var brick = BallPool.getFromPool("brick");
        if (!brick) {
            brick = new Grid(getColor(brickCfg.type), this.GRID_WIDTH, this.GRID_HEIGHT, GridType.BRICK);
        } else {
            brick.reset(getColor(brickCfg.type), this.GRID_WIDTH, this.GRID_HEIGHT, GridType.BRICK);
        }
        this.addChild(brick);
        brick.initBody(this.space, this.getGridPos(localRow, localCol));
        return brick;
    },

    initBoard: function () {
        this.boardNode = new Board(this.getBallWidth());
        this.addChild(this.boardNode);
        this.boardNode.initBody(this.space, cc.p(this.WIN_WIDTH * 0.5, this.BOARD_Y));
    },

    getBallWidth: function () {
        return Math.max(this.GRID_WIDTH, 8);
    },

    initWorld: function () {
        this.WALL_THICK = 50;
        this.INNER_WALL = 20;
        //this.TOP_INNER_WALL = 50;
        this.space = new cp.Space();
        var xOffset = 0;
        if (window.isEditor) {
            cc.winSize.width - 640;
        }
        var walls = [
            {
                "shape": cc.size(this.WIN_WIDTH + this.WALL_THICK, this.WALL_THICK), //bottom
                "pos": cp.v(this.WIN_WIDTH * 0.5 - this.WALL_THICK * 0.5, -this.WALL_THICK * 0.5 + this.INNER_WALL)
            },
            {
                "shape": cc.size(this.WIN_WIDTH + this.WALL_THICK, this.WALL_THICK), //top
                "pos": cp.v(this.WIN_WIDTH * 0.5 - this.WALL_THICK * 0.5, this.WIN_HEIGHT + this.WALL_THICK * 0.5 - this.TOP_INNER_WALL - this.TOP_AD_WALL)
            },
            {
                "shape": cc.size(this.WALL_THICK, this.WIN_HEIGHT + this.WALL_THICK), //left
                "pos": cp.v(xOffset * 0.5 - this.WALL_THICK * 0.5 + this.INNER_WALL, this.WIN_HEIGHT * 0.5 - this.WALL_THICK * 0.5)
            },
            {
                "shape": cc.size(this.WALL_THICK, this.WIN_HEIGHT + this.WALL_THICK), //right
                "pos": cp.v(-xOffset * 0.5 + this.WIN_WIDTH + this.WALL_THICK * 0.5 - this.INNER_WALL, this.WIN_HEIGHT * 0.5 - this.WALL_THICK * 0.5)
            }
        ];

        for (var i = 0; i < walls.length; i++) {
            var body = new cp.Body(Infinity, Infinity);
            var wall = walls[i];
            var shape = new cp.BoxShape(body, wall.shape.width, wall.shape.height);
            shape.setElasticity(1);
            shape.setFriction(0);
            //shape.layers = 1;
            body.setPos(wall.pos);
            this.space.addStaticShape(shape);
        }

        //for (var i = 0; i < walls.length; i++) {
        //    var body = new cp.Body(Infinity, Infinity);
        //    var wall = walls[i];
        //    var shape = new cp.BoxShape(body, wall.shape.width, wall.shape.height);
        //    shape.setElasticity(1);
        //    shape.setFriction(0);
        //    shape.layers = HINT_WALL_GROUP;
        //    body.setPos(wall.pos);
        //    this.space.addStaticShape(shape);
        //}

        // Gravity
        this.space.gravity = cp.v(0, 0);
        this.space.sleepTimeThreshold = 0.5;
        this.space.collisionSlop = 0.5;
        this.space.iterations = 5;
        if (cc.sys.isNative) {
            this.space.useSpatialHash(this.getBallWidth(), this.MAX_BALL * 10);
        }

        //this.initDebugMode();
    },

    initDebugMode: function () {
        this._debugNode = cc.PhysicsDebugNode.create(this.space);
        this.addChild(this._debugNode);
    },

    getGridPos: function (localRow, localCol) {
        var gridSize = this.getGridSize();
        return cc.p((this.WIN_WIDTH - this.config.pixelWidth) * 0.5 + (gridSize.width + this.GAP_WIDTH) * (localCol + 0.5),
            (gridSize.height + this.GAP_HEIGHT) * (localRow + 0.5) + this.BRICK_Y);
    },

    getGridSize: function () {
        if (!this.lastGridSize) {
            this.lastGridSize = cc.size(this.GRID_WIDTH, this.GRID_HEIGHT);
        }
        return this.lastGridSize;
    },

    update: function (dt) {
        if (this.stoped) {
            return;
        }
        switch (this.gameStep) {
            case GameStep.PRE_START:

                break;
            case GameStep.START:
                //var t1 = Date.now();
                this.updateTime(dt);
                //var t2 = Date.now();
                //cc.log("update start t2:" + (t2 - t1));
                this.updateGrids(dt);
                //var t3 = Date.now();
                //cc.log("update start t3:" + (t3 - t2));
                this.updateChipmunk(dt);
                //var t4 = Date.now();
                //cc.log("update start t4:" + (t4 - t3));
                this.updateBoost(dt);
                //var t5 = Date.now();
                //cc.log("update start t5:" + (t5 - t4));
                this.checkGameOver();
                //var t6 = Date.now();
                //cc.log("update start t6:" + (t6 - t5));
                break;
            case GameStep.RELIFE:
                 if (this.gameController) {
                     this.gameController.updateLifeCount();
                 }
                this.removeAllBoosts();
                this.boardNode.showBall();
                this.gameStep = GameStep.PRE_START;
                break;
            case GameStep.END:
                this.updateChipmunk(dt);
                break;

            case GameStep.AIM_GUIDE:
                var worldPosition = this.gameController.ndAimHelp.controller.getHandWorldPosition();
                if (!this.lastAimHelpPosition) {
                    this.lastAimHelpPosition = worldPosition;
                }
                var offset = (worldPosition.x - this.lastAimHelpPosition.x);
                if (Math.abs(offset) > 10) {
                    this.clearHintNode();
                    this.drawAimLine(worldPosition);
                }
                break;
        }
    },

    updateTime: function (dt) {
        if (!this.eclipsedTime) {
            this.eclipsedTime = 0;
        }
        this.eclipsedTime += dt * 1000;
        if (this.gameController) {
            this.gameController.updateTime();
        }
    },

    updateBalls: function (dt) {
        var removeCount = 0;
        var canRemove = (Date.now() - this.lastRemoveTime) > 200;
        if (!canRemove) {
            if (this.ballList.length <= 2) {
                canRemove = true;
            }
        }
        var i, ball;
        if (canRemove) {
            this.lastRemoveTime = Date.now();
            //cc.log("update balls :" + canRemove + ", ball count:" + this.ballList.length);
            for (i = this.ballList.length - 1; i >= 0; --i) {
                ball = this.ballList[i];
                var position = ball.getPosition();
                if (position.y < this.BOARD_Y - 40 || !this.isInView(position)) {
                    this.removeBall(ball);
                    removeCount++;
                }
            }
        }
        if (Date.now() - this.lastAdjustTime > 2000) {
            this.lastAdjustTime = Date.now();
            if (this.ballList.length < 200) {
                for (i = this.ballList.length - 1; i >= 0; --i) {
                    ball = this.ballList[i];
                    this.adjustBallSpeed(ball);
                }
            }
        }
    },

    adjustBallSpeed: function (ball) {
        var vel = ball.getVel();
        var distance = cc.pLength(vel);
        if (distance < this.MAX_SPEED * 0.9 || distance > this.MAX_SPEED * 1.1) {
            var radian = Math.atan(vel.x / vel.y);
            ball.setVel(cc.p(this.MAX_SPEED * Math.sin(radian), this.MAX_SPEED * Math.cos(radian)));
        }
    },

    randomBallSpeed: function (ball) {
        this.adjustBallSpeed(ball);
        if (!ball._lastRandomTime) {
            ball._lastRandomTime = Date.now();
        }
        //more than 5 seconds,then try to adjust ball speed.
        if (Date.now() - ball._lastRandomTime >= 5000) {
            //cc.log("brick view:adjust ball speed:" + (Date.now() - ball._lastRandomTime));
            ball._lastRandomTime = Date.now();
            this.randomAdjustBallSpeed(ball);
        }
    },

    updateGrids: function (dt) {
        for (var i = this.bricks.length - 1; i >= 0; --i) {
            var brick = this.bricks[i];
            if (brick.removeable) {
                this.removeBrick(brick);
            }
        }
    },

    updateChipmunk: function (dt) {
        //var t1 = Date.now();
        var delta = this.currentFPS;
        if (cc.sys.os === cc.sys.OS_ANDROID) {
            if (this.ballList.length > 20) {
                this.space.step(1 / delta);
            } else {
                for (var i = 0; i < 2; ++i) {
                    this.space.step(1 / delta / 2);
                }
            }
        } else {
            if (this.ballList.length > 20) {
                for (var i = 0; i < 2; ++i) {
                    this.space.step(1 / delta / 2);
                }
            } else {
                for (var i = 0; i < 3; ++i) {
                    this.space.step(1 / delta / 3);
                }
            }
        }
        //var t2 = Date.now();
        //cc.log("update t2:" + (t2 - t1));
        this.updateBalls(dt);
        //var t3 = Date.now();
        //cc.log("update t3:" + (t3 - t2));
    },

    randomAdjustBallSpeed: function (ball) {
        var RANDOM_MAX_COUNT = 60;
        var random1 = game.utils.rangeNextNumber(-RANDOM_MAX_COUNT * 0.5, RANDOM_MAX_COUNT * 0.5);
        var random2 = game.utils.rangeNextNumber(-RANDOM_MAX_COUNT * 0.5, RANDOM_MAX_COUNT * 0.5);
        ball.setVel(cc.pAdd(ball.getVel(), cc.p(random1, random2)));
    },

    updateBoost: function (dt) {
        for (var i = this.boosts.length - 1; i >= 0; --i) {
            var boost = this.boosts[i];
            boost.y -= dt * this.BOOST_SPEED;
            if (cc.rectIntersectsRect(boost.getBoundingBox(), this.boardNode.getBoundingBox())) {
                switch (boost.type) {
                    case BoostType.LIFE:
                        this.onAddLife();
                        break;
                    case BoostType.SPLIT:
                        this.useSplitBallBoost();
                        break;
                    case BoostType.THREE_BALL:
                        this.useNew3BallBoost();
                        break;
                    case BoostType.BOMB:
                        this.useBombBoost();
                        break;
                }
                this.boosts.splice(i, 1);
                boost.removeFromParent();
            } else if (boost.y < 0) {
                this.boosts.splice(i, 1);
                boost.removeFromParent();
            }
        }
    },

    useSplitBallBoost: function () {
        this.tryShootFirstBall();
        game.audioPlayer.playEffectByKey("boost_add");
        game.audioPlayer.vibrateShort();
        // var t1 = Date.now();
        for (var j = this.ballList.length - 1; j >= 0; --j) {
            var ball = this.ballList[j];
            this.onSplitBall(ball.getPosition());
            if (this.ballList.length > this.MAX_BALL) {
                break;
            }
        }
        // var t2 = Date.now();
        //cc.log("split ball time:" + (t2 - t1));
    },

    useNew3BallBoost: function () {
        this.tryShootFirstBall();
        game.audioPlayer.playEffectByKey("boost_add");
        this.onShoot3Ball();
        game.audioPlayer.vibrateShort();
    },

    useBombBoost: function () {
        //stop game and play end animation.
        this.watchAdAndRelife();
    },

    onAddLife: function () {
        this.lifeCount++;
        if (this.gameController) {
            this.gameController.updateLifeCount();
        }
        game.audioPlayer.playEffectByKey("life_add");
        game.audioPlayer.vibrateShort();
    },

    onSplitBall: function (position) {
        var vel = this.MAX_SPEED;
        for (var i = 0; i < 3; ++i) {
            var angle = game.utils.randomNextInt(90);
            var symbol1 = (game.utils.randomNextInt(2) === 1 ? 1 : -1);
            var symbol2 = (game.utils.randomNextInt(2) === 1 ? 1 : -1);
            var x = 10,y = 10;
            var randomPos = cc.pAdd(position, cc.p(-x / 2 + x * game.utils.randomNextNumber(1),
                -y / 2 + y * game.utils.randomNextNumber(1)));
            this.shootBall(randomPos, cc.p(symbol1 * vel * Math.sin(Math.PI / 180 * angle),
                    symbol2 * vel * Math.cos(Math.PI / 180 * angle)));
        }
    },

    onShoot3Ball: function () {
        var vel = this.MAX_SPEED;
        for (var i = 0; i < 3; ++i) {
            var speed = cc.p(vel * Math.cos(Math.PI / 180 * this.SPLIT_BALL_ANGLE[i]),
                vel * Math.sin(Math.PI / 180 * this.SPLIT_BALL_ANGLE[i]));
            this.shootBall(this.getInitBallPos(), speed);
        }
    },

    switchPassDlg: function () {
        game.audioPlayer.playEffectByKey("victory");
        setTimeout(function () {
            game.popupMan.popupPassDlg(function () {
                GameMan.getInstance().resumeGame();
                game.sceneMan.switchScene(game.sceneType.GAME);
            }, function () {
                if (GameMan.getInstance().hasNextLevel()) {
                    game.sceneMan.switchScene(game.sceneType.GAME);
                } else {
                    game.popupMan.popupCommonDlg(game.local.getValue("all_completed"), function () {
                        game.sceneMan.switchScene(game.sceneType.LEVEL);
                    });
                }
            });
        }, 500);
    },

    checkGameOver: function () {
        var self = this;
        if (this.bricks.length === 0) {
            if (window.isEditor) {
                return;
            }
            //return;
            this.gameStep = GameStep.END;
            this.showBannerAds();
            var levelId = GameMan.getInstance().levelId;
            GameMan.getInstance().gameWin(this.eclipsedTime / 1000);
            var star = GameMan.getInstance().currentStar;
            if (star < 3) {
                game.popupMan.popupGet3Star("3_star", function (watched) {
                    if (watched) {
                        game.gameMan.onWatchAdsGet3Star(levelId);
                        self.switchPassDlg();
                    } else {
                        self.switchPassDlg();
                    }
                });
            } else {
                this.switchPassDlg();
            }
        } else if (this.ballList.length === 0) {
            if (this.lifeCount > 0) {
                this.lifeCount--;
                this.gameStep = GameStep.RELIFE;
            } else {
                if (game.adsManager.isRewardVideoReady()) {
                    this.gameStep = GameStep.FAIL_AND_WAIT_RELIFE;
                    game.popupMan.popupYesNoCommonDlg(game.local.getValue("watch_ads_relife"),
                        game.local.getValue("relife_yes"),
                        game.local.getValue("relife_no"),
                        function () {
                            self.watchAdAndRelife();
                        },
                        function () {
                            self.switchToFail();
                        }, false, true);
                } else {
                    self.switchToFail();
                }
            }
        }
    },

    watchAdAndRelife: function () {
        var self = this;
        StoreHelper.getInstance().checkAndShowRewardVideo(game.utils.isIOS() ? "fuhuo01" : "fuhuo01", function (rewarded) {
            if (rewarded) {
                game.analyseManager.trackEvent("WatchAdsToRelife");
                self.switchToRelife();
            } else {
                self.switchToFail();
            }
        });
    },

    //switchToWaitFail: function () {
    //    var self = this;
    //    this.gameStep = GameStep.FAIL_AND_WAIT_RELIFE;
    //    game.popupMan.popupReliveDlg(function () {
    //        self.switchToRelife();
    //    }, function () {
    //        self.switchToFail();
    //    });
    //},

    switchToRelife: function () {
        this.lifeCount = 2;
        this.gameStep = GameStep.RELIFE;
    },

    switchToFail: function () {
        if (window.isEditor) {
            this.switchToRelife();
        } else {
            GameMan.getInstance().onGameFail();
            this.gameStep = GameStep.END;
            game.popupMan.popupFailDlg(function () {
                game.sceneMan.switchScene(game.sceneType.GAME);
            }, function () {
                GameMan.getInstance().skipLevel();
                game.sceneMan.switchScene(game.sceneType.GAME);
            });
        }
    },

    isInView: function (worldPos) {
        if (worldPos.x < 0 || worldPos.x > this.WIN_WIDTH || worldPos.y < 0 || worldPos.y > this.WIN_HEIGHT) {
            return false;
        }
        return true;
    },

    onShowAimGuide: function (event) {
        this.showAimGuideAnimation();
    },

    showAimGuideAnimation: function () {
        this.gameController.ndAimHelp.visible = true;
        this.gameStep = GameStep.AIM_GUIDE;
    },

    tryShootFirstBall: function (direction) {
        if (!direction) {
            direction = cc.p(0, 1);
        }
        if (this.gameStep === GameStep.PRE_START) {
            this.gameStep = GameStep.START;
            this.shootBall(this.getInitBallPos(), cc.p(direction.x * this.MAX_SPEED, direction.y * this.MAX_SPEED));
            this.boardNode.hideBall();
        }
    },

    getReflectionNormal: function (start, hitPoint, n) {
        var ao = cc.pSub(hitPoint, start);
        var dot = cc.pDot(ao, n);
        var ob = cc.pSub(ao, cc.pMult(n, 2 * dot));
        var normalOb = cc.pNormalize(ob);
        cc.log("reflection normal:" + JSON.stringify(normalOb));
        return normalOb;
    },

    canShoot: function (touchLocation) {
        var start = this.getInitBallPos();
        if (touchLocation.y < start.y + 15) {
            return false;
        }
        return true;
    },

    getDashNode: function (start, end) {
        return game.utils.getDashPointsNode([start, end], [20], 20);
    },

    onTouchBegan:function(touch, event) {
        //cc.log("brick view onTouchBegan:" + touch.getID());
        if (this._curTouchId > 0) {
            return false;
        }
        this._curTouchId = touch.getID();
        if (this.gameController && this.gameController.ndHelp.visible) {
            this.gameController.ndHelp.visible = false;
            game.storageController.setItem("first_enter", "false");
            return false;
        }

        if (this.gameController && this.gameController.ndAimHelp.visible) {
            this.gameController.ndAimHelp.visible = false;
            this.clearHintNode();
            this.gameStep = GameStep.PRE_START;
        }

        this.lastTouchPos = this.getParent().convertToNodeSpace(touch.getLocation());
        this.lastDirection = cc.p(0, 1);
        this.gameController.ndAnimItem.controller.playHideAnim();
        return true;
    },

    onTouchMoved:function(touch, event) {
        if (touch.getID() !== this._curTouchId) {
            return false;
        }
        var touchLocation = this.getParent().convertToNodeSpace(touch.getLocation());
        if (this.lastTouchPos) {
            var offset = (touchLocation.x - this.lastTouchPos.x);
            if (Math.abs(offset) > 1.2) {
                if (game.gameMan.canUseAimItem()) {
                    if (this.gameStep === GameStep.PRE_START) {
                        this.clearHintNode();
                        this.lastDirection = this.drawAimLine(touchLocation);
                    } else {
                        this.moveBoard(offset);
                    }
                } else {
                    this.moveBoard(offset);
                }
                this.lastTouchPos = touchLocation;
            }
        }
        return true;
    },

    drawAimLine: function (touchLocation) {
        var start = this.getInitBallPos();
        if (!this.canShoot(touchLocation)) {
            touchLocation = cc.p(start.x, cc.winSize.height);
        }
        var direction = cc.pNormalize(cc.pSub(touchLocation, start));
        var end = cc.pAdd(start, cc.pMult(direction, cc.winSize.height + cc.winSize.width));
        var radius = 10;
        var info = this.space.segmentQueryFirst(start, end, radius, {
            group: cp.NO_GROUP,
            categories: cp.ALL_CATEGORIES,
            mask: ItemCategory.Wall
        });
        if (info) {
            var hintPoint = info.point;
            this.drawNode.addChild(this.getDashNode(start, hintPoint));
            var reflectionNormal = this.getReflectionNormal(start, hintPoint, info.normal);
            var reflectionPoint = cc.pAdd(hintPoint, cc.pMult(reflectionNormal, 80));
            this.drawNode.addChild(this.getDashNode(hintPoint, reflectionPoint));
            this.hintSprite.visible = true;
            this.hintSprite.setPosition(hintPoint);
            return direction;
        } else {
            return cc.p(0, 1);
        }
    },

    moveBoard: function (offset) {
        var X_OFFSET = this.INNER_WALL + this.getBallWidth() * 0.5 + 2;
        var x = this.boardNode.x + offset * 1.6;
        if (x < X_OFFSET) {
            x = X_OFFSET;
        } else if (x > cc.winSize.width - X_OFFSET) {
            x = cc.winSize.width - X_OFFSET;
        }
        this.boardNode.setPosX(x);
    },

    onTouchEnded:function(touch, event) {
        //cc.log("brick view onTouchEnded:" + touch.getID());
        if (touch.getID() !== this._curTouchId) {
            return false;
        }
        if (game.gameMan.canUseAimItem()) {
            if (this.gameStep === GameStep.PRE_START) {
                this.tryShootFirstBall(this.lastDirection);
                this.clearHintNode();
            }
        } else {
            this.tryShootFirstBall();
        }
        this.lastSelectGrid = null;
        this.lastTouchPos = null;
        this._curTouchId = -1;
        this.lastDirection = null;
    },

    onTouchCancelled:function(touch, event) {
        //cc.log("brick view onTouchCancelled:" + touch.getID());
        this.onTouchEnded(touch, event);
    },

    clearHintNode: function () {
        this.drawNode.removeAllChildren();
        this.hintSprite.visible = false;
    },

    collisionBegin : function ( arbiter, space ) {
        //cc.log('collision begin');
        return true;
    },

    collisionPre : function ( arbiter, space ) {
        //cc.log('collision pre');
        var shapes = arbiter.getShapes();
        for (var i = 0; i < shapes.length; ++i) {
            var shape = shapes[i];
            //cc.log("collision pre shape collision type:" + shape.collision_type);
            if (shape.collision_type == ShapeType.BRICK) {
                var body = shape.getBody();
                if (body.userData) {
                    //cc.log("body.userData:" + body.userData.name);
                    body.userData.removeable = true;
                    this.generateBoost(body.userData.getPosition());
                }
            } else if (shape.collision_type == ShapeType.BALL) {
                if (this.gameStep === GameStep.START) {
                    this.playKnockAudio();
                }
            }
        }
        return true;
    },

    collisionPost : function ( arbiter, space ) {
        //cc.log('collision post');
    },

    collisionSeparate : function ( arbiter, space ) {
        //cc.log('collision separate');
        var shapes = arbiter.getShapes();
        var ballShape = null;
        var boardShape = null;
        for (var i = 0; i < shapes.length; ++i) {
            //cc.log("collision separate shape collision type:" + shapes[i].collision_type);
            if (shapes[i].collision_type == ShapeType.BALL) {
                var body = shapes[i].getBody();
                if (body && body.userData) {
                    this.randomBallSpeed(body.userData);
                }
                ballShape = shapes[i];
            } else if (shapes[i].collision_type == ShapeType.BOARD) {
                boardShape = shapes[i];
            }
        }
        if (ballShape && boardShape) {
            //cc.log("board collision 1");
            if (ballShape.body && ballShape.body.userData && boardShape.body && boardShape.body.userData) {
                //cc.log("board collision 2");
                var ball = ballShape.body.userData;
                var board = boardShape.body.userData;
                //cc.log("board collision 2 ball.getPosition().y:" + ball.getPosition().y);
                //cc.log("board collision 2 board.y + board.height * 0.5:" + (board.y + board.height * 0.5 - 10));
                if (ball.getPosition().y < board.y + board.height * 0.5 - 10) {
                    return;
                }
                //cc.log("board collision 3");
                var boardShapeX1 = ball.getPosition().x - (board.x - board.width / 2);
                var x = boardShapeX1 / boardShape.body.userData.width * 100 / 50 - 1;
                x = Math.max(Math.min(0.9, x), -0.9);
                //cc.log("board collision 4:" + x);
                var y = Math.sqrt(1 - x * x);
                ball.setVel(cc.p(this.MAX_SPEED * x, this.MAX_SPEED * y));
            }
        }
    },

    playKnockAudio: function () {
        if (Date.now() - this.lastTime > 50) {
            this.lastTime = Date.now();
            game.audioPlayer.playEffectByKey("knock");
        }
    },

    getInitBallPos: function () {
        return cc.pAdd(this.boardNode.getPosition(), cc.p(0, 20));
    },

    shootBall: function (position, vel) {
        if (this.ballList.length > this.MAX_BALL) {
            return;
        }
        var ball = BallPool.getFromPool("ball");
        if (!ball) {
            ball = new Ball(this.getBallWidth());
        } else {
            ball.reset(this.getBallWidth());
        }
        this.addChild(ball);
        this.ballList.push(ball);
        ball.initBody(this.space, position);
        ball.setVel(vel);
    },

    removeBall: function (ball) {
        var index = this.ballList.indexOf(ball);
        if (index > -1) {
            this.ballList.splice(index, 1);
        }
        ball.removeBody();
        BallPool.putInPool("ball", ball);
        ball.removeFromParent(false);
    },

    removeBrick: function (brick) {
        var index = this.bricks.indexOf(brick);
        if (index > -1) {
            this.bricks.splice(index, 1);
        }
        brick.removeBody();
        //if (brick.isGift) {
        //    this.stop();
        //    game.popupMan.popupRewardGift(function () {
        //        this.resume();
        //    }.bind(this));
        //} else {
        BallPool.putInPool("brick", brick);
        //}
        brick.removeFromParent();
    },

    getMinGenerateBoostType: function () {
        //boostTypeList
        var minBoostType = 0;
        var minBoostCount = 1000000;
        for (var i = 0; i < this.boostTypeList.length; ++i) {
            var boostType = this.boostTypeList[i];
            var boostCount = this.boostTypeMap[boostType] || 0;
            if (boostCount < minBoostCount) {
                minBoostType = boostType;
                minBoostCount = boostCount;
            }
        }
        return minBoostType;
    },

    getEstimatedBallCount: function () {
        var ballCount = this.ballList.length;
        for (var i = 0; i < this.boosts.length; ++i) {
            if (this.boosts[i].y < this.boardNode.y - 30) {
                continue;
            }
            if (this.boosts[i].type === BoostType.SPLIT) {
                ballCount = ballCount * 4;
            } else if (this.boosts[i].type === BoostType.THREE_BALL) {
                ballCount += 3;
            }
        }
        return ballCount;
    },

    generateBoost: function (pos) {
        var boostType;

        //var estimatedBallCount = this.getEstimatedBallCount();
        ////cc.log("brick view:estimated BallCount:" + estimatedBallCount);
        ////cc.log("brick view:real BallCount:" + this.ballList.length);
        ////cc.log("brick view:estimatedRatio:" + game.config.estimatedRatio);
        ////cc.log("brick view:minPossibility:" + game.config.minPossibility);
        //estimatedBallCount = Math.max(estimatedBallCount * game.config.estimatedRatio, this.ballList.length);
        ////cc.log("brick view:param BallCount:" + estimatedBallCount);
        //var probability = 100 * this.BOOST_POSIBILITY / estimatedBallCount;
        //probability = Math.max(probability, game.config.minPossibility * 100);
        //var hasBoost = game.utils.randomNextNumber(100) < probability;

        var hasBoost = false;
        if (this.hardMode) {
            hasBoost = game.utils.randomNextInt(400) < 400 * this.BOOST_POSIBILITY / this.ballList.length;
        } else {
            hasBoost = game.utils.randomNextInt(100) < 100 * this.BOOST_POSIBILITY / this.ballList.length;
        }

        if (GameMan.getInstance().levelId <= 2) {
            if (cc.isUndefined(this.generateBoostCount)) {
                this.generateBoostCount = 0;
            }
            if (this.generateBoostCount < 3) {
                hasBoost = true;
                this.generateBoostCount++;
            }
        }

        //protect gen boost.
        if (!hasBoost && (Date.now() - this.lastGetBoostTime > this.MUST_GEN_BOOST_TIME * 1000)) {
            hasBoost = true;
            cc.log("bricks-view must gen boost time");
        }

        if (hasBoost) {
            this.lastGetBoostTime = Date.now();
            boostType = this.getMinGenerateBoostType();
            this.boostTypeMap[boostType] = (this.boostTypeMap[boostType] || 0) + 1;
        }

        var hasLife = false;

        if (!hasBoost) {
            hasLife = game.utils.randomNextNumber(100) < (100 * this.LIFE_POSIBILITY / this.ballList.length);
            if (hasLife) {
                var lifeBoostCount = 0;
                for (var i = 0; i < this.boosts.length; ++i) {
                    if (this.boosts[i].type === BoostType.LIFE) {
                        lifeBoostCount++;
                    }
                }
                if (this.lifeCount + lifeBoostCount >= this.MAX_LIFE) {
                    hasLife = false;
                } else {
                    boostType = BoostType.LIFE;
                }
            }
        }

        if (hasLife || hasBoost) {
            var boost = new Boost(boostType);
            boost.setPosition(pos);
            this.addChild(boost);
            this.boosts.push(boost);
            this.boosts.sort(function (a, b) {
                return (a.y - b.y);
            });
        }
    },

    getDroppingBoostCount: function (type) {
        var count = 0;
        for (var i = 0; i < this.boosts.length; ++i) {
            if (this.boosts[i].type === type) {
                count++;
            }
        }
        return count;
    },

    onRemoveBoost: function (boost) {
        var index = this.boosts.indexOf(boost);
        if (index > -1) {
            this.boosts.splice(index, 1);
            boost.removeFromParent();
        }
    },

    removeAllBoosts: function () {
        for (var i = 0; i < this.boosts.length; ++i) {
            var boost = this.boosts[i];
            if (boost) {
                boost.removeFromParent();
            }
        }
        this.boosts = [];
    },

    stop: function () {
        this.stoped = true;
        //this.showBannerAds();
        if (game.adsManager.showTopBanner) {
            game.adsManager.removeBannerAds("top");
        }
    },

    resume: function () {
        this.stoped = false;
        //game.adsManager.removeBannerAds("bottom");
        if (game.adsManager.showTopBanner) {
            game.adsManager.showBannerAds("top");
        }
    },

    showBannerAds: function () {
        //if (game.playerMan.getLevel() >= 3) {
        //    game.adsManager.showBannerAds("bottom");
        //}
    },

    showTopBannerAds: function () {
        if (game.playerMan.getLevel() >= 3) {
            if (game.adsManager.showTopBanner) {
                //if 1 > 0
                if (game.playerMan.getRegisterDay() > game.adsManager.topBannerDay) {
                    game.adsManager.showBannerAds("top");
                }
            }
        }
    },

    removeTopBannerAds: function () {
        //if (game.adsManager.showTopBanner) {
        //    game.adsManager.removeBannerAds("top");
        //}
    }
});

module.exports = BricksView;
},{"../../common/util/Utils":35,"../controller/BoardController":53,"../entity/Ball":95,"../entity/BallPool":96,"../entity/Board":97,"../entity/Boost":98,"../entity/Grid":99,"../entity/Obstacle":100,"../entity/Wall":102,"../enum/BoostType":103,"../enum/GridType":105,"../enum/ItemCategory":106,"../enum/ShapeType":110,"../events/EventsName":115,"../model/GameMan":116,"../model/StoreHelper":121}]},{},[37])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Vzci9sb2NhbC9saWIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXItcGFjay9fcHJlbHVkZS5qcyIsImNvbW1vbi9hc3NldHMvQXNzZXRzTWFuYWdlci5qcyIsImNvbW1vbi9hdWRpby9BdWRpb1BsYXllci5qcyIsImNvbW1vbi9icmlkZ2UvR2FtZUJyaWRnZS5qcyIsImNvbW1vbi9jb250cm9sbGVyL0Jhc2VDQ0JDb250cm9sbGVyLmpzIiwiY29tbW9uL2NvbnRyb2xsZXIvQ3Jvc3NQcm9tQ29udHJvbGxlci5qcyIsImNvbW1vbi9lbnRpdHkvTnVtYmVyQW5pbWF0aW9uLmpzIiwiY29tbW9uL2VudGl0eS9QYXltZW50SW5mby5qcyIsImNvbW1vbi9lbnRpdHkvUGxheWVySW5mby5qcyIsImNvbW1vbi9lbnRpdHkvUHJvZHVjdEluZm8uanMiLCJjb21tb24vZW51bS9BZHNQbGFjZS5qcyIsImNvbW1vbi9lbnVtL1BheW1lbnRDb2RlLmpzIiwiY29tbW9uL2V2ZW50cy9FdmVudERpc3BhdGNoZXIuanMiLCJjb21tb24vZXh0L011bHRpQ29sVGFibGVWaWV3LmpzIiwiY29tbW9uL2V4dC9Ub3VjaGVkTm9kZS5qcyIsImNvbW1vbi9tYW5hZ2VyL0Fkc01hbmFnZXIuanMiLCJjb21tb24vbWFuYWdlci9BbmFseXNlTWFuYWdlci5qcyIsImNvbW1vbi9tYW5hZ2VyL0NhcHR1cmVNYW5hZ2VyLmpzIiwiY29tbW9uL21hbmFnZXIvQ3Jvc3NQcm9tTWFuYWdlci5qcyIsImNvbW1vbi9tYW5hZ2VyL0dDTWFuYWdlci5qcyIsImNvbW1vbi9tYW5hZ2VyL0xvY2FsaXphdGlvbk1hbmFnZXIuanMiLCJjb21tb24vbWFuYWdlci9Ob3RpZmljYXRpb25NYW5hZ2VyLmpzIiwiY29tbW9uL21hbmFnZXIvUmF0ZU1hbmFnZXIuanMiLCJjb21tb24vbWFuYWdlci9SZW1vdGVDb25maWdNYW5hZ2VyLmpzIiwiY29tbW9uL21hbmFnZXIvU2hhcmVNYW5hZ2VyLmpzIiwiY29tbW9uL21hbmFnZXIvU3RvcmVNYW5hZ2VyLmpzIiwiY29tbW9uL21vZGVsL0VmZmVjdE1hbi5qcyIsImNvbW1vbi9tb2RlbC9Mb2dpY01hbi5qcyIsImNvbW1vbi9tb2RlbC9QbGF5ZXJNYW4uanMiLCJjb21tb24vbmV0L0h0dHBDbGllbnQuanMiLCJjb21tb24vcG9wdXAvRGlhbG9nTWFuYWdlci5qcyIsImNvbW1vbi9wb3B1cC9Nb2RhbExheWVyLmpzIiwiY29tbW9uL3N0b3JhZ2UvU3RvcmFnZUNvbnRyb2xsZXIuanMiLCJjb21tb24vdXRpbC9BdWRpb0hlbHBlci5qcyIsImNvbW1vbi91dGlsL0ZpbGVDYWNoZVN0dWIuanMiLCJjb21tb24vdXRpbC9VdGlscy5qcyIsImNvbW1vbi93aGVlbC9XaGVlbC5qcyIsImVkaXRvckxvYWRlci5qcyIsIm1hbnlfYnJpY2tzL2NvbmZpZy9Ccmlja0NvbmZpZy5qcyIsIm1hbnlfYnJpY2tzL2NvbmZpZy9Db25maWcuanMiLCJtYW55X2JyaWNrcy9jb25maWcvQ29uZmlnTWFuLmpzIiwibWFueV9icmlja3MvY29uZmlnL0RhaWx5Qm9udXNDb25maWcuanMiLCJtYW55X2JyaWNrcy9jb25maWcvTGV2ZWxDb25maWcuanMiLCJtYW55X2JyaWNrcy9jb25maWcvU2hhcmVDb25maWcuanMiLCJtYW55X2JyaWNrcy9jb25maWcvU2tpbkNvbmZpZy5qcyIsIm1hbnlfYnJpY2tzL2NvbmZpZy9TdG9yZUNvbmZpZy5qcyIsIm1hbnlfYnJpY2tzL2NvbmZpZy9UYXNrQ29uZmlnLmpzIiwibWFueV9icmlja3MvY29uZmlnL1Rhc2tPbGRDb25maWcuanMiLCJtYW55X2JyaWNrcy9jb25maWcvV2hlZWxDb25maWcuanMiLCJtYW55X2JyaWNrcy9jb250cm9sbGVyL0Fkc1JlbWluZGVyQ29udHJvbGxlci5qcyIsIm1hbnlfYnJpY2tzL2NvbnRyb2xsZXIvQWltSGVscENvbnRyb2xsZXIuanMiLCJtYW55X2JyaWNrcy9jb250cm9sbGVyL0FpbUl0ZW1Db250cm9sbGVyLmpzIiwibWFueV9icmlja3MvY29udHJvbGxlci9CYWdDb250cm9sbGVyLmpzIiwibWFueV9icmlja3MvY29udHJvbGxlci9Cb2FyZENvbnRyb2xsZXIuanMiLCJtYW55X2JyaWNrcy9jb250cm9sbGVyL0RhaWx5Qm9udXNDb250cm9sbGVyLmpzIiwibWFueV9icmlja3MvY29udHJvbGxlci9EYWlseUJvbnVzSXRlbUNvbnRyb2xsZXIuanMiLCJtYW55X2JyaWNrcy9jb250cm9sbGVyL0RpYW1vbmRzQ29udHJvbGxlci5qcyIsIm1hbnlfYnJpY2tzL2NvbnRyb2xsZXIvRmFpbENvbnRyb2xsZXIuanMiLCJtYW55X2JyaWNrcy9jb250cm9sbGVyL0dhbWVDb250cm9sbGVyLmpzIiwibWFueV9icmlja3MvY29udHJvbGxlci9HYW1lT3ZlckNvbnRyb2xsZXIuanMiLCJtYW55X2JyaWNrcy9jb250cm9sbGVyL0dhbWVXaW5Db250cm9sbGVyLmpzIiwibWFueV9icmlja3MvY29udHJvbGxlci9IZWxwQ29udHJvbGxlci5qcyIsIm1hbnlfYnJpY2tzL2NvbnRyb2xsZXIvTGV2ZWxDb250cm9sbGVyLmpzIiwibWFueV9icmlja3MvY29udHJvbGxlci9MZXZlbEl0ZW1Db250cm9sbGVyLmpzIiwibWFueV9icmlja3MvY29udHJvbGxlci9Mb2FkaW5nQ29udHJvbGxlci5qcyIsIm1hbnlfYnJpY2tzL2NvbnRyb2xsZXIvTWVudUNvbnRyb2xsZXIuanMiLCJtYW55X2JyaWNrcy9jb250cm9sbGVyL05vdGljZUNvbnRyb2xsZXIuanMiLCJtYW55X2JyaWNrcy9jb250cm9sbGVyL1BhY2thZ2VDb250cm9sbGVyLmpzIiwibWFueV9icmlja3MvY29udHJvbGxlci9QYWNrYWdlSXRlbUNvbnRyb2xsZXIuanMiLCJtYW55X2JyaWNrcy9jb250cm9sbGVyL1Bhc3NDb250cm9sbGVyLmpzIiwibWFueV9icmlja3MvY29udHJvbGxlci9QYXVzZUNvbnRyb2xsZXIuanMiLCJtYW55X2JyaWNrcy9jb250cm9sbGVyL1JhbmtDb250cm9sbGVyLmpzIiwibWFueV9icmlja3MvY29udHJvbGxlci9SZWxpdmVDb250cm9sbGVyLmpzIiwibWFueV9icmlja3MvY29udHJvbGxlci9SZXdhcmREb3VibGVDb250cm9sbGVyLmpzIiwibWFueV9icmlja3MvY29udHJvbGxlci9SZXdhcmRHaWZ0Q29udHJvbGxlci5qcyIsIm1hbnlfYnJpY2tzL2NvbnRyb2xsZXIvUmV3YXJkTm90aWNlQ29udHJvbGxlci5qcyIsIm1hbnlfYnJpY2tzL2NvbnRyb2xsZXIvUmV3YXJkVmlkZW9Db250cm9sbGVyLmpzIiwibWFueV9icmlja3MvY29udHJvbGxlci9TZXR0aW5nQ29udHJvbGxlci5qcyIsIm1hbnlfYnJpY2tzL2NvbnRyb2xsZXIvU2tpbkNvbnRyb2xsZXIuanMiLCJtYW55X2JyaWNrcy9jb250cm9sbGVyL1NraW5JdGVtQ29udHJvbGxlci5qcyIsIm1hbnlfYnJpY2tzL2NvbnRyb2xsZXIvU2tpbkl0ZW1UaXRsZUNvbnRyb2xsZXIuanMiLCJtYW55X2JyaWNrcy9jb250cm9sbGVyL1NwZWNpYWxPZmZlckNvbnRyb2xsZXIuanMiLCJtYW55X2JyaWNrcy9jb250cm9sbGVyL1N0b3JlQ29udHJvbGxlci5qcyIsIm1hbnlfYnJpY2tzL2NvbnRyb2xsZXIvU3RvcmVJdGVtQ29udHJvbGxlci5qcyIsIm1hbnlfYnJpY2tzL2NvbnRyb2xsZXIvVGFza0NvbnRyb2xsZXIuanMiLCJtYW55X2JyaWNrcy9jb250cm9sbGVyL1Rhc2tJdGVtQ29udHJvbGxlci5qcyIsIm1hbnlfYnJpY2tzL2NvbnRyb2xsZXIvVGl0bGVDb250cm9sbGVyLmpzIiwibWFueV9icmlja3MvY29udHJvbGxlci9XYXRjaEFkc0dldDNTdGFyQ29udHJvbGxlci5qcyIsIm1hbnlfYnJpY2tzL2NvbnRyb2xsZXIvV2F0Y2hBZHNHZXREaWFtb25kc0NvbnRyb2xsZXIuanMiLCJtYW55X2JyaWNrcy9jb250cm9sbGVyL1dhdGNoQWRzR2V0SXRlbUNvbnRyb2xsZXIuanMiLCJtYW55X2JyaWNrcy9jb250cm9sbGVyL1dhdGNoQWRzR2V0U2tpbkNvbnRyb2xsZXIuanMiLCJtYW55X2JyaWNrcy9jb250cm9sbGVyL1doZWVsQ29udHJvbGxlci5qcyIsIm1hbnlfYnJpY2tzL2VkaXRvci9lbnRpdHkvR3JpZC5qcyIsIm1hbnlfYnJpY2tzL2VkaXRvci9zY2VuZS9FZGl0b3JTY2VuZS5qcyIsIm1hbnlfYnJpY2tzL2VkaXRvci9zY2VuZS9HYW1lU2NlbmUuanMiLCJtYW55X2JyaWNrcy9lbnRpdHkvQmFsbC5qcyIsIm1hbnlfYnJpY2tzL2VudGl0eS9CYWxsUG9vbC5qcyIsIm1hbnlfYnJpY2tzL2VudGl0eS9Cb2FyZC5qcyIsIm1hbnlfYnJpY2tzL2VudGl0eS9Cb29zdC5qcyIsIm1hbnlfYnJpY2tzL2VudGl0eS9HcmlkLmpzIiwibWFueV9icmlja3MvZW50aXR5L09ic3RhY2xlLmpzIiwibWFueV9icmlja3MvZW50aXR5L1BsYXllckluZm8uanMiLCJtYW55X2JyaWNrcy9lbnRpdHkvV2FsbC5qcyIsIm1hbnlfYnJpY2tzL2VudW0vQm9vc3RUeXBlLmpzIiwibWFueV9icmlja3MvZW51bS9HYW1lTW9kZS5qcyIsIm1hbnlfYnJpY2tzL2VudW0vR3JpZFR5cGUuanMiLCJtYW55X2JyaWNrcy9lbnVtL0l0ZW1DYXRlZ29yeS5qcyIsIm1hbnlfYnJpY2tzL2VudW0vTG9ja1N0YXR1cy5qcyIsIm1hbnlfYnJpY2tzL2VudW0vUmFua1R5cGUuanMiLCJtYW55X2JyaWNrcy9lbnVtL1NjZW5lVHlwZS5qcyIsIm1hbnlfYnJpY2tzL2VudW0vU2hhcGVUeXBlLmpzIiwibWFueV9icmlja3MvZW51bS9Ta2luUmV3YXJkVHlwZS5qcyIsIm1hbnlfYnJpY2tzL2VudW0vU2tpblR5cGUuanMiLCJtYW55X2JyaWNrcy9lbnVtL1N0b3JlVHlwZS5qcyIsIm1hbnlfYnJpY2tzL2VudW0vV2hlZWxUeXBlLmpzIiwibWFueV9icmlja3MvZXZlbnRzL0V2ZW50c05hbWUuanMiLCJtYW55X2JyaWNrcy9tb2RlbC9HYW1lTWFuLmpzIiwibWFueV9icmlja3MvbW9kZWwvUGxheWVyTWFuLmpzIiwibWFueV9icmlja3MvbW9kZWwvUG9wdXBNYW4uanMiLCJtYW55X2JyaWNrcy9tb2RlbC9SZXNvdXJjZXNNYW4uanMiLCJtYW55X2JyaWNrcy9tb2RlbC9TY2VuZU1hbi5qcyIsIm1hbnlfYnJpY2tzL21vZGVsL1N0b3JlSGVscGVyLmpzIiwibWFueV9icmlja3Mvc2NlbmUvR2FtZVNjZW5lLmpzIiwibWFueV9icmlja3Mvc2NlbmUvTGV2ZWxTY2VuZS5qcyIsIm1hbnlfYnJpY2tzL3NjZW5lL0xvYWRpbmdTY2VuZS5qcyIsIm1hbnlfYnJpY2tzL3NjZW5lL01lbnVTY2VuZS5qcyIsIm1hbnlfYnJpY2tzL3NjZW5lL1BhY2thZ2VTY2VuZS5qcyIsIm1hbnlfYnJpY2tzL3ZpZXcvQnJpY2tzVmlldy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9MQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdFJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5U0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdElBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3REQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNURBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNURBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9IQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25wQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL01BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMVBBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25RQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2SkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNUxBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0dBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeEVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ242QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDYkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNWQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNWQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoMEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlXQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbk9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1RkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsbEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNiQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHFpbm5pbmcgb24gMTUvNC8xNC5cbiAqL1xudmFyIFZFUlNJT05fQVNTRVRfSUQgPSBcIkB2ZXJzaW9uXCI7XG52YXIgTUFOSUZFU1RfQVNTRVRfSUQgPSBcIkBtYW5pZmVzdFwiO1xudmFyIEFzc2V0c01hbmFnZXIgPSBjYy5DbGFzcy5leHRlbmQoe1xuICAgIC8qKlxuICAgICAqIHtqc2IuQXNzZXRzTWFuYWdlcn1cbiAgICAgKi9cbiAgICBfYW0gOiBudWxsLFxuICAgIC8qKlxuICAgICAqIHtudW1iZXJ95aSx6LSl5qyh5pWwXG4gICAgICovXG4gICAgX2ZhaWxDb3VudCA6IDAsXG4gICAgLyoqXG4gICAgICoge251bWJlcn3mnIDlpKfplJnor6/ph43or5XmrKHmlbBcbiAgICAgKi9cbiAgICBfbWF4RmFpbENvdW50IDogMSxcbiAgICBjdG9yOmZ1bmN0aW9uKCl7XG5cbiAgICB9LFxuICAgIHB1cmdlOmZ1bmN0aW9uKCkge1xuICAgICAgICBpZih0aGlzLl9hbSl7XG4gICAgICAgICAgICB0aGlzLl9hbS5yZWxlYXNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fYW0gPSBudWxsO1xuICAgIH0sXG5cbiAgICByZXRyeURvd25Bc3NldHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fZmFpbENvdW50ID0gMDtcbiAgICAgICAgdGhpcy5fbWF4RmFpbENvdW50ID0gNTtcbiAgICAgICAgaWYodGhpcy5fYW0pIHtcbiAgICAgICAgICAgIHRoaXMuX2FtLmRvd25sb2FkRmFpbGVkQXNzZXRzKCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgZG93bkxvYWRBc3NldHMgOiBmdW5jdGlvbihwcm9qZWN0TWFuaWZlc3RQYXRoLHN0b3JhZ2VQYXRoLHVwZGF0ZUNhbGxCYWNrLGVuZENhbGxCYWNrKSB7XG4gICAgICAgIHRoaXMuX2ZhaWxDb3VudCA9IDA7XG4gICAgICAgIHRoaXMuX21heEZhaWxDb3VudCA9IDU7XG4gICAgICAgIHRoaXMuX2FtID0gbmV3IGpzYi5Bc3NldHNNYW5hZ2VyKHByb2plY3RNYW5pZmVzdFBhdGgsIHN0b3JhZ2VQYXRoKTtcbiAgICAgICAgdGhpcy5fYW0ucmV0YWluKCk7XG4gICAgICAgIGlmICghdGhpcy5fYW0uZ2V0TG9jYWxNYW5pZmVzdCgpLmlzTG9hZGVkKCkpIHtcbiAgICAgICAgICAgIGVuZENhbGxCYWNrKFwiZXJyb3JfbG9jYWxfbWFuaWZlc3Rfbm90X2xvYWRlZFwiKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgIHZhciBsaXN0ZW5lciA9IG5ldyBqc2IuRXZlbnRMaXN0ZW5lckFzc2V0c01hbmFnZXIodGhpcy5fYW0sIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgc3dpdGNoIChldmVudC5nZXRFdmVudENvZGUoKSkge1xuICAgICAgICAgICAgICAgIGNhc2UganNiLkV2ZW50QXNzZXRzTWFuYWdlci5VUERBVEVfUFJPR1JFU1NJT046XG4gICAgICAgICAgICAgICAgICAgIHZhciBtc2cgPSBldmVudC5nZXRNZXNzYWdlKCk7XG4gICAgICAgICAgICAgICAgICAgIGNjLmxvZyhcIlVQREFURV9QUk9HUkVTU0lPTjpcIiArIG1zZyk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhc3NldElkID0gZXZlbnQuZ2V0QXNzZXRJZCgpO1xuICAgICAgICAgICAgICAgICAgICBjYy5sb2coXCJhc3NldElkOlwiK2Fzc2V0SWQpO1xuICAgICAgICAgICAgICAgICAgICBpZihhc3NldElkID09IFZFUlNJT05fQVNTRVRfSUQgfHwgYXNzZXRJZCA9PSBNQU5JRkVTVF9BU1NFVF9JRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlQ2FsbEJhY2soMSwgXCJ1cGRhdGUgbWFuaWZlc3RcIik7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVDYWxsQmFjayhldmVudC5nZXRQZXJjZW50KCksIG1zZyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBqc2IuRXZlbnRBc3NldHNNYW5hZ2VyLlVQREFURV9GQUlMRUQ6XG4gICAgICAgICAgICAgICAgICAgIGNjLmxvZyhcIlVwZGF0ZSBmYWlsZWQuIFwiICsgZXZlbnQuZ2V0TWVzc2FnZSgpKTtcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5fZmFpbENvdW50Kys7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGF0Ll9mYWlsQ291bnQgPCB0aGF0Ll9tYXhGYWlsQ291bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuX2FtLmRvd25sb2FkRmFpbGVkQXNzZXRzKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYy5sb2coXCJSZWFjaCBtYXhpbXVtIGZhaWwgY291bnQsIGV4aXQgdXBkYXRlIHByb2Nlc3NcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0Ll9mYWlsQ291bnQgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgZW5kQ2FsbEJhY2soZXZlbnQuZ2V0RXZlbnRDb2RlKCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UganNiLkV2ZW50QXNzZXRzTWFuYWdlci5VUERBVEVfRklOSVNIRUQ6XG4gICAgICAgICAgICAgICAgY2FzZSBqc2IuRXZlbnRBc3NldHNNYW5hZ2VyLkFMUkVBRFlfVVBfVE9fREFURTpcbiAgICAgICAgICAgICAgICAgICAgZW5kQ2FsbEJhY2sobnVsbCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSBqc2IuRXZlbnRBc3NldHNNYW5hZ2VyLkVSUk9SX05PX0xPQ0FMX01BTklGRVNUOlxuICAgICAgICAgICAgICAgICAgICBjYy5sb2coXCJObyBsb2NhbCBtYW5pZmVzdCBmaWxlIGZvdW5kLCBza2lwIGFzc2V0cyB1cGRhdGUuXCIpO1xuICAgICAgICAgICAgICAgICAgICBlbmRDYWxsQmFjayhldmVudC5nZXRFdmVudENvZGUoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UganNiLkV2ZW50QXNzZXRzTWFuYWdlci5FUlJPUl9ET1dOTE9BRF9NQU5JRkVTVDpcbiAgICAgICAgICAgICAgICAgICAgZW5kQ2FsbEJhY2soZXZlbnQuZ2V0RXZlbnRDb2RlKCkpO1xuICAgICAgICAgICAgICAgICAgICBjYy5sb2coXCJGYWlsIHRvIGRvd25sb2FkIG1hbmlmZXN0IGZpbGUsIHVwZGF0ZSBza2lwcGVkLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBqc2IuRXZlbnRBc3NldHNNYW5hZ2VyLkVSUk9SX1BBUlNFX01BTklGRVNUOlxuICAgICAgICAgICAgICAgICAgICBlbmRDYWxsQmFjayhldmVudC5nZXRFdmVudENvZGUoKSk7XG4gICAgICAgICAgICAgICAgICAgIGNjLmxvZyhcIkZhaWwgdG8gcGFyc2UgbWFuaWZlc3QgZmlsZSwgdXBkYXRlIHNraXBwZWQuXCIpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIGpzYi5FdmVudEFzc2V0c01hbmFnZXIuRVJST1JfVVBEQVRJTkc6XG4gICAgICAgICAgICAgICAgICAgIGNjLmxvZyhcIkFzc2V0IHVwZGF0ZSBlcnJvcjogXCIgKyBldmVudC5nZXRNZXNzYWdlKCkpO1xuICAgICAgICAgICAgICAgICAgICBlbmRDYWxsQmFjayhldmVudC5nZXRFdmVudENvZGUoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UganNiLkV2ZW50QXNzZXRzTWFuYWdlci5FUlJPUl9ERUNPTVBSRVNTOlxuICAgICAgICAgICAgICAgICAgICBjYy5sb2coZXZlbnQuZ2V0TWVzc2FnZSgpKTtcbiAgICAgICAgICAgICAgICAgICAgZW5kQ2FsbEJhY2soZXZlbnQuZ2V0RXZlbnRDb2RlKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBjYy5sb2coXCJkZWZhdWx0OiBcIiArIGV2ZW50LmdldEV2ZW50Q29kZSgpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNjLmV2ZW50TWFuYWdlci5hZGRMaXN0ZW5lcihsaXN0ZW5lciwgMSk7XG4gICAgICAgIHRoaXMuX2FtLnVwZGF0ZSgpO1xuICAgIH1cbn0pO1xuXG5Bc3NldHNNYW5hZ2VyLl9pbnN0YW5jZSA9IG51bGw7XG5Bc3NldHNNYW5hZ2VyLl9maXJzdFVzZUluc3RhbmNlID0gdHJ1ZTtcblxuLyoqXG4gKlxuICogQHJldHVybnMge0Fzc2V0c01hbmFnZXJ9XG4gKi9cbkFzc2V0c01hbmFnZXIuZ2V0SW5zdGFuY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKEFzc2V0c01hbmFnZXIuX2ZpcnN0VXNlSW5zdGFuY2UpIHtcbiAgICAgICAgQXNzZXRzTWFuYWdlci5fZmlyc3RVc2VJbnN0YW5jZSA9IGZhbHNlO1xuICAgICAgICBBc3NldHNNYW5hZ2VyLl9pbnN0YW5jZSA9IG5ldyBBc3NldHNNYW5hZ2VyKCk7XG4gICAgfVxuICAgIHJldHVybiBBc3NldHNNYW5hZ2VyLl9pbnN0YW5jZTtcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBBc3NldHNNYW5hZ2VyOyIsIi8qKlxuICogQ3JlYXRlZCBieSBxaW5uaW5nIG9uIDE1LzQvMjcuXG4gKi9cblxuXG52YXIgQXVkaW9FbmdpbmVXcmFwcGVyID0ge1xuICAgIC8vVXNlZCBmb3IgbmF0aXZlXG4gICAgX211c2ljSWQ6IC0xLFxuICAgIF9tdXNpY1ZvbHVtZTogMS4wLFxuICAgIF9lZmZlY3RWb2x1bWU6IDEuMCxcbiAgICBfYXVkaW9JZE1hcDoge30sXG5cbiAgICB1c2VKc2JBdWRpb0VuZ2luZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAoY2Muc3lzLmlzTmF0aXZlKTtcbiAgICB9LFxuXG4gICAgZ2V0TXVzaWNWb2x1bWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHZvbHVtZSA9IDA7XG4gICAgICAgIGlmICh0aGlzLnVzZUpzYkF1ZGlvRW5naW5lKCkpIHtcbiAgICAgICAgICAgIHZvbHVtZSA9IHRoaXMuX211c2ljVm9sdW1lO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdm9sdW1lID0gY2MuYXVkaW9FbmdpbmUuZ2V0TXVzaWNWb2x1bWUoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdm9sdW1lO1xuICAgIH0sXG5cbiAgICBzZXRNdXNpY1ZvbHVtZTogZnVuY3Rpb24gKHZvbHVtZSkge1xuICAgICAgICBpZiAodGhpcy51c2VKc2JBdWRpb0VuZ2luZSgpKSB7XG4gICAgICAgICAgICB0aGlzLl9tdXNpY1ZvbHVtZSA9IHZvbHVtZTtcbiAgICAgICAgICAgIGpzYi5BdWRpb0VuZ2luZS5zZXRWb2x1bWUodGhpcy5fbXVzaWNJZCwgdm9sdW1lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNjLmF1ZGlvRW5naW5lLnNldE11c2ljVm9sdW1lKHZvbHVtZSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgZ2V0RWZmZWN0c1ZvbHVtZTogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdm9sdW1lO1xuICAgICAgICBpZiAodGhpcy51c2VKc2JBdWRpb0VuZ2luZSgpKSB7XG4gICAgICAgICAgICB2b2x1bWUgPSB0aGlzLl9lZmZlY3RWb2x1bWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2b2x1bWUgPSBjYy5hdWRpb0VuZ2luZS5nZXRFZmZlY3RzVm9sdW1lKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZvbHVtZTtcbiAgICB9LFxuXG4gICAgc2V0RWZmZWN0c1ZvbHVtZTogZnVuY3Rpb24gKHZvbHVtZSkge1xuICAgICAgICBpZiAodGhpcy51c2VKc2JBdWRpb0VuZ2luZSgpKSB7XG4gICAgICAgICAgICB0aGlzLl9lZmZlY3RWb2x1bWUgPSB2b2x1bWU7XG4gICAgICAgICAgICB2YXIgYXVkaW9JZHMgPSBPYmplY3Qua2V5cyh0aGlzLl9hdWRpb0lkTWFwKTtcbiAgICAgICAgICAgIGF1ZGlvSWRzLmZvckVhY2ggKGZ1bmN0aW9uIChhdWRpb0lkKSB7XG4gICAgICAgICAgICAgICAganNiLkF1ZGlvRW5naW5lLnNldFZvbHVtZShwYXJzZUludChhdWRpb0lkKSwgdm9sdW1lKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2MuYXVkaW9FbmdpbmUuc2V0RWZmZWN0c1ZvbHVtZSh2b2x1bWUpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHBsYXlFZmZlY3Q6IGZ1bmN0aW9uICh1cmwsIGxvb3ApIHtcbiAgICAgICAgdmFyIGF1ZGlvSWQ7XG4gICAgICAgIGlmICh0aGlzLnVzZUpzYkF1ZGlvRW5naW5lKCkpIHtcbiAgICAgICAgICAgIGF1ZGlvSWQgPSBqc2IuQXVkaW9FbmdpbmUucGxheTJkKHVybCwgbG9vcCwgdGhpcy5fZWZmZWN0Vm9sdW1lKTtcbiAgICAgICAgICAgIHRoaXMuX2F1ZGlvSWRNYXBbYXVkaW9JZF0gPSBhdWRpb0lkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXVkaW9JZCA9IGNjLmF1ZGlvRW5naW5lLnBsYXlFZmZlY3QodXJsLCBsb29wKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXVkaW9JZDtcbiAgICB9LFxuXG4gICAgc3RvcEVmZmVjdDogZnVuY3Rpb24gKGF1ZGlvSWQpIHtcbiAgICAgICAgaWYgKHRoaXMudXNlSnNiQXVkaW9FbmdpbmUoKSkge1xuICAgICAgICAgICAgdGhpcy5fbmF0aXZlU3RvcEF1ZGlvKGF1ZGlvSWQpO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2F1ZGlvSWRNYXBbYXVkaW9JZF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYy5hdWRpb0VuZ2luZS5zdG9wRWZmZWN0KGF1ZGlvSWQpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHN0b3BBbGxFZmZlY3RzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnVzZUpzYkF1ZGlvRW5naW5lKCkpIHtcbiAgICAgICAgICAgIHZhciBhdWRpb0lkcyA9IE9iamVjdC5rZXlzKHRoaXMuX2F1ZGlvSWRNYXApO1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICAgICAgYXVkaW9JZHMuZm9yRWFjaChmdW5jdGlvbiAoYXVkaW9JZCkge1xuICAgICAgICAgICAgICAgIHNlbGYuX25hdGl2ZVN0b3BBdWRpbyhhdWRpb0lkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5fYXVkaW9JZE1hcCA9IHt9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2MuYXVkaW9FbmdpbmUuc3RvcEFsbEVmZmVjdHMoKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBwbGF5TXVzaWM6IGZ1bmN0aW9uICh1cmwsIGxvb3ApIHtcbiAgICAgICAgaWYgKHRoaXMudXNlSnNiQXVkaW9FbmdpbmUoKSkge1xuICAgICAgICAgICAgaWYgKC0xICE9PSB0aGlzLl9tdXNpY0lkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbmF0aXZlU3RvcEF1ZGlvKHRoaXMuX211c2ljSWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fbXVzaWNJZCA9IGpzYi5BdWRpb0VuZ2luZS5wbGF5MmQodXJsLCBsb29wLCB0aGlzLl9tdXNpY1ZvbHVtZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYy5hdWRpb0VuZ2luZS5wbGF5TXVzaWModXJsLCBsb29wKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBpc011c2ljUGxheWluZzogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICBpZiAodGhpcy51c2VKc2JBdWRpb0VuZ2luZSgpKSB7XG4gICAgICAgICAgICByZXN1bHQgPSAoanNiLkF1ZGlvRW5naW5lLmdldFN0YXRlKHRoaXMuX211c2ljSWQpID09PSAxKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGNjLmF1ZGlvRW5naW5lLmlzTXVzaWNQbGF5aW5nKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgcmVzdW1lTXVzaWM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMudXNlSnNiQXVkaW9FbmdpbmUoKSkge1xuICAgICAgICAgICAganNiLkF1ZGlvRW5naW5lLnJlc3VtZSh0aGlzLl9tdXNpY0lkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNjLmF1ZGlvRW5naW5lLnJlc3VtZU11c2ljKCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgcGF1c2VNdXNpYzogZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy51c2VKc2JBdWRpb0VuZ2luZSgpKSB7XG4gICAgICAgICAgICBqc2IuQXVkaW9FbmdpbmUucGF1c2UodGhpcy5fbXVzaWNJZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYy5hdWRpb0VuZ2luZS5wYXVzZU11c2ljKCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgX25hdGl2ZVN0b3BBdWRpbzogZnVuY3Rpb24gKGF1ZGlvSWQpIHtcbiAgICAgICAganNiLkF1ZGlvRW5naW5lLnN0b3AoYXVkaW9JZCk7XG4gICAgfSxcblxuICAgIHN0b3BNdXNpYzogZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy51c2VKc2JBdWRpb0VuZ2luZSgpKSB7XG4gICAgICAgICAgICB0aGlzLl9uYXRpdmVTdG9wQXVkaW8odGhpcy5fbXVzaWNJZCk7XG4gICAgICAgICAgICB0aGlzLl9tdXNpY0lkID0gLTE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYy5hdWRpb0VuZ2luZS5zdG9wTXVzaWMoKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBwcmVsb2FkRWZmZWN0OiBmdW5jdGlvbiAoZWZmZWN0TmFtZSkge1xuICAgICAgICBpZiAodGhpcy51c2VKc2JBdWRpb0VuZ2luZSgpKSB7XG4gICAgICAgICAgICBqc2IuQXVkaW9FbmdpbmUucHJlbG9hZChlZmZlY3ROYW1lKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICB1bmxvYWRFZmZlY3Q6IGZ1bmN0aW9uIChlZmZlY3ROYW1lKSB7XG4gICAgICAgIGlmICh0aGlzLnVzZUpzYkF1ZGlvRW5naW5lKCkpIHtcbiAgICAgICAgICAgIGpzYi5BdWRpb0VuZ2luZS51bmNhY2hlKGVmZmVjdE5hbWUpO1xuICAgICAgICB9XG4gICAgfVxufTtcblxudmFyIEFDVElPTl9UWVBFID0ge1xuICAgIEFDVElPTl9OVUxMOiAwLFxuICAgIEFDVElPTl9QQVVTRTogMSxcbiAgICBBQ1RJT05fUkVTVU1FOiAyXG59O1xuXG52YXIgUExBWV9UWVBFID0ge1xuICAgIFBMQVlfVFlQRV9OT1JNQUw6IDAsXG4gICAgUExBWV9UWVBFX0ZBREVfT1VUX0ZBREVfSU46IDFcbn07XG5cbnZhciBBdWRpb1BsYXllciA9IGNjLkNsYXNzLmV4dGVuZCh7XG4gICAgbGFzdE11c2ljVm9sdW1lOiAwLFxuICAgIHN1ZmZpeDogbnVsbCxcbiAgICBlZmZlY3RNYXA6IG51bGwsXG4gICAgcGxheVR5cGU6IFBMQVlfVFlQRS5QTEFZX1RZUEVfTk9STUFMLFxuICAgIGFjdGlvblR5cGU6IEFDVElPTl9UWVBFLkFDVElPTl9OVUxMLFxuICAgIG11c2ljTmFtZTogbnVsbCxcbiAgICBsb29wOiBmYWxzZSxcbiAgICBjdG9yOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChjYy5zeXMub3MgPT09IGNjLnN5cy5PU19BTkRST0lEKSB7XG4gICAgICAgICAgICB0aGlzLnN1ZmZpeCA9IFwicmVzL2F1ZGlvX29nZy8lcy5vZ2dcIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc3VmZml4ID0gXCJyZXMvYXVkaW9fbXAzLyVzLm1wM1wiO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZWZmZWN0TWFwID0ge307XG4gICAgICAgIHZhciBpc011c2ljT24gPSB0aGlzLmlzTXVzaWNPbigpO1xuICAgICAgICB0aGlzLmxhc3RNdXNpY1ZvbHVtZSA9IDE7XG4gICAgICAgIHRoaXMuc2V0TXVzaWNPbihpc011c2ljT24pO1xuICAgIH0sXG5cbiAgICBiZWdpblNjaGVkdWxlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNjLmRpcmVjdG9yLmdldFNjaGVkdWxlcigpLnNjaGVkdWxlQ2FsbGJhY2tGb3JUYXJnZXQodGhpcywgdGhpcy51cGRhdGUsIDAuMSwgY2MuUkVQRUFUX0ZPUkVWRVIsIDAsIGZhbHNlKTtcbiAgICB9LFxuXG4gICAgc3RvcFNjaGVkdWxlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNjLmRpcmVjdG9yLmdldFNjaGVkdWxlcigpLnVuc2NoZWR1bGVDYWxsYmFja0ZvclRhcmdldCh0aGlzLCB0aGlzLnVwZGF0ZSk7XG4gICAgfSxcblxuICAgIHVwZGF0ZTogZnVuY3Rpb24gKGR0KSB7XG4gICAgICAgIGR0ICo9IDAuNTtcbiAgICAgICAgdmFyIGlzRmluaXNoID0gZmFsc2U7XG4gICAgICAgIHZhciB2b2x1bWUgPSBjYy5hdWRpb0VuZ2luZS5nZXRNdXNpY1ZvbHVtZSgpO1xuICAgICAgICBpZiAodGhpcy5wbGF5VHlwZSA9PSBQTEFZX1RZUEUuUExBWV9UWVBFX0ZBREVfT1VUX0ZBREVfSU4pIHtcbiAgICAgICAgICAgIGlmICh2b2x1bWUgPiAwLjAwMSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmFjdGlvblR5cGUgPT0gQUNUSU9OX1RZUEUuQUNUSU9OX1BBVVNFKSB7XG4gICAgICAgICAgICAgICAgICAgIHZvbHVtZSAtPSBkdDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZvbHVtZSA8IDAuMDAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2b2x1bWUgPSAwLjAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbGF5TXVzaWNCeUtleSh0aGlzLm11c2ljTmFtZSwgdGhpcy5sb29wKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWN0aW9uVHlwZSA9IEFDVElPTl9UWVBFLkFDVElPTl9SRVNVTUU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2MuYXVkaW9FbmdpbmUuc2V0TXVzaWNWb2x1bWUodm9sdW1lKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuYWN0aW9uVHlwZSA9PSBBQ1RJT05fVFlQRS5BQ1RJT05fUkVTVU1FKSB7XG4gICAgICAgICAgICAgICAgICAgIHZvbHVtZSArPSBkdDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZvbHVtZSA+IDAuOTkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZvbHVtZSA9IDAuOTk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpc0ZpbmlzaCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2MuYXVkaW9FbmdpbmUuc2V0TXVzaWNWb2x1bWUodm9sdW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMucGxheU11c2ljQnlLZXkodGhpcy5tdXNpY05hbWUsIHRoaXMubG9vcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNGaW5pc2gpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFjdGlvblR5cGUgPSBBQ1RJT05fVFlQRS5BQ1RJT05fTlVMTDtcbiAgICAgICAgICAgICAgICB0aGlzLnBsYXlUeXBlID0gUExBWV9UWVBFLlBMQVlfVFlQRV9OT1JNQUw7XG4gICAgICAgICAgICAgICAgdGhpcy5zdG9wU2NoZWR1bGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh2b2x1bWUgPiAwLjAwMSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmFjdGlvblR5cGUgPT0gQUNUSU9OX1RZUEUuQUNUSU9OX1BBVVNFKSB7XG4gICAgICAgICAgICAgICAgICAgIHZvbHVtZSAtPSBkdDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZvbHVtZSA8IDAuMDAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2b2x1bWUgPSAwLjAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgaXNGaW5pc2ggPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXVzZU11c2ljKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2MuYXVkaW9FbmdpbmUuc2V0TXVzaWNWb2x1bWUodm9sdW1lKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuYWN0aW9uVHlwZSA9PSBBQ1RJT05fVFlQRS5BQ1RJT05fUkVTVU1FKSB7XG4gICAgICAgICAgICAgICAgICAgIHZvbHVtZSArPSBkdDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZvbHVtZSA+IDAuOTkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZvbHVtZSA9IDAuOTk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpc0ZpbmlzaCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2MuYXVkaW9FbmdpbmUuc2V0TXVzaWNWb2x1bWUodm9sdW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlzRmluaXNoID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc0ZpbmlzaCkge1xuICAgICAgICAgICAgICAgIHRoaXMuYWN0aW9uVHlwZSA9IEFDVElPTl9UWVBFLkFDVElPTl9OVUxMO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RvcFNjaGVkdWxlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgcGxheUVmZmVjdEJ5S2V5OiBmdW5jdGlvbiAoZWZmZWN0TmFtZSwgbG9vcCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNFZmZlY3RPbigpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGZpbGVOYW1lID0gZ2FtZS51dGlscy5zcHJpbnRmKHRoaXMuc3VmZml4LCBlZmZlY3ROYW1lKTtcbiAgICAgICAgdmFyIGtleSA9IFwiXCI7XG4gICAgICAgIGlmIChjYy5zeXMuaXNOYXRpdmUpIHtcbiAgICAgICAgICAgIGlmIChqc2IuZmlsZVV0aWxzLmlzRmlsZUV4aXN0KGZpbGVOYW1lKSkge1xuICAgICAgICAgICAgICAgIGtleSA9IEF1ZGlvRW5naW5lV3JhcHBlci5wbGF5RWZmZWN0KGZpbGVOYW1lLCBsb29wKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY2MubG9nKGdhbWUudXRpbHMuc3ByaW50ZihcImVmZmVjdCBmaWxlICVzIG5vdCBmb3VuZFwiLCBmaWxlTmFtZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGNjLmxvYWRlci5nZXRSZXMoZmlsZU5hbWUpKSB7XG4gICAgICAgICAgICAgICAga2V5ID0gQXVkaW9FbmdpbmVXcmFwcGVyLnBsYXlFZmZlY3QoZmlsZU5hbWUsIGxvb3ApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgICAgIHRoaXMuZWZmZWN0TWFwW2ZpbGVOYW1lXSA9IGtleTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBwbGF5TXVzaWNCeUtleTogZnVuY3Rpb24gKG11c2ljTmFtZSwgbG9vcCkge1xuICAgICAgICB0aGlzLmFjdGlvblR5cGUgPSBBQ1RJT05fVFlQRS5BQ1RJT05fTlVMTDtcbiAgICAgICAgdGhpcy5wbGF5VHlwZSA9IFBMQVlfVFlQRS5QTEFZX1RZUEVfTk9STUFMO1xuICAgICAgICBpZiAodGhpcy5pc011c2ljT24oKSkge1xuICAgICAgICAgICAgaWYgKHRoaXMubGFzdE11c2ljVm9sdW1lICE9IDApIHtcbiAgICAgICAgICAgICAgICBBdWRpb0VuZ2luZVdyYXBwZXIuc2V0TXVzaWNWb2x1bWUodGhpcy5sYXN0TXVzaWNWb2x1bWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBBdWRpb0VuZ2luZVdyYXBwZXIuc2V0TXVzaWNWb2x1bWUoMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGZpbGVOYW1lID0gZ2FtZS51dGlscy5zcHJpbnRmKHRoaXMuc3VmZml4LCBtdXNpY05hbWUpO1xuICAgICAgICBpZiAoY2Muc3lzLmlzTmF0aXZlKSB7XG4gICAgICAgICAgICBpZiAoanNiLmZpbGVVdGlscy5pc0ZpbGVFeGlzdChmaWxlTmFtZSkpIHtcbiAgICAgICAgICAgICAgICBBdWRpb0VuZ2luZVdyYXBwZXIucGxheU11c2ljKGZpbGVOYW1lLCBsb29wKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY2MubG9nKGdhbWUudXRpbHMuc3ByaW50ZihcIm11c2ljIGZpbGUgJXMgbm90IGZvdW5kXCIsIGZpbGVOYW1lKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoY2MubG9hZGVyLmdldFJlcyhmaWxlTmFtZSkpIHtcbiAgICAgICAgICAgICAgICBBdWRpb0VuZ2luZVdyYXBwZXIucGxheU11c2ljKGZpbGVOYW1lLCBsb29wKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBpc1BsYXlpbmdNdXNpYzogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gQXVkaW9FbmdpbmVXcmFwcGVyLmlzTXVzaWNQbGF5aW5nKCk7XG4gICAgfSxcblxuICAgIHJlc3VtZU11c2ljOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIEF1ZGlvRW5naW5lV3JhcHBlci5yZXN1bWVNdXNpYygpO1xuICAgIH0sXG5cbiAgICByZXN1bWVNdXNpY1Nsb3dseTogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdm9sdW1lID0gQXVkaW9FbmdpbmVXcmFwcGVyLmdldE11c2ljVm9sdW1lKCk7XG4gICAgICAgIGlmICh2b2x1bWUgPCAwLjAwMDEgfHwgdm9sdW1lID49IDAuOTkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5hY3Rpb25UeXBlID09IEFDVElPTl9UWVBFLkFDVElPTl9OVUxMKSB7XG4gICAgICAgICAgICB0aGlzLmJlZ2luU2NoZWR1bGUoKTtcbiAgICAgICAgfVxuICAgICAgICBBdWRpb0VuZ2luZVdyYXBwZXIuc2V0TXVzaWNWb2x1bWUoMC4wMSk7XG4gICAgICAgIHRoaXMucmVzdW1lTXVzaWMoKTtcbiAgICAgICAgdGhpcy5hY3Rpb25UeXBlID0gQUNUSU9OX1RZUEUuQUNUSU9OX1JFU1VNRTtcbiAgICB9LFxuXG4gICAgc3RvcE11c2ljOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIEF1ZGlvRW5naW5lV3JhcHBlci5zdG9wTXVzaWMoKTtcbiAgICB9LFxuXG4gICAgc3RvcEVmZmVjdDogZnVuY3Rpb24gKGVmZmVjdE5hbWUpIHtcbiAgICAgICAgdmFyIGZpbGVOYW1lID0gZ2FtZS51dGlscy5zcHJpbnRmKHRoaXMuc3VmZml4LCBlZmZlY3ROYW1lKTtcbiAgICAgICAgdmFyIGVmZmVjdEtleSA9IHRoaXMuZWZmZWN0TWFwW2ZpbGVOYW1lXTtcbiAgICAgICAgaWYgKGVmZmVjdEtleSkge1xuICAgICAgICAgICAgQXVkaW9FbmdpbmVXcmFwcGVyLnN0b3BFZmZlY3QoZWZmZWN0S2V5KTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmVmZmVjdE1hcFtmaWxlTmFtZV07XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcEFsbEVmZmVjdHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgQXVkaW9FbmdpbmVXcmFwcGVyLnN0b3BBbGxFZmZlY3RzKCk7XG4gICAgfSxcblxuICAgIGlzRWZmZWN0T246IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGlzT24gPSBnYW1lLnN0b3JhZ2VDb250cm9sbGVyLmdldEl0ZW0oXCJlZmZlY3Rfb25cIiwgXCJ0cnVlXCIpO1xuICAgICAgICBpZiAoaXNPbiA9PSBcInRydWVcIikge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICBpc011c2ljT246IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGlzT24gPSBnYW1lLnN0b3JhZ2VDb250cm9sbGVyLmdldEl0ZW0oXCJtdXNpY19vblwiLCBcInRydWVcIik7XG4gICAgICAgIGlmIChpc09uID09IFwidHJ1ZVwiKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuICAgIGlzVmlicmF0ZU9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBpc09uID0gZ2FtZS5zdG9yYWdlQ29udHJvbGxlci5nZXRJdGVtKFwidmlicmF0ZV9vblwiLCBcInRydWVcIik7XG4gICAgICAgIGlmIChpc09uID09IFwidHJ1ZVwiKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuICAgIHBhdXNlTXVzaWM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgQXVkaW9FbmdpbmVXcmFwcGVyLnBhdXNlTXVzaWMoKTtcbiAgICB9LFxuXG4gICAgcGF1c2VNdXNpY1Nsb3dseTogZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNQbGF5aW5nTXVzaWMoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChBdWRpb0VuZ2luZVdyYXBwZXIuZ2V0TXVzaWNWb2x1bWUoKSA8IDAuMDAwMSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmFjdGlvblR5cGUgPT0gQUNUSU9OX1RZUEUuQUNUSU9OX05VTEwpIHtcbiAgICAgICAgICAgIHRoaXMuYmVnaW5TY2hlZHVsZSgpO1xuICAgICAgICB9XG4gICAgICAgIC8vQXVkaW9FbmdpbmVXcmFwcGVyLnNldE11c2ljVm9sdW1lKDAuOTkpO1xuICAgICAgICB0aGlzLmFjdGlvblR5cGUgPSBBQ1RJT05fVFlQRS5BQ1RJT05fUEFVU0U7XG4gICAgfSxcblxuICAgIHBsYXlNdXNpY1Nsb3dseUJ5S2V5OiBmdW5jdGlvbiAobXVzaWNOYW1lLCBsb29wKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1BsYXlpbmdNdXNpYygpKSB7XG4gICAgICAgICAgICB0aGlzLnBsYXlNdXNpY0J5S2V5KG11c2ljTmFtZSwgbG9vcCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnBsYXlUeXBlID0gUExBWV9UWVBFLlBMQVlfVFlQRV9GQURFX09VVF9GQURFX0lOO1xuICAgICAgICB0aGlzLm11c2ljTmFtZSA9IG11c2ljTmFtZTtcbiAgICAgICAgdGhpcy5sb29wID0gbG9vcDtcblxuICAgICAgICBpZiAodGhpcy5hY3Rpb25UeXBlID09IEFDVElPTl9UWVBFLkFDVElPTl9OVUxMKSB7XG4gICAgICAgICAgICB0aGlzLmJlZ2luU2NoZWR1bGUoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFjdGlvblR5cGUgPSBBQ1RJT05fVFlQRS5BQ1RJT05fUEFVU0U7XG4gICAgfSxcbiAgICBcbiAgICBzZXRFZmZlY3RPbjogZnVuY3Rpb24gKGlzT24pIHtcbiAgICAgICAgZ2FtZS5zdG9yYWdlQ29udHJvbGxlci5zZXRJdGVtKFwiZWZmZWN0X29uXCIsIFwiXCIgKyBpc09uKTtcbiAgICB9LFxuXG4gICAgc2V0VmlicmF0ZU9uOiBmdW5jdGlvbiAoaXNPbikge1xuICAgICAgICBnYW1lLnN0b3JhZ2VDb250cm9sbGVyLnNldEl0ZW0oXCJ2aWJyYXRlX29uXCIsIFwiXCIgKyBpc09uKTtcbiAgICB9LFxuXG4gICAgc2V0TXVzaWNPbjogZnVuY3Rpb24gKGlzT24pIHtcbiAgICAgICAgaWYgKGlzT24pIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmxhc3RNdXNpY1ZvbHVtZSAhPSAwKSB7XG4gICAgICAgICAgICAgICAgQXVkaW9FbmdpbmVXcmFwcGVyLnNldE11c2ljVm9sdW1lKHRoaXMubGFzdE11c2ljVm9sdW1lKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgQXVkaW9FbmdpbmVXcmFwcGVyLnNldE11c2ljVm9sdW1lKDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5sYXN0TXVzaWNWb2x1bWUgPSBBdWRpb0VuZ2luZVdyYXBwZXIuZ2V0TXVzaWNWb2x1bWUoKTtcbiAgICAgICAgICAgIEF1ZGlvRW5naW5lV3JhcHBlci5zZXRNdXNpY1ZvbHVtZSgwKTtcbiAgICAgICAgfVxuICAgICAgICBnYW1lLnN0b3JhZ2VDb250cm9sbGVyLnNldEl0ZW0oXCJtdXNpY19vblwiLCBcIlwiICsgaXNPbik7XG4gICAgfSxcblxuICAgIHNldE11c2ljVm9sdW1lOiBmdW5jdGlvbiAodm9sdW1lKSB7XG4gICAgICAgIGlmICh0aGlzLmlzTXVzaWNPbigpKSB7XG4gICAgICAgICAgICBBdWRpb0VuZ2luZVdyYXBwZXIuc2V0TXVzaWNWb2x1bWUodm9sdW1lKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBwcmVsb2FkRWZmZWN0OiBmdW5jdGlvbiAoZWZmZWN0TmFtZSkge1xuICAgICAgICB2YXIgZmlsZU5hbWUgPSBnYW1lLnV0aWxzLnNwcmludGYodGhpcy5zdWZmaXgsIGVmZmVjdE5hbWUpO1xuICAgICAgICBjYy5sb2coXCJwcmVsb2FkIGVmZmVjdDpcIiArIGZpbGVOYW1lKTtcbiAgICAgICAgQXVkaW9FbmdpbmVXcmFwcGVyLnByZWxvYWRFZmZlY3QoZmlsZU5hbWUpO1xuICAgIH0sXG5cbiAgICB1bmxvYWRFZmZlY3Q6IGZ1bmN0aW9uIChlZmZlY3ROYW1lKSB7XG4gICAgICAgIHZhciBmaWxlTmFtZSA9IGdhbWUudXRpbHMuc3ByaW50Zih0aGlzLnN1ZmZpeCwgZWZmZWN0TmFtZSk7XG4gICAgICAgIGNjLmxvZyhcInVubG9hZCBlZmZlY3Q6XCIgKyBmaWxlTmFtZSk7XG4gICAgICAgIEF1ZGlvRW5naW5lV3JhcHBlci51bmxvYWRFZmZlY3QoZmlsZU5hbWUpO1xuICAgIH0sXG5cbiAgICB2aWJyYXRlU2hvcnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmlicmF0ZU9uKCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2Muc3lzLmlzTmF0aXZlKSB7XG4gICAgICAgICAgICBpZiAoY2Muc3lzLm9zID09PSBjYy5zeXMuT1NfQU5EUk9JRCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGpzYl9kcC5vbmVTZGtCcmlkZ2UudmlicmF0ZVNob3J0KCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgdmlicmF0ZUxvbmc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmlicmF0ZU9uKCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2Muc3lzLmlzTmF0aXZlKSB7XG4gICAgICAgICAgICBpZiAoY2Muc3lzLm9zID09PSBjYy5zeXMuT1NfQU5EUk9JRCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGpzYl9kcC5vbmVTZGtCcmlkZ2UudmlicmF0ZUxvbmcoKTtcbiAgICAgICAgfVxuICAgIH1cbn0pO1xuXG5BdWRpb1BsYXllci5faW5zdGFuY2UgPSBudWxsO1xuQXVkaW9QbGF5ZXIuX2ZpcnN0VXNlSW5zdGFuY2UgPSB0cnVlO1xuXG4vKipcbiAqXG4gKiBAcmV0dXJucyB7QXVkaW9QbGF5ZXJ9XG4gKi9cbkF1ZGlvUGxheWVyLmdldEluc3RhbmNlID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChBdWRpb1BsYXllci5fZmlyc3RVc2VJbnN0YW5jZSkge1xuICAgICAgICBBdWRpb1BsYXllci5fZmlyc3RVc2VJbnN0YW5jZSA9IGZhbHNlO1xuICAgICAgICBBdWRpb1BsYXllci5faW5zdGFuY2UgPSBuZXcgQXVkaW9QbGF5ZXIoKTtcbiAgICB9XG4gICAgcmV0dXJuIEF1ZGlvUGxheWVyLl9pbnN0YW5jZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQXVkaW9QbGF5ZXI7IiwidmFyIEdhbWVCcmlkZ2UgPSB7XG4gICAgZ2V0TWVudVNjZW5lOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBNZW51U2NlbmUgPSByZXF1aXJlKFwiLi4vLi4vbWFueV9icmlja3Mvc2NlbmUvTWVudVNjZW5lXCIpO1xuICAgICAgICByZXR1cm4gbmV3IE1lbnVTY2VuZSgpO1xuICAgIH0sXG5cbiAgICBnZXRDb25maWc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHJlcXVpcmUoXCIuLi8uLi9tYW55X2JyaWNrcy9jb25maWcvQ29uZmlnXCIpO1xuICAgIH0sXG5cbiAgICBnZXRQb3B1cE1hbjogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gcmVxdWlyZShcIi4uLy4uL21hbnlfYnJpY2tzL21vZGVsL1BvcHVwTWFuXCIpO1xuICAgIH0sXG5cbiAgICBnZXRMb2FkaW5nU2NlbmU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIExvYWRpbmdTY2VuZSA9IHJlcXVpcmUoXCIuLi8uLi9tYW55X2JyaWNrcy9zY2VuZS9Mb2FkaW5nU2NlbmVcIik7XG4gICAgICAgIHJldHVybiBuZXcgTG9hZGluZ1NjZW5lKCk7XG4gICAgfSxcblxuICAgIGdldEdhbWVNYW46IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIEdhbWVNYW4gPSByZXF1aXJlKFwiLi4vLi4vbWFueV9icmlja3MvbW9kZWwvR2FtZU1hblwiKTtcbiAgICAgICAgcmV0dXJuIEdhbWVNYW4uZ2V0SW5zdGFuY2UoKTtcbiAgICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEdhbWVCcmlkZ2U7IiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHFpbm5pbmcgb24gMTUvNC8yMy5cbiAqL1xudmFyIFV0aWxzID0gcmVxdWlyZShcIi4uL3V0aWwvVXRpbHNcIik7XG5cbnZhciBCYXNlQ0NCQ29udHJvbGxlciA9IGZ1bmN0aW9uKCkge1xufTtcblxuQmFzZUNDQkNvbnRyb2xsZXIucHJvdG90eXBlLm9uRGlkTG9hZEZyb21DQ0IgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIG9sZE9uRW50ZXIgPSB0aGlzLnJvb3ROb2RlW1wib25FbnRlclwiXTtcbiAgICB0aGlzLnJvb3ROb2RlW1wib25FbnRlclwiXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZihjYy5pc0Z1bmN0aW9uKG9sZE9uRW50ZXIpKXtcbiAgICAgICAgICAgIG9sZE9uRW50ZXIuYXBwbHkoc2VsZi5yb290Tm9kZSwgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgICBzZWxmLm9uRW50ZXIoKTtcbiAgICB9O1xuICAgIHZhciBvbGRPbkV4aXQgPSB0aGlzLnJvb3ROb2RlW1wib25FeGl0XCJdO1xuICAgIHRoaXMucm9vdE5vZGVbXCJvbkV4aXRcIl0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKGNjLmlzRnVuY3Rpb24ob2xkT25FeGl0KSkge1xuICAgICAgICAgICAgb2xkT25FeGl0LmFwcGx5KHNlbGYucm9vdE5vZGUsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgICAgc2VsZi5vbkV4aXQoKTtcbiAgICB9O1xuICAgIHRoaXMuX3Zpc2l0Tm9kZXMoKTtcbn07XG5cbkJhc2VDQ0JDb250cm9sbGVyLnByb3RvdHlwZS5vbkVudGVyID0gZnVuY3Rpb24oKSB7XG59O1xuXG5CYXNlQ0NCQ29udHJvbGxlci5wcm90b3R5cGUub25FeGl0ID0gZnVuY3Rpb24oKSB7XG59O1xuXG5mdW5jdGlvbiBzZXRTY2FsZVdpdGhQYXJlbnRTaXplKGxhYmVsKSB7XG4gICAgY2MubG9nKFwic2V0U2NhbGVXaXRoUGFyZW50U2l6ZVwiKTtcbiAgICB2YXIgcGFyZW50ID0gbGFiZWwuZ2V0UGFyZW50KCk7XG4gICAgdmFyIHBhcmVudFNpemUgPSBwYXJlbnQuZ2V0Q29udGVudFNpemUoKTtcbiAgICB2YXIgZm9udFNpemUgPSBsYWJlbC5nZXRDb250ZW50U2l6ZSgpO1xuXG4gICAgaWYgKCFsYWJlbC5fX29yaWdpbl9zY2FsZSkge1xuICAgICAgICBsYWJlbC5fX29yaWdpbl9zY2FsZSA9IHtcbiAgICAgICAgICAgIHg6IGxhYmVsLmdldFNjYWxlWCgpLFxuICAgICAgICAgICAgeTogbGFiZWwuZ2V0U2NhbGVZKClcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgc2l6ZSA9IHtcbiAgICAgICAgd2lkdGggOiBmb250U2l6ZS53aWR0aCAqIGxhYmVsLl9fb3JpZ2luX3NjYWxlLngsXG4gICAgICAgIGhlaWdodCA6IGZvbnRTaXplLmhlaWdodCAqIGxhYmVsLl9fb3JpZ2luX3NjYWxlLnlcbiAgICB9O1xuXG4gICAgLy8gYSBjbGVhbiBoYWNraW5nLCBzYXZlIHVzIHRvIGNhbGMgdGhlIGxhYmVsIGhlaWdodCBtYW51YWxseS4gOl1cbiAgICAvLyBwYXJlbnRTaXplLmhlaWdodCAqPSBsYWJlbC5fX29yaWdpbl9zY2FsZS55O1xuXG4gICAgaWYgKHNpemUud2lkdGggPiBwYXJlbnRTaXplLndpZHRoIHx8IHNpemUuaGVpZ2h0ID4gcGFyZW50U2l6ZS5oZWlnaHQpIHtcbiAgICAgICAgdmFyIHggPSBNYXRoLm1pbihwYXJlbnRTaXplLndpZHRoIC8gc2l6ZS53aWR0aCwgMSkgKiBsYWJlbC5fX29yaWdpbl9zY2FsZS54O1xuICAgICAgICB2YXIgeSA9IE1hdGgubWluKHBhcmVudFNpemUuaGVpZ2h0IC8gc2l6ZS5oZWlnaHQsIDEpICogbGFiZWwuX19vcmlnaW5fc2NhbGUueTtcblxuICAgICAgICB2YXIgc2NhbGUgPSBNYXRoLm1pbih4LCB5KTtcbiAgICAgICAgbGFiZWwuc2V0U2NhbGUoc2NhbGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vbWF5YmUgcmV1c2VkLCByZXNldCBvcmlnaW4gc2l6ZVxuICAgICAgICBsYWJlbC5zZXRTY2FsZShsYWJlbC5fX29yaWdpbl9zY2FsZS54KTtcbiAgICB9XG59XG5cbkJhc2VDQ0JDb250cm9sbGVyLnByb3RvdHlwZS5fdmlzaXROb2RlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgVG91Y2hlZE5vZGUgPSByZXF1aXJlKFwiLi4vZXh0L1RvdWNoZWROb2RlXCIpO1xuICAgIFV0aWxzLndhbGtOb2RlKHRoaXMucm9vdE5vZGUsIGZ1bmN0aW9uKG5kKSB7XG4gICAgICAgIGlmIChuZC5fX192aXNpdGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBuZC5fX192aXNpdGVkID0gdHJ1ZTtcbiAgICAgICAgaWYgKCFnYW1lLmNvbmZpZy5tZW51Tm9TY2FsZSkge1xuICAgICAgICAgICAgdmFyIGlzTWVudUl0ZW0gPSBVdGlscy5pc05vZGVNZW51SXRlbShuZCk7XG4gICAgICAgICAgICBpZiAoaXNNZW51SXRlbSB8fCAoVXRpbHMuaXNOb2RlQnV0dG9uKG5kKSAmJiBuZC56b29tT25Ub3VjaERvd24pKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5kLnpvb21PblRvdWNoRG93bikge1xuICAgICAgICAgICAgICAgICAgICBuZC56b29tT25Ub3VjaERvd24gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIG5vZGUgPSBuZXcgVG91Y2hlZE5vZGUoaXNNZW51SXRlbSk7XG4gICAgICAgICAgICAgICAgbmQuYWRkQ2hpbGQobm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobmQuZ2V0U3RyaW5nICE9IG51bGwgJiYgbmQuc2V0U3RyaW5nICE9IG51bGwpIHtcbiAgICAgICAgICAgIHZhciBwYXJlbnQgPSBuZC5nZXRQYXJlbnQoKTtcbiAgICAgICAgICAgIC8vY2MubG9nKFwiX3Zpc2l0Tm9kZXMgdGFnOlwiICsgcGFyZW50LmdldFRhZygpKTtcbiAgICAgICAgICAgIGlmIChwYXJlbnQgJiYgcGFyZW50LmdldFRhZygpID09PSA3OSkge1xuICAgICAgICAgICAgICAgIHZhciBpc0JNRm9udCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGlmKFV0aWxzLmlzTGFiZWxCTUZvbnQobmQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlzQk1Gb250ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy9jYy5sb2coXCJfdmlzaXROb2RlcyBuZC5fY2xhc3NOYW1lOlwiICsgbmQuX2NsYXNzTmFtZSk7XG4gICAgICAgICAgICAgICAgLy9jYy5sb2coXCJfdmlzaXROb2RlcyBpc0JNRm9udDpcIiArIGlzQk1Gb250KTtcbiAgICAgICAgICAgICAgICBpZihpc0JNRm9udCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2Muc3lzLmlzTmF0aXZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL2NjLmxvZyhcIl92aXNpdE5vZGVzIDJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBtYXliZSByZXBlYXQgY2FsbCBpbiBvbkVudGVyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW5kLl9fb3JpZ2luX3NldHN0cmluZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5kLl9fb3JpZ2luX3NldHN0cmluZyA9IG5kLnNldFN0cmluZztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZC5zZXRTdHJpbmcgPSBmdW5jdGlvbihuZXdTdHJpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fX29yaWdpbl9zZXRzdHJpbmcobmV3U3RyaW5nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaGVyZSB3ZSBzdGFydCB0byBoYWNrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFNjYWxlV2l0aFBhcmVudFNpemUodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfS5iaW5kKG5kKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5kLnNldFN0cmluZyA9IGZ1bmN0aW9uKG5ld1N0cmluZywgbmVlZFVwZGF0ZUxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gb3JpZ2luIGNvZGUgY29waWVkIGZyb20gQ0NMYWJlbEJNRm9udC5qcyBzZXRTdHJpbmdcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1N0cmluZyA9IFN0cmluZyhuZXdTdHJpbmcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZWVkVXBkYXRlTGFiZWwgPT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmVlZFVwZGF0ZUxhYmVsID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV3U3RyaW5nID09IG51bGwgfHwgIWNjLmlzU3RyaW5nKG5ld1N0cmluZykpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1N0cmluZyA9IG5ld1N0cmluZyArIFwiXCI7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3RoaXMuX2luaXRpYWxTdHJpbmcgPSBuZXdTdHJpbmc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0U3RyaW5nKG5ld1N0cmluZywgbmVlZFVwZGF0ZUxhYmVsKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGhlcmUgd2Ugc3RhcnQgdG8gaGFja1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNldCB0aGUgZGltZW5zaW9uIGFjY29yZGluZyB0byBpdCdzIHBhcmVudCB3aG8gaGFzIGEgdGFnIDc5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbmVlZFVwZGF0ZUxhYmVsID09IHRydWUsIGl0IHByZXZlbnRzIHRoZSBsb29wIGJlZW4gY2FsbGVkIHJlY3Vyc2l2ZWx5LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZWVkVXBkYXRlTGFiZWwgPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRTY2FsZVdpdGhQYXJlbnRTaXplKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgfS5iaW5kKG5kKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHN0ciA9IG5kLmdldFN0cmluZygpO1xuICAgICAgICAgICAgdmFyIHNlYXJjaFN0ciA9IFwiJmtleS5cIjtcbiAgICAgICAgICAgIGlmIChzdHIuc3Vic3RyKDAsIHNlYXJjaFN0ci5sZW5ndGgpID09IHNlYXJjaFN0cikge1xuICAgICAgICAgICAgICAgIHZhciBrZXkgPSBzdHIuc3Vic3RyKHNlYXJjaFN0ci5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IF8oa2V5KTtcbiAgICAgICAgICAgICAgICBuZC5zZXRTdHJpbmcodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJhc2VDQ0JDb250cm9sbGVyOyIsIi8qKlxuICogQ3JlYXRlZCBieSBxaW5uaW5nIG9uIDIwMTcvOC8yOS5cbiAqL1xuXG5cbnZhciBDcm9zc1Byb21Db250cm9sbGVyID0gZnVuY3Rpb24gKCkge1xuICAgIEJhc2VDQ0JDb250cm9sbGVyLmNhbGwodGhpcyk7XG4gICAgdGhpcy5fY3Jvc3NQcm9tUGljID0gbnVsbDtcblxuICAgIHRoaXMuX2NvcnNzUHJvbUNvbmZpZyA9IG51bGw7XG59O1xuXG5nYW1lLnV0aWxzLmluaGVyaXRzKENyb3NzUHJvbUNvbnRyb2xsZXIsIEJhc2VDQ0JDb250cm9sbGVyKTtcblxuQ3Jvc3NQcm9tQ29udHJvbGxlci5wcm90b3R5cGUub25EaWRMb2FkRnJvbUNDQiAgPSBmdW5jdGlvbigpIHtcbiAgICBCYXNlQ0NCQ29udHJvbGxlci5wcm90b3R5cGUub25EaWRMb2FkRnJvbUNDQi5jYWxsKHRoaXMpO1xuXG4gICAgaWYgKHRoaXMuX2luZm9MYWJlbCkge1xuICAgICAgICBpZiAoZ2FtZS5sb2NhbC5pc0NoaW5lc2UoKSkge1xuICAgICAgICAgICAgdGhpcy5faW5mb0xhYmVsLnNldFN0cmluZyhcIumprOS4iueOqVwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2luZm9MYWJlbC5zZXRTdHJpbmcoXCJQbGF5XCIpO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuQ3Jvc3NQcm9tQ29udHJvbGxlci5wcm90b3R5cGUuY2xvc2VDbGlja2VkID0gZnVuY3Rpb24gKHNlbmRlcikge1xuICAgIEF1ZGlvSGVscGVyLnBsYXlCdG5Tb3VuZCgpO1xuICAgIHRoaXMuY2xvc2UoKTtcbn07XG5cbkNyb3NzUHJvbUNvbnRyb2xsZXIucHJvdG90eXBlLmRvd25sb2FkQ2xpY2tlZCA9IGZ1bmN0aW9uIChzZW5kZXIpIHtcbiAgICBBdWRpb0hlbHBlci5wbGF5QnRuU291bmQoKTtcbiAgICBjYy5zeXMub3BlblVSTCh0aGlzLl9jb3Jzc1Byb21Db25maWcuZG93bmxvYWRVcmwpO1xuICAgIHRoaXMuY2xvc2UoKTtcbn07XG5cbkNyb3NzUHJvbUNvbnRyb2xsZXIucHJvdG90eXBlLmluaXRXaXRoID0gZnVuY3Rpb24gKGNvbmZpZywgdGV4dHVyZSkge1xuICAgIHRoaXMuX2NvcnNzUHJvbUNvbmZpZyA9IGNvbmZpZztcbiAgICB0aGlzLl9jcm9zc1Byb21QaWMuc2V0VGV4dHVyZSh0ZXh0dXJlKTtcbn07XG5cbkNyb3NzUHJvbUNvbnRyb2xsZXIucHJvdG90eXBlLnBvcHVwID0gZnVuY3Rpb24gKCkge1xuICAgIGdhbWUuZGlhbG9nTWFuYWdlci5wb3B1cCh0aGlzLnJvb3ROb2RlKTtcbn07XG5cbkNyb3NzUHJvbUNvbnRyb2xsZXIucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKCkge1xuICAgIGdhbWUuZGlhbG9nTWFuYWdlci5jbG9zZSh0aGlzLnJvb3ROb2RlKTtcbn07XG5cbkNyb3NzUHJvbUNvbnRyb2xsZXIuY3JlYXRlRnJvbUNDQiA9IGZ1bmN0aW9uKGNjYk5hbWUpIHtcbiAgICB2YXIgbm9kZSA9IGdhbWUudXRpbHMubG9hZE5vZGVGcm9tQ0NCKGNjYk5hbWUsIG51bGwsIFwiQ3Jvc3NQcm9tQ29udHJvbGxlclwiLCBuZXcgQ3Jvc3NQcm9tQ29udHJvbGxlcigpKTtcbiAgICByZXR1cm4gbm9kZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ3Jvc3NQcm9tQ29udHJvbGxlcjsiLCJcbnZhciBOdW1iZXJBbmltYXRpb24gPSBjYy5DbGFzcy5leHRlbmQoe1xuICAgIGFuaW1pbmc6IGZhbHNlLFxuICAgIHN0YXJ0TnVtOiAwLFxuICAgIGVuZE51bTogMCxcbiAgICBzdGVwOiAwLFxuICAgIHRpbWU6IDAuOCxcbiAgICBsYWJlbDogbnVsbCxcblxuICAgIGN0b3I6IGZ1bmN0aW9uIChsYWJlbCkge1xuICAgICAgICB0aGlzLmxhYmVsID0gbGFiZWw7XG4gICAgfSxcblxuICAgIHBsYXlOdW1BbmltOiBmdW5jdGlvbiAoc3RhcnROdW0sIGVuZE51bSkge1xuICAgICAgICB0aGlzLmFuaW1pbmcgPSB0cnVlO1xuICAgICAgICB0aGlzLnN0YXJ0TnVtID0gc3RhcnROdW07XG4gICAgICAgIHRoaXMuZW5kTnVtID0gZW5kTnVtO1xuICAgICAgICB0aGlzLmVsYXBzZWRUaW1lID0gMDtcbiAgICAgICAgdGhpcy5zdGVwID0gKHRoaXMuZW5kTnVtIC0gdGhpcy5zdGFydE51bSkgLyB0aGlzLnRpbWU7XG4gICAgfSxcblxuICAgIHVwZGF0ZTogZnVuY3Rpb24gKGR0KSB7XG4gICAgICAgIGlmICh0aGlzLmFuaW1pbmcpIHtcbiAgICAgICAgICAgIHRoaXMuZWxhcHNlZFRpbWUgKz0gZHQ7XG4gICAgICAgICAgICBjYy5sb2coXCJudW1iZXI6XCIgKyAodGhpcy5zdGFydE51bSArIHRoaXMuc3RlcCAqIHRoaXMuZWxhcHNlZFRpbWUpKTtcbiAgICAgICAgICAgIHRoaXMubGFiZWwuc2V0U3RyaW5nKE1hdGguZmxvb3IodGhpcy5zdGFydE51bSArIHRoaXMuc3RlcCAqIHRoaXMuZWxhcHNlZFRpbWUpKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmVsYXBzZWRUaW1lID49IHRoaXMudGltZSkge1xuICAgICAgICAgICAgICAgIHRoaXMubGFiZWwuc2V0U3RyaW5nKHRoaXMuZW5kTnVtKTtcbiAgICAgICAgICAgICAgICB0aGlzLmFuaW1pbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBkZXN0cm95OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMubGFiZWwgPSBudWxsO1xuICAgIH1cblxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gTnVtYmVyQW5pbWF0aW9uOyIsIi8qKlxuICogQ3JlYXRlZCBieSBxaW5uaW5nIG9uIDIwMTcvMS8yMy5cbiAqL1xuXG52YXIgUGF5bWVudEluZm8gPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnB1cmNoYXNlSWQgPSBudWxsO1xuICAgIHRoaXMucHJvZHVjdElkID0gbnVsbDtcbiAgICB0aGlzLnJlY2VpcHQgPSBudWxsO1xuICAgIHRoaXMuc2lnbmF0dXJlID0gbnVsbDtcblxuICAgIHRoaXMuaW5mbyA9IFwiXCI7XG59O1xuXG5QYXltZW50SW5mby5wcm90b3R5cGUudW5tYXJzaGFsID0gZnVuY3Rpb24oanNvbk9iaikge1xuICAgIHRoaXMucHVyY2hhc2VJZCA9IGpzb25PYmpbXCJwdXJjaGFzZUlkXCJdIHx8IFwiXCI7XG4gICAgdGhpcy5wcm9kdWN0SWQgPSBqc29uT2JqW1wicHJvZHVjdElkXCJdIHx8IFwiXCI7XG4gICAgdGhpcy5yZWNlaXB0ID0ganNvbk9ialtcInJlY2VpcHRcIl0gfHwgXCJcIjtcbiAgICB0aGlzLnNpZ25hdHVyZSA9IGpzb25PYmpbXCJzaWduYXR1cmVcIl0gfHwgXCJcIjtcbiAgICB0aGlzLmluZm8gPSBqc29uT2JqW1wiaW5mb1wiXSB8fCBcIlwiO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBQYXltZW50SW5mbzsiLCIvKipcbiAqIENyZWF0ZWQgYnkgb3llIG9uIDE1LTUtMTcuXG4gKi9cbnZhciBQbGF5ZXJJbmZvID0gZnVuY3Rpb24oKXtcbiAgICB0aGlzLnBsYXllcklkID0gXCJcIjtcbiAgICB0aGlzLmJlc3RTY29yZSA9IDA7XG4gICAgdGhpcy5yZW1vdmVkQWRzID0gZmFsc2U7XG4gICAgdGhpcy5sZXZlbCA9IDA7XG4gICAgdGhpcy5wcm9ncmVzcyA9IDA7XG4gICAgdGhpcy5sZXZlbE1hcCA9IG51bGw7XG4gICAgdGhpcy5yYXRlZCA9IGZhbHNlO1xufTtcblxuUGxheWVySW5mby5wcm90b3R5cGUudW5tYXJzaGFsbCA9IGZ1bmN0aW9uIChqc29uKSB7XG4gICAgdGhpcy5wbGF5ZXJJZCA9IGpzb25bXCJwbGF5ZXJJZFwiXTtcbiAgICB0aGlzLmJlc3RTY29yZSA9IGpzb25bXCJiZXN0U2NvcmVcIl0gfHwgMDtcbiAgICB0aGlzLnJlbW92ZWRBZHMgPSBqc29uW1wicmVtb3ZlZEFkc1wiXSB8fCBmYWxzZTtcbiAgICB0aGlzLmxldmVsID0ganNvbltcImxldmVsXCJdIHx8IDE7XG4gICAgdGhpcy5wcm9ncmVzcyA9IGpzb25bXCJwcm9ncmVzc1wiXSB8fCAwO1xuICAgIHRoaXMubGV2ZWxNYXAgPSBqc29uW1wibGV2ZWxNYXBcIl0gfHwge307XG4gICAgdGhpcy5yYXRlZCA9IGpzb25bXCJyYXRlZFwiXSB8fCBmYWxzZTtcbn07XG5cblBsYXllckluZm8uY3JlYXRlRGVmYXVsdCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGxheWVySW5mbyA9IG5ldyBQbGF5ZXJJbmZvKCk7XG4gICAgcGxheWVySW5mby5oaW50c0NvdW50ID0gNTtcbiAgICBwbGF5ZXJJbmZvLmJlc3RTY29yZSA9IDA7XG4gICAgcGxheWVySW5mby5yZW1vdmVkQWRzID0gZmFsc2U7XG4gICAgcGxheWVySW5mby5sZXZlbCA9IDE7XG4gICAgcGxheWVySW5mby5wcm9ncmVzcyA9IDA7XG4gICAgcGxheWVySW5mby5sZXZlbE1hcCA9IHt9O1xuICAgIHBsYXllckluZm8ucmF0ZWQgPSBmYWxzZTtcbiAgICByZXR1cm4gcGxheWVySW5mbztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUGxheWVySW5mbztcbiIsIi8qKlxuICogQ3JlYXRlZCBieSBxaW5uaW5nIG9uIDIwMTcvMS8yMy5cbiAqL1xuXG52YXIgUHJvZHVjdEluZm8gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5wcm9kdWN0SWQgPSAwO1xuICAgIHRoaXMucHJpY2UgPSAwO1xuICAgIHRoaXMuZGVzY3JpcHRpb24gPSBudWxsO1xuICAgIHRoaXMudGl0bGUgPSBudWxsO1xufTtcblxuUHJvZHVjdEluZm8ucHJvdG90eXBlLnVubWFyc2hhbCA9IGZ1bmN0aW9uIChqc29uT2JqKSB7XG4gICAgdGhpcy5wcm9kdWN0SWQgPSBqc29uT2JqW1wicHJvZHVjdElkXCJdO1xuICAgIHRoaXMucHJpY2UgPSBqc29uT2JqW1wicHJpY2VcIl07XG4gICAgdGhpcy5kZXNjcmlwdGlvbiA9IGpzb25PYmpbXCJkZXNjcmlwdGlvblwiXTtcbiAgICB0aGlzLnRpdGxlID0ganNvbk9ialtcInRpdGxlXCJdO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBQcm9kdWN0SW5mbzsiLCJ2YXIgQWRzUGxhY2UgPSB7XG4gICAgUGFzczogMSxcbiAgICBIb21lOiAyLFxuICAgIEJhY2tHcm91bmQ6IDMsXG4gICAgUmVmcmVzaDogNCxcbiAgICBGaXJzdEVudGVyOiA1LFxuICAgIE51bTogNVxufTtcblxuQWRzUGxhY2UuZ2V0TmFtZSA9IGZ1bmN0aW9uIChwbGFjZSkge1xuICAgIHN3aXRjaCAocGxhY2UpIHtcbiAgICAgICAgY2FzZSBBZHNQbGFjZS5QYXNzOlxuICAgICAgICAgICAgcmV0dXJuIFwicGFzc1wiO1xuICAgICAgICBjYXNlIEFkc1BsYWNlLkhvbWU6XG4gICAgICAgICAgICByZXR1cm4gXCJob21lXCI7XG4gICAgICAgIGNhc2UgQWRzUGxhY2UuQmFja0dyb3VuZDpcbiAgICAgICAgICAgIHJldHVybiBcImJhY2tncm91bmRcIjtcbiAgICAgICAgY2FzZSBBZHNQbGFjZS5SZWZyZXNoOlxuICAgICAgICAgICAgcmV0dXJuIFwicmVmcmVzaFwiO1xuICAgICAgICBjYXNlIEFkc1BsYWNlLkZpcnN0RW50ZXI6XG4gICAgICAgICAgICByZXR1cm4gXCJmaXJzdF9lbnRlclwiO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIFwidW5rbm93blwiO1xuICAgIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQWRzUGxhY2U7IiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHFpbm5pbmcgb24gMjAxNy8xLzIzLlxuICovXG5cbnZhciBQYXltZW50Q29kZSA9IHtcbiAgICBQQVlNRU5UX0NPREVfU1VDQ0VTUzogMCxcbiAgICBQQVlNRU5UX0NPREVfRkFJTDogMVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBQYXltZW50Q29kZTsiLCIvKipcbiAqIENyZWF0ZWQgYnkgYWxhbm1hcnMgb24gMTUvNC8xNy5cbiAqL1xudmFyIEV2ZW50UGFja2FnZSA9IGNjLkNsYXNzLmV4dGVuZCh7XG4gICAgY2FsbGJhY2s6IG51bGwsXG4gICAgdGFyZ2V0OiBudWxsLFxuICAgIGxpc3RlbmVyOiBudWxsLFxuXG4gICAgY3RvcjogZnVuY3Rpb24gKGNhbGxiYWNrLCB0YXJnZXQsIGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuY2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICAgICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gICAgICAgIHRoaXMubGlzdGVuZXIgPSBsaXN0ZW5lcjtcbiAgICB9XG59KTtcblxudmFyIEV2ZW50VXNlckRhdGEgPSBjYy5DbGFzcy5leHRlbmQoe1xuICAgIHVzZXJEYXRhOiBudWxsLFxuXG4gICAgY3RvcjogZnVuY3Rpb24gKHVzZXJEYXRhLCB0YXJnZXQsIGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMudXNlckRhdGEgPSB1c2VyRGF0YTtcbiAgICB9LFxuXG4gICAgZ2V0VXNlckRhdGE6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51c2VyRGF0YTtcbiAgICB9XG59KTtcbnZhciBFdmVudERpc3BhdGNoZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBpbnN0YW5jZTtcblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlKCkge1xuICAgICAgICB2YXIgbGlzdGVuZXJzTWFwID0ge307XG4gICAgICAgIHZhciBsaXN0ZW5lcnNDdXN0b21NYXAgPSB7fTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZVxuICAgICAgICAgICAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAgICAgICAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSB0YXJnZXRcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gKGV2ZW50TmFtZSwgY2FsbGJhY2ssIHRhcmdldCkge1xuXG4gICAgICAgICAgICAgICAgdmFyIHNob3VsZEFkZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdmFyIGV2ZW50UGFja2FnZXMgPSBsaXN0ZW5lcnNNYXBbZXZlbnROYW1lXTtcbiAgICAgICAgICAgICAgICBpZiAoY2MuaXNVbmRlZmluZWQoZXZlbnRQYWNrYWdlcykpIHtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRQYWNrYWdlcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lcnNNYXBbZXZlbnROYW1lXSA9IGV2ZW50UGFja2FnZXM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV2ZW50UGFja2FnZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBldmVudFBhY2thZ2UgPSBldmVudFBhY2thZ2VzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50UGFja2FnZS5jYWxsYmFjayA9PT0gY2FsbGJhY2sgJiYgZXZlbnRQYWNrYWdlLnRhcmdldCA9PT0gdGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvdWxkQWRkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoc2hvdWxkQWRkKSB7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50UGFja2FnZXMucHVzaChuZXcgRXZlbnRQYWNrYWdlKGNhbGxiYWNrLCB0YXJnZXQsIG51bGwpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWVcbiAgICAgICAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gICAgICAgICAgICAgKiBAcGFyYW0ge29iamVjdH0gdGFyZ2V0XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uIChldmVudE5hbWUsIGNhbGxiYWNrLCB0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICBpZiAobGlzdGVuZXJzTWFwW2V2ZW50TmFtZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIEB0eXBlIHtBcnJheS48RXZlbnRQYWNrYWdlPn1cbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIHZhciBldmVudFBhY2thZ2VzID0gbGlzdGVuZXJzTWFwW2V2ZW50TmFtZV07XG4gICAgICAgICAgICAgICAgICAgIGlmICghY2MuaXNVbmRlZmluZWQoZXZlbnRQYWNrYWdlcykgJiYgZXZlbnRQYWNrYWdlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV3UGFja2FnZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXZlbnRQYWNrYWdlcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIEB0eXBlIHtFdmVudFBhY2thZ2V9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50UGFja2FnZSA9IGV2ZW50UGFja2FnZXNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50UGFja2FnZS5jYWxsYmFjayA9PT0gY2FsbGJhY2sgJiYgZXZlbnRQYWNrYWdlLnRhcmdldCA9PT0gdGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY2MuZXZlbnRNYW5hZ2VyLnJlbW92ZUxpc3RlbmVyKGV2ZW50UGFja2FnZS5saXN0ZW5lcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdQYWNrYWdlcy5wdXNoKGV2ZW50UGFja2FnZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXJzTWFwW2V2ZW50TmFtZV0gPSBuZXdQYWNrYWdlcztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZVxuICAgICAgICAgICAgICogQHBhcmFtIHtvYmplY3R9IHVzZXJEYXRhXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGRpc3BhdGNoRXZlbnQ6IGZ1bmN0aW9uIChldmVudE5hbWUsIHVzZXJEYXRhKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxpc3RlbmVyc01hcFtldmVudE5hbWVdKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBldmVudFBhY2thZ2VzID0gbGlzdGVuZXJzTWFwW2V2ZW50TmFtZV07XG4gICAgICAgICAgICAgICAgICAgIGlmICghY2MuaXNVbmRlZmluZWQoZXZlbnRQYWNrYWdlcykgJiYgZXZlbnRQYWNrYWdlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXZlbnREYXRhID0gbmV3IEV2ZW50VXNlckRhdGEodXNlckRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBldmVudFBhY2thZ2VzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50UGFja2FnZSA9IGV2ZW50UGFja2FnZXNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50UGFja2FnZS5jYWxsYmFjayAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50UGFja2FnZS5jYWxsYmFjay5jYWxsKGV2ZW50UGFja2FnZS50YXJnZXQsIGV2ZW50RGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lXG4gICAgICAgICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICAgICAgICAgICAgICogQHBhcmFtIHtvYmplY3R9IHRhcmdldFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBhZGRDdXN0b21FdmVudExpc3RlbmVyOiBmdW5jdGlvbiAoZXZlbnROYW1lLCBjYWxsYmFjaywgdGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGV2ZW50TGlzdGVuZXIgPSBjYy5ldmVudE1hbmFnZXIuYWRkQ3VzdG9tTGlzdGVuZXIoZXZlbnROYW1lLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbCh0YXJnZXQsIGV2ZW50KTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHZhciBzaG91bGRBZGQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHZhciBldmVudFBhY2thZ2VzID0gbGlzdGVuZXJzQ3VzdG9tTWFwW2V2ZW50TmFtZV07XG4gICAgICAgICAgICAgICAgaWYgKGNjLmlzVW5kZWZpbmVkKGV2ZW50UGFja2FnZXMpKSB7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50UGFja2FnZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXJzQ3VzdG9tTWFwW2V2ZW50TmFtZV0gPSBldmVudFBhY2thZ2VzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBldmVudFBhY2thZ2VzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXZlbnRQYWNrYWdlID0gZXZlbnRQYWNrYWdlc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudFBhY2thZ2UuY2FsbGJhY2sgPT09IGNhbGxiYWNrICYmIGV2ZW50UGFja2FnZS50YXJnZXQgPT09IHRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3VsZEFkZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHNob3VsZEFkZCkge1xuICAgICAgICAgICAgICAgICAgICBldmVudFBhY2thZ2VzLnB1c2gobmV3IEV2ZW50UGFja2FnZShjYWxsYmFjaywgdGFyZ2V0LCBldmVudExpc3RlbmVyKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lXG4gICAgICAgICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICAgICAgICAgICAgICogQHBhcmFtIHtvYmplY3R9IHRhcmdldFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICByZW1vdmVDdXN0b21FdmVudExpc3RlbmVyOiBmdW5jdGlvbiAoZXZlbnROYW1lLCBjYWxsYmFjaywgdGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgaWYgKGxpc3RlbmVyc0N1c3RvbU1hcFtldmVudE5hbWVdKSB7XG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBAdHlwZSB7QXJyYXkuPEV2ZW50UGFja2FnZT59XG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICB2YXIgZXZlbnRQYWNrYWdlcyA9IGxpc3RlbmVyc0N1c3RvbU1hcFtldmVudE5hbWVdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWNjLmlzVW5kZWZpbmVkKGV2ZW50UGFja2FnZXMpICYmIGV2ZW50UGFja2FnZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5ld1BhY2thZ2VzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV2ZW50UGFja2FnZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBAdHlwZSB7RXZlbnRQYWNrYWdlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBldmVudFBhY2thZ2UgPSBldmVudFBhY2thZ2VzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudFBhY2thZ2UuY2FsbGJhY2sgPT09IGNhbGxiYWNrICYmIGV2ZW50UGFja2FnZS50YXJnZXQgPT09IHRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYy5ldmVudE1hbmFnZXIucmVtb3ZlTGlzdGVuZXIoZXZlbnRQYWNrYWdlLmxpc3RlbmVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1BhY2thZ2VzLnB1c2goZXZlbnRQYWNrYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lcnNDdXN0b21NYXBbZXZlbnROYW1lXSA9IG5ld1BhY2thZ2VzO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lXG4gICAgICAgICAgICAgKiBAcGFyYW0ge29iamVjdH0gdXNlckRhdGFcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZGlzcGF0Y2hDdXN0b21FdmVudDogZnVuY3Rpb24gKGV2ZW50TmFtZSwgdXNlckRhdGEpIHtcbiAgICAgICAgICAgICAgICBjYy5ldmVudE1hbmFnZXIuZGlzcGF0Y2hDdXN0b21FdmVudChldmVudE5hbWUsIHVzZXJEYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBnZXRJbnN0YW5jZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCFpbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgIGluc3RhbmNlID0gY3JlYXRlSW5zdGFuY2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICAgICAgfVxuICAgIH07XG59KSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50RGlzcGF0Y2hlcjsiLCIvKipcbiAqIENyZWF0ZWQgYnkgcWlubmluZyBvbiAxNS83LzIuXG4gKi9cbmNjLlRBQkxFVklFV19GSUxMX0xFRlRfUklHSFQgPSAwO1xuY2MuVEFCTEVWSUVXX0ZJTExfUklHSFRfTEVGVCA9IDA7XG5cbi8qKlxuICogU29sZSBwdXJwb3NlIG9mIHRoaXMgZGVsZWdhdGUgaXMgdG8gc2luZ2xlIHRvdWNoIGV2ZW50IGluIHRoaXMgdmVyc2lvbi5cbiAqL1xuY2MuTXVsdGlDb2xUYWJsZVZpZXdEZWxlZ2F0ZSA9IGNjLkNsYXNzLmV4dGVuZCgvKiogQGxlbmRzIGNjLk11bHRpQ29sVGFibGVWaWV3RGVsZWdhdGUjICove1xuICAgIGdyaWRUb3VjaGVkOmZ1bmN0aW9uKHRhYmxlLGdyaWQpe1xuICAgIH1cbn0pO1xuXG4vKipcbiAqIERhdGEgc291cmNlIHRoYXQgZ292ZXJucyB0YWJsZSBiYWNrZW5kIGRhdGEuXG4gKi9cbmNjLk11bHRpQ29sVGFibGVWaWV3RGF0YVNvdXJjZSA9IGNjLkNsYXNzLmV4dGVuZCgvKiogQGxlbmRzIGNjLlRhYmxlVmlld0RhdGFTb3VyY2UjICove1xuICAgIGdyaWRBdEluZGV4OmZ1bmN0aW9uKHRhYmxlLGlkeCl7XG4gICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcbiAgICBudW1iZXJPZkNlbGxzSW5UYWJsZVZpZXc6ZnVuY3Rpb24odGFibGUpe1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9LFxuICAgIG51bWJlck9mR3JpZHNJbkNlbGw6ZnVuY3Rpb24odGFibGUsIGlkeCl7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH0sXG4gICAgZ3JpZFNpemVGb3JUYWJsZTpmdW5jdGlvbih0YWJsZSwgaWR4KXtcbiAgICAgICAgcmV0dXJuIGNjLnNpemUoMCwwKTtcbiAgICB9XG59KTtcblxuY2MuTXVsdGlDb2xUYWJsZVZpZXcgPSBjYy5MYXllckNvbG9yLmV4dGVuZCh7XG4gICAgX211bHRpVGFibGVWaWV3RGF0YVNvdXJjZTogbnVsbCxcbiAgICBfbXVsdGlUYWJsZVZpZXdEZWxlZ2F0ZTogbnVsbCxcbiAgICBfaG9yaXpvbnRhbE9yZGVyOiBjYy5UQUJMRVZJRVdfRklMTF9MRUZUX1JJR0hULFxuICAgIF9ncmlkc0ZyZWVkOiBudWxsLFxuICAgIF9jdXJUb3VjaExvY2F0aW9uOiBudWxsLFxuXG4gICAgX3RhYmxlVmlldzogbnVsbCxcbiAgICBfdG91Y2hOb2RlOiBudWxsLFxuICAgIF9ncmlkQ2VsbHM6IG51bGwsXG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gZGF0YVNvdXJjZVxuICAgICAqIEBwYXJhbSB7Y2MuU2l6ZX0gc2l6ZVxuICAgICAqIEBwYXJhbSBjb250YWluZXJcbiAgICAgKi9cbiAgICBjdG9yOiBmdW5jdGlvbiAoZGF0YVNvdXJjZSwgc2l6ZSwgY29udGFpbmVyKSB7XG4gICAgICAgIHRoaXMuX3N1cGVyKGNjLmNvbG9yKDAsIDAsIDI1NSwgMCksIHNpemUud2lkdGgsIHNpemUuaGVpZ2h0KTtcbiAgICAgICAgdGhpcy5fZ3JpZHNGcmVlZCA9IFtdO1xuICAgICAgICB0aGlzLl9ncmlkQ2VsbHMgPSB7fTtcbiAgICAgICAgdGhpcy5zZXRNdWx0aVRhYmxlVmlld0RhdGFTb3VyY2UoZGF0YVNvdXJjZSk7XG4gICAgICAgIHRoaXMuX3RhYmxlVmlldyA9IG5ldyBjYy5UYWJsZVZpZXcodGhpcywgc2l6ZSwgY29udGFpbmVyKTtcbiAgICAgICAgdGhpcy5fdGFibGVWaWV3LnNldERlbGVnYXRlKHRoaXMpO1xuICAgICAgICB0aGlzLmFkZENoaWxkKHRoaXMuX3RhYmxlVmlldyk7XG4gICAgICAgIHRoaXMuX3RvdWNoTm9kZSA9IG5ldyBjYy5Ob2RlKCk7XG4gICAgICAgIHRoaXMuX3RhYmxlVmlldy5hZGRDaGlsZCh0aGlzLl90b3VjaE5vZGUsMSk7XG4gICAgfSxcblxuICAgIG9uRW50ZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fc3VwZXIoKTtcbiAgICAgICAgY2MuZXZlbnRNYW5hZ2VyLmFkZExpc3RlbmVyKHtcbiAgICAgICAgICAgIGV2ZW50OiBjYy5FdmVudExpc3RlbmVyLlRPVUNIX09ORV9CWV9PTkUsXG4gICAgICAgICAgICBzd2FsbG93VG91Y2hlczogZmFsc2UsXG4gICAgICAgICAgICBvblRvdWNoQmVnYW46IHRoaXMub25Ub3VjaEJlZ2FuLmJpbmQodGhpcylcbiAgICAgICAgfSwgdGhpcy5fdG91Y2hOb2RlKTtcbiAgICB9LFxuXG4gICAgZGVxdWV1ZUdyaWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2dyaWRzRnJlZWQubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGdyaWQgPSB0aGlzLl9ncmlkc0ZyZWVkLnNoaWZ0KCk7XG4gICAgICAgICAgICB0aGlzLl9hdXRvUmVsZWFzZShncmlkKTtcbiAgICAgICAgICAgIHJldHVybiBncmlkO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIF9yZWxlYXNlQ0I6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5yZWxlYXNlKCk7XG4gICAgfSxcblxuICAgIF9hdXRvUmVsZWFzZTogZnVuY3Rpb24gKG9iaikge1xuICAgICAgICB2YXIgcnVubmluZyA9IG9iai5fcnVubmluZyA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiAhb2JqLl9ydW5uaW5nO1xuICAgICAgICBjYy5kaXJlY3Rvci5nZXRTY2hlZHVsZXIoKS5zY2hlZHVsZSh0aGlzLl9yZWxlYXNlQ0IsIG9iaiwgMCwgMCwgMCwgcnVubmluZywgb2JqLl9faW5zdGFuY2VJZCk7XG4gICAgfSxcblxuICAgIHRhYmxlQ2VsbFNpemVGb3JJbmRleDogZnVuY3Rpb24gKHRhYmxlLCBpZHgpIHtcbiAgICAgICAgdmFyIHNpemUgPSB0aGlzLmdldE11bHRpVGFibGVWaWV3RGF0YVNvdXJjZSgpLmdyaWRTaXplRm9yVGFibGUodGhpcywgaWR4KTtcbiAgICAgICAgaWYgKHRhYmxlLmdldERpcmVjdGlvbigpID09PSBjYy5TQ1JPTExWSUVXX0RJUkVDVElPTl9IT1JJWk9OVEFMKSB7XG4gICAgICAgICAgICBzaXplLmhlaWdodCAqPSB0aGlzLmdldE11bHRpVGFibGVWaWV3RGF0YVNvdXJjZSgpLm51bWJlck9mR3JpZHNJbkNlbGwodGhpcywgaWR4KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNpemUud2lkdGggKj0gdGhpcy5nZXRNdWx0aVRhYmxlVmlld0RhdGFTb3VyY2UoKS5udW1iZXJPZkdyaWRzSW5DZWxsKHRoaXMsIGlkeCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNpemU7XG4gICAgfSxcblxuICAgIHRhYmxlQ2VsbEF0SW5kZXg6IGZ1bmN0aW9uICh0YWJsZSwgaWR4KSB7XG4gICAgICAgIHZhciBncmlkO1xuICAgICAgICB2YXIgbnVtYmVyT2ZHcmlkc0luQ2VsbCA9IHRoaXMuZ2V0TXVsdGlUYWJsZVZpZXdEYXRhU291cmNlKCkubnVtYmVyT2ZHcmlkc0luQ2VsbCh0aGlzLCBpZHgpO1xuICAgICAgICB2YXIgY2VsbCA9IHRhYmxlLmRlcXVldWVDZWxsKCk7XG4gICAgICAgIGlmICghY2VsbCkge1xuICAgICAgICAgICAgY2VsbCA9IG5ldyBjYy5UYWJsZVZpZXdDZWxsKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgY2hpbGRyZW4gPSBjZWxsLmdldENoaWxkcmVuKCk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gY2hpbGRyZW4ubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgICAgICAgICBncmlkID0gY2hpbGRyZW5baV07XG4gICAgICAgICAgICAgICAgdGhpcy5fZ3JpZHNGcmVlZC5wdXNoKGdyaWQpO1xuICAgICAgICAgICAgICAgIGdyaWQuc2V0SWR4KGNjLklOVkFMSURfSU5ERVgpO1xuICAgICAgICAgICAgICAgIGdyaWQucmV0YWluKCk7XG4gICAgICAgICAgICAgICAgZ3JpZC5yZW1vdmVGcm9tUGFyZW50KGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgc3RhcnRJbmRleCA9IDA7XG4gICAgICAgIGZvciAodmFyIGxvY2FsSWR4ID0gMDsgbG9jYWxJZHggPCBpZHg7ICsrbG9jYWxJZHgpIHtcbiAgICAgICAgICAgIHN0YXJ0SW5kZXggKz0gdGhpcy5nZXRNdWx0aVRhYmxlVmlld0RhdGFTb3VyY2UoKS5udW1iZXJPZkdyaWRzSW5DZWxsKHRoaXMsIGxvY2FsSWR4KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZ3JpZFNpemUgPSB0aGlzLmdldE11bHRpVGFibGVWaWV3RGF0YVNvdXJjZSgpLmdyaWRTaXplRm9yVGFibGUodGhpcywgaWR4KTtcbiAgICAgICAgZm9yICh2YXIgZ3JpZElkeCA9IHN0YXJ0SW5kZXgsIGNvbElkeCA9IDA7IGdyaWRJZHggPCAobnVtYmVyT2ZHcmlkc0luQ2VsbCArIHN0YXJ0SW5kZXgpOyBncmlkSWR4KyssIGNvbElkeCsrKSB7XG4gICAgICAgICAgICBncmlkID0gdGhpcy5nZXRNdWx0aVRhYmxlVmlld0RhdGFTb3VyY2UoKS5ncmlkQXRJbmRleCh0aGlzLCBncmlkSWR4KTtcbiAgICAgICAgICAgIGlmIChncmlkKSB7XG4gICAgICAgICAgICAgICAgZ3JpZC5zZXRJZHgoZ3JpZElkeCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fZ3JpZENlbGxzW2dyaWRJZHhdID0gZ3JpZDtcbiAgICAgICAgICAgICAgICBncmlkLnNldEFuY2hvclBvaW50KGNjLnAoMCwgMCkpO1xuICAgICAgICAgICAgICAgIGlmICh0YWJsZS5nZXREaXJlY3Rpb24oKSA9PT0gY2MuU0NST0xMVklFV19ESVJFQ1RJT05fSE9SSVpPTlRBTCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGFibGUuZ2V0VmVydGljYWxGaWxsT3JkZXIoKSA9PT0gY2MuVEFCTEVWSUVXX0ZJTExfVE9QRE9XTikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ3JpZC5zZXRQb3NpdGlvbihjYy5wKDAsIGdyaWRTaXplLmhlaWdodCAqIChudW1iZXJPZkdyaWRzSW5DZWxsIC0gY29sSWR4IC0gMSkpKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyaWQuc2V0UG9zaXRpb24oY2MucCgwLCBncmlkU2l6ZS5oZWlnaHQgKiBjb2xJZHgpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGdyaWQuc2V0UG9zaXRpb24oY2MucChncmlkU2l6ZS53aWR0aCAqIGNvbElkeCwgMCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjZWxsLmFkZENoaWxkKGdyaWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjZWxsO1xuICAgIH0sXG5cbiAgICBudW1iZXJPZkNlbGxzSW5UYWJsZVZpZXc6IGZ1bmN0aW9uICh0YWJsZSkge1xuICAgICAgICB2YXIgbnVtYmVyT2ZDZWxscyA9IHRoaXMuZ2V0TXVsdGlUYWJsZVZpZXdEYXRhU291cmNlKCkubnVtYmVyT2ZDZWxsc0luVGFibGVWaWV3KHRoaXMpO1xuICAgICAgICByZXR1cm4gbnVtYmVyT2ZDZWxscztcbiAgICB9LFxuXG4gICAgdGFibGVDZWxsVG91Y2hlZDogZnVuY3Rpb24gKHRhYmxlLCBjZWxsKSB7XG4gICAgICAgIGlmICghdGhpcy5nZXRNdWx0aVRhYmxlVmlld0RlbGVnYXRlKCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNlbGwuZ2V0Q2hpbGRyZW4oKS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGdyaWQgPSBjZWxsLmdldENoaWxkcmVuKClbaV07XG4gICAgICAgICAgICBncmlkLnNldENvbnRlbnRTaXplKHRoaXMuZ2V0TXVsdGlUYWJsZVZpZXdEYXRhU291cmNlKCkuZ3JpZFNpemVGb3JUYWJsZSh0aGlzLCBjZWxsLmdldElkeCgpKSk7XG4gICAgICAgICAgICBpZiAoZ3JpZCAhPSBudWxsICYmIHRoaXMuaXNUb3VjaEluc2lkZShncmlkLCB0aGlzLl9jdXJUb3VjaExvY2F0aW9uKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2V0TXVsdGlUYWJsZVZpZXdEZWxlZ2F0ZSgpLmdyaWRUb3VjaGVkKHRoaXMsIGdyaWQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIHNjcm9sbFZpZXdEaWRTY3JvbGw6IGZ1bmN0aW9uICh2aWV3KSB7XG4gICAgICAgIGlmICh0aGlzLl9tdWx0aVRhYmxlVmlld0RlbGVnYXRlICYmIHRoaXMuX211bHRpVGFibGVWaWV3RGVsZWdhdGUuc2Nyb2xsVmlld0RpZFNjcm9sbCkge1xuICAgICAgICAgICAgdGhpcy5fbXVsdGlUYWJsZVZpZXdEZWxlZ2F0ZS5zY3JvbGxWaWV3RGlkU2Nyb2xsKHRoaXMpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHRhYmxlQ2VsbFdpbGxSZWN5Y2xlOiBmdW5jdGlvbiAodGFibGUsIGNlbGwpIHtcbiAgICB9LFxuXG4gICAgdGFibGVDZWxsSGlnaGxpZ2h0OmZ1bmN0aW9uKHRhYmxlLCBjZWxsKXtcbiAgICB9LFxuXG4gICAgdGFibGVDZWxsVW5oaWdobGlnaHQ6ZnVuY3Rpb24odGFibGUsIGNlbGwpe1xuICAgIH0sXG5cbiAgICBvblRvdWNoQmVnYW46IGZ1bmN0aW9uICh0b3VjaCwgZXZlbnQpIHtcbiAgICAgICAgdGhpcy5fY3VyVG91Y2hMb2NhdGlvbiA9IHRvdWNoLmdldExvY2F0aW9uKCk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgZ2V0TXVsdGlUYWJsZVZpZXdEYXRhU291cmNlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tdWx0aVRhYmxlVmlld0RhdGFTb3VyY2U7XG4gICAgfSxcbiAgICBzZXRNdWx0aVRhYmxlVmlld0RhdGFTb3VyY2U6IGZ1bmN0aW9uIChkYXRhU291cmNlKSB7XG4gICAgICAgIHRoaXMuX211bHRpVGFibGVWaWV3RGF0YVNvdXJjZSA9IGRhdGFTb3VyY2U7XG4gICAgfSxcblxuICAgIGdldE11bHRpVGFibGVWaWV3RGVsZWdhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX211bHRpVGFibGVWaWV3RGVsZWdhdGU7XG4gICAgfSxcblxuICAgIHNldE11bHRpVGFibGVWaWV3RGVsZWdhdGU6IGZ1bmN0aW9uIChkZWxlZ2F0ZSkge1xuICAgICAgICB0aGlzLl9tdWx0aVRhYmxlVmlld0RlbGVnYXRlID0gZGVsZWdhdGU7XG4gICAgfSxcblxuICAgIHNldEhvcml6b250YWxPcmRlcjogZnVuY3Rpb24gKG9yZGVyKSB7XG4gICAgICAgIHRoaXMuX2hvcml6b250YWxPcmRlciA9IG9yZGVyO1xuICAgIH0sXG4gICAgZ2V0SG9yaXpvbnRhbE9yZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9ob3Jpem9udGFsT3JkZXI7XG4gICAgfSxcblxuICAgIGlzVG91Y2hJbnNpZGU6IGZ1bmN0aW9uIChvd25lciwgdG91Y2hMb2NhdGlvbikge1xuICAgICAgICBpZiAoIW93bmVyIHx8ICFvd25lci5nZXRQYXJlbnQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHRvdWNoTG9jYXRpb24gPSBvd25lci5nZXRQYXJlbnQoKS5jb252ZXJ0VG9Ob2RlU3BhY2UodG91Y2hMb2NhdGlvbik7XG4gICAgICAgIHJldHVybiBjYy5yZWN0Q29udGFpbnNQb2ludChvd25lci5nZXRCb3VuZGluZ0JveCgpLCB0b3VjaExvY2F0aW9uKTtcbiAgICB9LFxuXG4gICAgcmVsb2FkRGF0YTogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl90YWJsZVZpZXcucmVsb2FkRGF0YSgpO1xuICAgIH0sXG5cbiAgICBzZXRDb250ZW50T2Zmc2V0OiBmdW5jdGlvbiAob2Zmc2V0LCBhbmltYXRlZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdGFibGVWaWV3LnNldENvbnRlbnRPZmZzZXQob2Zmc2V0LCBhbmltYXRlZCk7XG4gICAgfSxcblxuICAgIGdldENvbnRlbnRPZmZzZXQ6ZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdGFibGVWaWV3LmdldENvbnRlbnRPZmZzZXQoKTtcbiAgICB9LFxuXG4gICAgbWluQ29udGFpbmVyT2Zmc2V0OmZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RhYmxlVmlldy5taW5Db250YWluZXJPZmZzZXQoKTtcbiAgICB9LFxuXG4gICAgbWF4Q29udGFpbmVyT2Zmc2V0OmZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RhYmxlVmlldy5tYXhDb250YWluZXJPZmZzZXQoKTtcbiAgICB9LFxuXG4gICAgc2V0RGlyZWN0aW9uOmZ1bmN0aW9uIChkaXJlY3Rpb24pIHtcbiAgICAgICAgdGhpcy5fdGFibGVWaWV3LnNldERpcmVjdGlvbihkaXJlY3Rpb24pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBkZXRlcm1pbmVzIGhvdyBjZWxsIGlzIG9yZGVyZWQgYW5kIGZpbGxlZCBpbiB0aGUgdmlldy5cbiAgICAgKi9cbiAgICBzZXRWZXJ0aWNhbEZpbGxPcmRlcjogZnVuY3Rpb24gKGZpbGxPcmRlcikge1xuICAgICAgICB0aGlzLl90YWJsZVZpZXcuc2V0VmVydGljYWxGaWxsT3JkZXIoZmlsbE9yZGVyKTtcbiAgICB9LFxuXG4gICAgc2V0Q29udGVudE9mZnNldEluRHVyYXRpb246IGZ1bmN0aW9uIChvZmZzZXQsIGR0KSB7XG4gICAgICAgIHRoaXMuX3RhYmxlVmlldy5zZXRDb250ZW50T2Zmc2V0SW5EdXJhdGlvbihvZmZzZXQsIGR0KTtcbiAgICB9LFxuXG4gICAgZ2V0Vmlld1NpemU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RhYmxlVmlldy5nZXRWaWV3U2l6ZSgpO1xuICAgIH0sXG5cbiAgICBnZXRDb250ZW50U2l6ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdGFibGVWaWV3LmdldENvbnRlbnRTaXplKCk7XG4gICAgfSxcblxuICAgIGdldEdyaWRBdEluZGV4OmZ1bmN0aW9uIChpZHgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dyaWRDZWxsc1tpZHhdO1xuICAgIH0sXG5cbiAgICBzZXRWaWV3U2l6ZTogZnVuY3Rpb24gKHZpZXdTaXplKSB7XG4gICAgICAgIHRoaXMuc2V0Q29udGVudFNpemUodmlld1NpemUpO1xuICAgICAgICB0aGlzLl90YWJsZVZpZXcuc2V0Vmlld1NpemUodmlld1NpemUpO1xuICAgIH0sXG5cbiAgICBzZXRCb3VuY2VhYmxlOiBmdW5jdGlvbiAoYm91bmNlYWJsZSkge1xuICAgICAgICB0aGlzLl90YWJsZVZpZXcuc2V0Qm91bmNlYWJsZShib3VuY2VhYmxlKTtcbiAgICB9LFxuXG4gICAgc2V0VG91Y2hFbmFibGVkOiBmdW5jdGlvbiAodG91Y2hhYmxlKSB7XG4gICAgICAgIHRoaXMuX3RhYmxlVmlldy5zZXRUb3VjaEVuYWJsZWQodG91Y2hhYmxlKTtcbiAgICB9LFxuXG4gICAgaXNEcmFnZ2luZzogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdGFibGVWaWV3LmlzRHJhZ2dpbmcoKTtcbiAgICB9LFxuXG4gICAgZ2V0Q29udGFpbmVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl90YWJsZVZpZXcuZ2V0Q29udGFpbmVyKCk7XG4gICAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gY2MuTXVsdGlDb2xUYWJsZVZpZXc7IiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHpoYW5nbWluZ3h1IG9uIDI5LzExLzIwMTYuXG4gKi9cblxudmFyIFRvdWNoZWROb2RlID0gY2MuTm9kZS5leHRlbmQoe1xuICAgIG9mZnNldFg6IDEwLFxuICAgIG9mZnNldFk6IDUsXG5cbiAgICBjdG9yOiBmdW5jdGlvbiAoaXNNZW51SXRlbSkge1xuICAgICAgICB0aGlzLl9pc01lbnVJdGVtID0gaXNNZW51SXRlbTtcbiAgICAgICAgdGhpcy5faXNUb3VjaGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2lzSG92ZXIgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5faXNIb3ZlclBsYXlpbmcgPSBmYWxzZTtcblxuICAgICAgICB0aGlzLl9idXR0b25Ub3VjaGVyID0gbnVsbDtcbiAgICAgICAgdGhpcy5fYnV0dG9uTW91c2VyID0gbnVsbDtcbiAgICAgICAgdGhpcy5fc3VwZXIoKTtcbiAgICAgICAgdGhpcy5fbmFtZSA9IFwiVG91Y2hlZE5vZGVcIjtcbiAgICB9LFxuXG4gICAgb25FbnRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9zdXBlcigpO1xuXG4gICAgICAgIC8vL1RvdWNoIEV2ZW50c1xuICAgICAgICB0aGlzLl9idXR0b25Ub3VjaGVyID0gY2MuRXZlbnRMaXN0ZW5lci5jcmVhdGUoe1xuICAgICAgICAgICAgZXZlbnQ6IGNjLkV2ZW50TGlzdGVuZXIuVE9VQ0hfT05FX0JZX09ORSxcbiAgICAgICAgICAgIHN3YWxsb3dUb3VjaGVzOiBmYWxzZSxcbiAgICAgICAgICAgIG9uVG91Y2hCZWdhbjogdGhpcy5vblRvdWNoQmVnYW4uYmluZCh0aGlzKSxcbiAgICAgICAgICAgIG9uVG91Y2hNb3ZlZDogdGhpcy5vblRvdWNoTW92ZWQuYmluZCh0aGlzKSxcbiAgICAgICAgICAgIG9uVG91Y2hFbmRlZDogdGhpcy5vblRvdWNoRW5kZWQuYmluZCh0aGlzKVxuICAgICAgICB9LCB0aGlzKTtcbiAgICAgICAgY2MuZXZlbnRNYW5hZ2VyLmFkZExpc3RlbmVyKHRoaXMuX2J1dHRvblRvdWNoZXIsIHRoaXMpO1xuXG4gICAgICAgIC8vL01vdXNlIEV2ZW50c1xuICAgICAgICBpZighIGNjLnN5cy5pc05hdGl2ZSkge1xuICAgICAgICAgICAgdGhpcy5fYnV0dG9uTW91c2VyID0gY2MuRXZlbnRMaXN0ZW5lci5jcmVhdGUoe1xuICAgICAgICAgICAgICAgIGV2ZW50OiBjYy5FdmVudExpc3RlbmVyLk1PVVNFLFxuICAgICAgICAgICAgICAgIHN3YWxsb3dUb3VjaGVzOiB0cnVlLFxuICAgICAgICAgICAgICAgIG9uTW91c2VNb3ZlOiB0aGlzLm9uTW91c2VNb3ZlLmJpbmQodGhpcylcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY2MuZXZlbnRNYW5hZ2VyLmFkZExpc3RlbmVyKHRoaXMuX2J1dHRvbk1vdXNlciwgdGhpcyk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgb25FeGl0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYodGhpcy5fYnV0dG9uVG91Y2hlcikge1xuICAgICAgICAgICAgY2MuZXZlbnRNYW5hZ2VyLnJlbW92ZUxpc3RlbmVyKHRoaXMuX2J1dHRvblRvdWNoZXIpO1xuICAgICAgICAgICAgdGhpcy5fYnV0dG9uVG91Y2hlciA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYoISBjYy5zeXMuaXNOYXRpdmUpIHtcbiAgICAgICAgICAgIGlmKHRoaXMuX2J1dHRvbk1vdXNlcikge1xuICAgICAgICAgICAgICAgIGNjLmV2ZW50TWFuYWdlci5yZW1vdmVMaXN0ZW5lcih0aGlzLl9idXR0b25Nb3VzZXIpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2J1dHRvbk1vdXNlciA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9zdXBlcigpO1xuICAgIH0sXG5cbiAgICBvblRvdWNoQmVnYW46ZnVuY3Rpb24gKHRvdWNoLCBldmVudCkge1xuICAgICAgICB2YXIgcG9zID0gdG91Y2guZ2V0TG9jYXRpb24oKTtcbiAgICAgICAgdmFyIHRhcmdldCA9IHRoaXMucGFyZW50O1xuICAgICAgICBpZiAodGFyZ2V0ICYmIGNjLnJlY3RDb250YWluc1BvaW50KHRhcmdldC5nZXRCb3VuZGluZ0JveFRvV29ybGQoKSwgcG9zKSkge1xuICAgICAgICAgICAgaWYodGFyZ2V0LmVuYWJsZWQgJiYgdGFyZ2V0LnZpc2libGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9pc1RvdWNoZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuX2lzSG92ZXIgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLl9wbGF5QmVnaW4odGFyZ2V0KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuICAgIG9uVG91Y2hNb3ZlZDpmdW5jdGlvbiAodG91Y2gsIGV2ZW50KSB7XG5cbiAgICB9LFxuXG4gICAgb25Ub3VjaEVuZGVkOmZ1bmN0aW9uICh0b3VjaCwgZXZlbnQpIHtcbiAgICAgICAgaWYodGhpcy5faXNUb3VjaGVkKSB7XG4gICAgICAgICAgICB0aGlzLl9pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciB0YXJnZXQgPSB0aGlzLnBhcmVudDtcbiAgICAgICAgICAgIGlmICh0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wbGF5RW5kKHRhcmdldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgb25Nb3VzZU1vdmU6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIHZhciBwb3MgPSBldmVudC5nZXRMb2NhdGlvbigpO1xuICAgICAgICAvLy9OT1RFOiB0YXJnZXQncyBwYXJlbnQgaXMgQnV0dG9uXG4gICAgICAgIHZhciB0YXJnZXQgPSB0aGlzLnBhcmVudDtcbiAgICAgICAgaWYgKHRhcmdldCkge1xuICAgICAgICAgICAgaWYoY2MucmVjdENvbnRhaW5zUG9pbnQodGFyZ2V0LmdldEJvdW5kaW5nQm94VG9Xb3JsZCgpLCBwb3MpKSB7XG4gICAgICAgICAgICAgICAgaWYoIXRoaXMuX2lzSG92ZXIgJiYgIXRoaXMuX2lzVG91Y2hlZCkge1xuICAgICAgICAgICAgICAgICAgICBpZih0YXJnZXQuZW5hYmxlZCAmJiB0YXJnZXQudmlzaWJsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faXNIb3ZlciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wbGF5SG92ZXIodGFyZ2V0LCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYodGhpcy5faXNIb3Zlcikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pc0hvdmVyID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3BsYXlIb3Zlcih0YXJnZXQsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgX29uSG92ZXJFbmRlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuX2lzSG92ZXJQbGF5aW5nID0gZmFsc2U7XG4gICAgfSxcblxuICAgIF9wbGF5QmVnaW5FeDogZnVuY3Rpb24odGFyZ2V0KSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBOT1RFOiBDQ0IgaGFzIGJ1ZywgQ0NDb250cm9sQnV0dG9uIGNhbiBOT1Qgc2V0IGNoaWxkLCBzbyB1c2UgZW1wdHkgbm9kZSBjb250YWlucyBidXR0b24gYW5kIGxhYmVsXG4gICAgICAgICAqIENDTm9kZVtlbXB0eV1cbiAgICAgICAgICogICAgfF9DQ0NvbnRyb2xCdXR0b25cbiAgICAgICAgICogICAgICAgICAgfF9Ub3VjaGVkTm9kZVxuICAgICAgICAgKi9cbiAgICAgICAgaWYodGFyZ2V0LnBhcmVudCkge1xuICAgICAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0LnBhcmVudDtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogTk9URTogTWVudUl0ZW0gaXMgbW9yZSBzcGVjaWFsbHlcbiAgICAgICAgICogQ0NOb2RlW2VtcHR5XVxuICAgICAgICAgKiAgICB8X0NDTWVudVxuICAgICAgICAgKiAgICAgICAgICB8X0NDTWVudUl0ZW1JbWFnZVxuICAgICAgICAgKiAgICAgICAgICAgICAgICAgIHxfVG91Y2hlZE5vZGVcbiAgICAgICAgICovXG4gICAgICAgIGlmKHRoaXMuX2lzTWVudUl0ZW0gJiYgdGFyZ2V0LnBhcmVudCkge1xuICAgICAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0LnBhcmVudDtcbiAgICAgICAgfVxuICAgICAgICB0YXJnZXQuc3RvcEFsbEFjdGlvbnMoKTtcbiAgICAgICAgdGFyZ2V0LnJ1bkFjdGlvbihcbiAgICAgICAgICAgIGNjLnNlcXVlbmNlKFxuICAgICAgICAgICAgICAgIGNjLmRlbGF5VGltZSgwLjAxKSxcbiAgICAgICAgICAgICAgICBjYy5zY2FsZVRvKDAuMSwgMS4xLCAwLjkpLFxuICAgICAgICAgICAgICAgIGNjLmRlbGF5VGltZSgwLjAxKVxuICAgICAgICAgICAgKVxuICAgICAgICApO1xuICAgIH0sXG5cbiAgICBfcGxheUVuZEV4OiBmdW5jdGlvbih0YXJnZXQpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIE5PVEU6IENDQiBoYXMgYnVnLCBDQ0NvbnRyb2xCdXR0b24gY2FuIE5PVCBzZXQgY2hpbGQsIHNvIHVzZSBlbXB0eSBub2RlIGNvbnRhaW5zIGJ1dHRvbiBhbmQgbGFiZWxcbiAgICAgICAgICogQ0NOb2RlW2VtcHR5XVxuICAgICAgICAgKiAgICB8X0NDQ29udHJvbEJ1dHRvblxuICAgICAgICAgKiAgICAgICAgICB8X1RvdWNoZWROb2RlXG4gICAgICAgICAqL1xuICAgICAgICBpZih0YXJnZXQucGFyZW50KSB7XG4gICAgICAgICAgICB0YXJnZXQgPSB0YXJnZXQucGFyZW50O1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBOT1RFOiBNZW51SXRlbSBpcyBtb3JlIHNwZWNpYWxseVxuICAgICAgICAgKiBDQ05vZGVbZW1wdHldXG4gICAgICAgICAqICAgIHxfQ0NNZW51XG4gICAgICAgICAqICAgICAgICAgIHxfQ0NNZW51SXRlbUltYWdlXG4gICAgICAgICAqICAgICAgICAgICAgICAgICAgfF9Ub3VjaGVkTm9kZVxuICAgICAgICAgKi9cbiAgICAgICAgaWYodGhpcy5faXNNZW51SXRlbSAmJiB0YXJnZXQucGFyZW50KSB7XG4gICAgICAgICAgICB0YXJnZXQgPSB0YXJnZXQucGFyZW50O1xuICAgICAgICB9XG4gICAgICAgIHRhcmdldC5zdG9wQWxsQWN0aW9ucygpO1xuICAgICAgICB0YXJnZXQucnVuQWN0aW9uKFxuICAgICAgICAgICAgY2Muc2VxdWVuY2UoXG4gICAgICAgICAgICAgICAgY2MuZGVsYXlUaW1lKDAuMDEpLFxuICAgICAgICAgICAgICAgIGNjLnNjYWxlVG8oMC4xLCAxLCAxKSxcbiAgICAgICAgICAgICAgICBjYy5kZWxheVRpbWUoMC4wMSlcbiAgICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICB9LFxuXG4gICAgX3BsYXlCZWdpbjogZnVuY3Rpb24odGFyZ2V0KSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBOT1RFOiBDQ0IgaGFzIGJ1ZywgQ0NDb250cm9sQnV0dG9uIGNhbiBOT1Qgc2V0IGNoaWxkLCBzbyB1c2UgZW1wdHkgbm9kZSBjb250YWlucyBidXR0b24gYW5kIGxhYmVsXG4gICAgICAgICAqIENDTm9kZVtlbXB0eV1cbiAgICAgICAgICogICAgfF9DQ0NvbnRyb2xCdXR0b25cbiAgICAgICAgICogICAgICAgICAgfF9Ub3VjaGVkTm9kZVxuICAgICAgICAgKi9cbiAgICAgICAgaWYodGFyZ2V0LnBhcmVudCkge1xuICAgICAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0LnBhcmVudDtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogTk9URTogTWVudUl0ZW0gaXMgbW9yZSBzcGVjaWFsbHlcbiAgICAgICAgICogQ0NOb2RlW2VtcHR5XVxuICAgICAgICAgKiAgICB8X0NDTWVudVxuICAgICAgICAgKiAgICAgICAgICB8X0NDTWVudUl0ZW1JbWFnZVxuICAgICAgICAgKiAgICAgICAgICAgICAgICAgIHxfVG91Y2hlZE5vZGVcbiAgICAgICAgICovXG4gICAgICAgIGlmKHRoaXMuX2lzTWVudUl0ZW0gJiYgdGFyZ2V0LnBhcmVudCkge1xuICAgICAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0LnBhcmVudDtcbiAgICAgICAgfVxuICAgICAgICB0YXJnZXQuc3RvcEFsbEFjdGlvbnMoKTtcbiAgICAgICAgdGFyZ2V0LnJ1bkFjdGlvbihcbiAgICAgICAgICAgIGNjLnNjYWxlVG8oMC4yMCwgMC44NSwgMC44NSlcbiAgICAgICAgKTtcbiAgICB9LFxuXG4gICAgX3BsYXlFbmQ6IGZ1bmN0aW9uKHRhcmdldCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogTk9URTogQ0NCIGhhcyBidWcsIENDQ29udHJvbEJ1dHRvbiBjYW4gTk9UIHNldCBjaGlsZCwgc28gdXNlIGVtcHR5IG5vZGUgY29udGFpbnMgYnV0dG9uIGFuZCBsYWJlbFxuICAgICAgICAgKiBDQ05vZGVbZW1wdHldXG4gICAgICAgICAqICAgIHxfQ0NDb250cm9sQnV0dG9uXG4gICAgICAgICAqICAgICAgICAgIHxfVG91Y2hlZE5vZGVcbiAgICAgICAgICovXG4gICAgICAgIGlmKHRhcmdldC5wYXJlbnQpIHtcbiAgICAgICAgICAgIHRhcmdldCA9IHRhcmdldC5wYXJlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE5PVEU6IE1lbnVJdGVtIGlzIG1vcmUgc3BlY2lhbGx5XG4gICAgICAgICAqIENDTm9kZVtlbXB0eV1cbiAgICAgICAgICogICAgfF9DQ01lbnVcbiAgICAgICAgICogICAgICAgICAgfF9DQ01lbnVJdGVtSW1hZ2VcbiAgICAgICAgICogICAgICAgICAgICAgICAgICB8X1RvdWNoZWROb2RlXG4gICAgICAgICAqL1xuICAgICAgICBpZih0aGlzLl9pc01lbnVJdGVtICYmIHRhcmdldC5wYXJlbnQpIHtcbiAgICAgICAgICAgIHRhcmdldCA9IHRhcmdldC5wYXJlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgdGFyZ2V0LnN0b3BBbGxBY3Rpb25zKCk7XG4gICAgICAgIHRhcmdldC5ydW5BY3Rpb24oXG4gICAgICAgICAgICBjYy5zY2FsZVRvKDAuMjAgLDEsIDEpXG4gICAgICAgICk7XG4gICAgfSxcblxuICAgIF9wbGF5SG92ZXJFeDogZnVuY3Rpb24odGFyZ2V0KSB7XG4gICAgICAgIHZhciBib3VuZGluZyA9IHRhcmdldC5nZXRCb3VuZGluZ0JveCgpO1xuICAgICAgICBpZihib3VuZGluZy53aWR0aCA8IHRoaXMub2Zmc2V0WCkge1xuICAgICAgICAgICAgYm91bmRpbmcud2lkdGggPSB0aGlzLm9mZnNldFg7XG4gICAgICAgIH1cbiAgICAgICAgaWYoYm91bmRpbmcuaGVpZ2h0IDwgdGhpcy5vZmZzZXRZKSB7XG4gICAgICAgICAgICBib3VuZGluZy5oZWlnaHQgPSB0aGlzLm9mZnNldFk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogTk9URTogQ0NCIGhhcyBidWcsIENDQ29udHJvbEJ1dHRvbiBjYW4gTk9UIHNldCBjaGlsZCwgc28gdXNlIGVtcHR5IG5vZGUgY29udGFpbnMgYnV0dG9uIGFuZCBsYWJlbFxuICAgICAgICAgKiBDQ05vZGVbZW1wdHldXG4gICAgICAgICAqICAgIHxfQ0NDb250cm9sQnV0dG9uXG4gICAgICAgICAqICAgICAgICAgIHxfVG91Y2hlZE5vZGVcbiAgICAgICAgICovXG4gICAgICAgIGlmKHRhcmdldC5wYXJlbnQpIHtcbiAgICAgICAgICAgIHRhcmdldCA9IHRhcmdldC5wYXJlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE5PVEU6IE1lbnVJdGVtIGlzIG1vcmUgc3BlY2lhbGx5XG4gICAgICAgICAqIENDTm9kZVtlbXB0eV1cbiAgICAgICAgICogICAgfF9DQ01lbnVcbiAgICAgICAgICogICAgICAgICAgfF9DQ01lbnVJdGVtSW1hZ2VcbiAgICAgICAgICogICAgICAgICAgICAgICAgICB8X1RvdWNoZWROb2RlXG4gICAgICAgICAqL1xuICAgICAgICBpZih0aGlzLl9pc01lbnVJdGVtICYmIHRhcmdldC5wYXJlbnQpIHtcbiAgICAgICAgICAgIHRhcmdldCA9IHRhcmdldC5wYXJlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgdGFyZ2V0LnN0b3BBbGxBY3Rpb25zKCk7XG4gICAgICAgIHRhcmdldC5ydW5BY3Rpb24oXG4gICAgICAgICAgICBjYy5zZXF1ZW5jZShcbiAgICAgICAgICAgICAgICBjYy5zY2FsZVRvKDAuMDgsIChib3VuZGluZy53aWR0aC10aGlzLm9mZnNldFgpL2JvdW5kaW5nLndpZHRoLCAoYm91bmRpbmcuaGVpZ2h0K3RoaXMub2Zmc2V0WSkvYm91bmRpbmcuaGVpZ2h0KSxcbiAgICAgICAgICAgICAgICBjYy5zY2FsZVRvKDAuMSwgKGJvdW5kaW5nLndpZHRoK3RoaXMub2Zmc2V0WCkvYm91bmRpbmcud2lkdGgsIChib3VuZGluZy5oZWlnaHQtdGhpcy5vZmZzZXRZKS9ib3VuZGluZy5oZWlnaHQpLFxuICAgICAgICAgICAgICAgIGNjLmRlbGF5VGltZSgwLjA0KSxcbiAgICAgICAgICAgICAgICBjYy5zY2FsZVRvKDAuMSwgMSwgMSksXG4gICAgICAgICAgICAgICAgY2MuY2FsbEZ1bmModGhpcy5fb25Ib3ZlckVuZGVkLCB0aGlzKVxuICAgICAgICAgICAgKVxuICAgICAgICApO1xuICAgIH0sXG5cbiAgICBfcGxheUhvdmVyOiBmdW5jdGlvbih0YXJnZXQsIGlzSG92ZXIpIHtcbiAgICAgICAgLy9jYy5lcnJvcihcImhvdmVyOiB0YXJnZXQgPSBcIiwgdGFyZ2V0LCBEYXRlLm5vdygpKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIE5PVEU6IENDQiBoYXMgYnVnLCBDQ0NvbnRyb2xCdXR0b24gY2FuIE5PVCBzZXQgY2hpbGQsIHNvIHVzZSBlbXB0eSBub2RlIGNvbnRhaW5zIGJ1dHRvbiBhbmQgbGFiZWxcbiAgICAgICAgICogQ0NOb2RlW2VtcHR5XVxuICAgICAgICAgKiAgICB8X0NDQ29udHJvbEJ1dHRvblxuICAgICAgICAgKiAgICAgICAgICB8X1RvdWNoZWROb2RlXG4gICAgICAgICAqL1xuICAgICAgICBpZih0YXJnZXQucGFyZW50KSB7XG4gICAgICAgICAgICB0YXJnZXQgPSB0YXJnZXQucGFyZW50O1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBOT1RFOiBNZW51SXRlbSBpcyBtb3JlIHNwZWNpYWxseVxuICAgICAgICAgKiBDQ05vZGVbZW1wdHldXG4gICAgICAgICAqICAgIHxfQ0NNZW51XG4gICAgICAgICAqICAgICAgICAgIHxfQ0NNZW51SXRlbUltYWdlXG4gICAgICAgICAqICAgICAgICAgICAgICAgICAgfF9Ub3VjaGVkTm9kZVxuICAgICAgICAgKi9cbiAgICAgICAgaWYodGhpcy5faXNNZW51SXRlbSAmJiB0YXJnZXQucGFyZW50KSB7XG4gICAgICAgICAgICB0YXJnZXQgPSB0YXJnZXQucGFyZW50O1xuICAgICAgICB9XG4gICAgICAgIHRhcmdldC5zdG9wQWxsQWN0aW9ucygpO1xuXG4gICAgICAgIGlmKGlzSG92ZXIpIHtcbiAgICAgICAgICAgIHRhcmdldC5ydW5BY3Rpb24oXG4gICAgICAgICAgICAgICAgY2Muc2VxdWVuY2UoXG4gICAgICAgICAgICAgICAgICAgIGNjLnNjYWxlVG8oMC4xNiwgMS4wOCwgMS4wOCksXG4gICAgICAgICAgICAgICAgICAgIGNjLnNjYWxlVG8oMC4xLCAxLjA2LCAxLjA2KVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0YXJnZXQuc2V0U2NhbGUoMSwgMSk7XG4gICAgICAgIH1cblxuICAgIH1cblxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gVG91Y2hlZE5vZGU7IiwiLyoqXG4gKiBDcmVhdGVkIGJ5IG95ZSBvbiAxNS01LTE3LlxuICovXG52YXIgSHR0cENsaWVudCA9IHJlcXVpcmUoXCIuLi8uLi9jb21tb24vbmV0L0h0dHBDbGllbnRcIik7XG52YXIgQWRzUGxhY2UgPSByZXF1aXJlKFwiLi4vZW51bS9BZHNQbGFjZVwiKTtcblxudmFyIEFEX0NPTkZJR19VUkwgPSBcImh0dHBzOi8vcWlubmluZzE5OS5naXRodWIuaW8vZ2FtZS5odG1sXCI7XG5cbi8vdmFyIE9ORV9NSU5VVEUgPSA2MCAqIDEwMDA7XG52YXIgQWRMaXN0ZW5lciA9IGNjLkNsYXNzLmV4dGVuZCh7XG4gICAgb25SZXdhcmRlZFZpZGVvRmluaXNoZWQ6IGZ1bmN0aW9uIChpc1Jld2FyZGVkKSB7XG4gICAgfSxcblxuICAgIG9uSW50ZXJzdGl0aWFsQWRFbmQ6IGZ1bmN0aW9uIChjaGFubmVsTmFtZSkge1xuICAgIH0sXG5cbiAgICBvblNob3dWaWRlb0FkQmVnaW46IGZ1bmN0aW9uICgpIHtcbiAgICB9LFxuXG4gICAgb25TaG93VmlkZW9BZEVuZDogZnVuY3Rpb24gKCkge1xuICAgIH1cbn0pO1xuXG52YXIgQWRQbGFjZUluZm8gPSBmdW5jdGlvbiAoaW50ZXJ2YWwpIHtcbiAgICB0aGlzLmludGVydmFsID0gaW50ZXJ2YWw7XG4gICAgdGhpcy5sYXN0U2hvd1RpbWUgPSBEYXRlLm5vdygpO1xufTtcblxuXG52YXIgQWRzTWFuYWdlciA9IGNjLkNsYXNzLmV4dGVuZCh7XG4gICAgREVGQVVMVF9BRF9JTlRFUlZBTDogNjAgKiAxMDAwLFxuXG4gICAgaW50ZXJ2YWxNYXA6IHtcbiAgICAgICAgXCIwXCI6IDE1MCxcbiAgICAgICAgXCIxXCI6IDE1MCxcbiAgICAgICAgXCIyXCI6IDgwLFxuICAgICAgICBcIjNcIjogNjBcbiAgICB9LFxuXG4gICAgT05FX01JTlVURV9TRUNPTkQ6IDYwICogMTAwMCxcblxuICAgIGFkQ29uZmlnVXJsOiBcIlwiLFxuXG4gICAgcmF0ZVRpbWU6IDAsXG4gICAgcmF0ZWRUaW1lOiAwLFxuICAgIHJhdGVSZW1vdmVBZHM6IGZhbHNlLFxuXG4gICAgaXNOZXdQbGF5ZXI6IHRydWUsXG5cbiAgICBhZFBsYWNlTWFwOiB7fSxcblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtBZExpc3RlbmVyfVxuICAgICAqL1xuICAgIGFkTGlzdGVuZXI6IG51bGwsXG5cbiAgICBzaG93VG9wQmFubmVyOiB0cnVlLFxuICAgIHRvcEJhbm5lckRheTogMCxcblxuICAgIHNob3dGaXJzdEVudGVyQWQ6IHRydWUsXG4gICAgZmlyc3RFbnRlclNob3dBZERheTogMixcblxuICAgIGxhc3RJbnRlcnN0aXRpYWxUaW1lOiAwLFxuICAgIGxhc3RSZXdhcmRlZFRpbWU6IDAsXG4gICAgZW5hYmxlZEludGVyc3RpdGlhbEFkOiB0cnVlLFxuXG4gICAgY3RvcjogZnVuY3Rpb24gKCkge1xuICAgICAgICBpZihjYy5zeXMuaXNOYXRpdmUpIHtcbiAgICAgICAgICAgIGpzYl9kcC5vbmVTZGtCcmlkZ2Uub25JbnRlcnN0aXRpYWxBZEZpbmlzaGVkID0gdGhpcy5vbkFkRmluaXNoZWRKc2IuYmluZCh0aGlzKTtcbiAgICAgICAgICAgIGpzYl9kcC5vbmVTZGtCcmlkZ2Uub25WaWRlb0FkRmluaXNoZWQgPSB0aGlzLm9uVmlkZW9BZEZpbmlzaGVkSnNiLmJpbmQodGhpcyk7XG4gICAgICAgICAgICBqc2JfZHAub25lU2RrQnJpZGdlLm9uU2hvd1ZpZGVvQWRCZWdpbiA9IHRoaXMub25TaG93VmlkZW9BZEJlZ2luSnNiLmJpbmQodGhpcyk7XG4gICAgICAgICAgICBqc2JfZHAub25lU2RrQnJpZGdlLm9uU2hvd1ZpZGVvQWRFbmQgPSB0aGlzLm9uU2hvd1ZpZGVvQWRFbmRKc2IuYmluZCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8PSBBZHNQbGFjZS5OdW07ICsraSkge1xuICAgICAgICAgICAgdGhpcy5hZFBsYWNlTWFwW2ldID0gbmV3IEFkUGxhY2VJbmZvKHRoaXMuREVGQVVMVF9BRF9JTlRFUlZBTCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgaW5pdDogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmluaXRJbnRlcnZhbCgpO1xuICAgICAgICB0aGlzLmFkUGxhY2VNYXBbQWRzUGxhY2UuRmlyc3RFbnRlcl0uaW50ZXJ2YWwgPSAwO1xuICAgICAgICB0aGlzLmxvZ0ludGVydmFsKFwibG9jYWxcIik7XG4gICAgfSxcblxuICAgIGluaXRJbnRlcnZhbDogZnVuY3Rpb24gKCkge1xuICAgICAgICBjYy5sb2coXCJBZHNNYW5hZ2VyIGluaXRJbnRlcnZhbFwiKTtcbiAgICAgICAgdmFyIGRheSA9IGdhbWUucGxheWVyTWFuLmdldFJlZ2lzdGVyRGF5KCk7XG4gICAgICAgIHZhciBpbnRlcnZhbCA9IHRoaXMuaW50ZXJ2YWxNYXBbZGF5XTtcbiAgICAgICAgaWYgKCFpbnRlcnZhbCkge1xuICAgICAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyh0aGlzLmludGVydmFsTWFwKTtcbiAgICAgICAgICAgIHZhciBrZXkgPSBrZXlzW2tleXMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICBjYy5sb2coXCJBZHNNYW5hZ2VyIGluaXQgaW50ZXJ2YWwga2V5OlwiICsga2V5KTtcbiAgICAgICAgICAgIGludGVydmFsID0gdGhpcy5pbnRlcnZhbE1hcFtrZXldO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbnRlcnZhbCkge1xuICAgICAgICAgICAgdGhpcy5hZFBsYWNlTWFwW0Fkc1BsYWNlLlBhc3NdLmludGVydmFsID0gaW50ZXJ2YWwgKiAxMDAwO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIGxvYWRSZW1vdGVEYXRhOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhZENvbmZpZ1VybCA9IGdhbWUuY29uZmlnLmdldEFkVXJsKCkgfHwgQURfQ09ORklHX1VSTDtcbiAgICAgICAgY2MubG9nKFwiQWRzTWFuYWdlciBsb2FkUmVtb3RlRGF0YTpcIiArIGFkQ29uZmlnVXJsKTtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICBIdHRwQ2xpZW50LmRvR2V0KGFkQ29uZmlnVXJsLCBmdW5jdGlvbiAoZXJyb3IsIHRleHQpIHtcbiAgICAgICAgICAgIGNjLmxvZyhcIkFkc01hbmFnZXIgcmVtb3RlIHJlc3BvbnNlOlwiICsgZXJyb3IgKyBcIix0ZXh0OlwiICsgdGV4dCk7XG4gICAgICAgICAgICBpZiAoIWVycm9yKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFkQ29uZmlnID0gSlNPTi5wYXJzZSh0ZXh0KTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoY2Muc3lzLm9zID09PSBjYy5zeXMuT1NfQU5EUk9JRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFkQ29uZmlnICYmIGFkQ29uZmlnLmFuZHJvaWRDb25maWcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZENvbmZpZyA9IGFkQ29uZmlnLmFuZHJvaWRDb25maWc7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB2YXIgZXN0aW1hdGVkUmF0aW8gPSBhZENvbmZpZy5lc3RpbWF0ZWRSYXRpbztcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc05hTihlc3RpbWF0ZWRSYXRpbykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWUuY29uZmlnLmVzdGltYXRlZFJhdGlvID0gZXN0aW1hdGVkUmF0aW87XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB2YXIgbWluUG9zc2liaWxpdHkgPSBhZENvbmZpZy5taW5Qb3NzaWJpbGl0eTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc05hTihtaW5Qb3NzaWJpbGl0eSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWUuY29uZmlnLm1pblBvc3NpYmlsaXR5ID0gbWluUG9zc2liaWxpdHk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB2YXIgaW50ZXJ2YWxNYXAgPSBhZENvbmZpZy5uZXdJbnRlcnZhbE1hcDtcbiAgICAgICAgICAgICAgICAgICAgY2MubG9nKFwiQWRzTWFuYWdlciBpbnRlcnZhbE1hcDpcIiArIEpTT04uc3RyaW5naWZ5KGludGVydmFsTWFwKSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghY2MuaXNVbmRlZmluZWQoaW50ZXJ2YWxNYXApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmludGVydmFsTWFwID0gaW50ZXJ2YWxNYXA7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmluaXRJbnRlcnZhbCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHNob3dUb3BCYW5uZXIgPSBhZENvbmZpZy5zaG93VG9wQmFubmVyO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWNjLmlzVW5kZWZpbmVkKHNob3dUb3BCYW5uZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNob3dUb3BCYW5uZXIgPSBzaG93VG9wQmFubmVyO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHRvcEJhbm5lckRheSA9IGFkQ29uZmlnLnRvcEJhbm5lckRheTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjYy5pc1VuZGVmaW5lZCh0b3BCYW5uZXJEYXkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnRvcEJhbm5lckRheSA9IHRvcEJhbm5lckRheTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHZhciBzaG93Rmlyc3RFbnRlckFkID0gYWRDb25maWcuc2hvd0ZpcnN0RW50ZXJBZDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjYy5pc1VuZGVmaW5lZChzaG93Rmlyc3RFbnRlckFkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zaG93Rmlyc3RFbnRlckFkID0gc2hvd0ZpcnN0RW50ZXJBZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHZhciBmaXJzdEVudGVyU2hvd0FkRGF5ID0gYWRDb25maWcuZmlyc3RFbnRlclNob3dBZERheTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjYy5pc1VuZGVmaW5lZChmaXJzdEVudGVyU2hvd0FkRGF5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5maXJzdEVudGVyU2hvd0FkRGF5ID0gZmlyc3RFbnRlclNob3dBZERheTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHZhciBiYWNrVG9Hcm91bmRJbnRlcnZhbCA9IGFkQ29uZmlnLmJhY2tUb0dyb3VuZEludGVydmFsO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWNjLmlzVW5kZWZpbmVkKGJhY2tUb0dyb3VuZEludGVydmFsKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5hZFBsYWNlTWFwW0Fkc1BsYWNlLkJhY2tHcm91bmRdLmludGVydmFsID0gYmFja1RvR3JvdW5kSW50ZXJ2YWwgKiAxMDAwO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGJhY2tUb0hvbWVJbnRlcnZhbCA9IGFkQ29uZmlnLmJhY2tUb0hvbWVJbnRlcnZhbDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjYy5pc1VuZGVmaW5lZChiYWNrVG9Ib21lSW50ZXJ2YWwpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmFkUGxhY2VNYXBbQWRzUGxhY2UuSG9tZV0uaW50ZXJ2YWwgPSBiYWNrVG9Ib21lSW50ZXJ2YWwgKiAxMDAwO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlZnJlc2hJbnRlcnZhbCA9IGFkQ29uZmlnLnJlZnJlc2hJbnRlcnZhbDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjYy5pc1VuZGVmaW5lZChyZWZyZXNoSW50ZXJ2YWwpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmFkUGxhY2VNYXBbQWRzUGxhY2UuUmVmcmVzaF0uaW50ZXJ2YWwgPSByZWZyZXNoSW50ZXJ2YWwgKiAxMDAwO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGdhbWUudXRpbHMuaXNTZWxmR2FtZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWRzQ29uZmlnID0gYWRDb25maWcuYWRzQ29uZmlnO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFkc0NvbmZpZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqc2JfZHAub25lU2RrQnJpZGdlLnNldEludGVyc3RpdGlhbEFkV2VpZ2h0Q29uZmlnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzYl9kcC5vbmVTZGtCcmlkZ2Uuc2V0SW50ZXJzdGl0aWFsQWRXZWlnaHRDb25maWcoSlNPTi5zdHJpbmdpZnkoYWRzQ29uZmlnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmV3YXJkQWRzQ29uZmlnID0gYWRDb25maWcucmV3YXJkQWRzQ29uZmlnO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJld2FyZEFkc0NvbmZpZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqc2JfZHAub25lU2RrQnJpZGdlLnNldFJld2FyZEFkV2VpZ2h0Q29uZmlnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzYl9kcC5vbmVTZGtCcmlkZ2Uuc2V0UmV3YXJkQWRXZWlnaHRDb25maWcoSlNPTi5zdHJpbmdpZnkocmV3YXJkQWRzQ29uZmlnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYmFubmVyQWRzQ29uZmlnID0gYWRDb25maWcuYmFubmVyQWRzQ29uZmlnO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJhbm5lckFkc0NvbmZpZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqc2JfZHAub25lU2RrQnJpZGdlLnNldEJhbm5lckFkV2VpZ2h0Q29uZmlnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzYl9kcC5vbmVTZGtCcmlkZ2Uuc2V0QmFubmVyQWRXZWlnaHRDb25maWcoSlNPTi5zdHJpbmdpZnkoYmFubmVyQWRzQ29uZmlnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIG5hdGl2ZUFkc0NvbmZpZyA9IGFkQ29uZmlnLm5hdGl2ZUFkc0NvbmZpZztcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5hdGl2ZUFkc0NvbmZpZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGpzYl9kcC5vbmVTZGtCcmlkZ2Uuc2V0TmF0aXZlQWRXZWlnaHRDb25maWcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqc2JfZHAub25lU2RrQnJpZGdlLnNldE5hdGl2ZUFkV2VpZ2h0Q29uZmlnKEpTT04uc3RyaW5naWZ5KG5hdGl2ZUFkc0NvbmZpZykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dJbnRlcnZhbChcInNlcnZlclwiKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNjLmxvZyhcIkFkc01hbmFnZXIgZXJyb3I6XCIgKyBlLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIGdldFJlZ2lzdGVyRGF5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBnYW1lLnBsYXllck1hbi5nZXRSZWdpc3RlckRheSgpO1xuICAgIH0sXG5cbiAgICBsb2dJbnRlcnZhbDogZnVuY3Rpb24gKHRhZykge1xuICAgICAgICBjYy5sb2coXCJBZHNNYW5hZ2VyIFwiICsgdGFnICsgXCIgYWRQbGFjZU1hcDpcIiArIEpTT04uc3RyaW5naWZ5KHRoaXMuYWRQbGFjZU1hcCkgK1xuICAgICAgICAgICAgXCIsZGF5OlwiICsgdGhpcy5nZXRSZWdpc3RlckRheSgpICsgXCIsc2hvd1RvcEJhbm5lcjpcIiArIHRoaXMuc2hvd1RvcEJhbm5lciArIFwiLHRvcEJhbm5lckRheTpcIiArIHRoaXMudG9wQmFubmVyRGF5KTtcbiAgICB9LFxuXG4gICAgc2V0SXNOZXdQbGF5ZXI6IGZ1bmN0aW9uIChpc05ldykge1xuICAgICAgICB0aGlzLmlzTmV3UGxheWVyID0gaXNOZXc7XG4gICAgfSxcblxuICAgIG9uR2FtZU9uU2hvdzogZnVuY3Rpb24gKCkge1xuICAgIH0sXG5cbiAgICBzZXRBZExpc3RlbmVyOiBmdW5jdGlvbiAoYWRMaXN0ZW5lcikge1xuICAgICAgICB0aGlzLmFkTGlzdGVuZXIgPSBhZExpc3RlbmVyO1xuICAgIH0sXG5cbiAgICBpc1JlbW92ZWRBZHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGdhbWUucGxheWVyTWFuLnBsYXllci5yZW1vdmVkQWRzO1xuICAgIH0sXG5cbiAgICBzaG93QmFubmVyQWRzOiBmdW5jdGlvbiAocGxhY2VtZW50KSB7XG4gICAgICAgIGNjLmxvZyhcIkFkc01hbmFnZXIgc2hvd0Jhbm5lckFkczpcIiArIHBsYWNlbWVudCk7XG4gICAgICAgIGlmICh0aGlzLmlzUmVtb3ZlZEFkcygpKSByZXR1cm47XG4gICAgICAgIGlmIChjYy5zeXMuaXNOYXRpdmUpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5pc1Nob3dCYW5uZXJBZHMocGxhY2VtZW50KSkge1xuICAgICAgICAgICAgICAgIGpzYl9kcC5vbmVTZGtCcmlkZ2Uuc2hvd0Jhbm5lckFkKHBsYWNlbWVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgcmVtb3ZlQmFubmVyQWRzOiBmdW5jdGlvbiAocGxhY2VtZW50KSB7XG4gICAgICAgIGlmIChjYy5zeXMuaXNOYXRpdmUpIHtcbiAgICAgICAgICAgIGpzYl9kcC5vbmVTZGtCcmlkZ2UucmVtb3ZlQmFubmVyQWQocGxhY2VtZW50KTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBpc1Nob3dCYW5uZXJBZHM6IGZ1bmN0aW9uIChwbGFjZW1lbnQpIHtcbiAgICAgICAgaWYgKGNjLnN5cy5pc05hdGl2ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGpzYl9kcC5vbmVTZGtCcmlkZ2UuaXNTaG93QmFubmVyQWQocGxhY2VtZW50KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuICAgIGlzU2hvd05hdGl2ZUFkOiBmdW5jdGlvbiAocGxhY2VtZW50KSB7XG4gICAgICAgIGlmIChjYy5zeXMuaXNOYXRpdmUpIHtcbiAgICAgICAgICAgIHJldHVybiBqc2JfZHAub25lU2RrQnJpZGdlLmlzU2hvd05hdGl2ZUFkKHBsYWNlbWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICBzaG93SW50ZXJzdGl0aWFsOiBmdW5jdGlvbiAocGxhY2UpIHtcbiAgICAgICAgaWYgKCF0aGlzLmVuYWJsZWRJbnRlcnN0aXRpYWxBZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmlzUmVtb3ZlZEFkcygpKSByZXR1cm47XG4gICAgICAgIGNjLmxvZyhcIkFkc01hbmFnZXIgc2hvd0ludGVyc3RpdGlhbCBwbGFjZTpcIiArIHBsYWNlICsgXCIsIGludGVydmFsOlwiICsgdGhpcy5hZFBsYWNlTWFwW3BsYWNlXS5pbnRlcnZhbCArIFwiLGN1cnJlbnQgaW50ZXJ2YWw6XCIgK1xuICAgICAgICAgICAgKERhdGUubm93KCkgLSB0aGlzLmFkUGxhY2VNYXBbcGxhY2VdLmxhc3RTaG93VGltZSkpO1xuICAgICAgICBpZiAoRGF0ZS5ub3coKSAtIHRoaXMuYWRQbGFjZU1hcFtwbGFjZV0ubGFzdFNob3dUaW1lIDwgdGhpcy5hZFBsYWNlTWFwW3BsYWNlXS5pbnRlcnZhbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYWRQbGFjZU1hcFtwbGFjZV0ubGFzdFNob3dUaW1lID0gRGF0ZS5ub3coKTtcblxuICAgICAgICBpZiAoRGF0ZS5ub3coKSAtIHRoaXMubGFzdEludGVyc3RpdGlhbFRpbWUgPCA1ICogMTAwMCkge1xuICAgICAgICAgICAgY2MubG9nKFwiQWRzTWFuYWdlciBzaG93SW50ZXJzdGl0aWFsIGludGVydmFsIGxlc3MgdGhhbiA1IHNlY29uZHNcIik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKERhdGUubm93KCkgLSB0aGlzLmxhc3RSZXdhcmRlZFRpbWUgPCA1ICogMTAwMCkge1xuICAgICAgICAgICAgY2MubG9nKFwiQWRzTWFuYWdlciBzaG93SW50ZXJzdGl0aWFsIHJld2FyZGVkIHZpZGVvIGRpc2FibGUgaW50ZXJzdGl0aWFsIDUgc2Vjb25kc1wiKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNjLmxvZyhcIkFkc01hbmFnZXIgc2hvd0ludGVyc3RpdGlhbCBwbGFjZTpcIiArIHBsYWNlICsgXCIgc2hvd2VkXCIpO1xuICAgICAgICB0aGlzLmxhc3RJbnRlcnN0aXRpYWxUaW1lID0gRGF0ZS5ub3coKTtcblxuICAgICAgICB2YXIgcGxhY2VtZW50ID0gXCJkZWZhdWx0XCI7XG4gICAgICAgIGlmIChwbGFjZSA9PT0gQWRzUGxhY2UuSG9tZSkge1xuICAgICAgICAgICAgcGxhY2VtZW50ID0gXCJob21lXCI7XG4gICAgICAgIH0gZWxzZSBpZiAocGxhY2UgPT09IEFkc1BsYWNlLlJlZnJlc2gpIHtcbiAgICAgICAgICAgIHBsYWNlbWVudCA9IFwicmVmcmVzaFwiO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucGxhY2UgPSBwbGFjZTtcbiAgICAgICAgZ2FtZS5hbmFseXNlTWFuYWdlci50cmFja0V2ZW50KFwiV2F0Y2hJU1NvdXJjZVN0YXJ0XCIsIHtuYW1lOiBBZHNQbGFjZS5nZXROYW1lKHRoaXMucGxhY2UpfSk7XG4gICAgICAgIGlmIChjYy5zeXMuaXNOYXRpdmUpIHtcbiAgICAgICAgICAgIGpzYl9kcC5vbmVTZGtCcmlkZ2Uuc2hvd0ludGVyc3RpdGFsQWQocGxhY2VtZW50KTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBzaG93TmF0aXZlQWQ6IGZ1bmN0aW9uIChwbGFjZSwgcG9zWCwgcG9zWSkge1xuICAgICAgICBpZiAoZ2FtZS5wbGF5ZXJNYW4uZ2V0TGV2ZWwoKSA8PSAzKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY2MubG9nKFwic2hvd05hdGl2ZUFkOlwiICsgcGxhY2UpO1xuICAgICAgICBpZiAodGhpcy5pc1JlbW92ZWRBZHMoKSkgcmV0dXJuO1xuICAgICAgICBpZiAoY2Muc3lzLmlzTmF0aXZlKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNTaG93TmF0aXZlQWQocGxhY2UpKSB7XG4gICAgICAgICAgICAgICAganNiX2RwLm9uZVNka0JyaWRnZS5zaG93TmF0aXZlQWQocGxhY2UsIHBvc1gsIHBvc1kpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIHJlbW92ZU5hdGl2ZUFkOiBmdW5jdGlvbiAocGxhY2UpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNSZW1vdmVkQWRzKCkpIHJldHVybjtcbiAgICAgICAgaWYgKGNjLnN5cy5pc05hdGl2ZSkge1xuICAgICAgICAgICAganNiX2RwLm9uZVNka0JyaWRnZS5yZW1vdmVOYXRpdmVBZChwbGFjZSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgc2V0SW50ZXJzdGl0aWFsU2hvd2VkOiBmdW5jdGlvbiAocGxhY2UpIHtcbiAgICAgICAgdGhpcy5hZFBsYWNlTWFwW3BsYWNlXS5sYXN0U2hvd1RpbWUgPSBEYXRlLm5vdygpO1xuICAgIH0sXG5cbiAgICBzaG93Q3Jvc3NQcm9tb3Rpb246IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGNjLnN5cy5pc05hdGl2ZSkge1xuICAgICAgICAgICAganNiX2RwLm9uZVNka0JyaWRnZS5zaG93Q3Jvc3NQcm9tb3RlQWQoKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBpc1Jld2FyZFZpZGVvUmVhZHk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGNjLnN5cy5pc05hdGl2ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGpzYl9kcC5vbmVTZGtCcmlkZ2UuaXNSZXdhcmRWaWRlb1JlYWR5KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICBzaG93UmV3YXJkVmlkZW9BZDogZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzUmV3YXJkVmlkZW9SZWFkeSgpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lbmFibGVkSW50ZXJzdGl0aWFsKGZhbHNlKTtcbiAgICAgICAgaWYgKGNjLnN5cy5pc05hdGl2ZSkge1xuICAgICAgICAgICAganNiX2RwLm9uZVNka0JyaWRnZS5zaG93UmV3YXJkVmlkZW9BZChuYW1lKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBlbmFibGVkSW50ZXJzdGl0aWFsOiBmdW5jdGlvbiAoZW5hYmxlZCkge1xuICAgICAgICB0aGlzLmVuYWJsZWRJbnRlcnN0aXRpYWxBZCA9IGVuYWJsZWQ7XG4gICAgfSxcblxuICAgIG9uQWRGaW5pc2hlZEpzYjogZnVuY3Rpb24gKHN0cikge1xuICAgICAgICBjYy5sb2coXCJvbkFkRmluaXNoZWRKc2I6XCIgKyBzdHIpO1xuICAgICAgICB2YXIgYWRzRmluaXNoZWRPYmogPSBKU09OLnBhcnNlKHN0cik7XG4gICAgICAgIHZhciBjaGFubmVsTmFtZSA9IGFkc0ZpbmlzaGVkT2JqW1wiY2hhbm5lbE5hbWVcIl07XG4gICAgICAgIGNjLmxvZyhcImNoYW5uZWwgOlwiICsgY2hhbm5lbE5hbWUgKyBcIiBzaG93IGludGVyc3RpdGlhbCBhZHMgZmluaXNoZWRcIik7XG5cbiAgICAgICAgaWYgKHRoaXMuYWRMaXN0ZW5lciAmJiB0aGlzLmFkTGlzdGVuZXIub25JbnRlcnN0aXRpYWxBZEVuZCkge1xuICAgICAgICAgICAgdGhpcy5hZExpc3RlbmVyLm9uSW50ZXJzdGl0aWFsQWRFbmQoY2hhbm5lbE5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGdhbWUuYW5hbHlzZU1hbmFnZXIudHJhY2tFdmVudChcIldhdGNoSVNTb3VyY2VFbmRcIiwge25hbWU6IEFkc1BsYWNlLmdldE5hbWUodGhpcy5wbGFjZSl9KTtcbiAgICAgICAgZ2FtZS5wbGF5ZXJNYW4uYWRkSW50ZXJzdGl0aWFsQWRDb3VudCgpO1xuICAgIH0sXG5cbiAgICBvblZpZGVvQWRGaW5pc2hlZEpzYjogZnVuY3Rpb24gKHN0cikge1xuICAgICAgICBjYy5sb2coXCJvblZpZGVvQWRGaW5pc2hlZEpzYjpcIiArIHN0cik7XG4gICAgICAgIHZhciBhZHNGaW5pc2hlZE9iaiA9IEpTT04ucGFyc2Uoc3RyKTtcbiAgICAgICAgdmFyIGlzU2tpcHBlZCA9IGFkc0ZpbmlzaGVkT2JqLmlzU2tpcHBlZDtcbiAgICAgICAgaWYgKCFpc1NraXBwZWQpIHtcbiAgICAgICAgICAgIGNjLmxvZyhcInJld2FyZCB2aWRlbyBhZHMgc2hvdyBzdWNjZXNzXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2MubG9nKFwicmV3YXJkIHZpZGVvIGFkcyBza2lwcGVkXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuYWRMaXN0ZW5lciAmJiB0aGlzLmFkTGlzdGVuZXIub25SZXdhcmRlZFZpZGVvRmluaXNoZWQpIHtcbiAgICAgICAgICAgIHRoaXMuYWRMaXN0ZW5lci5vblJld2FyZGVkVmlkZW9GaW5pc2hlZCghaXNTa2lwcGVkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzU2tpcHBlZCkge1xuICAgICAgICAgICAgZ2FtZS5wbGF5ZXJNYW4uYWRkUmV3YXJkZWRBZENvdW50KCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgb25TaG93VmlkZW9BZEJlZ2luSnNiOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmFkTGlzdGVuZXIgJiYgdGhpcy5hZExpc3RlbmVyLm9uU2hvd1ZpZGVvQWRCZWdpbikge1xuICAgICAgICAgICAgdGhpcy5hZExpc3RlbmVyLm9uU2hvd1ZpZGVvQWRCZWdpbigpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIG9uU2hvd1ZpZGVvQWRFbmRKc2I6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuYWRMaXN0ZW5lciAmJiB0aGlzLmFkTGlzdGVuZXIub25TaG93VmlkZW9BZEVuZCkge1xuICAgICAgICAgICAgdGhpcy5hZExpc3RlbmVyLm9uU2hvd1ZpZGVvQWRFbmQoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVuYWJsZWRJbnRlcnN0aXRpYWwodHJ1ZSk7XG4gICAgICAgIHRoaXMubGFzdFJld2FyZGVkVGltZSA9IERhdGUubm93KCk7XG4gICAgfVxufSk7XG5cbkFkc01hbmFnZXIuc2hhcmVkRGlyZWN0b3IgPSBudWxsO1xuQWRzTWFuYWdlci5maXJzdFVzZURpcmVjdG9yID0gdHJ1ZTtcblxuQWRzTWFuYWdlci5nZXRJbnN0YW5jZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoQWRzTWFuYWdlci5maXJzdFVzZURpcmVjdG9yKSB7XG4gICAgICAgIEFkc01hbmFnZXIuZmlyc3RVc2VEaXJlY3RvciA9IGZhbHNlO1xuICAgICAgICBBZHNNYW5hZ2VyLnNoYXJlZERpcmVjdG9yID0gbmV3IEFkc01hbmFnZXIoKTtcbiAgICB9XG4gICAgcmV0dXJuIEFkc01hbmFnZXIuc2hhcmVkRGlyZWN0b3I7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFkc01hbmFnZXI7IiwiLyoqXG4gKiBDcmVhdGVkIGJ5IG95ZSBvbiAxNS01LTE3LlxuICovXG5cbnZhciBBbmFseXNlTWFuYWdlciA9IGNjLkNsYXNzLmV4dGVuZCh7XG4gICAgZ19wQW5hbHl0aWNzOiBudWxsLFxuICAgIGN0b3I6IGZ1bmN0aW9uICgpIHtcbiAgICB9LFxuXG4gICAgaW5pdEFuYWx5dGljczogZnVuY3Rpb24gKCkge1xuICAgIH0sXG5cbiAgICB0cmFja0xvZ2luRXZlbnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGNjLnN5cy5pc05hdGl2ZSkge1xuICAgICAgICAgICAganNiX2RwLm9uZVNka0JyaWRnZS50cmFja0xvZ2luKCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGFtb3VudE51bVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpdGVtVHlwZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpdGVtSWRcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcmVjZWlwdFxuICAgICAqL1xuICAgIHRyYWNrUHVyY2hhc2VFdmVudDogZnVuY3Rpb24gKGFtb3VudE51bSwgaXRlbVR5cGUsIGl0ZW1JZCwgcmVjZWlwdCkge1xuICAgICAgICBpZiAoY2Muc3lzLmlzTmF0aXZlKSB7XG4gICAgICAgICAgICBqc2JfZHAub25lU2RrQnJpZGdlLnRyYWNrUHVyY2hhc2UoYW1vdW50TnVtLCBpdGVtVHlwZSwgaXRlbUlkLCByZWNlaXB0KTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICB0cmFja1N0YXJ0UHJvZ3Jlc3Npb25FdmVudDogZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgIGlmIChjYy5zeXMuaXNOYXRpdmUpIHtcbiAgICAgICAgICAgIGpzYl9kcC5vbmVTZGtCcmlkZ2UudHJhY2tTdGFydFByb2dyZXNzaW9uKG5hbWUsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICB0cmFja0NvbXBsZXRlZFByb2dyZXNzaW9uRXZlbnQ6IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgICAgICBpZiAoY2Muc3lzLmlzTmF0aXZlKSB7XG4gICAgICAgICAgICBqc2JfZHAub25lU2RrQnJpZGdlLnRyYWNrQ29tcGxldGVkUHJvZ3Jlc3Npb24obmFtZSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHRyYWNrRmFpbGVkUHJvZ3Jlc3Npb25FdmVudDogZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgIGlmIChjYy5zeXMuaXNOYXRpdmUpIHtcbiAgICAgICAgICAgIGpzYl9kcC5vbmVTZGtCcmlkZ2UudHJhY2tGYWlsUHJvZ3Jlc3Npb24obmFtZSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHRyYWNrIGVycm9yIGV2ZW50XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGVycm9yTXNnXG4gICAgICovXG4gICAgdHJhY2tFcnJvckV2ZW50OiBmdW5jdGlvbiAoZXJyb3JNc2cpIHtcbiAgICAgICAgaWYgKGNjLnN5cy5pc05hdGl2ZSkge1xuICAgICAgICAgICAganNiX2RwLm9uZVNka0JyaWRnZS50cmFja0Vycm9yKGVycm9yTXNnKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICB0cmFja0V2ZW50OiBmdW5jdGlvbiAobmFtZSwgb2JqKSB7XG4gICAgICAgIGlmIChjYy5zeXMuaXNOYXRpdmUpIHtcbiAgICAgICAgICAgIHZhciBpbmZvID0gXCJcIjtcbiAgICAgICAgICAgIGlmIChvYmopIHtcbiAgICAgICAgICAgICAgICBpbmZvID0gSlNPTi5zdHJpbmdpZnkob2JqKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGpzYl9kcC5vbmVTZGtCcmlkZ2UudHJhY2tFdmVudChuYW1lLCBpbmZvKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBhZGRWaXJ0dWFsQ3VycmVuY3k6IGZ1bmN0aW9uIChyZWFzb24sIHZhbHVlKSB7XG4gICAgICAgIGlmIChjYy5zeXMuaXNOYXRpdmUpIHtcbiAgICAgICAgICAgIGpzYl9kcC5vbmVTZGtCcmlkZ2UuYWRkVmlydHVhbEN1cnJlbmN5KHJlYXNvbiwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIGNvbnN1bWVWaXJ0dWFsQ3VycmVuY3k6IGZ1bmN0aW9uIChpdGVtTmFtZSwgaXRlbUNvdW50LCB2aXJ1dGFsQ3VycmVuY3kpIHtcbiAgICAgICAgaWYgKGNjLnN5cy5pc05hdGl2ZSkge1xuICAgICAgICAgICAganNiX2RwLm9uZVNka0JyaWRnZS5jb25zdW1lVmlydHVhbEN1cnJlbmN5KGl0ZW1OYW1lLCBpdGVtQ291bnQsIHZpcnV0YWxDdXJyZW5jeSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgY29uc3VtZUl0ZW06IGZ1bmN0aW9uIChpdGVtTmFtZSwgaXRlbUNvdW50KSB7XG4gICAgICAgIGlmIChjYy5zeXMuaXNOYXRpdmUpIHtcbiAgICAgICAgICAgIGpzYl9kcC5vbmVTZGtCcmlkZ2UuY29uc3VtZUl0ZW0oaXRlbU5hbWUsIGl0ZW1Db3VudCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgdHJhY2tDaGFyZ2VSZXF1ZXN0OiBmdW5jdGlvbiAob3JkZXJJZCwgaWFwSWQsIGN1cnJlbmN5QW1vdW50LCBjdXJyZW5jeVR5cGUsIHZpcnR1YWxDdXJyZW5jeUFtb3VudCwgcGF5bWVudFR5cGUpIHtcbiAgICAgICAgaWYgKGNjLnN5cy5pc05hdGl2ZSkge1xuICAgICAgICAgICAganNiX2RwLm9uZVNka0JyaWRnZS50cmFja0NoYXJnZVJlcXVlc3Qob3JkZXJJZCwgaWFwSWQsIGN1cnJlbmN5QW1vdW50LCBjdXJyZW5jeVR5cGUsIHZpcnR1YWxDdXJyZW5jeUFtb3VudCwgcGF5bWVudFR5cGUpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHRyYWNrQ2hhcmdlU3VjY2VzczogZnVuY3Rpb24gKG9yZGVySWQpIHtcbiAgICAgICAgaWYgKGNjLnN5cy5pc05hdGl2ZSkge1xuICAgICAgICAgICAganNiX2RwLm9uZVNka0JyaWRnZS50cmFja0NoYXJnZVN1Y2Nlc3Mob3JkZXJJZCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgbWlzc2lvbkJlZ2FuOiBmdW5jdGlvbiAobWlzc2lvbklkKSB7XG4gICAgICAgIGlmIChjYy5zeXMuaXNOYXRpdmUpIHtcbiAgICAgICAgICAgIGpzYl9kcC5vbmVTZGtCcmlkZ2UubWlzc2lvbkJlZ2FuKG1pc3Npb25JZCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgbWlzc2lvbkNvbXBsZXRlZDogZnVuY3Rpb24gKG1pc3Npb25JZCkge1xuICAgICAgICBpZiAoY2Muc3lzLmlzTmF0aXZlKSB7XG4gICAgICAgICAgICBqc2JfZHAub25lU2RrQnJpZGdlLm1pc3Npb25Db21wbGV0ZWQobWlzc2lvbklkKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBtaXNzaW9uRmFpbGVkOiBmdW5jdGlvbiAobWlzc2lvbklkLCByZWFzb24pIHtcbiAgICAgICAgaWYgKGNjLnN5cy5pc05hdGl2ZSkge1xuICAgICAgICAgICAganNiX2RwLm9uZVNka0JyaWRnZS5taXNzaW9uRmFpbGVkKG1pc3Npb25JZCwgcmVhc29uKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICB0cmFja1BsYXllckxldmVsOiBmdW5jdGlvbiAobGV2ZWwpIHtcbiAgICAgICAgaWYgKGNjLnN5cy5pc05hdGl2ZSkge1xuICAgICAgICAgICAganNiX2RwLm9uZVNka0JyaWRnZS5zZXRQbGF5ZXJMZXZlbChsZXZlbCk7XG4gICAgICAgIH1cbiAgICB9XG59KTtcblxuQW5hbHlzZU1hbmFnZXIuc2hhcmVkRGlyZWN0b3IgPSBudWxsO1xuQW5hbHlzZU1hbmFnZXIuZmlyc3RVc2VEaXJlY3RvciA9IHRydWU7XG5cbkFuYWx5c2VNYW5hZ2VyLmdldEluc3RhbmNlID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChBbmFseXNlTWFuYWdlci5maXJzdFVzZURpcmVjdG9yKSB7XG4gICAgICAgIEFuYWx5c2VNYW5hZ2VyLmZpcnN0VXNlRGlyZWN0b3IgPSBmYWxzZTtcbiAgICAgICAgQW5hbHlzZU1hbmFnZXIuc2hhcmVkRGlyZWN0b3IgPSBuZXcgQW5hbHlzZU1hbmFnZXIoKTtcbiAgICB9XG4gICAgcmV0dXJuIEFuYWx5c2VNYW5hZ2VyLnNoYXJlZERpcmVjdG9yO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBBbmFseXNlTWFuYWdlcjsiLCIvKipcbiAqIENyZWF0ZWQgYnkgb3llIG9uIDE1LTUtMTcuXG4gKi9cbnZhciBDYXB0dXJlTGlzdGVuZXIgPSBjYy5DbGFzcy5leHRlbmQoe1xuICAgIG9uQ2FwdHVyZUF1ZGlvOiBmdW5jdGlvbiAoYXVkaW9EZWNpYmxlKSB7XG4gICAgfVxufSk7XG5cblxudmFyIENhcHR1cmVNYW5hZ2VyID0gY2MuQ2xhc3MuZXh0ZW5kKHtcblxuICAgIGN0b3I6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGNjLnN5cy5pc05hdGl2ZSkge1xuICAgICAgICAgICAganNiX2RwLm9uZVNka0JyaWRnZS5vbkNhcHR1cmVBdWRpbyA9IHRoaXMub25DYXB0dXJlQXVkaW8uYmluZCh0aGlzKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBzZXRDYXB0dXJlTGlzdGVuZXI6IGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLmxpc3RlbmVyID0gbGlzdGVuZXI7XG4gICAgfSxcblxuICAgIGNhcHR1cmVBdWRpbzogZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoY2Muc3lzLmlzTmF0aXZlKSB7XG4gICAgICAgICAgICBqc2JfZHAub25lU2RrQnJpZGdlLmNhcHR1cmVBdWRpbygpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIGdldEF1ZGlvRGVjaWJsZTogZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoY2Muc3lzLmlzTmF0aXZlKSB7XG4gICAgICAgICAgICByZXR1cm4ganNiX2RwLm9uZVNka0JyaWRnZS5nZXRBdWRpb0RlY2libGUoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMDtcbiAgICB9LFxuXG4gICAgb25DYXB0dXJlQXVkaW86IGZ1bmN0aW9uIChhdWRpb0RlY2libGVTdHJpbmcpIHtcbiAgICAgICAgdmFyIGF1ZGlvT2JqID0gSlNPTi5wYXJzZShhdWRpb0RlY2libGVTdHJpbmcpO1xuICAgICAgICB2YXIgYXVkaW9EZWNpYmxlID0gYXVkaW9PYmpbXCJhdWRpb0RlY2libGVcIl07XG4gICAgICAgIGlmICh0aGlzLmxpc3RlbmVyKSB7XG4gICAgICAgICAgICB0aGlzLmxpc3RlbmVyLm9uQ2FwdHVyZUF1ZGlvKGF1ZGlvRGVjaWJsZSk7XG4gICAgICAgIH1cbiAgICB9XG59KTtcblxuQ2FwdHVyZU1hbmFnZXIuc2hhcmVkRGlyZWN0b3IgPSBudWxsO1xuQ2FwdHVyZU1hbmFnZXIuZmlyc3RVc2VEaXJlY3RvciA9IHRydWU7XG5cbkNhcHR1cmVNYW5hZ2VyLmdldEluc3RhbmNlID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChDYXB0dXJlTWFuYWdlci5maXJzdFVzZURpcmVjdG9yKSB7XG4gICAgICAgIENhcHR1cmVNYW5hZ2VyLmZpcnN0VXNlRGlyZWN0b3IgPSBmYWxzZTtcbiAgICAgICAgQ2FwdHVyZU1hbmFnZXIuc2hhcmVkRGlyZWN0b3IgPSBuZXcgQ2FwdHVyZU1hbmFnZXIoKTtcbiAgICB9XG4gICAgcmV0dXJuIENhcHR1cmVNYW5hZ2VyLnNoYXJlZERpcmVjdG9yO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYXB0dXJlTWFuYWdlcjsiLCIvKipcbiAqIENyZWF0ZWQgYnkgcWlubmluZyBvbiAyMDE3LzgvMjkuXG4gKi9cblxudmFyIEh0dHBDbGllbnQgPSByZXF1aXJlKFwiLi4vLi4vY29tbW9uL25ldC9IdHRwQ2xpZW50XCIpO1xuXG52YXIgQ3Jvc3NQcm9tRGF0YSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnNjb3JlTGltaXQgPSAwO1xuICAgIHRoaXMuaW1hZ2VVcmwgPSBcIlwiO1xuICAgIHRoaXMuZG93bmxvYWRVcmwgPSBcIlwiO1xuICAgIHRoaXMud2VpZ2h0ID0gMDtcbiAgICB0aGlzLmFwcElkID0gXCJcIjtcbn07XG5cbnZhciBDcm9zc1Byb21NYW5hZ2VyID0gY2MuQ2xhc3MuZXh0ZW5kKHtcbiAgICBjYWNoZWRUZXh0dXJlOiBudWxsLFxuICAgIGNhY2hlZENvbmZpZzogbnVsbCxcbiAgICBjcm9zc1Byb21zOiBudWxsLFxuICAgIGN0b3I6IGZ1bmN0aW9uICgpIHtcbiAgICB9LFxuXG4gICAgdHJ5VG9Mb2FkRnJvbVJlbW90ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY3Jvc3NQcm9tVXJsID0gZ2FtZS5jb25maWcuZ2V0Q3Jvc3NQcm9tVXJsKCk7XG5cbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICBIdHRwQ2xpZW50LmRvR2V0KGNyb3NzUHJvbVVybCwgZnVuY3Rpb24gKGVycm9yLCB0ZXh0KSB7XG4gICAgICAgICAgICBpZiAoIWVycm9yKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY2MubG9nKFwiY3Jvc3MgcHJvbW90aW9uIHRyeVRvTG9hZEZyb21SZW1vdGUgZG93bmxvYWRlZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGEgPSBKU09OLnBhcnNlKHRleHQpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgb3BlbiA9IGRhdGEub3BlbiB8fCBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFvcGVuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIHNjb3JlTGltaXQgPSBkYXRhLnNjb3JlTGltaXQgfHwgMDtcbiAgICAgICAgICAgICAgICAgICAgLy9pZiAoIWNjLmlzVW5kZWZpbmVkKGdhbWUucGxheWVyTWFuLnBsYXllci5iZXN0U2NvcmUpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgIGlmIChnYW1lLnBsYXllck1hbi5wbGF5ZXIuYmVzdFNjb3JlIDwgc2NvcmVMaW1pdCkge1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgY2MubG9nKFwiY3Jvc3MgcHJvbW90aW9uIHRyeVRvTG9hZEZyb21SZW1vdGUgZ2FtZS5wbGF5ZXJNYW4ucGxheWVyLmJlc3RTY29yZTpcIiArIGdhbWUucGxheWVyTWFuLnBsYXllci5iZXN0U2NvcmUpO1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAvLyAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vfVxuICAgICAgICAgICAgICAgICAgICBpZiAoIWNjLmlzVW5kZWZpbmVkKGdhbWUucGxheWVyTWFuLnBsYXllci5sZXZlbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnYW1lLnBsYXllck1hbi5wbGF5ZXIubGV2ZWwgPCBzY29yZUxpbWl0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXhQb3BDb3VudCA9IGRhdGEubWF4UG9wQ291bnQgfHwgMztcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5kb3dubG9hZGVkU2hvdyA9IGRhdGEuZG93bmxvYWRlZFNob3cgfHwgZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuY3Jvc3NQcm9tcyA9IGRhdGFbXCJjcm9zc1Byb21zXCJdO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLm1heFBvcENvdW50ID0gbWF4UG9wQ291bnQ7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYudHJ5VG9Eb3dubG9hZFByb21vSW1nKCk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIHRyeVRvRG93bmxvYWRQcm9tb0ltZzogZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5tYXhQb3BDb3VudCA8PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuY2FjaGVkQ29uZmlnIHx8IHRoaXMuY2FjaGVkVGV4dHVyZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubWF4UG9wQ291bnQtLTtcbiAgICAgICAgY2MubG9nKFwiY3Jvc3MgcHJvbW90aW9uIHRyeVRvRG93bmxvYWRQcm9tb0ltZyBjaGVja1wiKTtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICBpZiAoIWNjLmlzVW5kZWZpbmVkKHRoaXMuY3Jvc3NQcm9tcykgJiYgY2MuaXNBcnJheSh0aGlzLmNyb3NzUHJvbXMpICYmIHRoaXMuY3Jvc3NQcm9tcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB2YXIgcmFuZG9tQ29uZmlnID0gdGhpcy5nZXRSYW5kb21Db25maWcodGhpcy5jcm9zc1Byb21zKTtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlQ3Jvc3NQcm9tb0NmZyhyYW5kb21Db25maWcpO1xuICAgICAgICAgICAgLy9nYW1lLnV0aWxzLmRvd25sb2FkXG4gICAgICAgICAgICBjYy5sb2coXCJjcm9zcyBwcm9tb3Rpb24gdHJ5VG9Eb3dubG9hZFByb21vSW1nIHN0YXJ0IGRvd25sb2FkXCIpO1xuICAgICAgICAgICAgZ2FtZS51dGlscy5sb2FkUmVtb3RlSW1nKHJhbmRvbUNvbmZpZy5pbWFnZVVybCwgZnVuY3Rpb24gKGVycm9yLCB0ZXgsIGV4dHJhKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFlcnJvciAmJiB0ZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgY2MubG9nKFwiY3Jvc3MgcHJvbW90aW9uIHRyeVRvRG93bmxvYWRQcm9tb0ltZyBkb3dubG9hZGVkOlwiICsgc2VsZi5kb3dubG9hZGVkU2hvdyk7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuY2FjaGVkVGV4dHVyZSA9IHRleDtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5jYWNoZWRUZXh0dXJlLnJldGFpbigpO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmNhY2hlZENvbmZpZyA9IHJhbmRvbUNvbmZpZztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGYuZG93bmxvYWRlZFNob3cpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZG93bmxvYWRlZFNob3cgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYudHJ5VG9Qb3B1cENyb3NzUHJvbURsZygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgbnVsbCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgcmVtb3ZlQ3Jvc3NQcm9tb0NmZzogZnVuY3Rpb24gKGNyb3NzUHJvbUNmZykge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuY3Jvc3NQcm9tcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuY3Jvc3NQcm9tc1tpXSA9PT0gY3Jvc3NQcm9tQ2ZnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jcm9zc1Byb21zLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cblxuICAgIGdldFJhbmRvbUNvbmZpZzogZnVuY3Rpb24gKGNyb3NzUHJvbXMpIHtcbiAgICAgICAgdmFyIHRvdGFsV2VpZ2h0ID0gMDtcbiAgICAgICAgdmFyIGk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBjcm9zc1Byb21zLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB0b3RhbFdlaWdodCArPSBjcm9zc1Byb21zW2ldLndlaWdodDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciByYW5kb21OdW0gPSBnYW1lLnV0aWxzLnJhbmRvbU5leHRJbnQodG90YWxXZWlnaHQpO1xuXG4gICAgICAgIHZhciBjdXJXZWlnaHQgPSAwO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY3Jvc3NQcm9tcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY3VyV2VpZ2h0ICs9IGNyb3NzUHJvbXNbaV0ud2VpZ2h0O1xuICAgICAgICAgICAgaWYgKGN1cldlaWdodCA+IHJhbmRvbU51bSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjcm9zc1Byb21zW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNyb3NzUHJvbXNbMF07XG4gICAgfSxcblxuICAgIHBvcHVwQ3Jvc3NQcm9tRGxnOiBmdW5jdGlvbiAoY3Jvc3NQcm9tc0NvbmZpZywgdGV4dHVyZSkge1xuICAgICAgICB2YXIgQ3Jvc3NQcm9tQ29udHJvbGxlciA9IHJlcXVpcmUoXCIuLi9jb250cm9sbGVyL0Nyb3NzUHJvbUNvbnRyb2xsZXJcIik7XG4gICAgICAgIHZhciBjcm9zc1Byb21Ob2RlID0gQ3Jvc3NQcm9tQ29udHJvbGxlci5jcmVhdGVGcm9tQ0NCKFwicmVzL2Nyb3NzL2Nyb3NzX3Byb21fdmlldy5jY2JpXCIpO1xuICAgICAgICBjcm9zc1Byb21Ob2RlLmNvbnRyb2xsZXIuaW5pdFdpdGgoY3Jvc3NQcm9tc0NvbmZpZywgdGV4dHVyZSk7XG4gICAgICAgIGNyb3NzUHJvbU5vZGUuY29udHJvbGxlci5wb3B1cCgpO1xuICAgIH0sXG5cbiAgICB0cnlUb1BvcHVwQ3Jvc3NQcm9tRGxnOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNjLmxvZyhcImNyb3NzIHByb21vdGlvbiB0cnlUb1BvcHVwQ3Jvc3NQcm9tRGxnIHN0YXJ0XCIpO1xuICAgICAgICBpZiAodGhpcy5jYWNoZWRDb25maWcgJiYgdGhpcy5jYWNoZWRUZXh0dXJlKSB7XG4gICAgICAgICAgICBjYy5sb2coXCJjcm9zcyBwcm9tb3Rpb24gdHJ5VG9Qb3B1cENyb3NzUHJvbURsZyBwb3BlZFwiKTtcbiAgICAgICAgICAgIHRoaXMucG9wdXBDcm9zc1Byb21EbGcodGhpcy5jYWNoZWRDb25maWcsIHRoaXMuY2FjaGVkVGV4dHVyZSk7XG4gICAgICAgICAgICB0aGlzLmNhY2hlZFRleHR1cmUucmVsZWFzZSgpO1xuICAgICAgICAgICAgdGhpcy5jYWNoZWRDb25maWcgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5jYWNoZWRUZXh0dXJlID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMudHJ5VG9Eb3dubG9hZFByb21vSW1nKCk7XG4gICAgICAgIH1cbiAgICB9XG59KTtcblxuQ3Jvc3NQcm9tTWFuYWdlci5zaGFyZWREaXJlY3RvciA9IG51bGw7XG5Dcm9zc1Byb21NYW5hZ2VyLmZpcnN0VXNlRGlyZWN0b3IgPSB0cnVlO1xuXG5Dcm9zc1Byb21NYW5hZ2VyLmdldEluc3RhbmNlID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChDcm9zc1Byb21NYW5hZ2VyLmZpcnN0VXNlRGlyZWN0b3IpIHtcbiAgICAgICAgQ3Jvc3NQcm9tTWFuYWdlci5maXJzdFVzZURpcmVjdG9yID0gZmFsc2U7XG4gICAgICAgIENyb3NzUHJvbU1hbmFnZXIuc2hhcmVkRGlyZWN0b3IgPSBuZXcgQ3Jvc3NQcm9tTWFuYWdlcigpO1xuICAgIH1cbiAgICByZXR1cm4gQ3Jvc3NQcm9tTWFuYWdlci5zaGFyZWREaXJlY3Rvcjtcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBDcm9zc1Byb21NYW5hZ2VyOyIsIi8qKlxuICogQ3JlYXRlZCBieSBveWUgb24gMTUtNS0xNy5cbiAqL1xudmFyIEdDTWFuYWdlciA9IGNjLkNsYXNzLmV4dGVuZCh7XG5cbiAgICBjdG9yOiBmdW5jdGlvbiAoKSB7XG4gICAgfSxcblxuICAgIGlzR2FtZUNlbnRlckF2YWlsYWJsZTogZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoY2Muc3lzLmlzTmF0aXZlKSB7XG4gICAgICAgICAgICByZXR1cm4ganNiX2RwLm9uZVNka0JyaWRnZS5pc0dhbWVDZW50ZXJBdmFpbGFibGUoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuICAgIHJlcG9ydFNjb3JlOiBmdW5jdGlvbiAoc2NvcmUsIGxlYWRlckJvYXJkS2V5KSB7XG4gICAgICAgIGlmIChjYy5zeXMuaXNOYXRpdmUpIHtcbiAgICAgICAgICAgIGpzYl9kcC5vbmVTZGtCcmlkZ2UucmVwb3J0U2NvcmUoc2NvcmUsIGxlYWRlckJvYXJkS2V5KTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBzaG93TGVhZGVyYm9hcmQ6IGZ1bmN0aW9uIChsZWFkZXJCb2FyZEtleSkge1xuICAgICAgICBpZiAoY2Muc3lzLmlzTmF0aXZlKSB7XG4gICAgICAgICAgICBqc2JfZHAub25lU2RrQnJpZGdlLnNob3dMZWFkZXJib2FyZChsZWFkZXJCb2FyZEtleSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgcmVwb3J0QWNoaWV2ZW1lbnQ6IGZ1bmN0aW9uIChwZXJjZW50Q29tcGxldGVkLCBhcmNoaWV2ZW1lbnRLZXkpIHtcbiAgICAgICAgaWYgKGNjLnN5cy5pc05hdGl2ZSkge1xuICAgICAgICAgICAganNiX2RwLm9uZVNka0JyaWRnZS5yZXBvcnRBY2hpZXZlbWVudChwZXJjZW50Q29tcGxldGVkLCBhcmNoaWV2ZW1lbnRLZXkpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHNob3dBY2hpZXZlbWVudHM6IGZ1bmN0aW9uIChsZWFkZXJCb2FyZGtleSkge1xuICAgICAgICBpZiAoY2Muc3lzLmlzTmF0aXZlKSB7XG4gICAgICAgICAgICBqc2JfZHAub25lU2RrQnJpZGdlLnNob3dBY2hpZXZlbWVudHMobGVhZGVyQm9hcmRrZXkpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIGhpZ2hTY29yZUZvckxlYWRlcmJvYXJkOiBmdW5jdGlvbiAobGVhZGVyQm9hcmRLZXkpIHtcbiAgICAgICAgaWYgKGNjLnN5cy5pc05hdGl2ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGpzYl9kcC5vbmVTZGtCcmlkZ2UuaGlnaFNjb3JlRm9yTGVhZGVyYm9hcmQobGVhZGVyQm9hcmRLZXkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwO1xuICAgIH0sXG5cbiAgICBwcm9ncmVzc0ZvckFjaGlldmVtZW50OiBmdW5jdGlvbiAoYXJjaGlldmVtZW50S2V5KSB7XG4gICAgICAgIGlmIChjYy5zeXMuaXNOYXRpdmUpIHtcbiAgICAgICAgICAgIHJldHVybiBqc2JfZHAub25lU2RrQnJpZGdlLnByb2dyZXNzRm9yQWNoaWV2ZW1lbnQoYXJjaGlldmVtZW50S2V5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG59KTtcblxuR0NNYW5hZ2VyLnNoYXJlZERpcmVjdG9yID0gbnVsbDtcbkdDTWFuYWdlci5maXJzdFVzZURpcmVjdG9yID0gdHJ1ZTtcblxuR0NNYW5hZ2VyLmdldEluc3RhbmNlID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChHQ01hbmFnZXIuZmlyc3RVc2VEaXJlY3Rvcikge1xuICAgICAgICBHQ01hbmFnZXIuZmlyc3RVc2VEaXJlY3RvciA9IGZhbHNlO1xuICAgICAgICBHQ01hbmFnZXIuc2hhcmVkRGlyZWN0b3IgPSBuZXcgR0NNYW5hZ2VyKCk7XG4gICAgfVxuICAgIHJldHVybiBHQ01hbmFnZXIuc2hhcmVkRGlyZWN0b3I7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEdDTWFuYWdlcjsiLCIvKipcbiAqIENyZWF0ZWQgYnkgcWlubmluZyBvbiAyMDE3LzMvMTEuXG4gKi9cblxudmFyIExvY2FsaXphdGlvbk1hbmFnZXIgPSBjYy5DbGFzcy5leHRlbmQoe1xuXG4gICAgX2lzTG9hZGVkOiBmYWxzZSxcbiAgICBjdXJMYW5ndWFnZTogbnVsbCxcbiAgICBjdG9yOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChjYy5zeXMubGFuZ3VhZ2UgPT09IGNjLnN5cy5MQU5HVUFHRV9BUkFCSUMgfHwgY2Muc3lzLmxhbmd1YWdlID09PSBjYy5zeXMuTEFOR1VBR0VfUlVTU0lBTikge1xuICAgICAgICAgICAgdmFyIHNlYXJjaFBhdGhBcnIgPSBqc2IuZmlsZVV0aWxzLmdldFNlYXJjaFBhdGhzKCk7XG4gICAgICAgICAgICBzZWFyY2hQYXRoQXJyLnVuc2hpZnQoXCJyZXMvcnVcIik7XG4gICAgICAgICAgICBjYy5sb2coXCJzZWFyY2ggcGF0aHM6XCIgKyBKU09OLnN0cmluZ2lmeShzZWFyY2hQYXRoQXJyKSk7XG4gICAgICAgICAgICBqc2IuZmlsZVV0aWxzLnNldFNlYXJjaFBhdGhzKHNlYXJjaFBhdGhBcnIpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHJlbG9hZDogZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5faXNMb2FkZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZ2FtZS51dGlscy5pc1NlbGZHYW1lKCkpIHtcbiAgICAgICAgICAgIHRoaXMuY3VyTGFuZ3VhZ2UgPSBnYW1lLnV0aWxzLmxvYWRKc29uKFwicmVzL2NvbmZpZy9sYW5ndWFnZXMvc3RyaW5ncy16aHMuanNvblwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBmaWxlTmFtZSA9IFwicmVzL2NvbmZpZy9sYW5ndWFnZXMvc3RyaW5ncy1cIiArIGNjLnN5cy5sYW5ndWFnZSArIFwiLmpzb25cIjtcbiAgICAgICAgICAgIGNjLmxvZyhcImxvY2FsIGZpbGU6XCIgKyBmaWxlTmFtZSk7XG4gICAgICAgICAgICBpZiAoZ2FtZS51dGlscy5pc0ZpbGVFeGlzdChmaWxlTmFtZSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmN1ckxhbmd1YWdlID0gZ2FtZS51dGlscy5sb2FkSnNvbihmaWxlTmFtZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuY3VyTGFuZ3VhZ2UgPSBnYW1lLnV0aWxzLmxvYWRKc29uKFwicmVzL2NvbmZpZy9sYW5ndWFnZXMvc3RyaW5ncy1lbi5qc29uXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2lzTG9hZGVkID0gdHJ1ZTtcbiAgICB9LFxuXG4gICAgZ2V0VmFsdWU6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5jdXJMYW5ndWFnZVtrZXldIHx8IGtleTtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0sXG5cbiAgICBpc0NoaW5lc2U6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGdhbWUudXRpbHMuaXNTZWxmR2FtZSgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufSk7XG5cbkxvY2FsaXphdGlvbk1hbmFnZXIuc2hhcmVkRGlyZWN0b3IgPSBudWxsO1xuTG9jYWxpemF0aW9uTWFuYWdlci5maXJzdFVzZURpcmVjdG9yID0gdHJ1ZTtcblxuTG9jYWxpemF0aW9uTWFuYWdlci5nZXRJbnN0YW5jZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoTG9jYWxpemF0aW9uTWFuYWdlci5maXJzdFVzZURpcmVjdG9yKSB7XG4gICAgICAgIExvY2FsaXphdGlvbk1hbmFnZXIuZmlyc3RVc2VEaXJlY3RvciA9IGZhbHNlO1xuICAgICAgICBMb2NhbGl6YXRpb25NYW5hZ2VyLnNoYXJlZERpcmVjdG9yID0gbmV3IExvY2FsaXphdGlvbk1hbmFnZXIoKTtcbiAgICB9XG4gICAgcmV0dXJuIExvY2FsaXphdGlvbk1hbmFnZXIuc2hhcmVkRGlyZWN0b3I7XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gTG9jYWxpemF0aW9uTWFuYWdlcjsiLCIvKipcbiAqIENyZWF0ZWQgYnkgb3llIG9uIDE1LTUtMTcuXG4gKi9cbnZhciBOb3RpZmljYXRpb25NYW5hZ2VyID0gY2MuQ2xhc3MuZXh0ZW5kKHtcblxuICAgIGN0b3I6IGZ1bmN0aW9uICgpIHtcbiAgICB9LFxuXG4gICAgcmVnaXN0ZXJOb3RpZmljYXRpb246IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGNjLnN5cy5pc05hdGl2ZSkge1xuICAgICAgICAgICAganNiX2RwLm9uZVNka0JyaWRnZS5yZWdpc3Rlck5vdGlmaWNhdGlvbigpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHRpbWVGcm9tTm93XG4gICAgICogQHBhcmFtIGFsZXJ0VGV4dFxuICAgICAqIEBwYXJhbSBhbGVydEFjdGlvblxuICAgICAqIEBwYXJhbSBiYWRnZU51bWJlclxuICAgICAqIEBwYXJhbSBzb3VuZFxuICAgICAqL1xuICAgIHNjaGVkdWxlTm90aWZpY2F0aW9uOiBmdW5jdGlvbiAodGltZUZyb21Ob3csIGFsZXJ0VGV4dCwgYWxlcnRBY3Rpb24sIGJhZGdlTnVtYmVyKSB7XG4gICAgICAgIGlmIChjYy5zeXMuaXNOYXRpdmUpIHtcbiAgICAgICAgICAgIGpzYl9kcC5vbmVTZGtCcmlkZ2Uuc2NoZWR1bGVOb3RpZmljYXRpb24odGltZUZyb21Ob3csIGFsZXJ0VGV4dCwgYWxlcnRBY3Rpb24sIGJhZGdlTnVtYmVyKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICB1bnNjaGVkdWxlTm90aWZpY2F0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChjYy5zeXMuaXNOYXRpdmUpIHtcbiAgICAgICAgICAgIGpzYl9kcC5vbmVTZGtCcmlkZ2UudW5zY2hlZHVsZU5vdGlmaWNhdGlvbigpO1xuICAgICAgICB9XG4gICAgfVxufSk7XG5cbk5vdGlmaWNhdGlvbk1hbmFnZXIuc2hhcmVkRGlyZWN0b3IgPSBudWxsO1xuTm90aWZpY2F0aW9uTWFuYWdlci5maXJzdFVzZURpcmVjdG9yID0gdHJ1ZTtcblxuTm90aWZpY2F0aW9uTWFuYWdlci5nZXRJbnN0YW5jZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoTm90aWZpY2F0aW9uTWFuYWdlci5maXJzdFVzZURpcmVjdG9yKSB7XG4gICAgICAgIE5vdGlmaWNhdGlvbk1hbmFnZXIuZmlyc3RVc2VEaXJlY3RvciA9IGZhbHNlO1xuICAgICAgICBOb3RpZmljYXRpb25NYW5hZ2VyLnNoYXJlZERpcmVjdG9yID0gbmV3IE5vdGlmaWNhdGlvbk1hbmFnZXIoKTtcbiAgICB9XG4gICAgcmV0dXJuIE5vdGlmaWNhdGlvbk1hbmFnZXIuc2hhcmVkRGlyZWN0b3I7XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gTm90aWZpY2F0aW9uTWFuYWdlcjsiLCIvKipcbiAqIENyZWF0ZWQgYnkgb3llIG9uIDE1LTUtMTcuXG4gKi9cbnZhciBSYXRlTWFuYWdlciA9IGNjLkNsYXNzLmV4dGVuZCh7XG5cbiAgICBjdG9yOiBmdW5jdGlvbiAoKSB7XG4gICAgfSxcblxuICAgIGluaXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGNjLnN5cy5pc05hdGl2ZSkge1xuICAgICAgICAgICAganNiX2RwLm9uZVNka0JyaWRnZS5pbml0UmF0ZVBhcmFtcygzLCAxLCAwLjUsIDAuNSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgcmF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoY2Muc3lzLmlzTmF0aXZlKSB7XG4gICAgICAgICAgICBqc2JfZHAub25lU2RrQnJpZGdlLmxhdW5jaFJhdGUoKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBsaWtlSW5GYWNlYm9vazogZnVuY3Rpb24gKHVybCkge1xuICAgICAgICBjYy5zeXMub3BlblVSTCh1cmwpO1xuICAgIH0sXG5cbiAgICBsYXVuY2hBcHBSZXZpZXc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGNjLnN5cy5pc05hdGl2ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGpzYl9kcC5vbmVTZGtCcmlkZ2UubGF1bmNoQXBwUmV2aWV3KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn0pO1xuXG5SYXRlTWFuYWdlci5zaGFyZWREaXJlY3RvciA9IG51bGw7XG5SYXRlTWFuYWdlci5maXJzdFVzZURpcmVjdG9yID0gdHJ1ZTtcblxuUmF0ZU1hbmFnZXIuZ2V0SW5zdGFuY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKFJhdGVNYW5hZ2VyLmZpcnN0VXNlRGlyZWN0b3IpIHtcbiAgICAgICAgUmF0ZU1hbmFnZXIuZmlyc3RVc2VEaXJlY3RvciA9IGZhbHNlO1xuICAgICAgICBSYXRlTWFuYWdlci5zaGFyZWREaXJlY3RvciA9IG5ldyBSYXRlTWFuYWdlcigpO1xuICAgIH1cbiAgICByZXR1cm4gUmF0ZU1hbmFnZXIuc2hhcmVkRGlyZWN0b3I7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJhdGVNYW5hZ2VyOyIsIi8qKlxuICogQ3JlYXRlZCBieSBveWUgb24gMTUtNS0xNy5cbiAqL1xudmFyIFJlbW90ZUNvbmZpZ01hbmFnZXIgPSBjYy5DbGFzcy5leHRlbmQoe1xuXG4gICAgcmVtb3RlUmVjZWl2ZWRDQjogbnVsbCxcbiAgICBjdG9yOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChjYy5zeXMuaXNOYXRpdmUpIHtcbiAgICAgICAgICAgIGpzYl9kcC5vbmVTZGtCcmlkZ2Uub25SZW1vdGVDb25maWdSZWNlaXZlZCA9IHRoaXMub25SZW1vdGVDb25maWdSZWNlaXZlZC5iaW5kKHRoaXMpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHNldFJlbW90ZUNvbmZpZ1JlY2VpdmVkQ2FsbGJhY2s6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICB0aGlzLnJlbW90ZVJlY2VpdmVkQ0IgPSBjYWxsYmFjaztcbiAgICB9LFxuXG4gICAgb25SZW1vdGVDb25maWdSZWNlaXZlZDogZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5yZW1vdGVSZWNlaXZlZENCKSB7XG4gICAgICAgICAgICB0aGlzLnJlbW90ZVJlY2VpdmVkQ0IoKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBzZXREZWZhdWx0UmVtb3RlQ29uZmlnOiBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICAgIGlmIChjYy5zeXMuaXNOYXRpdmUpIHtcbiAgICAgICAgICAgIGpzYl9kcC5vbmVTZGtCcmlkZ2Uuc2V0RGVmYXVsdFJlbW90ZUNvbmZpZyhKU09OLnN0cmluZ2lmeShwYXJhbXMpKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBmZXRjaFJlbW90ZUNvbmZpZzogZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoY2Muc3lzLmlzTmF0aXZlKSB7XG4gICAgICAgICAgICBqc2JfZHAub25lU2RrQnJpZGdlLmZldGNoUmVtb3RlQ29uZmlnKCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgZ2V0UmVtb3RlQ29uZmlnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmIChjYy5zeXMuaXNOYXRpdmUpIHtcbiAgICAgICAgICAgIHJldHVybiBqc2JfZHAub25lU2RrQnJpZGdlLmdldFJlbW90ZUNvbmZpZyhrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgIH0sXG5cbiAgICBhY3RpdmF0ZVJlbW90ZUZldGNoZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGNjLnN5cy5pc05hdGl2ZSkge1xuICAgICAgICAgICAganNiX2RwLm9uZVNka0JyaWRnZS5hY3RpdmF0ZVJlbW90ZUZldGNoZWQoKTtcbiAgICAgICAgfVxuICAgIH1cblxufSk7XG5cblJlbW90ZUNvbmZpZ01hbmFnZXIuc2hhcmVkRGlyZWN0b3IgPSBudWxsO1xuUmVtb3RlQ29uZmlnTWFuYWdlci5maXJzdFVzZURpcmVjdG9yID0gdHJ1ZTtcblxuUmVtb3RlQ29uZmlnTWFuYWdlci5nZXRJbnN0YW5jZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoUmVtb3RlQ29uZmlnTWFuYWdlci5maXJzdFVzZURpcmVjdG9yKSB7XG4gICAgICAgIFJlbW90ZUNvbmZpZ01hbmFnZXIuZmlyc3RVc2VEaXJlY3RvciA9IGZhbHNlO1xuICAgICAgICBSZW1vdGVDb25maWdNYW5hZ2VyLnNoYXJlZERpcmVjdG9yID0gbmV3IFJlbW90ZUNvbmZpZ01hbmFnZXIoKTtcbiAgICB9XG4gICAgcmV0dXJuIFJlbW90ZUNvbmZpZ01hbmFnZXIuc2hhcmVkRGlyZWN0b3I7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlbW90ZUNvbmZpZ01hbmFnZXI7IiwiLyoqXG4gKiBDcmVhdGVkIGJ5IG95ZSBvbiAxNS01LTE3LlxuICovXG5cbnZhciBTaGFyZU1hbmFnZXIgPSBjYy5DbGFzcy5leHRlbmQoe1xuICAgIGN0b3I6IGZ1bmN0aW9uICgpIHtcbiAgICB9LFxuXG4gICAgc2hhcmVXaXRoU3lzdGVtOiBmdW5jdGlvbiAodGlwcykge1xuICAgICAgICBpZiAoY2Muc3lzLmlzTmF0aXZlKSB7XG4gICAgICAgICAgICB2YXIgZmlsZU5hbWUgPSBcIlwiO1xuICAgICAgICAgICAgLy9pZiAoY2Muc3lzLm9zID09PSBjYy5zeXMuT1NfSU9TKSB7XG4gICAgICAgICAgICAvLyAgICBmaWxlTmFtZSA9IGdhbWUudXRpbHMuZ2V0U2NyZWVuU2hvdChcImNhcHR1cmVfc2NyZWVuLmpwZ1wiKTtcbiAgICAgICAgICAgIC8vfVxuICAgICAgICAgICAganNiX2RwLm9uZVNka0JyaWRnZS5zeXN0ZW1TaGFyZShmaWxlTmFtZSwgdGlwcyk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgb3BlbkFwcFdpdGhJZGVudGlmaWVyOiBmdW5jdGlvbiAoYXBwSWQpIHtcbiAgICAgICAgaWYgKGNjLnN5cy5pc05hdGl2ZSkge1xuICAgICAgICAgICAganNiX2RwLm9uZVNka0JyaWRnZS5vcGVuQXBwV2l0aElkZW50aWZpZXIoYXBwSWQpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHNlbmRFbWFpbDogZnVuY3Rpb24gKGFkZHJlc3MsIHRpdGxlLCBib2R5KSB7XG4gICAgICAgIGlmIChjYy5zeXMuaXNOYXRpdmUpIHtcbiAgICAgICAgICAgIGpzYl9kcC5vbmVTZGtCcmlkZ2Uuc2VuZEVtYWlsKGFkZHJlc3MsIHRpdGxlLCBib2R5KTtcbiAgICAgICAgfVxuICAgIH1cbn0pO1xuXG5TaGFyZU1hbmFnZXIuc2hhcmVkRGlyZWN0b3IgPSBudWxsO1xuU2hhcmVNYW5hZ2VyLmZpcnN0VXNlRGlyZWN0b3IgPSB0cnVlO1xuXG5TaGFyZU1hbmFnZXIuZ2V0SW5zdGFuY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKFNoYXJlTWFuYWdlci5maXJzdFVzZURpcmVjdG9yKSB7XG4gICAgICAgIFNoYXJlTWFuYWdlci5maXJzdFVzZURpcmVjdG9yID0gZmFsc2U7XG4gICAgICAgIFNoYXJlTWFuYWdlci5zaGFyZWREaXJlY3RvciA9IG5ldyBTaGFyZU1hbmFnZXIoKTtcbiAgICB9XG4gICAgcmV0dXJuIFNoYXJlTWFuYWdlci5zaGFyZWREaXJlY3Rvcjtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU2hhcmVNYW5hZ2VyOyIsIi8qKlxuICogQ3JlYXRlZCBieSBveWUgb24gMTUtNS0xNy5cbiAqL1xudmFyIFBheW1lbnRJbmZvID0gcmVxdWlyZShcIi4uL2VudGl0eS9QYXltZW50SW5mb1wiKTtcbnZhciBQYXltZW50Q29kZSA9IHJlcXVpcmUoXCIuLi9lbnVtL1BheW1lbnRDb2RlXCIpO1xudmFyIFByb2R1Y3RJbmZvID0gcmVxdWlyZShcIi4uL2VudGl0eS9Qcm9kdWN0SW5mb1wiKTtcblxudmFyIFBheW1lbnREZWxlZ2F0ZSA9IGNjLkNsYXNzLmV4dGVuZCh7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtQYXltZW50Q29kZX0gZXJyb3JcbiAgICAgKiBAcGFyYW0ge1BheW1lbnRJbmZvfSBwYXltZW50SW5mb1xuICAgICAqL1xuICAgIG9uUGF5bWVudENvbXBsZXRlZDogZnVuY3Rpb24gKGVycm9yLCBwYXltZW50SW5mbykge1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0FycmF5LjxQYXltZW50SW5mbz59IHBheW1lbnRJbmZvTGlzdFxuICAgICAqL1xuICAgIG9uR2V0VW52ZXJpZmllZFJlY2VpcHRMaXN0OiBmdW5jdGlvbiAocGF5bWVudEluZm9MaXN0KSB7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIG9uIGdldCBwcm9kdWN0IGxpc3QuXG4gICAgICogQHBhcmFtIHtBcnJheS48UHJvZHVjdEluZm8+fSBwcm9kdWN0TGlzdFxuICAgICAqL1xuICAgIG9uR2V0UHJvZHVjdExpc3Q6IGZ1bmN0aW9uIChwcm9kdWN0TGlzdCkge1xuICAgIH1cbn0pO1xuXG52YXIgU3RvcmVNYW5hZ2VyID0gY2MuQ2xhc3MuZXh0ZW5kKHtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7UGF5bWVudERlbGVnYXRlfVxuICAgICAqL1xuICAgIHBheW1lbnREZWxlZ2F0ZTogbnVsbCxcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7QXJyYXkuPFBheW1lbnRJbmZvPn0gcGF5bWVudEluZm9MaXN0XG4gICAgICovXG4gICAgcHJvZHVjdExpc3Q6IG51bGwsXG5cbiAgICBjdG9yOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChjYy5zeXMuaXNOYXRpdmUpIHtcbiAgICAgICAgICAgIGpzYl9kcC5vbmVTZGtCcmlkZ2Uub25HZXRQcm9kdWN0TGlzdCA9IHRoaXMub25HZXRQcm9kdWN0TGlzdC5iaW5kKHRoaXMpO1xuICAgICAgICAgICAganNiX2RwLm9uZVNka0JyaWRnZS5vblB1cmNoYXNlID0gdGhpcy5vblB1cmNoYXNlLmJpbmQodGhpcyk7XG4gICAgICAgICAgICBqc2JfZHAub25lU2RrQnJpZGdlLm9uQ29uc3VtZSA9IHRoaXMub25Db25zdW1lLmJpbmQodGhpcyk7XG4gICAgICAgICAgICBqc2JfZHAub25lU2RrQnJpZGdlLm9uR2V0VW52ZXJpZmllZFJlY2VpcHRMaXN0ID0gdGhpcy5vbkdldFVudmVyaWZpZWRSZWNlaXB0TGlzdC5iaW5kKHRoaXMpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHNldCBwYXltZW50IGRlbGVnYXRlLlxuICAgICAqIEBwYXJhbSB7UGF5bWVudERlbGVnYXRlfSBwYXltZW50RGVsZWdhdGVcbiAgICAgKi9cbiAgICBzZXRQYXltZW50RGVsZWdhdGU6IGZ1bmN0aW9uIChwYXltZW50RGVsZWdhdGUpIHtcbiAgICAgICAgdGhpcy5wYXltZW50RGVsZWdhdGUgPSBwYXltZW50RGVsZWdhdGU7XG4gICAgfSxcblxuICAgIG9uR2V0UHJvZHVjdExpc3Q6IGZ1bmN0aW9uIChqc29uUmVzdWx0KSB7XG4gICAgICAgIGNjLmxvZyhcIm9uR2V0UHJvZHVjdExpc3Q6IFwiICsganNvblJlc3VsdCk7XG4gICAgICAgIGlmIChqc29uUmVzdWx0KSB7XG4gICAgICAgICAgICB2YXIgcHJvZHVjdHMgPSBKU09OLnBhcnNlKGpzb25SZXN1bHQpO1xuICAgICAgICAgICAgaWYgKHByb2R1Y3RzICYmIHByb2R1Y3RzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB2YXIgcHJvZHVjdExpc3QgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb2R1Y3RzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwcm9kdWN0SW5mbyA9IG5ldyBQcm9kdWN0SW5mbygpO1xuICAgICAgICAgICAgICAgICAgICBwcm9kdWN0SW5mby51bm1hcnNoYWwocHJvZHVjdHNbaV0pO1xuICAgICAgICAgICAgICAgICAgICBwcm9kdWN0TGlzdC5wdXNoKHByb2R1Y3RJbmZvKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5wYXltZW50RGVsZWdhdGUgJiYgdGhpcy5wYXltZW50RGVsZWdhdGUub25HZXRQcm9kdWN0TGlzdChwcm9kdWN0TGlzdCk7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9kdWN0TGlzdCA9IHByb2R1Y3RMaXN0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIG9uUHVyY2hhc2U6IGZ1bmN0aW9uIChqc29uUmVzdWx0KSB7XG4gICAgICAgIGNjLmxvZyhcIm9uUHVyY2hhc2U6IFwiICsganNvblJlc3VsdCk7XG4gICAgICAgIHZhciBwdXJjaGFzZVJlc3VsdCA9IEpTT04ucGFyc2UoanNvblJlc3VsdCk7XG4gICAgICAgIHZhciBwdXJjaGFzZURhdGE7XG4gICAgICAgIGlmIChwdXJjaGFzZVJlc3VsdC5lcnJvckNvZGUgPT09IFBheW1lbnRDb2RlLlBBWU1FTlRfQ09ERV9TVUNDRVNTKSB7XG4gICAgICAgICAgICBwdXJjaGFzZURhdGEgPSBKU09OLnBhcnNlKGpzb25SZXN1bHQpO1xuICAgICAgICAgICAgdGhpcy5fcGF5bWVudENvbXBsZXRlZChQYXltZW50Q29kZS5QQVlNRU5UX0NPREVfU1VDQ0VTUywgcHVyY2hhc2VEYXRhKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHB1cmNoYXNlRGF0YSA9IEpTT04ucGFyc2UoanNvblJlc3VsdCk7XG4gICAgICAgICAgICB0aGlzLl9wYXltZW50Q29tcGxldGVkKFBheW1lbnRDb2RlLlBBWU1FTlRfQ09ERV9GQUlMLCBwdXJjaGFzZURhdGEpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIG9uQ29uc3VtZTogZnVuY3Rpb24gKGpzb25JbmZvKSB7XG4gICAgICAgIGNjLmxvZyhcIm9uQ29uc3VtZTogXCIgKyBqc29uSW5mbyk7XG4gICAgfSxcblxuICAgIG9uR2V0VW52ZXJpZmllZFJlY2VpcHRMaXN0OiBmdW5jdGlvbiAocHVyY2hhc2VMaXN0U3RyaW5nKSB7XG4gICAgICAgIGNjLmxvZyhcIm9uR2V0VW52ZXJpZmllZFJlY2VpcHRMaXN0OiBcIiArIHB1cmNoYXNlTGlzdFN0cmluZyk7XG4gICAgICAgIGlmIChwdXJjaGFzZUxpc3RTdHJpbmcgJiYgcHVyY2hhc2VMaXN0U3RyaW5nLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHZhciBwdXJjaGFzZUpzb25MaXN0ID0gSlNPTi5wYXJzZShwdXJjaGFzZUxpc3RTdHJpbmcpO1xuICAgICAgICAgICAgaWYgKHB1cmNoYXNlSnNvbkxpc3QgJiYgcHVyY2hhc2VKc29uTGlzdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgdmFyIHB1cmNoYXNlSW5mb0xpc3QgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHB1cmNoYXNlSnNvbkxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBheW1lbnRNc2cgPSBwdXJjaGFzZUpzb25MaXN0W2ldO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGF5bWVudEluZm8gPSBuZXcgUGF5bWVudEluZm8oKTtcbiAgICAgICAgICAgICAgICAgICAgcGF5bWVudEluZm8udW5tYXJzaGFsKHBheW1lbnRNc2cpO1xuICAgICAgICAgICAgICAgICAgICBwdXJjaGFzZUluZm9MaXN0LnB1c2gocGF5bWVudEluZm8pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnBheW1lbnREZWxlZ2F0ZSAmJiB0aGlzLnBheW1lbnREZWxlZ2F0ZS5vbkdldFVudmVyaWZpZWRSZWNlaXB0TGlzdChwdXJjaGFzZUluZm9MaXN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfSxcblxuICAgIF9wYXltZW50Q29tcGxldGVkOiBmdW5jdGlvbiAoZXJyb3IsIHBheW1lbnRNc2cpIHtcbiAgICAgICAgdmFyIHBheW1lbnRJbmZvID0gbmV3IFBheW1lbnRJbmZvKCk7XG4gICAgICAgIHBheW1lbnRJbmZvLnVubWFyc2hhbChwYXltZW50TXNnKTtcbiAgICAgICAgaWYgKGVycm9yID09PSBQYXltZW50Q29kZS5QQVlNRU5UX0NPREVfU1VDQ0VTUykge1xuICAgICAgICAgICAgaWYgKHBheW1lbnRNc2cpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBheW1lbnREZWxlZ2F0ZSAmJiB0aGlzLnBheW1lbnREZWxlZ2F0ZS5vblBheW1lbnRDb21wbGV0ZWQoUGF5bWVudENvZGUuUEFZTUVOVF9DT0RFX1NVQ0NFU1MsIHBheW1lbnRJbmZvKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wYXltZW50RGVsZWdhdGUgJiYgdGhpcy5wYXltZW50RGVsZWdhdGUub25QYXltZW50Q29tcGxldGVkKFBheW1lbnRDb2RlLlBBWU1FTlRfQ09ERV9GQUlMLCBwYXltZW50SW5mbyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnBheW1lbnREZWxlZ2F0ZSAmJiB0aGlzLnBheW1lbnREZWxlZ2F0ZS5vblBheW1lbnRDb21wbGV0ZWQoUGF5bWVudENvZGUuUEFZTUVOVF9DT0RFX0ZBSUwsIHBheW1lbnRJbmZvKTtcbiAgICAgICAgfVxuICAgICAgICAvL2lmIChjYy5zeXMub3MgIT09IGNjLnN5cy5PU19BTkRST0lEKSB7XG4gICAgICAgIC8vICAgIHRoaXMuY29uc3VtZShwYXltZW50SW5mby5wdXJjaGFzZUlkKTtcbiAgICAgICAgLy99XG4gICAgfSxcblxuICAgIF9nZXROdW1Gcm9tU3RyaW5nOiBmdW5jdGlvbiAodGV4dCkge1xuICAgICAgICByZXR1cm4gdGV4dC5yZXBsYWNlKC9bXjAtOS5dL2lnLCBcIlwiKTtcbiAgICB9LFxuXG4gICAgcmVxdWVzdFByb2R1Y3Q6IGZ1bmN0aW9uIChwcm9kdWN0SWRzKSB7XG4gICAgICAgIGlmIChjYy5zeXMuaXNOYXRpdmUpIHtcbiAgICAgICAgICAgIGpzYl9kcC5vbmVTZGtCcmlkZ2UuZ2V0UHJvZHVjdHNJbmZvKHByb2R1Y3RJZHMpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHBheUZvclByb2R1Y3Q6IGZ1bmN0aW9uIChwcm9kdWN0SWQpIHtcbiAgICAgICAgY2MubG9nKFwicGF5Rm9yUHJvZHVjdDpcIiArIHByb2R1Y3RJZCk7XG4gICAgICAgIGlmIChjYy5zeXMuaXNOYXRpdmUpIHtcbiAgICAgICAgICAgIGpzYl9kcC5vbmVTZGtCcmlkZ2UucHVyY2hhc2UocHJvZHVjdElkKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBjb25zdW1lOiBmdW5jdGlvbiAodHJhbnNhY3Rpb25JZCkge1xuICAgICAgICBjYy5sb2coXCJjb25zdW1lOlwiICsgdHJhbnNhY3Rpb25JZCk7XG4gICAgICAgIGlmIChjYy5zeXMuaXNOYXRpdmUpIHtcbiAgICAgICAgICAgIGlmICh0cmFuc2FjdGlvbklkICYmIHRyYW5zYWN0aW9uSWQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGpzYl9kcC5vbmVTZGtCcmlkZ2UuY29uc3VtZSh0cmFuc2FjdGlvbklkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICByZXN0b3JlQ29tcGxldGVkVHJhbnNhY3Rpb25zOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNjLmxvZyhcInJlc3RvcmVDb21wbGV0ZWRUcmFuc2FjdGlvbnNcIik7XG4gICAgICAgIGlmIChjYy5zeXMuaXNOYXRpdmUpIHtcbiAgICAgICAgICAgIGpzYl9kcC5vbmVTZGtCcmlkZ2UucmVzdG9yZVRyYW5zYWN0aW9ucygpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIGdldFVudmVyaWZpZWRSZWNlaXB0TGlzdDogZnVuY3Rpb24gKCkge1xuICAgICAgICBjYy5sb2coXCJnZXRVbnZlcmlmaWVkUmVjZWlwdExpc3RcIik7XG4gICAgICAgIGlmIChjYy5zeXMuaXNOYXRpdmUpIHtcbiAgICAgICAgICAgIGpzYl9kcC5vbmVTZGtCcmlkZ2UuZ2V0VW52ZXJpZmllZFJlY2VpcHRMaXN0KCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgX2dldFByb2R1Y3RCeUlkOiBmdW5jdGlvbiAocHJvZHVjdElkKSB7XG4gICAgICAgIGlmICh0aGlzLnByb2R1Y3RMaXN0ICYmIHRoaXMucHJvZHVjdExpc3QubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnByb2R1Y3RMaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHByb2R1Y3QgPSB0aGlzLnByb2R1Y3RMaXN0W2ldO1xuICAgICAgICAgICAgICAgIGlmIChwcm9kdWN0LnByb2R1Y3RJZCA9PT0gcHJvZHVjdElkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm9kdWN0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59KTtcblxuU3RvcmVNYW5hZ2VyLnNoYXJlZERpcmVjdG9yID0gbnVsbDtcblN0b3JlTWFuYWdlci5maXJzdFVzZURpcmVjdG9yID0gdHJ1ZTtcblxuU3RvcmVNYW5hZ2VyLmdldEluc3RhbmNlID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChTdG9yZU1hbmFnZXIuZmlyc3RVc2VEaXJlY3Rvcikge1xuICAgICAgICBTdG9yZU1hbmFnZXIuZmlyc3RVc2VEaXJlY3RvciA9IGZhbHNlO1xuICAgICAgICBTdG9yZU1hbmFnZXIuc2hhcmVkRGlyZWN0b3IgPSBuZXcgU3RvcmVNYW5hZ2VyKCk7XG4gICAgfVxuICAgIHJldHVybiBTdG9yZU1hbmFnZXIuc2hhcmVkRGlyZWN0b3I7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN0b3JlTWFuYWdlcjsiLCJ2YXIgRWZmZWN0TWFuID0gY2MuQ2xhc3MuZXh0ZW5kKHtcbiAgICBjdG9yOiBmdW5jdGlvbiAoKSB7XG4gICAgfSxcblxuICAgIHBsYXlGbHlDb2luczogZnVuY3Rpb24gKHN0YXJ0V29ybGQsIGVuZFdvcmxkLCBjb2luTnVtLCBzdGFydENhbGxiYWNrLCBlbmRDYWxsYmFjaykge1xuICAgICAgICB2YXIgcGFyZW50Tm9kZSA9IGNjLmRpcmVjdG9yLmdldFJ1bm5pbmdTY2VuZSgpO1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIGNvaW5OdW0gPSAxMDtcbiAgICAgICAgLy9jYy5sb2FkZXIubG9hZFJlcyhcInByZWZhYnMvY29pbnNfYW5pbVwiLCBmdW5jdGlvbiAoZXJyLCBwcmVmYWIpIHtcbiAgICAgICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgICAgIHdoaWxlIChpIDwgY29pbk51bSkge1xuICAgICAgICAgICAgICAgIHZhciBmdW5jID0gZnVuY3Rpb24gKG5vZGUsIGlzU3RhcnQsIGlzRW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2IgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzU3RhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYiA9IHN0YXJ0Q2FsbGJhY2s7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzRW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2IgPSBlbmRDYWxsYmFjaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2hvd0ZseUFuaW0oc3RhcnRXb3JsZCwgZW5kV29ybGQsIG5vZGUsIHBhcmVudE5vZGUsIGNiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdmFyIG5ld05vZGUgPSBuZXcgY2MuU3ByaXRlKFwiI2ljb25fZGlhbW9uZF9lZmZlY3QucG5nXCIpO1xuICAgICAgICAgICAgICAgIG5ld05vZGUuc2NhbGUgPSAwLjg7XG4gICAgICAgICAgICAgICAgbmV3Tm9kZS5yZXRhaW4oKTtcbiAgICAgICAgICAgICAgICB2YXIgaXNTdGFydCA9IChpID09PSAwKTtcbiAgICAgICAgICAgICAgICB2YXIgaXNFbmQgPSAoaSA9PT0gY29pbk51bSAtIDEpO1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuYyhuZXdOb2RlLCBpc1N0YXJ0LCBpc0VuZCksIDEwMCAqIGkpO1xuICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgLy99KTtcbiAgICB9LFxuXG4gICAgc2hvd0ZseUFuaW06IGZ1bmN0aW9uIChzdGFyV29ybGQsIGVuZFdvcmxkLCBhbmltTm9kZSwgcGFyZW50Tm9kZSwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIHN0YXJ0ID0gc3RhcldvcmxkO1xuICAgICAgICB2YXIgZW5kID0gZW5kV29ybGQ7XG4gICAgICAgIHZhciBzcGVlZCA9IDUwMDtcbiAgICAgICAgdmFyIGxlbmd0aCA9IE1hdGguc3FydCgoc3RhcnQueCAtIGVuZC54KSAqIChzdGFydC54IC0gZW5kLngpICsgKHN0YXJ0LnkgLSBlbmQueSkgKiAoc3RhcnQueSAtIGVuZC55KSk7XG4gICAgICAgIHZhciBkZWxheSA9IGxlbmd0aCAvIHNwZWVkO1xuICAgICAgICBwYXJlbnROb2RlLmFkZENoaWxkKGFuaW1Ob2RlLCAxMDAwKTtcbiAgICAgICAgYW5pbU5vZGUucmVsZWFzZSgpO1xuICAgICAgICBhbmltTm9kZS5zZXRQb3NpdGlvbihzdGFydCk7XG4gICAgICAgIHZhciBjb250cm9sUG9pbnRzID0gW1xuICAgICAgICAgICAgc3RhcnQsXG4gICAgICAgICAgICB0aGlzLmdldFBlcnBlbmRpY3VsYXJQb2ludChzdGFydCwgZW5kLCA1MCwgMC41KSxcbiAgICAgICAgICAgIGVuZFxuICAgICAgICBdO1xuICAgICAgICBhbmltTm9kZS5ydW5BY3Rpb24oY2Muc2VxdWVuY2UoY2MuYmV6aWVyVG8oZGVsYXksIGNvbnRyb2xQb2ludHMpLCBjYy5jYWxsRnVuYyhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCB0aGlzKSwgY2MucmVtb3ZlU2VsZigpKSk7XG4gICAgfSxcblxuICAgIGdldFBlcnBlbmRpY3VsYXJQb2ludDogZnVuY3Rpb24oZnJvbSwgdG8sIGRpcywgZmFjdG9yKSB7XG4gICAgICAgIHZhciB2ZWMgPSB7eDogZnJvbS54IC0gdG8ueCwgeTogZnJvbS55IC0gdG8ueX07XG4gICAgICAgIHZhciBwZXJwZW5kaWN1bGFyVmVjID0ge3g6IHZlYy55LCB5OiAtdmVjLnh9O1xuICAgICAgICB2YXIgY2VudGVyUG9pbnQgPSB0aGlzLmxlcnBQb3NpdGlvbihmcm9tLCB0bywgZmFjdG9yKTtcbiAgICAgICAgdmFyIHBlcnBlbmRpY3VsYXJWZWNMZW4gPSBNYXRoLnNxcnQocGVycGVuZGljdWxhclZlYy54ICogcGVycGVuZGljdWxhclZlYy54ICsgcGVycGVuZGljdWxhclZlYy55ICogcGVycGVuZGljdWxhclZlYy55KTtcbiAgICAgICAgdmFyIHBlcnBlbmRpY3VsYXJWZWNOb3JhbWwgPSB7XG4gICAgICAgICAgICB4OiBwZXJwZW5kaWN1bGFyVmVjLnggLyBwZXJwZW5kaWN1bGFyVmVjTGVuLFxuICAgICAgICAgICAgeTogcGVycGVuZGljdWxhclZlYy55IC8gcGVycGVuZGljdWxhclZlY0xlblxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gbmV3IGNjLnAoY2VudGVyUG9pbnQueCArIHBlcnBlbmRpY3VsYXJWZWNOb3JhbWwueCAqIGRpcyxcbiAgICAgICAgICAgIGNlbnRlclBvaW50LnkgKyBNYXRoLmFicyhwZXJwZW5kaWN1bGFyVmVjTm9yYW1sLnkgKiBkaXMpKTtcbiAgICB9LFxuXG4gICAgbGVycFBvc2l0aW9uOiBmdW5jdGlvbihwb3MwLHBvczEsc3RlcCl7XG4gICAgICAgIHJldHVybiB7eDoocG9zMS54IC0gcG9zMC54KSpzdGVwICsgcG9zMC54LCB5Oihwb3MxLnkgLSBwb3MwLnkpKnN0ZXAgKyBwb3MwLnl9O1xuICAgIH1cbn0pO1xuXG5FZmZlY3RNYW4uX2luc3RhbmNlID0gbnVsbDtcblxuLyoqXG4gKiBAcmV0dXJucyB7RWZmZWN0TWFufVxuICovXG5FZmZlY3RNYW4uZ2V0SW5zdGFuY2UgPSBmdW5jdGlvbigpIHtcbiAgICBpZighRWZmZWN0TWFuLl9pbnN0YW5jZSkge1xuICAgICAgICBFZmZlY3RNYW4uX2luc3RhbmNlID0gbmV3IEVmZmVjdE1hbigpO1xuICAgIH1cbiAgICByZXR1cm4gRWZmZWN0TWFuLl9pbnN0YW5jZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBFZmZlY3RNYW47IiwidmFyIERBWV9JTl9TRUNPTkRTID0gMjQgKiA2MCAqIDYwO1xuXG52YXIgTk9USUZJQ0FUSU9OX0RBWVMgPSBbMSwgMywgNywgMTUsIDMwXTtcbnZhciBBZHNQbGFjZSA9IHJlcXVpcmUoXCIuLi9lbnVtL0Fkc1BsYWNlXCIpO1xuXG52YXIgTG9naWNNYW4gPSBjYy5DbGFzcy5leHRlbmQoe1xuICAgIF9pc1JlZ2lzdGVyR2FtZUV2ZW50TGlzdGVuZXI6IGZhbHNlLFxuICAgIF9zdGFydDogZmFsc2UsXG4gICAgY3RvcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChjYy5zeXMuaXNOYXRpdmUpIHtcbiAgICAgICAgICAgIGpzYl9kcC5vbmVTZGtCcmlkZ2UgPSBqc2JfZHAuT25lU0RLSlNCcmlkZ2UuZ2V0SW5zdGFuY2UoKTtcbiAgICAgICAgICAgIGlmIChqc2JfZHAuTG9naWNKU0JyaWRnZSAmJiBqc2JfZHAuTG9naWNKU0JyaWRnZS5nZXRJbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgIGpzYl9kcC5sb2dpY0JyaWRnZSA9IGpzYl9kcC5Mb2dpY0pTQnJpZGdlLmdldEluc3RhbmNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgRXZlbnREaXNwYXRjaGVyID0gcmVxdWlyZShcIi4uL2V2ZW50cy9FdmVudERpc3BhdGNoZXJcIik7XG4gICAgICAgIHZhciBOb3RpZmljYXRpb25NYW5hZ2VyID0gcmVxdWlyZShcIi4uL21hbmFnZXIvTm90aWZpY2F0aW9uTWFuYWdlclwiKTtcbiAgICAgICAgdmFyIEFuYWx5c2VNYW5hZ2VyID0gcmVxdWlyZShcIi4uL21hbmFnZXIvQW5hbHlzZU1hbmFnZXJcIik7XG4gICAgICAgIHZhciBTdG9yZU1hbmFnZXIgPSByZXF1aXJlKFwiLi4vbWFuYWdlci9TdG9yZU1hbmFnZXJcIik7XG4gICAgICAgIHZhciBHQ01hbmFnZXIgPSByZXF1aXJlKFwiLi4vbWFuYWdlci9HQ01hbmFnZXJcIik7XG4gICAgICAgIHZhciBSYXRlTWFuYWdlciA9IHJlcXVpcmUoXCIuLi9tYW5hZ2VyL1JhdGVNYW5hZ2VyXCIpO1xuICAgICAgICB2YXIgUGxheWVyTWFuID0gcmVxdWlyZShcIi4uL21vZGVsL1BsYXllck1hblwiKTtcbiAgICAgICAgdmFyIFN0b3JhZ2VDb250cm9sbGVyID0gcmVxdWlyZShcIi4uL3N0b3JhZ2UvU3RvcmFnZUNvbnRyb2xsZXJcIik7XG4gICAgICAgIHZhciBBZHNNYW5hZ2VyID0gcmVxdWlyZShcIi4uL21hbmFnZXIvQWRzTWFuYWdlclwiKTtcbiAgICAgICAgdmFyIEF1ZGlvUGxheWVyID0gcmVxdWlyZShcIi4uL2F1ZGlvL0F1ZGlvUGxheWVyXCIpO1xuICAgICAgICB2YXIgVXRpbHMgPSByZXF1aXJlKFwiLi4vdXRpbC9VdGlsc1wiKTtcbiAgICAgICAgdmFyIFNoYXJlTWFuYWdlciA9IHJlcXVpcmUoXCIuLi9tYW5hZ2VyL1NoYXJlTWFuYWdlclwiKTtcbiAgICAgICAgdmFyIERpYWxvZ01hbmFnZXIgPSByZXF1aXJlKFwiLi4vcG9wdXAvRGlhbG9nTWFuYWdlclwiKTtcbiAgICAgICAgdmFyIEFzc2V0c01hbmFnZXIgPSByZXF1aXJlKFwiLi4vYXNzZXRzL0Fzc2V0c01hbmFnZXJcIik7XG5cbiAgICAgICAgdmFyIEJhc2VDQ0JDb250cm9sbGVyID0gcmVxdWlyZShcIi4uL2NvbnRyb2xsZXIvQmFzZUNDQkNvbnRyb2xsZXJcIik7XG4gICAgICAgIHZhciBBdWRpb0hlbHBlciA9IHJlcXVpcmUoXCIuLi91dGlsL0F1ZGlvSGVscGVyXCIpO1xuICAgICAgICB2YXIgQ2FwdHVyZU1hbmFnZXIgPSByZXF1aXJlKFwiLi4vbWFuYWdlci9DYXB0dXJlTWFuYWdlclwiKTtcbiAgICAgICAgdmFyIExvY2FsaXphdGlvbk1hbmFnZXIgPSByZXF1aXJlKFwiLi4vbWFuYWdlci9Mb2NhbGl6YXRpb25NYW5hZ2VyXCIpO1xuICAgICAgICB2YXIgQ3Jvc3NQcm9tTWFuYWdlciA9IHJlcXVpcmUoXCIuLi9tYW5hZ2VyL0Nyb3NzUHJvbU1hbmFnZXJcIik7XG4gICAgICAgIHZhciBFZmZlY3RNYW4gPSByZXF1aXJlKFwiLi4vbW9kZWwvRWZmZWN0TWFuXCIpO1xuICAgICAgICAvL3ZhciBBQlRlc3QgPSByZXF1aXJlKFwiLi4vQUJUZXN0L0FCVGVzdFwiKTtcbiAgICAgICAgdmFyIFJlbW90ZUNvbmZpZ01hbmFnZXIgPSByZXF1aXJlKFwiLi4vbWFuYWdlci9SZW1vdGVDb25maWdNYW5hZ2VyXCIpO1xuXG4gICAgICAgIHdpbmRvdy5nYW1lID0ge307XG4gICAgICAgIHdpbmRvdy5nYW1lLnV0aWxzID0gVXRpbHM7XG4gICAgICAgIHdpbmRvdy5nYW1lLmV2ZW50RGlzcGF0Y2hlciA9IEV2ZW50RGlzcGF0Y2hlci5nZXRJbnN0YW5jZSgpO1xuICAgICAgICB3aW5kb3cuZ2FtZS5sb2dpY01hbiA9IHRoaXM7XG4gICAgICAgIHdpbmRvdy5nYW1lLm5vdGlmaWNhdGlvbk1hbmFnZXIgPSBOb3RpZmljYXRpb25NYW5hZ2VyLmdldEluc3RhbmNlKCk7XG4gICAgICAgIHdpbmRvdy5nYW1lLmFuYWx5c2VNYW5hZ2VyID0gQW5hbHlzZU1hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcbiAgICAgICAgd2luZG93LmdhbWUuc3RvcmVNYW5hZ2VyID0gU3RvcmVNYW5hZ2VyLmdldEluc3RhbmNlKCk7XG4gICAgICAgIHdpbmRvdy5nYW1lLmdjTWFuYWdlciA9IEdDTWFuYWdlci5nZXRJbnN0YW5jZSgpO1xuICAgICAgICB3aW5kb3cuZ2FtZS5yYXRlTWFuYWdlciA9IFJhdGVNYW5hZ2VyLmdldEluc3RhbmNlKCk7XG4gICAgICAgIHdpbmRvdy5nYW1lLnBsYXllck1hbiA9IFBsYXllck1hbi5nZXRJbnN0YW5jZSgpO1xuICAgICAgICB3aW5kb3cuZ2FtZS5zdG9yYWdlQ29udHJvbGxlciA9IFN0b3JhZ2VDb250cm9sbGVyLmdldEluc3RhbmNlKCk7XG4gICAgICAgIHdpbmRvdy5nYW1lLmFkc01hbmFnZXIgPSBBZHNNYW5hZ2VyLmdldEluc3RhbmNlKCk7XG4gICAgICAgIHdpbmRvdy5nYW1lLmF1ZGlvUGxheWVyID0gQXVkaW9QbGF5ZXIuZ2V0SW5zdGFuY2UoKTtcbiAgICAgICAgd2luZG93LmdhbWUuc2hhcmVNYW5hZ2VyID0gU2hhcmVNYW5hZ2VyLmdldEluc3RhbmNlKCk7XG4gICAgICAgIHdpbmRvdy5nYW1lLmRpYWxvZ01hbmFnZXIgPSBEaWFsb2dNYW5hZ2VyLmdldEluc3RhbmNlKCk7XG4gICAgICAgIHdpbmRvdy5nYW1lLmFzc2V0c01hbmFnZXIgPSBBc3NldHNNYW5hZ2VyLmdldEluc3RhbmNlKCk7XG4gICAgICAgIHdpbmRvdy5nYW1lLmNhcHR1cmVNYW5hZ2VyID0gQ2FwdHVyZU1hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcbiAgICAgICAgd2luZG93LmdhbWUubG9jYWwgPSBMb2NhbGl6YXRpb25NYW5hZ2VyLmdldEluc3RhbmNlKCk7XG4gICAgICAgIHdpbmRvdy5nYW1lLmVmZmVjdE1hbiA9IEVmZmVjdE1hbi5nZXRJbnN0YW5jZSgpO1xuICAgICAgICAvL3dpbmRvdy5nYW1lLmFidGVzdCA9IEFCVGVzdDtcbiAgICAgICAgd2luZG93LmdhbWUucmVtb3RlQ29uZmlnID0gUmVtb3RlQ29uZmlnTWFuYWdlci5nZXRJbnN0YW5jZSgpO1xuXG4gICAgICAgIHdpbmRvdy5CYXNlQ0NCQ29udHJvbGxlciA9IEJhc2VDQ0JDb250cm9sbGVyO1xuICAgICAgICB3aW5kb3cuQXVkaW9IZWxwZXIgPSBBdWRpb0hlbHBlcjtcblxuICAgICAgICB2YXIgR2FtZUJyaWRnZSA9IHJlcXVpcmUoXCIuLi9icmlkZ2UvR2FtZUJyaWRnZVwiKTtcbiAgICAgICAgd2luZG93LkdhbWVCcmlkZ2UgPSBHYW1lQnJpZGdlO1xuICAgICAgICB3aW5kb3cuZ2FtZS5jb25maWcgPSBHYW1lQnJpZGdlLmdldENvbmZpZygpO1xuICAgICAgICB3aW5kb3cuZ2FtZS5wb3B1cE1hbiA9IEdhbWVCcmlkZ2UuZ2V0UG9wdXBNYW4oKTtcbiAgICAgICAgd2luZG93LmdhbWUuZ2FtZU1hbiA9IEdhbWVCcmlkZ2UuZ2V0R2FtZU1hbigpO1xuXG4gICAgICAgIHdpbmRvdy5nYW1lLmNyb3NzUHJvbU1hbiA9IENyb3NzUHJvbU1hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcblxuICAgICAgICBfID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgcmV0dXJuIGdhbWUubG9jYWwuZ2V0VmFsdWUoa2V5KTtcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgaW5pdDogZnVuY3Rpb24gKCkge1xuICAgIH0sXG5cbiAgICByZWdpc3RlckdhbWVFdmVudExpc3RlbmVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYoIXRoaXMuX2lzUmVnaXN0ZXJHYW1lRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICAgICAgdGhpcy5faXNSZWdpc3RlckdhbWVFdmVudExpc3RlbmVyID0gdHJ1ZTtcbiAgICAgICAgICAgIGdhbWUuZXZlbnREaXNwYXRjaGVyLmFkZEN1c3RvbUV2ZW50TGlzdGVuZXIoY2MuZ2FtZS5FVkVOVF9TSE9XLCB0aGlzLmdhbWVPblNob3csIHRoaXMpO1xuICAgICAgICAgICAgZ2FtZS5ldmVudERpc3BhdGNoZXIuYWRkQ3VzdG9tRXZlbnRMaXN0ZW5lcihjYy5nYW1lLkVWRU5UX0hJREUsIHRoaXMuZ2FtZU9uSGlkZSwgdGhpcyk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgcHVyZ2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICBnYW1lLmV2ZW50RGlzcGF0Y2hlci5yZW1vdmVDdXN0b21FdmVudExpc3RlbmVyKGNjLmdhbWUuRVZFTlRfU0hPVywgdGhpcy5nYW1lT25TaG93LCB0aGlzKTtcbiAgICAgICAgZ2FtZS5ldmVudERpc3BhdGNoZXIucmVtb3ZlQ3VzdG9tRXZlbnRMaXN0ZW5lcihjYy5nYW1lLkVWRU5UX0hJREUsIHRoaXMuZ2FtZU9uSGlkZSwgdGhpcyk7XG4gICAgfSxcblxuICAgIGdhbWVPblNob3c6IGZ1bmN0aW9uKCkge1xuICAgICAgICBnYW1lLm5vdGlmaWNhdGlvbk1hbmFnZXIudW5zY2hlZHVsZU5vdGlmaWNhdGlvbigpO1xuXG4gICAgICAgIGdhbWUuYWRzTWFuYWdlci5vbkdhbWVPblNob3coKTtcblxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChnYW1lLnBsYXllck1hbi5nZXRMZXZlbCgpID49IDQpIHtcbiAgICAgICAgICAgICAgICBnYW1lLmFkc01hbmFnZXIuc2hvd0ludGVyc3RpdGlhbChBZHNQbGFjZS5CYWNrR3JvdW5kKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfS5iaW5kKHRoaXMpLCAxMDApO1xuICAgIH0sXG5cbiAgICBnYW1lT25IaWRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKGNjLnN5cy5pc05hdGl2ZSkge1xuICAgICAgICAgICAgdGhpcy5zY2hlZHVsZUxvY2FsTm90aWZpY2F0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgICAgZ2FtZS5hZHNNYW5hZ2VyLnNldEludGVyc3RpdGlhbFNob3dlZChBZHNQbGFjZS5CYWNrR3JvdW5kKTtcbiAgICAgICAgdGhpcy5sYXN0SGlkZVRpbWUgPSBEYXRlLm5vdygpO1xuICAgIH0sXG5cbiAgICByZWdpc3Rlck5vdGlmaWNhdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgICBnYW1lLm5vdGlmaWNhdGlvbk1hbmFnZXIucmVnaXN0ZXJOb3RpZmljYXRpb24oKTtcbiAgICB9LFxuXG4gICAgc3RhcnRHYW1lOiBmdW5jdGlvbiAobm90SW5pdFBsYXllcikge1xuICAgICAgICBpZiAodGhpcy5fc3RhcnQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zdGFydCA9IHRydWU7XG4gICAgICAgIGdhbWUubm90aWZpY2F0aW9uTWFuYWdlci51bnNjaGVkdWxlTm90aWZpY2F0aW9uKCk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJHYW1lRXZlbnRMaXN0ZW5lcigpO1xuXG4gICAgICAgIGlmICghbm90SW5pdFBsYXllcikge1xuICAgICAgICAgICAgZ2FtZS5wbGF5ZXJNYW4uaW5pdERhdGEoKTtcbiAgICAgICAgfVxuICAgICAgICBnYW1lLmFkc01hbmFnZXIuaW5pdCgpO1xuICAgICAgICBnYW1lLmFkc01hbmFnZXIubG9hZFJlbW90ZURhdGEoKTtcbiAgICAgICAgZ2FtZS5hbmFseXNlTWFuYWdlci5pbml0QW5hbHl0aWNzKCk7XG4gICAgICAgIGdhbWUuZ2NNYW5hZ2VyLmlzR2FtZUNlbnRlckF2YWlsYWJsZSgpO1xuICAgICAgICBnYW1lLnJhdGVNYW5hZ2VyLmluaXQoMywgMSwgMC41LCAwLjUsIHRydWUpO1xuICAgICAgICBnYW1lLmFuYWx5c2VNYW5hZ2VyLnRyYWNrTG9naW5FdmVudCgpO1xuICAgICAgICBnYW1lLmNyb3NzUHJvbU1hbi50cnlUb0xvYWRGcm9tUmVtb3RlKCk7XG4gICAgICAgIGdhbWUuYWRzTWFuYWdlci5zZXRJc05ld1BsYXllcihnYW1lLnBsYXllck1hbi5pc05ld1BsYXllcigpKTtcbiAgICB9LFxuXG4gICAgc2NoZWR1bGVMb2NhbE5vdGlmaWNhdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIWNjLnN5cy5pc05hdGl2ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cblxuICAgICAgICB2YXIgbGVmdFRpbWVTZWNvbmRzID0gTWF0aC5mbG9vcihnYW1lLmdhbWVNYW4uZ2V0V2hlZWxMZWZ0VGltZSgpIC8gMTAwMCk7XG4gICAgICAgIGlmIChsZWZ0VGltZVNlY29uZHMgPCAzMCAqIDYwKSB7XG4gICAgICAgICAgICBsZWZ0VGltZVNlY29uZHMgPSAzMCAqIDYwO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpbmRleCA9IDE7XG4gICAgICAgIC8vd2hlZWwgbm90aWZpY2F0aW9uLlxuICAgICAgICBnYW1lLm5vdGlmaWNhdGlvbk1hbmFnZXIuc2NoZWR1bGVOb3RpZmljYXRpb24obGVmdFRpbWVTZWNvbmRzLFxuICAgICAgICAgICAgXyhcIndoZWVsX2lzX3JlYWR5XCIpLCBnYW1lLmxvY2FsLmdldFZhbHVlKFwiYXBwX25hbWVcIiksIGluZGV4KyspO1xuXG4gICAgICAgIC8vZGFpbHkgYm9udXMgbm90aWZpY2F0aW9uLlxuICAgICAgICB2YXIgbGFzdENsYWltRGF5ID0gZ2FtZS5wbGF5ZXJNYW4ucGxheWVyLmxhc3RDbGFpbURhaWx5Qm9udXNEYXk7XG4gICAgICAgIHZhciBjdXJyZW50RGF5Q2xhaW1lZCA9IChsYXN0Q2xhaW1EYXkgPj0gZ2FtZS51dGlscy5nZXREYXlCeVRzKERhdGUubm93KCkpKTtcbiAgICAgICAgdmFyIGRhaWx5Qm9udXNTZWNvbmRzID0gMDtcbiAgICAgICAgaWYgKGN1cnJlbnREYXlDbGFpbWVkKSB7XG4gICAgICAgICAgICB2YXIgbmV4dERheVRpbWUgPSAoZ2FtZS51dGlscy5nZXREYXlCeVRzKERhdGUubm93KCkpICsgMSkgKiAoMjQgKiAzNjAwICogMTAwMCk7XG4gICAgICAgICAgICBkYWlseUJvbnVzU2Vjb25kcyA9IChuZXh0RGF5VGltZSAtIERhdGUubm93KCkpIC8gMTAwMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGFpbHlCb251c1NlY29uZHMgPD0gNjAgKiA2MCkge1xuICAgICAgICAgICAgZGFpbHlCb251c1NlY29uZHMgPSA2MCAqIDYwO1xuICAgICAgICB9XG4gICAgICAgIGdhbWUubm90aWZpY2F0aW9uTWFuYWdlci5zY2hlZHVsZU5vdGlmaWNhdGlvbihkYWlseUJvbnVzU2Vjb25kcyxcbiAgICAgICAgICAgIF8oXCJkYWlseV9ib251c19pc19yZWFkeVwiKSwgZ2FtZS5sb2NhbC5nZXRWYWx1ZShcImFwcF9uYW1lXCIpLCBpbmRleCsrKTtcblxuICAgICAgICB2YXIgbWF4VGltZSA9IE1hdGgubWF4KGxlZnRUaW1lU2Vjb25kcywgZGFpbHlCb251c1NlY29uZHMpO1xuXG4gICAgICAgIC8vbm9ybWFsIG5vdGlmaWNhdGlvbi5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOT1RJRklDQVRJT05fREFZUy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgZ2FtZS5ub3RpZmljYXRpb25NYW5hZ2VyLnNjaGVkdWxlTm90aWZpY2F0aW9uKG1heFRpbWUgKyBEQVlfSU5fU0VDT05EUyAqIE5PVElGSUNBVElPTl9EQVlTW2ldLFxuICAgICAgICAgICAgICAgIGdhbWUubG9jYWwuZ2V0VmFsdWUoZ2FtZS51dGlscy5zcHJpbnRmKFwibm90aV90aXBzJWRcIiwgaSArIDEpKSwgZ2FtZS5sb2NhbC5nZXRWYWx1ZShcImFwcF9uYW1lXCIpLCBpbmRleCsrKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICByc3luY1VzZXJEYXRhRnJvbUdDOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vdmFyIGhpZ2hMZXZlbCA9IGdhbWUuZ2NNYW5hZ2VyLmhpZ2hTY29yZUZvckxlYWRlcmJvYXJkKGdhbWUuY29uZmlnLmdldExlYWRlckJvYXJkS2V5KCkpO1xuICAgICAgICAvL2lmIChoaWdoTGV2ZWwgPiBnYW1lLnBsYXllck1hbi5nZXRMZXZlbCgpKSB7XG4gICAgICAgIC8vICAgIGdhbWUucGxheWVyTWFuLnNldExldmVsKGhpZ2hMZXZlbCk7XG4gICAgICAgIC8vfVxuICAgIH1cbn0pO1xuXG5Mb2dpY01hbi5faW5zdGFuY2UgPSBudWxsO1xuTG9naWNNYW4uX2ZpcnN0VXNlSW5zdGFuY2UgPSB0cnVlO1xuXG4vKipcbiAqXG4gKiBAcmV0dXJucyB7TG9naWNNYW59XG4gKi9cbkxvZ2ljTWFuLmdldEluc3RhbmNlID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChMb2dpY01hbi5fZmlyc3RVc2VJbnN0YW5jZSkge1xuICAgICAgICBMb2dpY01hbi5fZmlyc3RVc2VJbnN0YW5jZSA9IGZhbHNlO1xuICAgICAgICBMb2dpY01hbi5faW5zdGFuY2UgPSBuZXcgTG9naWNNYW4oKTtcbiAgICB9XG4gICAgcmV0dXJuIExvZ2ljTWFuLl9pbnN0YW5jZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTG9naWNNYW47IiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHFpbm5pbmcgb24gMTUvNS8xMi5cbiAqL1xudmFyIFBsYXllckluZm8gPSByZXF1aXJlKFwiLi4vZW50aXR5L1BsYXllckluZm9cIik7XG5cbnZhciBQTEFZRVJfS0VZID0gXCJwbGF5ZXJfa2V5XCI7XG5cbnZhciBQbGF5ZXJNYW4gPSBjYy5DbGFzcy5leHRlbmQoe1xuICAgIHBsYXllcjogbnVsbCxcbiAgICBiZXN0U2NvcmVLZXk6IG51bGwsXG4gICAgbGV2ZWxCb2FyZEtleTogbnVsbCxcbiAgICBjdG9yOiBmdW5jdGlvbiAoKSB7XG4gICAgfSxcblxuICAgIGluaXREYXRhOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBwbGF5ZXJJbmZvU3RyID0gZ2FtZS5zdG9yYWdlQ29udHJvbGxlci5nZXRJdGVtKFBMQVlFUl9LRVksIG51bGwpO1xuICAgICAgICB2YXIgcGxheWVyO1xuICAgICAgICBpZiAocGxheWVySW5mb1N0ciA9PSBudWxsIHx8IHBsYXllckluZm9TdHIgPT0gXCJcIikge1xuICAgICAgICAgICAgcGxheWVyID0gUGxheWVySW5mby5jcmVhdGVEZWZhdWx0KCk7XG4gICAgICAgICAgICBnYW1lLnN0b3JhZ2VDb250cm9sbGVyLnNldEl0ZW0oUExBWUVSX0tFWSwgSlNPTi5zdHJpbmdpZnkocGxheWVyKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwbGF5ZXIgPSBuZXcgUGxheWVySW5mbygpO1xuICAgICAgICAgICAgcGxheWVyLnVubWFyc2hhbGwoSlNPTi5wYXJzZShwbGF5ZXJJbmZvU3RyKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wbGF5ZXIgPSBwbGF5ZXI7XG4gICAgfSxcblxuICAgIGdldEJlc3RTY29yZTogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wbGF5ZXIuYmVzdFNjb3JlO1xuICAgIH0sXG5cbiAgICBnZXRMZXZlbDogZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoY2MuaXNVbmRlZmluZWQodGhpcy5wbGF5ZXIubGV2ZWwpKSB7XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBsYXllci5sZXZlbDtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBzZXRMZXZlbDogZnVuY3Rpb24gKGxldmVsKSB7XG4gICAgICAgIHRoaXMucGxheWVyLmxldmVsID0gbGV2ZWw7XG4gICAgICAgIHRoaXMuX2ZsdXNoVG9TdG9yYWdlKCk7XG4gICAgfSxcblxuICAgIHVwZGF0ZUxldmVsU3RhcjogZnVuY3Rpb24gKGxldmVsLCBsZXZlbFN0YXIpIHtcbiAgICAgICAgaWYgKGNjLmlzVW5kZWZpbmVkKHRoaXMucGxheWVyLmxldmVsTWFwW2xldmVsXSkgfHwgdGhpcy5wbGF5ZXIubGV2ZWxNYXBbbGV2ZWxdIDwgbGV2ZWxTdGFyKSB7XG4gICAgICAgICAgICB0aGlzLnBsYXllci5sZXZlbE1hcFtsZXZlbF0gPSBsZXZlbFN0YXI7XG4gICAgICAgICAgICBnYW1lLmdjTWFuYWdlci5yZXBvcnRTY29yZShsZXZlbCwgdGhpcy5nZXRMZXZlbEJvYXJkS2V5KCkpO1xuICAgICAgICAgICAgdGhpcy5fZmx1c2hUb1N0b3JhZ2UoKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBnZXRMZXZlbFN0YXI6IGZ1bmN0aW9uIChsZXZlbCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wbGF5ZXIubGV2ZWxNYXBbbGV2ZWxdIHx8IDA7XG4gICAgfSxcblxuICAgIGFkZExldmVsOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGdhbWUuZ2NNYW5hZ2VyLnJlcG9ydFNjb3JlKHRoaXMucGxheWVyLmxldmVsLCB0aGlzLmdldExldmVsQm9hcmRLZXkoKSk7XG4gICAgICAgIHRoaXMucGxheWVyLmxldmVsKys7XG4gICAgICAgIHRoaXMucGxheWVyLnByb2dyZXNzID0gMDtcbiAgICAgICAgdGhpcy5fZmx1c2hUb1N0b3JhZ2UoKTtcbiAgICB9LFxuXG4gICAgdXBkYXRlQmVzdFNjb3JlOiBmdW5jdGlvbiAobmV3QmVzdFNjb3JlKSB7XG4gICAgICAgIGlmIChuZXdCZXN0U2NvcmUgPiB0aGlzLnBsYXllci5iZXN0U2NvcmUpIHtcbiAgICAgICAgICAgIHRoaXMucGxheWVyLmJlc3RTY29yZSA9IG5ld0Jlc3RTY29yZTtcbiAgICAgICAgICAgIGdhbWUuZ2NNYW5hZ2VyLnJlcG9ydFNjb3JlKG5ld0Jlc3RTY29yZSwgdGhpcy5nZXRCZXN0U2NvcmVCb2FyZEtleSgpKTtcbiAgICAgICAgICAgIHRoaXMuX2ZsdXNoVG9TdG9yYWdlKCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuICAgIGdldExldmVsQm9hcmRLZXk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGV2ZWxCb2FyZEtleSB8fCBnYW1lLmNvbmZpZy5nZXRMZWFkZXJCb2FyZEtleSgpO1xuICAgIH0sXG5cbiAgICBnZXRCZXN0U2NvcmVCb2FyZEtleTogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5iZXN0U2NvcmVLZXkgfHwgZ2FtZS5jb25maWcuZ2V0TGVhZGVyQm9hcmRLZXkoKTtcbiAgICB9LFxuXG4gICAgc2V0TGV2ZWxCb2FyZEtleTogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB0aGlzLmxldmVsQm9hcmRLZXkgPSBrZXk7XG4gICAgfSxcblxuICAgIHNldEJlc3RTY29yZUJvYXJkS2V5OiBmdW5jdGlvbiAoYmVzdFNjb3JlS2V5KSB7XG4gICAgICAgIHRoaXMuYmVzdFNjb3JlS2V5ID0gYmVzdFNjb3JlS2V5O1xuICAgIH0sXG5cbiAgICB1cGRhdGVQcm9ncmVzczogZnVuY3Rpb24gKHByb2dyZXNzKSB7XG4gICAgICAgIGlmICh0aGlzLnBsYXllci5wcm9ncmVzcyA8IHByb2dyZXNzKSB7XG4gICAgICAgICAgICB0aGlzLnBsYXllci5wcm9ncmVzcyA9IHByb2dyZXNzO1xuICAgICAgICAgICAgdGhpcy5fZmx1c2hUb1N0b3JhZ2UoKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICByZW1vdmVkQWRzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMucGxheWVyLnJlbW92ZWRBZHMgPSB0cnVlO1xuICAgICAgICBnYW1lLmFkc01hbmFnZXIucmVtb3ZlQmFubmVyQWRzKCk7XG4gICAgICAgIHRoaXMuX2ZsdXNoVG9TdG9yYWdlKCk7XG4gICAgfSxcblxuICAgIHNldFJhdGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMucGxheWVyLnJhdGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fZmx1c2hUb1N0b3JhZ2UoKTtcbiAgICB9LFxuXG4gICAgX2ZsdXNoVG9TdG9yYWdlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGdhbWUuc3RvcmFnZUNvbnRyb2xsZXIuc2V0SXRlbShQTEFZRVJfS0VZLCBKU09OLnN0cmluZ2lmeSh0aGlzLnBsYXllcikpO1xuICAgIH1cbn0pO1xuXG5QbGF5ZXJNYW4uX2luc3RhbmNlID0gbnVsbDtcblBsYXllck1hbi5fZmlyc3RVc2VJbnN0YW5jZSA9IHRydWU7XG5cbi8qKlxuICpcbiAqIEByZXR1cm5zIHtQbGF5ZXJNYW59XG4gKi9cblBsYXllck1hbi5nZXRJbnN0YW5jZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoUGxheWVyTWFuLl9maXJzdFVzZUluc3RhbmNlKSB7XG4gICAgICAgIFBsYXllck1hbi5fZmlyc3RVc2VJbnN0YW5jZSA9IGZhbHNlO1xuICAgICAgICBQbGF5ZXJNYW4uX2luc3RhbmNlID0gbmV3IFBsYXllck1hbigpO1xuICAgIH1cbiAgICByZXR1cm4gUGxheWVyTWFuLl9pbnN0YW5jZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUGxheWVyTWFuOyIsIi8qKlxuICogQ3JlYXRlZCBieSBxaW5uaW5nIG9uIDE1LzQvMjIuXG4gKi9cbnZhciBIdHRwQ2xpZW50ID0ge1xuXG4gICAgLyoqXG4gICAgICogZ2V0IHJlcXVlc3QsanNiIG9rLGh0bWw1IHNob3dzICBObyAnQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luJyBoZWFkZXIgaXMgcHJlc2VudCBvbiB0aGUgcmVxdWVzdGVkIHJlc291cmNlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gICAgICovXG4gICAgZG9HZXQ6IGZ1bmN0aW9uICh1cmwsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciB4aHIgPSBjYy5sb2FkZXIuZ2V0WE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgeGhyLm9wZW4oXCJHRVRcIiwgdXJsLCB0cnVlKTtcblxuICAgICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY2MubG9nKFwicmVhZHlTdGF0ZTpcIit4aHIucmVhZHlTdGF0ZStcIixzdGF0dXM6XCIreGhyLnN0YXR1cytcIixzdGF0dVRleHQ6XCIreGhyLnN0YXR1c1RleHQrXCIsLCxyZXNwb25zZVRleHQ6XCIreGhyLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT0gNCAmJiB4aHIuc3RhdHVzID09IDIwMCkge1xuICAgICAgICAgICAgICAgIHZhciBodHRwU3RhdHVzID0geGhyLnN0YXR1c1RleHQ7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3BvbnNlID0geGhyLnJlc3BvbnNlVGV4dDtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLHJlc3BvbnNlKTtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKHhoci5zdGF0dXNUZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgeGhyLnNlbmQoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtXG4gICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZyxzdHJpbmc+fSBoZWFkZXJzXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICAgKi9cbiAgICBkb1Bvc3Q6IGZ1bmN0aW9uICh1cmwsIHBhcmFtcywgaGVhZGVycywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIHhociA9IGNjLmxvYWRlci5nZXRYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICB4aHIub3BlbihcIlBPU1RcIiwgdXJsKTtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIGhlYWRlcnMpIHtcbiAgICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgaGVhZGVyc1trZXldKTtcbiAgICAgICAgfVxuICAgICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09IDQpIHtcbiAgICAgICAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA+PSAyMDAgJiYgeGhyLnN0YXR1cyA8PSAyMDcpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgeGhyLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soeGhyLnN0YXR1cywgeGhyLnN0YXR1c1RleHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHhoci5zZW5kKHBhcmFtcyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gSHR0cENsaWVudDsiLCJ2YXIgTW9kYWxMYXllciA9IHJlcXVpcmUoXCIuL01vZGFsTGF5ZXJcIik7XG5cbnZhciBEaWFsb2dNYW5hZ2VyID0gY2MuQ2xhc3MuZXh0ZW5kKHtcbiAgICBESUFMT0dfWk9SREVSX0JFR0lOOiA5OTksXG4gICAgRElBTE9HX1pPUkRFUl9TVEVQOiAyLFxuXG4gICAgLyoqXG4gICAgICogQHR5cGVzIHtNb2RhbExheWVyfVxuICAgICAqL1xuICAgIF9vdmVybGF5OiBudWxsLFxuICAgIF9zY2FsZUZhY3RvcjogMCxcbiAgICAvKipcbiAgICAgKiBAdHlwZXMge0FycmF5LjxNb2RhbExheWVyPn1cbiAgICAgKi9cbiAgICBfZGlhbG9nU3RhY2s6IG51bGwsXG5cbiAgICBjdG9yOiBmdW5jdGlvbiAoKSB7XG4gICAgfSxcblxuICAgIGNyZWF0ZU92ZXJsYXk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fb3ZlcmxheSA9IG5ldyBNb2RhbExheWVyKCk7XG4gICAgICAgIHRoaXMuX292ZXJsYXkuc2V0Q29sb3IoY2MuY29sb3IuQkxBQ0spO1xuICAgICAgICB0aGlzLl9vdmVybGF5LnNldE9wYWNpdHkoMTkwKTtcbiAgICAgICAgdGhpcy5fb3ZlcmxheS5zZXRDb250ZW50U2l6ZShjYy5zaXplKGNjLndpblNpemUud2lkdGgsIGNjLndpblNpemUuaGVpZ2h0KSk7XG4gICAgICAgIHRoaXMuX292ZXJsYXkuc2V0TG9jYWxaT3JkZXIoOTk5KTtcbiAgICAgICAgdGhpcy5fb3ZlcmxheS5yZXRhaW4oKTtcbiAgICAgICAgdGhpcy5fc2NhbGVGYWN0b3IgPSAxLjA7XG4gICAgICAgIHRoaXMuX2RpYWxvZ1N0YWNrID0gW107XG4gICAgfSxcblxuICAgIHBvcHVwOiBmdW5jdGlvbiAoZGxnLCBwYXJhbSkge1xuICAgICAgICBkbGcuaWdub3JlQW5jaG9yUG9pbnRGb3JQb3NpdGlvbihmYWxzZSk7XG4gICAgICAgIGRsZy5zZXRTY2FsZSh0aGlzLl9zY2FsZUZhY3Rvcik7XG4gICAgICAgIHZhciBkbGdMZW4gPSB0aGlzLl9kaWFsb2dTdGFjay5sZW5ndGg7XG4gICAgICAgIGNjLmxvZyhcImRsZ0xlbjpcIiArIGRsZ0xlbik7XG4gICAgICAgIGlmIChkbGdMZW4gPT0gMCkge1xuICAgICAgICAgICAgZGxnLnNldExvY2FsWk9yZGVyKHRoaXMuRElBTE9HX1pPUkRFUl9CRUdJTik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkbGcuc2V0TG9jYWxaT3JkZXIodGhpcy5fZGlhbG9nU3RhY2tbZGxnTGVuIC0gMV0uZ2V0TG9jYWxaT3JkZXIoKSArIHRoaXMuRElBTE9HX1pPUkRFUl9TVEVQKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9kaWFsb2dTdGFjay5wdXNoKGRsZyk7XG4gICAgICAgIHRoaXMuX292ZXJsYXkuc2V0TG9jYWxaT3JkZXIoZGxnLmdldExvY2FsWk9yZGVyKCkgLSAxKTtcblxuICAgICAgICBpZiAodGhpcy5fb3ZlcmxheS5nZXRQYXJlbnQoKSA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmF0dGFjaFNjZW5lKHRoaXMuX292ZXJsYXkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhcmFtICYmIHBhcmFtLm92ZXJsYXlDb2xvcikge1xuICAgICAgICAgICAgdGhpcy5fb3ZlcmxheS5zZXRDb2xvcihwYXJhbS5vdmVybGF5Q29sb3IpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fb3ZlcmxheS5zZXRDb2xvcihjYy5jb2xvci5CTEFDSyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGFyYW0gJiYgcGFyYW0ub3ZlcmxheU9wYWNpdHkpIHtcbiAgICAgICAgICAgIHRoaXMuX292ZXJsYXkuc2V0T3BhY2l0eShwYXJhbS5vdmVybGF5T3BhY2l0eSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9vdmVybGF5LnNldE9wYWNpdHkoMTkwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwYXJhbSAmJiBwYXJhbS5wb3B1cEFuaW0pIHtcbiAgICAgICAgICAgIGlmIChkbGcuZ2V0Q2hpbGRyZW4oKSAmJiBkbGcuZ2V0Q2hpbGRyZW4oKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgLy90aGlzLl9vdmVybGF5LnNldExvY2FsWk9yZGVyKGRsZy5nZXRMb2NhbFpPcmRlcigpICsgMSk7XG4gICAgICAgICAgICAgICAgdGhpcy5wb3B1cERpYWxvZ0FuaW0oZGxnLmdldENoaWxkcmVuKClbMF0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgLy90aGlzLl9vdmVybGF5LnNldExvY2FsWk9yZGVyKGRsZy5nZXRMb2NhbFpPcmRlcigpIC0gMSk7XG4gICAgICAgICAgICAgICAgfSwgdGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmF0dGFjaFNjZW5lKGRsZyk7XG5cbiAgICAgICAgZ2FtZS5ldmVudERpc3BhdGNoZXIuZGlzcGF0Y2hFdmVudChcImRpYWxvZ19wb3BlZFwiKTtcbiAgICB9LFxuXG4gICAgcG9wdXBEaWFsb2dBbmltOiBmdW5jdGlvbiAocGFuZWwsY2FsbGJhY2ssY2FsbGJhY2tUYXJnZXQpIHtcbiAgICAgICAgcGFuZWwuc2V0U2NhbGUoMC44LCAwLjgpO1xuICAgICAgICBwYW5lbC5ydW5BY3Rpb24oY2Muc2VxdWVuY2UoXG4gICAgICAgICAgICBjYy5zY2FsZVRvKDAuMDY2LCAxLjA1LCAxLjA1KS5lYXNpbmcoY2MuZWFzZU91dCgyKSksXG4gICAgICAgICAgICBjYy5zY2FsZVRvKDAuMDUsIDAuOTgsIDAuOTgpLmVhc2luZyhjYy5lYXNlT3V0KDIpKSxcbiAgICAgICAgICAgIGNjLnNjYWxlVG8oMC4wODQsIDEsIDEpLmVhc2luZyhjYy5lYXNlT3V0KDIpKSxcbiAgICAgICAgICAgIGNjLmNhbGxGdW5jKGNhbGxiYWNrLCBjYWxsYmFja1RhcmdldClcbiAgICAgICAgKSk7XG4gICAgfSxcblxuICAgIGF0dGFjaFNjZW5lOiBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICBjYy5kaXJlY3Rvci5nZXRSdW5uaW5nU2NlbmUoKS5hZGRDaGlsZChub2RlKTtcbiAgICB9LFxuXG4gICAgY2xvc2U6IGZ1bmN0aW9uIChkbGcsIGRpc3Bvc2UpIHtcbiAgICAgICAgaWYgKGNjLmlzVW5kZWZpbmVkKGRpc3Bvc2UpKSB7XG4gICAgICAgICAgICBkaXNwb3NlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2xvc2VJbmRleDtcbiAgICAgICAgdmFyIGRsZ0xlbiA9IHRoaXMuX2RpYWxvZ1N0YWNrLmxlbmd0aDtcbiAgICAgICAgZm9yIChjbG9zZUluZGV4ID0gZGxnTGVuIC0gMTsgY2xvc2VJbmRleCA+PSAwOyAtLWNsb3NlSW5kZXgpIHtcbiAgICAgICAgICAgIGlmIChkbGcgPT09IHRoaXMuX2RpYWxvZ1N0YWNrW2Nsb3NlSW5kZXhdKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2xvc2VJbmRleCA+PSAwKSB7XG4gICAgICAgICAgICB0aGlzLl9kaWFsb2dTdGFjay5zcGxpY2UoY2xvc2VJbmRleCwgMSk7XG4gICAgICAgICAgICBkbGdMZW4gPSB0aGlzLl9kaWFsb2dTdGFjay5sZW5ndGg7XG4gICAgICAgICAgICBkbGcucmVtb3ZlRnJvbVBhcmVudChkaXNwb3NlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkbGdMZW4gPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuX292ZXJsYXkucmVtb3ZlRnJvbVBhcmVudChmYWxzZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgdG9wSW5kZXggPSBkbGdMZW4gLSAxO1xuXG4gICAgICAgICAgICBpZiAodG9wSW5kZXggPj0gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX292ZXJsYXkuc2V0TG9jYWxaT3JkZXIodGhpcy5fZGlhbG9nU3RhY2tbdG9wSW5kZXhdLmdldExvY2FsWk9yZGVyKCkgLSAxKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fb3ZlcmxheS5yZW1vdmVGcm9tUGFyZW50KGZhbHNlKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9kaWFsb2dTdGFjay5sZW5ndGggPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGdhbWUuZXZlbnREaXNwYXRjaGVyLmRpc3BhdGNoRXZlbnQoXCJkaWFsb2dfY2xvc2VkXCIpO1xuICAgIH0sXG5cbiAgICBjbG9zZUFsbDogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZGxnTGVuID0gdGhpcy5fZGlhbG9nU3RhY2subGVuZ3RoO1xuICAgICAgICB3aGlsZSAoZGxnTGVuICE9IDApIHtcbiAgICAgICAgICAgIHZhciBtb2RhbExheWVyID0gdGhpcy5fZGlhbG9nU3RhY2tbZGxnTGVuIC0gMV07XG4gICAgICAgICAgICB0aGlzLmNsb3NlKG1vZGFsTGF5ZXIsIHRydWUpO1xuICAgICAgICAgICAgZGxnTGVuID0gdGhpcy5fZGlhbG9nU3RhY2subGVuZ3RoO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIGlzVG9wZXN0RGlhbG9nOiBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICByZXR1cm4gKHRoaXMuX2RpYWxvZ1N0YWNrW3RoaXMuX2RpYWxvZ1N0YWNrLmxlbmd0aCAtIDFdID09PSBub2RlKTtcbiAgICB9XG5cbn0pO1xuXG5EaWFsb2dNYW5hZ2VyLl9pbnN0YW5jZSA9IG51bGw7XG5EaWFsb2dNYW5hZ2VyLl9maXJzdFVzZUluc3RhbmNlID0gdHJ1ZTtcblxuLyoqXG4gKlxuICogQHJldHVybnMge0RpYWxvZ01hbmFnZXJ9XG4gKi9cbkRpYWxvZ01hbmFnZXIuZ2V0SW5zdGFuY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKERpYWxvZ01hbmFnZXIuX2ZpcnN0VXNlSW5zdGFuY2UpIHtcbiAgICAgICAgRGlhbG9nTWFuYWdlci5fZmlyc3RVc2VJbnN0YW5jZSA9IGZhbHNlO1xuICAgICAgICBEaWFsb2dNYW5hZ2VyLl9pbnN0YW5jZSA9IG5ldyBEaWFsb2dNYW5hZ2VyKCk7XG4gICAgfVxuICAgIHJldHVybiBEaWFsb2dNYW5hZ2VyLl9pbnN0YW5jZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRGlhbG9nTWFuYWdlcjsiLCIvKipcbiAqIENyZWF0ZWQgYnkgcWlubmluZyBvbiAxNS80LzI4LlxuICovXG52YXIgTW9kYWxMYXllciA9IGNjLkxheWVyQ29sb3IuZXh0ZW5kKHtcbiAgICBjdG9yOmZ1bmN0aW9uKCl7XG4gICAgICAgIHRoaXMuX3N1cGVyKCk7XG4gICAgICAgIGNjLmV2ZW50TWFuYWdlci5hZGRMaXN0ZW5lcih7XG4gICAgICAgICAgICBldmVudDogY2MuRXZlbnRMaXN0ZW5lci5UT1VDSF9PTkVfQllfT05FLFxuICAgICAgICAgICAgc3dhbGxvd1RvdWNoZXM6IHRydWUsXG4gICAgICAgICAgICBvblRvdWNoQmVnYW46IHRoaXMub25Ub3VjaEJlZ2FuLmJpbmQodGhpcylcbiAgICAgICAgfSwgdGhpcyk7XG4gICAgfSxcbiAgICBvblRvdWNoQmVnYW46ZnVuY3Rpb24odG91Y2gsIGV2ZW50KSB7XG4gICAgICAgIGlmKCF0aGlzLmlzVmlzaWJsZSgpIHx8ICghdGhpcy5pc1RvdWNoSW5zaWRlKHRoaXMsdG91Y2gpKSl7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcbiAgICBpc1RvdWNoSW5zaWRlOiBmdW5jdGlvbiAob3duZXIsdG91Y2gpIHtcbiAgICAgICAgaWYoIW93bmVyIHx8ICFvd25lci5nZXRQYXJlbnQoKSl7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRvdWNoTG9jYXRpb24gPSB0b3VjaC5nZXRMb2NhdGlvbigpOyAvLyBHZXQgdGhlIHRvdWNoIHBvc2l0aW9uXG4gICAgICAgIHRvdWNoTG9jYXRpb24gPSBvd25lci5nZXRQYXJlbnQoKS5jb252ZXJ0VG9Ob2RlU3BhY2UodG91Y2hMb2NhdGlvbik7XG4gICAgICAgIHJldHVybiBjYy5yZWN0Q29udGFpbnNQb2ludChvd25lci5nZXRCb3VuZGluZ0JveCgpLCB0b3VjaExvY2F0aW9uKTtcbiAgICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBNb2RhbExheWVyOyIsIi8qKlxuICogQ3JlYXRlZCBieSBxaW5uaW5nIG9uIDE1LzQvMjMuXG4gKi9cblxudmFyIFN0b3JhZ2VDb250cm9sbGVyID0gY2MuQ2xhc3MuZXh0ZW5kKHtcbiAgICBzZXRJdGVtOiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICBjYy5zeXMubG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBnZXRJdGVtOiBmdW5jdGlvbiAoa2V5LCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gY2Muc3lzLmxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSk7XG4gICAgICAgIGlmICh2YWx1ZSA9PSBcIlwiIHx8IHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0sXG4gICAgcmVtb3ZlSXRlbTogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBjYy5zeXMubG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oa2V5KTtcbiAgICB9XG59KTtcblxuU3RvcmFnZUNvbnRyb2xsZXIuX2luc3RhbmNlID0gbnVsbDtcblN0b3JhZ2VDb250cm9sbGVyLl9maXJzdFVzZUluc3RhbmNlID0gdHJ1ZTtcblxuLyoqXG4gKlxuICogQHJldHVybnMge1N0b3JhZ2VDb250cm9sbGVyfVxuICovXG5TdG9yYWdlQ29udHJvbGxlci5nZXRJbnN0YW5jZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoU3RvcmFnZUNvbnRyb2xsZXIuX2ZpcnN0VXNlSW5zdGFuY2UpIHtcbiAgICAgICAgU3RvcmFnZUNvbnRyb2xsZXIuX2ZpcnN0VXNlSW5zdGFuY2UgPSBmYWxzZTtcbiAgICAgICAgU3RvcmFnZUNvbnRyb2xsZXIuX2luc3RhbmNlID0gbmV3IFN0b3JhZ2VDb250cm9sbGVyKCk7XG4gICAgfVxuICAgIHJldHVybiBTdG9yYWdlQ29udHJvbGxlci5faW5zdGFuY2U7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN0b3JhZ2VDb250cm9sbGVyOyIsIi8qKlxuICogQ3JlYXRlZCBieSBveWUgb24gMTYvMy8xMi5cbiAqL1xuXG52YXIgQXVkaW9IZWxwZXIgPSB7XG4gICAgcGxheUJ0blNvdW5kOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGdhbWUuYXVkaW9QbGF5ZXIucGxheUVmZmVjdEJ5S2V5KFwiZW50ZXJcIik7XG4gICAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBBdWRpb0hlbHBlcjsiLCJ2YXIgRmlsZUNhY2hlU3R1YiA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuY2FjaGVkRmlsZXMgPSBbXTtcbn07XG5cbkZpbGVDYWNoZVN0dWIucHJvdG90eXBlLmNhY2hlRmlsZSA9IGZ1bmN0aW9uKGZpbGVuYW1lKSB7XG4gICAgaWYgKGNjLnN5cy5pc05hdGl2ZSkge1xuICAgICAgICBpZihjYy5zeXMub3MgPT0gY2Muc3lzLk9TX0FORFJPSUQpIHtcbiAgICAgICAgICAgIC8vIGNjLmxvZyhcIkZpbGVDYWNoZVN0dWIucHJvdG90eXBlLmNhY2hlRmlsZS5hbmRyb2lkXCIpO1xuICAgICAgICAgICAgaWYoanNiLmZpbGVVdGlscy5jYWNoZUZpbGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmV0ID0ganNiLmZpbGVVdGlscy5jYWNoZUZpbGUoZmlsZW5hbWUpO1xuICAgICAgICAgICAgICAgIC8vIGNjLmxvZyhcIkZpbGVDYWNoZVN0dWIucHJvdG90eXBlLmNhY2hlRmlsZSAtLS0tPiBjYWNoZTpcIiArIGZpbGVuYW1lICsgXCIsIHJldDpcIiArIHJldCk7XG4gICAgICAgICAgICAgICAgdGhpcy5jYWNoZWRGaWxlcy5wdXNoKGZpbGVuYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn07XG5cbkZpbGVDYWNoZVN0dWIucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKGNjLnN5cy5pc05hdGl2ZSkge1xuICAgICAgICBpZihjYy5zeXMub3MgPT0gY2Muc3lzLk9TX0FORFJPSUQpIHtcbiAgICAgICAgICAgIGlmIChqc2IuZmlsZVV0aWxzLnVuY2FjaGVGaWxlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jYWNoZWRGaWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChmaWxlbmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBqc2IuZmlsZVV0aWxzLnVuY2FjaGVGaWxlKGZpbGVuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gY2MubG9nKFwiRmlsZUNhY2hlU3R1Yi5wcm90b3R5cGUuZGlzcG9zZSAtLS0tPiB1bmNhY2hlZCBmaWxlIFwiICsgZmlsZW5hbWUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5jYWNoZWRGaWxlcyA9IFtdO1xuICAgICAgICB9XG4gICAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBGaWxlQ2FjaGVTdHViOyIsIi8qKlxuICogQ3JlYXRlZCBieSBveWUgb24gMTUtNC0xOS5cbiAqL1xuXG5cbnZhciBVdGlscyA9IHtcbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZSBhIHJhbmRvbSBpbnRlZ2VyIHZhbHVlIHdoaWNoIG1lZXRzIFswLCB1cHBlclZhbHVlKVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB1cHBlclZhbHVlXG4gICAgICogQHJldHVybnMge251bWJlcn1cbiAgICAgKi9cbiAgICByYW5kb21OZXh0SW50OiBmdW5jdGlvbih1cHBlclZhbHVlKSB7XG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiB1cHBlclZhbHVlKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogZ2VuZXJhdGUgYSByYW5kb20gbnVtYmVyIHZhbHVlIHdoaWNoIG1lZXRzIFswLCB1cHBlclZhbHVlKVxuICAgICAqIEBwYXJhbSB1cHBlclZhbHVlXG4gICAgICogQHJldHVybnMge251bWJlcn1cbiAgICAgKi9cbiAgICByYW5kb21OZXh0TnVtYmVyOiBmdW5jdGlvbiAodXBwZXJWYWx1ZSkge1xuICAgICAgICByZXR1cm4gTWF0aC5yYW5kb20oKSAqIHVwcGVyVmFsdWU7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHJhbmRvbSBhIGludGVnZXIgZnJvbSBbbWluLCBtYXhdXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG1pblxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtYXhcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgICAqL1xuICAgIHJhbmdlTmV4dEludDogZnVuY3Rpb24obWluLCBtYXgpIHtcbiAgICAgICAgcmV0dXJuIG1pbiArIHRoaXMucmFuZG9tTmV4dEludChtYXggLSBtaW4gKyAxKTtcbiAgICB9LFxuXG4gICAgcmFuZ2VOZXh0TnVtYmVyOiBmdW5jdGlvbiAobWluLCBtYXgpIHtcbiAgICAgICAgcmV0dXJuIG1pbiArIHRoaXMucmFuZG9tTmV4dE51bWJlcihtYXggLSBtaW4pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZSBhIHJhbmRvbSBudW1iZXIgdmFsdWUgd2hpY2ggbWVldHMgW2xvd2VyVmFsdWUsIHVwcGVyVmFsdWUpXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGxvd2VyVmFsdWVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdXBwZXJWYWx1ZVxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAgICovXG4gICAgcmFuZG9tTmV4dE51bWJlckluUmFuZ2U6IGZ1bmN0aW9uIChsb3dlclZhbHVlLCB1cHBlclZhbHVlKSB7XG4gICAgICAgIHJldHVybiBNYXRoLnJhbmRvbSgpICogKHVwcGVyVmFsdWUgLSBsb3dlclZhbHVlKSArIGxvd2VyVmFsdWU7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlIGEgcmFuZG9tIGludGVnZXIgdmFsdWUgd2hpY2ggbWVldHMgW2xvd2VyVmFsdWUsIHVwcGVyVmFsdWUpXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGxvd2VyVmFsdWVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdXBwZXJWYWx1ZVxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAgICovXG4gICAgcmFuZG9tTmV4dEludEluUmFuZ2U6IGZ1bmN0aW9uIChsb3dlclZhbHVlLCB1cHBlclZhbHVlKSB7XG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAodXBwZXJWYWx1ZSAtIGxvd2VyVmFsdWUpICsgbG93ZXJWYWx1ZSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIOagvOW8j+WMluWtl+espuS4slxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG4gICAgc3ByaW50ZjogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaSA9IDAsIGEsIGYgPSBhcmd1bWVudHNbaSsrXSwgbyA9IFtdLCBtLCBwLCBjLCB4LCBzID0gJyc7XG4gICAgICAgIHdoaWxlIChmKSB7XG4gICAgICAgICAgICBpZiAobSA9IC9eW15cXHgyNV0rLy5leGVjKGYpKSB7XG4gICAgICAgICAgICAgICAgby5wdXNoKG1bMF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobSA9IC9eXFx4MjV7Mn0vLmV4ZWMoZikpIHtcbiAgICAgICAgICAgICAgICBvLnB1c2goJyUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG0gPSAvXlxceDI1KD86KFxcZCspXFwkKT8oXFwrKT8oMHwnW14kXSk/KC0pPyhcXGQrKT8oPzpcXC4oXFxkKykpPyhbYi1mb3N1eFhdKS8uZXhlYyhmKSkge1xuICAgICAgICAgICAgICAgIGlmICgoKGEgPSBhcmd1bWVudHNbbVsxXSB8fCBpKytdKSA9PSBudWxsKSB8fCAoYSA9PSB1bmRlZmluZWQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93KCdUb28gZmV3IGFyZ3VtZW50cy4nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKC9bXnNdLy50ZXN0KG1bN10pICYmICh0eXBlb2YoYSkgIT0gJ251bWJlcicpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93KCdFeHBlY3RpbmcgbnVtYmVyIGJ1dCBmb3VuZCAnICsgdHlwZW9mKGEpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3dpdGNoIChtWzddKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2InOlxuICAgICAgICAgICAgICAgICAgICAgICAgYSA9IGEudG9TdHJpbmcoMik7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYyc6XG4gICAgICAgICAgICAgICAgICAgICAgICBhID0gU3RyaW5nLmZyb21DaGFyQ29kZShhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGEgPSBwYXJzZUludChhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGEgPSBtWzZdID8gYS50b0V4cG9uZW50aWFsKG1bNl0pIDogYS50b0V4cG9uZW50aWFsKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnZic6XG4gICAgICAgICAgICAgICAgICAgICAgICBhID0gbVs2XSA/IHBhcnNlRmxvYXQoYSkudG9GaXhlZChtWzZdKSA6IHBhcnNlRmxvYXQoYSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnbyc6XG4gICAgICAgICAgICAgICAgICAgICAgICBhID0gYS50b1N0cmluZyg4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdzJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGEgPSAoKGEgPSBTdHJpbmcoYSkpICYmIG1bNl0gPyBhLnN1YnN0cmluZygwLCBtWzZdKSA6IGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3UnOlxuICAgICAgICAgICAgICAgICAgICAgICAgYSA9IE1hdGguYWJzKGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3gnOlxuICAgICAgICAgICAgICAgICAgICAgICAgYSA9IGEudG9TdHJpbmcoMTYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ1gnOlxuICAgICAgICAgICAgICAgICAgICAgICAgYSA9IGEudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYSA9ICgvW2RlZl0vLnRlc3QobVs3XSkgJiYgbVsyXSAmJiBhID49IDAgPyAnKycgKyBhIDogYSk7XG4gICAgICAgICAgICAgICAgYyA9IG1bM10gPyBtWzNdID09ICcwJyA/ICcwJyA6IG1bM10uY2hhckF0KDEpIDogJyAnO1xuICAgICAgICAgICAgICAgIHggPSBtWzVdIC0gU3RyaW5nKGEpLmxlbmd0aCAtIHMubGVuZ3RoO1xuICAgICAgICAgICAgICAgIHAgPSBtWzVdID8gc3RyX3JlcGVhdChjLCB4KSA6ICcnO1xuICAgICAgICAgICAgICAgIG8ucHVzaChzICsgKG1bNF0gPyBhICsgcCA6IHAgKyBhKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdygnc3ByaW50ZiBwYXJhbXMgZXJyb3InKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGYgPSBmLnN1YnN0cmluZyhtWzBdLmxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG8uam9pbignJyk7XG4gICAgfSxcblxuICAgIGdldERpc3RhbmNlIDogZnVuY3Rpb24ocG9pbnQxLHBvaW50Mil7XG4gICAgICAgIHJldHVybiBNYXRoLnNxcnQoKHBvaW50MS54IC0gcG9pbnQyLngpICogKHBvaW50MS54IC0gcG9pbnQyLngpICsgKHBvaW50MS55IC0gcG9pbnQyLnkpICogKHBvaW50MS55IC0gcG9pbnQyLnkpKTtcbiAgICB9LFxuXG4gICAgYXJyYXlDb250YWluIDogZnVuY3Rpb24gKGFyciwgZWxlbWVudCkge1xuICAgICAgICBpZihhcnIgJiYgYXJyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICBpZihhcnJbaV0gPT0gZWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2NiRmlsZU5hbWVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY29udGFpbmVyTm9kZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb250cm9sbGVyTmFtZVxuICAgICAqIEBwYXJhbSB7b2JqZWN0IHwgY2MuTm9kZX0gY29udHJvbGxlck5vZGVcbiAgICAgKiBAcmV0dXJucyB7Y2MuTm9kZSB8IG51bGx9XG4gICAgICovXG4gICAgbG9hZE5vZGVGcm9tQ0NCIDogZnVuY3Rpb24oY2NiRmlsZU5hbWUsY29udGFpbmVyTm9kZSxjb250cm9sbGVyTmFtZSxjb250cm9sbGVyTm9kZSwga2VlcENvbnRyb2xsZXIpe1xuICAgICAgICBjYy5sb2coXCJsb2FkIG5vZGUgZnJvbSBjY2I6XCIgKyBjY2JGaWxlTmFtZSk7XG4gICAgICAgIFV0aWxzLnNldFRyYWNrVmFsdWUoXCJjY2JOYW1lXCIsIGNjYkZpbGVOYW1lKTtcbiAgICAgICAgaWYoIWNjLmlzVW5kZWZpbmVkKGNvbnRyb2xsZXJOYW1lKSAmJiAhY2MuaXNVbmRlZmluZWQoY29udHJvbGxlck5vZGUpKXtcbiAgICAgICAgICAgIGNjLkJ1aWxkZXJSZWFkZXIucmVnaXN0ZXJDb250cm9sbGVyKGNvbnRyb2xsZXJOYW1lLGNvbnRyb2xsZXJOb2RlKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbm9kZSA9IGNjLkJ1aWxkZXJSZWFkZXIubG9hZChjY2JGaWxlTmFtZSwgY29udGFpbmVyTm9kZSk7XG4gICAgICAgIGlmIChjb250cm9sbGVyTmFtZSAmJiBjb250cm9sbGVyTm9kZSAmJiAha2VlcENvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgIGNjLkJ1aWxkZXJSZWFkZXIuX2NvbnRyb2xsZXJDbGFzc0NhY2hlW2NvbnRyb2xsZXJOYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBub2RlLnJldGFpbigpO1xuICAgICAgICBjYy5sb2coXCJsb2FkIG5vZGUgcmV0YWluOlwiICsgY2NiRmlsZU5hbWUpO1xuICAgICAgICB0aGlzLmV4ZWN1dGVJbk5leHRGcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjYy5sb2coXCJsb2FkIG5vZGUgcmVsZWFzZTpcIiArIGNjYkZpbGVOYW1lKTtcbiAgICAgICAgICAgIG5vZGUucmVsZWFzZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfSxcblxuICAgIHJlZ2lzdGVyQ29udHJvbGxlcjogZnVuY3Rpb24gKGNvbnRyb2xsZXJOYW1lLCBjb250cm9sbGVyTm9kZSkge1xuICAgICAgICBjYy5CdWlsZGVyUmVhZGVyLnJlZ2lzdGVyQ29udHJvbGxlcihjb250cm9sbGVyTmFtZSwgY29udHJvbGxlck5vZGUpO1xuICAgIH0sXG5cbiAgICB1blJlZ2lzdGVyQ29udHJvbGxlcjogZnVuY3Rpb24gKGNvbnRyb2xsZXJOYW1lKSB7XG4gICAgICAgIGNjLkJ1aWxkZXJSZWFkZXIuX2NvbnRyb2xsZXJDbGFzc0NhY2hlW2NvbnRyb2xsZXJOYW1lXSA9IHVuZGVmaW5lZDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBzdWJUeXBlXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gc3VwZXJUeXBlXG4gICAgICovXG4gICAgaW5oZXJpdHM6IGZ1bmN0aW9uKHN1YlR5cGUsIHN1cGVyVHlwZSkge1xuICAgICAgICB2YXIgc3ViUHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlclR5cGUucHJvdG90eXBlKTtcbiAgICAgICAgc3ViUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViVHlwZTtcbiAgICAgICAgc3ViVHlwZS5wcm90b3R5cGUgPSBzdWJQcm90b3R5cGU7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgICovXG4gICAgbG9hZEpzb246IGZ1bmN0aW9uICh1cmwpIHtcbiAgICAgICAgaWYgKCFjYy5zeXMuaXNOYXRpdmUpIHtcbiAgICAgICAgICAgIHJldHVybiBjYy5sb2FkZXIuZ2V0UmVzKHVybCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZihqc2IuZmlsZVV0aWxzLmlzRmlsZUV4aXN0KHVybCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShqc2IuZmlsZVV0aWxzLmdldFN0cmluZ0Zyb21GaWxlKHVybCkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBsb2FkUGxpc3Q6IGZ1bmN0aW9uICh1cmwpIHtcbiAgICAgICAgaWYgKCFjYy5zeXMuaXNOYXRpdmUpIHtcbiAgICAgICAgICAgIHJldHVybiBjYy5sb2FkZXIuZ2V0UmVzKHVybCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZihqc2IuZmlsZVV0aWxzLmlzRmlsZUV4aXN0KHVybCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2MucGxpc3RQYXJzZXIucGFyc2UoanNiLmZpbGVVdGlscy5nZXRTdHJpbmdGcm9tRmlsZSh1cmwpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgZ2V0U2NyZWVuU2hvdDogZnVuY3Rpb24gKGZpbGVOYW1lKSB7XG4gICAgICAgIGNjLmxvZyhcImZpbGVOYW1lOlwiICsgZmlsZU5hbWUpO1xuICAgICAgICB2YXIgdGV4ID0gbmV3IGNjLlJlbmRlclRleHR1cmUoY2Mud2luU2l6ZS53aWR0aCwgY2Mud2luU2l6ZS5oZWlnaHQsIGNjLlRleHR1cmUyRC5QSVhFTF9GT1JNQVRfUkdCQTg4ODgpO1xuICAgICAgICB0ZXguc2V0UG9zaXRpb24oY2MucChjYy53aW5TaXplLndpZHRoIC8gMiwgY2Mud2luU2l6ZS5oZWlnaHQgLyAyKSk7XG4gICAgICAgIHRleC5iZWdpbigpO1xuICAgICAgICBjYy5kaXJlY3Rvci5nZXRSdW5uaW5nU2NlbmUoKS52aXNpdCgpO1xuICAgICAgICB0ZXguZW5kKCk7XG5cbiAgICAgICAgdmFyIGltZ1BhdGggPSBqc2IuZmlsZVV0aWxzLmdldFdyaXRhYmxlUGF0aCgpO1xuICAgICAgICBpZiAoaW1nUGF0aC5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlc3VsdCA9IHRleC5zYXZlVG9GaWxlKGZpbGVOYW1lLCBjYy5JTUFHRV9GT1JNQVRfSlBFRyk7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgIGltZ1BhdGggKz0gZmlsZU5hbWU7XG4gICAgICAgICAgICBjYy5sb2coXCJzYXZlIGltYWdlOlwiICsgaW1nUGF0aCk7XG4gICAgICAgICAgICByZXR1cm4gaW1nUGF0aDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICB9LFxuXG4gICAgaXNQYWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGpzYl9kcC5vbmVTZGtCcmlkZ2UuaXNQYWQpIHtcbiAgICAgICAgICAgIHJldHVybiBqc2JfZHAub25lU2RrQnJpZGdlLmlzUGFkKCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHdpblNpemUgPSBjYy53aW5TaXplO1xuICAgICAgICBpZiAoISFHYW1lQnJpZGdlLmdldENvbmZpZygpLmhvcml6b250YWxHYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gKHdpblNpemUud2lkdGggLyB3aW5TaXplLmhlaWdodCA8IDEuNSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gKHdpblNpemUuaGVpZ2h0IC8gd2luU2l6ZS53aWR0aCA8IDEuNSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgZ2V0Rm9ybWF0Um90YXRpb246IGZ1bmN0aW9uIChyb3RhdGlvbikge1xuICAgICAgICByZXR1cm4gKChyb3RhdGlvbiAlIDM2MCkgKyAzNjApICUgMzYwO1xuICAgIH0sXG5cbiAgICBkb0NsaXBwaW5nOiBmdW5jdGlvbiAobWFza0xheWVyLCBjbGlwTGF5ZXIpIHtcbiAgICAgICAgaWYobWFza0xheWVyICYmIGNsaXBMYXllcil7XG4gICAgICAgICAgICB2YXIgY2xpcFBhcmVudE5vZGUgPSBjbGlwTGF5ZXIuZ2V0UGFyZW50KCk7XG4gICAgICAgICAgICBjbGlwTGF5ZXIucmV0YWluKCk7XG4gICAgICAgICAgICBjbGlwTGF5ZXIucmVtb3ZlRnJvbVBhcmVudChmYWxzZSk7XG5cbiAgICAgICAgICAgIG1hc2tMYXllci5yZW1vdmVGcm9tUGFyZW50KGZhbHNlKTtcbiAgICAgICAgICAgIG1hc2tMYXllci52aXNpYmxlID0gdHJ1ZTtcblxuICAgICAgICAgICAgdmFyIGNsaXBwaW5nTm9kZSA9IG5ldyBjYy5DbGlwcGluZ05vZGUobWFza0xheWVyKTtcbiAgICAgICAgICAgIGNsaXBwaW5nTm9kZS5hbHBoYVRocmVzaG9sZCA9IDE7XG4gICAgICAgICAgICBjbGlwcGluZ05vZGUuYWRkQ2hpbGQoY2xpcExheWVyKTtcbiAgICAgICAgICAgIGNsaXBMYXllci5yZWxlYXNlKCk7XG5cbiAgICAgICAgICAgIGNsaXBQYXJlbnROb2RlLmFkZENoaWxkKGNsaXBwaW5nTm9kZSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgaXNQaXhlbENvbGxpc2lvbjogZnVuY3Rpb24gKHNwcjEsIHNwcjIpIHtcbiAgICAgICAgaWYgKGNjLnN5cy5pc05hdGl2ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGpzYl9kcC5vbmVTZGtCcmlkZ2UuaXNQaXhlbENvbGxpc2lvbihzcHIxLCBzcHIyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBjYy5yZWN0SW50ZXJzZWN0c1JlY3Qoc3ByMS5nZXRCb3VuZGluZ0JveCgpLCBzcHIyLmdldEJvdW5kaW5nQm94KCkpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHNjYWxlQ0NMYWJlbEJNRm9udDogZnVuY3Rpb24gKGxhYmVsLCBtYXhXaWR0aCkge1xuICAgICAgICBpZiAobGFiZWwud2lkdGggPiBtYXhXaWR0aCkge1xuICAgICAgICAgICAgdmFyIHNjYWxlRmFjdG9yID0gbWF4V2lkdGggLyBsYWJlbC53aWR0aDtcbiAgICAgICAgICAgIGxhYmVsLnNjYWxlWCA9IGxhYmVsLnNjYWxlWSA9IHNjYWxlRmFjdG9yO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGFiZWwuc2NhbGVYID0gbGFiZWwuc2NhbGVZID0gMS4wO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHNjYWxlQ0NMYWJlbEJNRm9udFdpdGhNYXhTY2FsZTogZnVuY3Rpb24gKGxhYmVsLCBtYXhXaWR0aCwgbWF4U2NhbGUpIHtcbiAgICAgICAgaWYgKGxhYmVsLndpZHRoICogbGFiZWwuc2NhbGVYID4gbWF4V2lkdGgpIHtcbiAgICAgICAgICAgIGxhYmVsLnNjYWxlWCA9IGxhYmVsLnNjYWxlWSA9IG1heFdpZHRoIC8gbGFiZWwud2lkdGg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxhYmVsLnNjYWxlWCA+IG1heFNjYWxlKSB7XG4gICAgICAgICAgICBsYWJlbC5zY2FsZVggPSBsYWJlbC5zY2FsZVkgPSBtYXhTY2FsZTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Y2MuTm9kZX0gbm9kZVxuICAgICAqL1xuICAgIHdhbGtOb2RlOiBmdW5jdGlvbiAobm9kZSwgY2IpIHtcbiAgICAgICAgaWYobm9kZSkge1xuICAgICAgICAgICAgdmFyIG1vcmUgPSBjYihub2RlKTtcbiAgICAgICAgICAgIGlmKG1vcmUpIHtcbiAgICAgICAgICAgICAgICBmb3IodmFyIGsgaW4gbm9kZS5jaGlsZHJlbikge1xuICAgICAgICAgICAgICAgICAgICBtb3JlID0gdGhpcy53YWxrTm9kZShub2RlLmNoaWxkcmVuW2tdLCBjYik7XG4gICAgICAgICAgICAgICAgICAgIGlmKCFtb3JlKVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG1vcmU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBpc05vZGVCdXR0b246IGZ1bmN0aW9uKG5kKSB7XG4gICAgICAgIHJldHVybiAobmQgaW5zdGFuY2VvZiBjYy5Db250cm9sQnV0dG9uKTtcbiAgICB9LFxuXG4gICAgaXNOb2RlTWVudUl0ZW06IGZ1bmN0aW9uKG5kKSB7XG4gICAgICAgIHJldHVybiAobmQgaW5zdGFuY2VvZiBjYy5NZW51SXRlbSB8fCBuZCBpbnN0YW5jZW9mIGNjLk1lbnVJdGVtSW1hZ2UpO1xuICAgIH0sXG5cbiAgICBpc0xhYmVsQk1Gb250OmZ1bmN0aW9uIChuZCkge1xuICAgICAgICByZXR1cm4gKG5kIGluc3RhbmNlb2YgY2MuTGFiZWxCTUZvbnQgfHwgbmQgaW5zdGFuY2VvZiBjYy5MYWJlbCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIExvYWQgYW4gaW1hZ2Ugd2l0aCB0aGUgZ2l2ZW4gdXJsXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIC0gZnVuY3Rpb24oZXJyb3IsIHRleHR1cmUsIGV4dHJhKVxuICAgICAqIEBwYXJhbSB7Kn0gZXh0cmFcbiAgICAgKi9cbiAgICBsb2FkUmVtb3RlSW1nOiBmdW5jdGlvbiAodXJsLCBjYWxsYmFjaywgZXh0cmEpIHtcbiAgICAgICAgaWYgKCFjYy5zeXMuaXNOYXRpdmUpIHtcbiAgICAgICAgICAgIGNjLmxvYWRlci5sb2FkSW1nKHVybCwge2lzQ3Jvc3NPcmlnaW46IHRydWV9LCBmdW5jdGlvbiAoZXJyb3IsIGltZykge1xuICAgICAgICAgICAgICAgIHZhciB0ZXh0dXJlMmQgPSBuZXcgY2MuVGV4dHVyZTJEKCk7XG4gICAgICAgICAgICAgICAgdGV4dHVyZTJkLmluaXRXaXRoRWxlbWVudChpbWcpO1xuICAgICAgICAgICAgICAgIHRleHR1cmUyZC5oYW5kbGVMb2FkZWRUZXh0dXJlKCk7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyb3IsIHRleHR1cmUyZCwgZXh0cmEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYy5sb2FkZXIubG9hZEltZyh1cmwsIHtpc0Nyb3NzT3JpZ2luOiB0cnVlfSwgZnVuY3Rpb24gKGVycm9yLCB0ZXh0dXJlMmQpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnJvciwgdGV4dHVyZTJkLCBleHRyYSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBwbGF5Q0NCQW5pbWF0aW9uOiBmdW5jdGlvbihub2RlLCBhbm1OYW1lKXtcbiAgICAgICAgdmFyIGFuaW1NZ3IgPSBub2RlLmFuaW1hdGlvbk1hbmFnZXI7XG4gICAgICAgIHZhciBzZXFJZDtcbiAgICAgICAgaWYoYW5tTmFtZSkge1xuICAgICAgICAgICAgaWYgKGNjLnN5cy5pc05hdGl2ZSl7XG4gICAgICAgICAgICAgICAgc2VxSWQgPSBhbmltTWdyLmdldFNlcXVlbmNlSWQoYW5tTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgIHNlcUlkID0gYW5pbU1nci5fZ2V0U2VxdWVuY2VJZChhbm1OYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNlcUlkID0gYW5pbU1nci5nZXRBdXRvUGxheVNlcXVlbmNlSWQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZXFJZCAhPSAtMSl7XG4gICAgICAgICAgICBpZighYW5tTmFtZSkge1xuICAgICAgICAgICAgICAgIGFuaW1NZ3IucnVuQW5pbWF0aW9uc0ZvclNlcXVlbmNlSWRUd2VlbkR1cmF0aW9uKHNlcUlkLCAwKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYW5pbU1nci5ydW5BbmltYXRpb25zRm9yU2VxdWVuY2VOYW1lZChhbm1OYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2MubG9nKFwiYW5pbWF0aW9uIFwiICsgYW5tTmFtZSArIFwiIG5vdCBleGlzdHMhXCIpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHJhbmRvbVNjYWxlQW5pbTogZnVuY3Rpb24gKHNwciwgc3RhcnRTY2FsZSwgdG90YWxUaW1lKSB7XG4gICAgICAgIHRvdGFsVGltZSA9IHRoaXMucmFuZG9tTmV4dE51bWJlckluUmFuZ2UodG90YWxUaW1lICogMC44LCB0b3RhbFRpbWUgKiAxLjIpO1xuICAgICAgICB2YXIgZGVsYXlUaW1lID0gdGhpcy5yYW5kb21OZXh0TnVtYmVyKHRvdGFsVGltZSAvIDIpO1xuXG4gICAgICAgIHZhciBzY2FsZUJpZ1RpbWUgPSAwLjMgKiAodG90YWxUaW1lIC0gZGVsYXlUaW1lKSAqIDI7XG4gICAgICAgIHZhciBzY2FsZVNtYWxsVGltZSA9IDAuMSAqICh0b3RhbFRpbWUgLSBkZWxheVRpbWUpICogMjtcbiAgICAgICAgdmFyIHNjYWxlTm9ybWFsVGltZSA9IDAuMSAqICh0b3RhbFRpbWUgLSBkZWxheVRpbWUpICogMjtcblxuICAgICAgICBzcHIuc3RvcEFsbEFjdGlvbnMoKTtcbiAgICAgICAgc3ByLnNldFNjYWxlKDApO1xuICAgICAgICBzcHIucnVuQWN0aW9uKGNjLnNlcXVlbmNlKGNjLmRlbGF5VGltZShkZWxheVRpbWUpLFxuICAgICAgICAgICAgY2Muc2NhbGVUbyhzY2FsZUJpZ1RpbWUsIDEuMSAqIHN0YXJ0U2NhbGUpLmVhc2luZyhjYy5lYXNlSW5PdXQoMikpICxcbiAgICAgICAgICAgIGNjLnNjYWxlVG8oc2NhbGVTbWFsbFRpbWUsIDAuOSAqIHN0YXJ0U2NhbGUpLmVhc2luZyhjYy5lYXNlSW5PdXQoMikpLFxuICAgICAgICAgICAgY2Muc2NhbGVUbyhzY2FsZU5vcm1hbFRpbWUsIDEgKiBzdGFydFNjYWxlKS5lYXNpbmcoY2MuZWFzZUluT3V0KDIpKSkpO1xuICAgIH0sXG5cbiAgICBnZXRGb3JtYXRUaW1lOiBmdW5jdGlvbiAodGltZSkge1xuICAgICAgICB2YXIgZGVjaW1hbHMgPSB0aW1lIC0gTWF0aC5mbG9vcih0aW1lKTtcbiAgICAgICAgdGltZSA9IE1hdGguZmxvb3IodGltZSk7XG4gICAgICAgIGlmICh0aW1lIDw9IDYwKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJcIiArICh0aW1lICsgZGVjaW1hbHMpLnRvRml4ZWQoMik7XG4gICAgICAgIH0gZWxzZSBpZiAodGltZSA8PSAzNjAwKSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcih0aW1lIC8gNjApICsgXCI6XCIgKyAoKHRpbWUgJSA2MCkgKyBkZWNpbWFscykudG9GaXhlZCgyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKHRpbWUgLyAzNjAwKSArIFwiOlwiICsgTWF0aC5mbG9vcih0aW1lICUgMzYwMCAvIDYwKSArIFwiOlwiICsgKCh0aW1lICUgKDM2MDAgKiA2MCkpICsgZGVjaW1hbHMpLnRvRml4ZWQoMik7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgZ2V0TG9uZ0Zvcm1hdFRpbWU6IGZ1bmN0aW9uICh0aW1lKSB7XG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKHRpbWUgLyAzNjAwKSArIFwiOlwiICsgTWF0aC5mbG9vcih0aW1lICUgMzYwMCAvIDYwKSArIFwiOlwiICsgKHRpbWUgJSAoMzYwMCAqIDYwKSk7XG4gICAgfSxcblxuICAgIHNlZWtOb2RlQnlUYWc6IGZ1bmN0aW9uIChyb290Tm9kZSwgdGFnKSB7XG4gICAgICAgIGlmIChudWxsID09PSByb290Tm9kZSl7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZihyb290Tm9kZS5nZXRUYWcoKSA9PT0gdGFnKXtcbiAgICAgICAgICAgIHJldHVybiByb290Tm9kZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYXJyYXlSb290Q2hpbGRyZW4gPSByb290Tm9kZS5nZXRDaGlsZHJlbigpO1xuICAgICAgICBpZihhcnJheVJvb3RDaGlsZHJlbiAmJiBhcnJheVJvb3RDaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB2YXIgbGVuZ3RoID0gYXJyYXlSb290Q2hpbGRyZW4ubGVuZ3RoO1xuICAgICAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNoaWxkID0gYXJyYXlSb290Q2hpbGRyZW5baV07XG4gICAgICAgICAgICAgICAgaWYgKG51bGwgIT09IGNoaWxkKXtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlcyA9IHRoaXMuc2Vla05vZGVCeVRhZyhjaGlsZCwgdGFnKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG51bGwgIT09IHJlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuXG4gICAgYXV0b1JlbGVhc2U6IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgVXRpbHMuZXhlY3V0ZUluTmV4dEZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIG9iai5yZWxlYXNlKCk7XG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBleGVjdXRlSW5OZXh0RnJhbWU6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIDApO1xuICAgIH0sXG5cbiAgICBpc0lPUzogZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoY2Muc3lzLm9zID09PSBjYy5zeXMuT1NfSU9TKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuICAgIGdldERheUJ5VHM6IGZ1bmN0aW9uKHRzKSB7XG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKHRzIC8gKDEwMDAgKiAzNjAwICogMjQpKTtcbiAgICB9LFxuXG4gICAgaXNTZWxmR2FtZTogZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoY2Muc3lzLm9zID09PSBjYy5zeXMuT1NfSU9TKSB7XG4gICAgICAgICAgICBpZiAoY2Muc3lzLmxhbmd1YWdlID09PSBjYy5zeXMuTEFOR1VBR0VfQ0hJTkVTRSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy92YXIgcGxhdGZvcm1OYW1lID0ganNiX2RwLm9uZVNka0JyaWRnZS5nZXRDaGFubmVsTmFtZSgpO1xuICAgICAgICAgICAgLy9pZiAocGxhdGZvcm1OYW1lID09PSBcInRhcHRhcFwiKSB7XG4gICAgICAgICAgICAvLyAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIC8vfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaXNBbmRyb2lkQW5kU2VsZkdhbWUoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuICAgIGlzQW5kcm9pZEFuZFNlbGZHYW1lOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgdmFyIHBsYXRmb3JtTmFtZSA9IGpzYl9kcC5vbmVTZGtCcmlkZ2UuZ2V0Q2hhbm5lbE5hbWUoKTtcbiAgICAgICAgaWYgKHBsYXRmb3JtTmFtZSA9PT0gXCJ0YXB0YXBcIikge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICBnZXREYXNoUG9pbnRzTm9kZTogZnVuY3Rpb24gKHBvaW50cywgZGFzaEFycmF5LCBkYXNoT2Zmc2V0KSB7XG4gICAgICAgIHZhciBsYXN0eCA9IHBvaW50c1swXS54LFxuICAgICAgICAgICAgbGFzdHkgPSBwb2ludHNbMF0ueTtcblxuICAgICAgICB2YXIgZHgsIGR5O1xuXG4gICAgICAgIHZhciB0b3RhbExlbmd0aCA9IDA7XG4gICAgICAgIHZhciBsZW5ndGggPSAwO1xuXG4gICAgICAgIHZhciBkYXNoTGVuZ3RoID0gZGFzaEFycmF5Lmxlbmd0aDtcbiAgICAgICAgdmFyIGRhc2hJbmRleCA9IDA7XG5cbiAgICAgICAgdmFyIGZyb20gPSBkYXNoT2Zmc2V0O1xuICAgICAgICB2YXIgZHJhd0xlbmd0aCA9IGRhc2hBcnJheVtkYXNoSW5kZXhdO1xuICAgICAgICB2YXIgdG8gPSBkYXNoT2Zmc2V0ICsgZHJhd0xlbmd0aDtcblxuICAgICAgICB2YXIgeDEsIHkxO1xuICAgICAgICB2YXIgeCwgeTtcblxuICAgICAgICB2YXIgcGFyZW50ID0gbmV3IGNjLk5vZGUoKTtcblxuICAgICAgICB2YXIgYWRkRG90Tm9kZSA9IGZ1bmN0aW9uICh4MSwgeTEpIHtcbiAgICAgICAgICAgIHZhciBkb3QgPSBuZXcgY2MuU3ByaXRlKFwiI3NraW5fMC5wbmdcIik7XG4gICAgICAgICAgICBwYXJlbnQuYWRkQ2hpbGQoZG90KTtcbiAgICAgICAgICAgIGRvdC5zZXRQb3NpdGlvbihjYy5wKHgxLCB5MSkpO1xuICAgICAgICAgICAgZG90LnNjYWxlID0gMC4yO1xuICAgICAgICAgICAgZG90Lm9wYWNpdHkgPSAxNTA7XG4gICAgICAgICAgICBkb3Quc2V0Q29sb3IoY2MuY29sb3IuR1JBWSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBwb2ludHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICB4ID0gcG9pbnRzW2ldLng7XG4gICAgICAgICAgICB5ID0gcG9pbnRzW2ldLnk7XG5cbiAgICAgICAgICAgIGlmIChpICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgZHggPSB4IC0gbGFzdHg7XG4gICAgICAgICAgICAgICAgZHkgPSB5IC0gbGFzdHk7XG5cbiAgICAgICAgICAgICAgICBsZW5ndGggPSBNYXRoLnNxcnQoZHggKiBkeCArIGR5ICogZHkpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCF4MSkgeDEgPSBsYXN0eDtcbiAgICAgICAgICAgICAgICBpZiAoIXkxKSB5MSA9IGxhc3R5O1xuXG4gICAgICAgICAgICAgICAgd2hpbGUgKGxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRvdGFsTGVuZ3RoICsgbGVuZ3RoIDwgZnJvbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxMZW5ndGggKz0gbGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGVuZ3RoID0gMDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgeDEgPSB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgeTEgPSB5O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0b3RhbExlbmd0aCA8PSBmcm9tKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGlmTGVuZ3RoID0gZnJvbSAtIHRvdGFsTGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHAgPSBkaWZMZW5ndGggLyBsZW5ndGg7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHgxID0geDEgKyBwICogKHggLSB4MSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB5MSA9IHkxICsgcCAqICh5IC0geTEpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2N0eC5tb3ZlVG8oeDEsIHkxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZERvdE5vZGUoeDEsIHkxKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgbGVuZ3RoIC09IGRpZkxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsTGVuZ3RoICs9IGRpZkxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmICgodG90YWxMZW5ndGggKyBsZW5ndGgpIDwgdG8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHgxID0geDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHkxID0geTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy9jdHgubGluZVRvKHgxLCB5MSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGREb3ROb2RlKHgxLCB5MSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsTGVuZ3RoICs9IGxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlbmd0aCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoKHRvdGFsTGVuZ3RoICsgbGVuZ3RoKSA+PSB0bykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRpZkxlbmd0aCA9IHRvIC0gdG90YWxMZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcCA9IGRpZkxlbmd0aCAvIGxlbmd0aDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgeDEgPSB4MSArIHAgKiAoeCAtIHgxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHkxID0geTEgKyBwICogKHkgLSB5MSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vY3R4LmxpbmVUbyh4MSwgeTEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRkRG90Tm9kZSh4MSwgeTEpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBsZW5ndGggLT0gZGlmTGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxMZW5ndGggKz0gZGlmTGVuZ3RoO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBmcm9tID0gdG8gKyBkYXNoQXJyYXlbKytkYXNoSW5kZXggJSBkYXNoTGVuZ3RoXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvID0gZnJvbSArIGRhc2hBcnJheVsrK2Rhc2hJbmRleCAlIGRhc2hMZW5ndGhdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvL2FkZERvdE5vZGUoeCwgeSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxhc3R4ID0geDtcbiAgICAgICAgICAgIGxhc3R5ID0geTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFyZW50O1xuICAgIH0sXG5cbiAgICBpc0ZpbGVFeGlzdDogZnVuY3Rpb24gKGZpbGVOYW1lKSB7XG4gICAgICAgIGlmIChjYy5zeXMuaXNOYXRpdmUpIHtcbiAgICAgICAgICAgIGlmIChqc2IuZmlsZVV0aWxzLmlzRmlsZUV4aXN0KGZpbGVOYW1lKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGNjLmxvYWRlci5nZXRSZXMoZmlsZU5hbWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiDliKTmlq3lrr3pq5jmr5TmmK/lkKblpKfkuo4y77yM5aaC5p6c5aSn5LqOMu+8jOWImeS9v+eUqOWImOa1t+Wxj+mAgumFjeaWueW8j+adpeaYvuekulVJXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICovXG4gICAgaXNOb3RjaFNjcmVlbjogZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoY2Muc3lzLmlzTmF0aXZlKSB7XG4gICAgICAgICAgICByZXR1cm4ganNiX2RwLm9uZVNka0JyaWRnZS5pc05vdGNoU2NyZWVuKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICBsb2FkSXRlcmF0b3I6IGZ1bmN0aW9uIChmdW5jTGlzdCwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB2YXIgZnVuYyA9IGZ1bmNMaXN0LnNoaWZ0KCk7XG4gICAgICAgIGlmIChmdW5jKSB7XG4gICAgICAgICAgICBVdGlscy5leGVjdXRlSW5OZXh0RnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGZ1bmMoKTtcbiAgICAgICAgICAgICAgICBzZWxmLmxvYWRJdGVyYXRvcihmdW5jTGlzdCwgY2FsbGJhY2spO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIGdldFRvdGFsTWVtb3J5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChjYy5zeXMuaXNOYXRpdmUpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy50b3RhbE1lbW9yeSkge1xuICAgICAgICAgICAgICAgIHRoaXMudG90YWxNZW1vcnkgPSBqc2JfZHAub25lU2RrQnJpZGdlLmdldFRvdGFsTWVtb3J5KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy50b3RhbE1lbW9yeTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMDtcbiAgICB9LFxuXG4gICAgaXNMb3dBbmRyb2lkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChjYy5zeXMub3MgPT09IGNjLnN5cy5PU19BTkRST0lEKSB7XG4gICAgICAgICAgICBjYy5sb2coXCJtZW1vcnk6IFwiLCB0aGlzLmdldFRvdGFsTWVtb3J5KCkpO1xuICAgICAgICAgICAgcmV0dXJuICh0aGlzLmdldFRvdGFsTWVtb3J5KCkgPD0gMTUzNik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICBzZXRUcmFja1ZhbHVlOiBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKGNjLnN5cy5pc05hdGl2ZSkge1xuICAgICAgICAgICAganNiX2RwLm9uZVNka0JyaWRnZS5zZXRUcmFja1ZhbHVlKG5hbWUsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBnZXRSZXZlcnNlU3RyaW5nOiBmdW5jdGlvbiAoc3RyKSB7XG4gICAgICAgIHJldHVybiBzdHIuc3BsaXQoJycpLnJldmVyc2UoKS5qb2luKCcnKTtcbiAgICB9LFxuXG4gICAgZ2V0Q3VycmVudEZQUzogZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoZ2FtZS51dGlscy5pc0xvd0FuZHJvaWQoKSkge1xuICAgICAgICAgICAgZ2FtZS5jb25maWcubG93QW5kcm9pZEZQUztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gNjA7XG4gICAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBVdGlsczsiLCIvKipcbiAqIENyZWF0ZWQgYnkgWGluQ2hlbmcgb24gOC8xOC8xNi5cbiAqL1xuXG52YXIgRWFzaW5nRnVuY3Rpb25zID0ge1xuICAgIC8vIG5vIGVhc2luZywgbm8gYWNjZWxlcmF0aW9uXG4gICAgbGluZWFyOiBmdW5jdGlvbiAodCkgeyByZXR1cm4gdDsgfSxcbiAgICAvLyBhY2NlbGVyYXRpbmcgZnJvbSB6ZXJvIHZlbG9jaXR5XG4gICAgZWFzZUluUXVhZDogZnVuY3Rpb24gKHQpIHsgcmV0dXJuIHQqdDsgfSxcbiAgICAvLyBkZWNlbGVyYXRpbmcgdG8gemVybyB2ZWxvY2l0eVxuICAgIGVhc2VPdXRRdWFkOiBmdW5jdGlvbiAodCkgeyByZXR1cm4gdCooMi10KTsgfSxcbiAgICAvLyBhY2NlbGVyYXRpb24gdW50aWwgaGFsZndheSwgdGhlbiBkZWNlbGVyYXRpb25cbiAgICBlYXNlSW5PdXRRdWFkOiBmdW5jdGlvbiAodCkgeyByZXR1cm4gdDwwLjUgPyAyKnQqdCA6IC0xKyg0LTIqdCkqdDsgfSxcbiAgICAvLyBhY2NlbGVyYXRpbmcgZnJvbSB6ZXJvIHZlbG9jaXR5XG4gICAgZWFzZUluQ3ViaWM6IGZ1bmN0aW9uICh0KSB7IHJldHVybiB0KnQqdDsgfSxcbiAgICAvLyBkZWNlbGVyYXRpbmcgdG8gemVybyB2ZWxvY2l0eVxuICAgIGVhc2VPdXRDdWJpYzogZnVuY3Rpb24gKHQpIHsgcmV0dXJuICgtLXQpKnQqdCsxOyB9LFxuICAgIC8vIGFjY2VsZXJhdGlvbiB1bnRpbCBoYWxmd2F5LCB0aGVuIGRlY2VsZXJhdGlvblxuICAgIGVhc2VJbk91dEN1YmljOiBmdW5jdGlvbiAodCkgeyByZXR1cm4gdDwwLjUgPyA0KnQqdCp0IDogKHQtMSkqKDIqdC0yKSooMip0LTIpKzE7IH0sXG4gICAgLy8gYWNjZWxlcmF0aW5nIGZyb20gemVybyB2ZWxvY2l0eVxuICAgIGVhc2VJblF1YXJ0OiBmdW5jdGlvbiAodCkgeyByZXR1cm4gdCp0KnQqdDsgfSxcbiAgICAvLyBkZWNlbGVyYXRpbmcgdG8gemVybyB2ZWxvY2l0eVxuICAgIGVhc2VPdXRRdWFydDogZnVuY3Rpb24gKHQpIHsgcmV0dXJuIDEtKC0tdCkqdCp0KnQ7IH0sXG4gICAgLy8gYWNjZWxlcmF0aW9uIHVudGlsIGhhbGZ3YXksIHRoZW4gZGVjZWxlcmF0aW9uXG4gICAgZWFzZUluT3V0UXVhcnQ6IGZ1bmN0aW9uICh0KSB7IHJldHVybiB0PDAuNSA/IDgqdCp0KnQqdCA6IDEtOCooLS10KSp0KnQqdDsgfSxcbiAgICAvLyBhY2NlbGVyYXRpbmcgZnJvbSB6ZXJvIHZlbG9jaXR5XG4gICAgZWFzZUluUXVpbnQ6IGZ1bmN0aW9uICh0KSB7IHJldHVybiB0KnQqdCp0KnQ7IH0sXG4gICAgLy8gZGVjZWxlcmF0aW5nIHRvIHplcm8gdmVsb2NpdHlcbiAgICBlYXNlT3V0UXVpbnQ6IGZ1bmN0aW9uICh0KSB7IHJldHVybiAxKygtLXQpKnQqdCp0KnQ7IH0sXG4gICAgLy8gYWNjZWxlcmF0aW9uIHVudGlsIGhhbGZ3YXksIHRoZW4gZGVjZWxlcmF0aW9uXG4gICAgZWFzZUluT3V0UXVpbnQ6IGZ1bmN0aW9uICh0KSB7IHJldHVybiB0PDAuNSA/IDE2KnQqdCp0KnQqdCA6IDErMTYqKC0tdCkqdCp0KnQqdDsgfSxcblxuICAgIGVhc2VPdXRFbGFzdGljOiBmdW5jdGlvbih0KXsgIHZhciBwID0gMC40OyByZXR1cm4gTWF0aC5wb3coMiwtMTAqdCkgKiBNYXRoLnNpbigodC1wLzQpKigyKk1hdGguUEkpL3ApICsgMTsgfSxcblxuICAgIGVsYXN0aWM6IGZ1bmN0aW9uKHQsIHgpIHsgcmV0dXJuIE1hdGgucG93KDIsIDEwICogKHQtMSkpICogTWF0aC5jb3MoMjAqTWF0aC5QSSp4LzMqdCk7IH0sXG5cbiAgICAvLyDlvLnot7NcbiAgICBib3VuY2U6IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgZm9yKHZhciBhID0gMCwgYiA9IDE7IDE7IGEgKz0gYiwgYiAvPSAyKSB7XG4gICAgICAgICAgICBpZiAodCA+PSAoNyAtIDQgKiBhKSAvIDExKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC1NYXRoLnBvdygoMTEgLSA2ICogYSAtIDExICogdCkgLyA0LCAyKSArIE1hdGgucG93KGIsIDIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8v5LiJ5qyh6LSd5aGe5bCU566X5rOVXG4gICAgYnNlQmFzZTogZnVuY3Rpb24odCwgcDAsIHAxLCBwMiwgcDMpe1xuICAgICAgICB2YXIgeCA9IHAwLnggKiAoMSAtIHQpICogKDEgLSB0KSAqICgxIC0gdCkgKyBwMS54ICogMyAqIHQgKiAoMSAtIHQpICogKDEgLSB0KSArIHAyLnggKiAzICogdCAqIHQgKiAoMSAtIHQpICsgcDMueCAqIHQgKiB0ICogdDtcbiAgICAgICAgdmFyIHkgPSBwMC55ICogKDEgLSB0KSAqICgxIC0gdCkgKiAoMSAtIHQpICsgcDEueSAqIDMgKiB0ICogKDEgLSB0KSAqICgxIC0gdCkgKyBwMi55ICogMyAqIHQgKiB0ICogKDEgLSB0KSArIHAzLnkgKiB0ICogdCAqIHQ7XG4gICAgICAgIHJldHVybiB7eDp4LHk6eX07XG4gICAgfSxcblxuICAgIGRvU2hha2luZzogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgcmV0dXJuIC1NYXRoLnNpbigyICogTWF0aC5QSSAqIDMgKiB0KSAqIE1hdGgucG93KCgxIC0gdCksIDIpO1xuICAgIH1cblxufTtcblxudmFyIFdoZWVsID0gY2MuQ2xhc3MuZXh0ZW5kKHtcbiAgICB0YXJnZXQ6IG51bGwsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSB0YXJnZXQgbm9kZSB5b3Ugd2FudCB0byByb3RhdGVcbiAgICBiQ3VydmU6IFswLjQyLCAtMC4wOCwgMC41OCwgMS4xMF0sICAgICAgICAgIC8vIG1hZ2ljIGN1cnZlXG4gICAgZnBzOiAwLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBmcHNcbiAgICBuUm91bmQ6IDEsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1vdmUgblJvdW5kIHggMzYwXG5cbiAgICBmcmFtZUNvdW50OiAwLFxuICAgIGVsYXBzZWRUaW1lOiAwLFxuICAgIHRvdGFsUm90YXRpb25UaW1lOiAwLFxuICAgIHN0YXJ0Um90YXRpb246IDAsICAgICAgIC8vIHRoZSBzdGFydCByb3RhdGlvblxuICAgIG1vdmVtZW50OiAwLCAgICAgICAgICAgICAvLyB0aGUgbW92ZW1lbnQgZGVncmVlc1xuICAgIGVhc3lGdW5jdGlvbjogbnVsbCxcbiAgICBlbmRDYWxsYmFjazogbnVsbCxcbiAgICB0YXJnZXRSb3RhdGlvbjogMCxcbiAgICB3aGVlbEl0ZW1BbmdsZTogMCxcbiAgICBsYXN0VGltZTogMCxcbiAgICBsYXN0Um90YXRpb246IDAsXG4gICAgc3BlZWQ6IDAsXG5cbiAgICBfbG90dGVyeVJlc2V0aW5nOiBmYWxzZSxcbiAgICBfaXNIaWdoUm90YXRpbmc6IGZhbHNlLFxuICAgIF9zdGFydFVwZGF0ZTogZmFsc2UsXG5cblxuICAgIC8qXG4gICAgICogdGFyZ2V0OiB0aGUgbm9kZSB5b3Ugd2FudCB0byByb3RhdGVcbiAgICAgKiBmcHM6IDMwZnBzIGJ5IGRlZmF1bHRcbiAgICAgKi9cbiAgICBjdG9yOiBmdW5jdGlvbiAodGFyZ2V0LCBmcHMpIHtcbiAgICAgICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gICAgICAgIHRoaXMuZnBzID0gZnBzIHx8IDYwO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiByb3RhdGUgdGhlIHRhcmdldCBub2RlIHRvIHRoZSBzcGVjaWZpZWQgdmFsdWVcbiAgICAgKiB0aGUgaW5kZXggc2hvdWxkIHN0YXJ0IHdpdGggMFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSByb3RhdGlvblRpbWVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdGFyZ2V0Um90YXRpb25cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2hlZWxJdGVtQW5nbGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSByb2xsRW5kQ2FsbGJhY2tcbiAgICAgKi9cbiAgICByb3RhdGU6IGZ1bmN0aW9uIChyb3RhdGlvblRpbWUsIHRhcmdldFJvdGF0aW9uLCB3aGVlbEl0ZW1BbmdsZSwgcm9sbEVuZENhbGxiYWNrKSB7XG4gICAgICAgIC8vIEkgYW0gbW92aW5nXG4gICAgICAgIGlmICh0aGlzLl9zdGFydFVwZGF0ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy50YXJnZXRSb3RhdGlvbiA9IHRhcmdldFJvdGF0aW9uO1xuICAgICAgICB0aGlzLmZyYW1lQ291bnQgPSAwO1xuICAgICAgICB0aGlzLnRvdGFsUm90YXRpb25UaW1lID0gcm90YXRpb25UaW1lO1xuXG4gICAgICAgIHRoaXMuc3RhcnRSb3RhdGlvbiA9IHRoaXMudGFyZ2V0LnJvdGF0aW9uICUgMzYwO1xuICAgICAgICB0aGlzLm1vdmVtZW50ID0gdGFyZ2V0Um90YXRpb24gLSB0aGlzLnN0YXJ0Um90YXRpb247XG4gICAgICAgIHRoaXMud2hlZWxJdGVtQW5nbGUgPSB3aGVlbEl0ZW1BbmdsZTtcblxuICAgICAgICB0aGlzLmxhc3RUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgICAgdGhpcy5sYXN0Um90YXRpb24gPSAwO1xuICAgICAgICB0aGlzLl9pc0hpZ2hSb3RhdGluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9sb3R0ZXJ5UmVzZXRpbmcgPSBmYWxzZTtcblxuICAgICAgICB0aGlzLmVhc3lGdW5jdGlvbiA9IHRoaXMuZGVmYXVsdEVhc3lGdW5jdGlvbjtcbiAgICAgICAgLy8vLyB1c2UgYmV6aWVyXG4gICAgICAgIC8vaWYgKEFycmF5LmlzQXJyYXkocGFyYW1zLmVhc3lGdW5jdGlvbikpIHtcbiAgICAgICAgLy8gICAgdGhpcy5iQ3VydmUgPSBwYXJhbXMuZWFzeUZ1bmN0aW9uO1xuICAgICAgICAvLyAgICB0aGlzLmVhc3lGdW5jdGlvbiA9IHRoaXMuZGVmYXVsdEVhc3lGdW5jdGlvbjtcbiAgICAgICAgLy99XG4gICAgICAgIC8vLy8gcHJvdmlkZSBhIGZ1bmN0aW9uXG4gICAgICAgIC8vZWxzZSBpZiAodHlwZW9mIGVhc3lGdW5jdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyAgICB0aGlzLmVhc3lGdW5jdGlvbiA9IHBhcmFtcy5lYXN5RnVuY3Rpb247XG4gICAgICAgIC8vfVxuICAgICAgICAvLy8vIHByb3ZpZGUgYSBmdW5jdGlvbk5hbWVcbiAgICAgICAgLy9lbHNlIHtcbiAgICAgICAgLy8gICAgdGhpcy5lYXN5RnVuY3Rpb24gPSBFYXNpbmdGdW5jdGlvbnNbcGFyYW1zLmVhc3lGdW5jdGlvbl0gfHwgdGhpcy5kZWZhdWx0RWFzeUZ1bmN0aW9uO1xuICAgICAgICAvL31cblxuICAgICAgICB0aGlzLmVuZENhbGxiYWNrID0gcm9sbEVuZENhbGxiYWNrO1xuXG4gICAgICAgIHRoaXMuc2NoZWR1bGVVcGRhdGUoKTtcbiAgICAgICAgdGhpcy5fc3RhcnRVcGRhdGUgPSB0cnVlO1xuICAgIH0sXG5cbiAgICBzY2hlZHVsZVVwZGF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmVsYXBzZWRUaW1lID0gMDtcbiAgICAgICAgY2MuZGlyZWN0b3IuZ2V0U2NoZWR1bGVyKCkuc2NoZWR1bGVVcGRhdGVGb3JUYXJnZXQodGhpcywgMCwgZmFsc2UpO1xuICAgIH0sXG5cbiAgICB1bnNjaGVkdWxlVXBkYXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNjLmRpcmVjdG9yLmdldFNjaGVkdWxlcigpLnVuc2NoZWR1bGVVcGRhdGVGb3JUYXJnZXQodGhpcyk7XG4gICAgICAgIHRoaXMuZWxhcHNlZFRpbWUgPSAwO1xuICAgIH0sXG5cbiAgICB1cGRhdGU6IGZ1bmN0aW9uIChkdCkge1xuICAgICAgICBpZiAodGhpcy5fc3RhcnRVcGRhdGUpIHtcbiAgICAgICAgICAgIHRoaXMubW92ZUJ5RnJhbWUoZHQpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qcm90YXRlIHRoZSByZWVsIGZyYW1lIGJ5IGZyYW1lKi9cbiAgICBtb3ZlQnlGcmFtZTogZnVuY3Rpb24gKGR0KSB7XG4gICAgICAgIC8vIGNhbGN1bGF0ZSBlbGFwc2VkIHRpbWVcbiAgICAgICAgdGhpcy5lbGFwc2VkVGltZSArPSBkdDtcblxuICAgICAgICAvLyBjYWxjdWxhdGUgdGhlIG1vdmluZyBwcm9ncmVzc1xuICAgICAgICB2YXIgcHJvZ3Jlc3MgPSB0aGlzLmVhc3lGdW5jdGlvbih0aGlzLmVsYXBzZWRUaW1lIC8gdGhpcy50b3RhbFJvdGF0aW9uVGltZSk7XG5cbiAgICAgICAgLy8gZG8gdGhlIHJvdGF0aW9uXG4gICAgICAgIHRoaXMudGFyZ2V0LnJvdGF0aW9uID0gcHJvZ3Jlc3MgKiB0aGlzLm1vdmVtZW50ICsgdGhpcy5zdGFydFJvdGF0aW9uO1xuXG4gICAgICAgIC8vdmFyIGhhc1N0b3AgPSBmYWxzZTtcbiAgICAgICAgLy8gc3RvcCBoZXJlXG4gICAgICAgIGlmICh0aGlzLnRhcmdldFJvdGF0aW9uIDw9IHRoaXMudGFyZ2V0LnJvdGF0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLnRhcmdldC5yb3RhdGlvbiA9IHRoaXMudGFyZ2V0Um90YXRpb247XG4gICAgICAgICAgICB0aGlzLnVuc2NoZWR1bGVVcGRhdGUoKTtcbiAgICAgICAgICAgIHRoaXMuX3N0YXJ0VXBkYXRlID0gZmFsc2U7XG5cbiAgICAgICAgICAgIC8vZ2FtZS5hdWRpby5zdG9wRWZmZWN0KFwic2xvdHMvcm91bGV0dGUtYmdcIik7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmVuZENhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbmRDYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zcGVlZCA9ICh0aGlzLnRhcmdldC5yb3RhdGlvbiAtIHRoaXMubGFzdFJvdGF0aW9uKSAvIChEYXRlLm5vdygpIC0gdGhpcy5sYXN0VGltZSkgKiAxMDAwO1xuXG4gICAgICAgIHRoaXMubGFzdFRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgICB0aGlzLmxhc3RSb3RhdGlvbiA9IHRoaXMudGFyZ2V0LnJvdGF0aW9uO1xuICAgIH0sXG5cbiAgICAvKiBVc2UgYmV6aWVyIEN1cml2ZSBhcyBkZWZhdWx0ICovXG4gICAgZGVmYXVsdEVhc3lGdW5jdGlvbjogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgdmFyIGJleiA9IHRoaXMuYkN1cnZlO1xuICAgICAgICB2YXIgY29vcmQgPSBFYXNpbmdGdW5jdGlvbnMuYnNlQmFzZSh0LCB7eDogMCwgeTogMH0sIHt4OiBiZXpbMF0sIHk6IGJlelsxXX0sIHt4OiBiZXpbMl0sIHk6IGJlelszXX0sIHtcbiAgICAgICAgICAgIHg6IDEsXG4gICAgICAgICAgICB5OiAxXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gY29vcmQueTtcbiAgICB9LFxuXG4gICAgZ2V0VGFyZ2V0Um90YXRpb246IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGFyZ2V0Um90YXRpb247XG4gICAgfSxcblxuICAgIGdldFNwZWVkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNwZWVkO1xuICAgIH1cbn0pO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gV2hlZWw7XG4iLCIvKipcbiAqIEEgYnJpZWYgZXhwbGFuYXRpb24gZm9yIFwicHJvamVjdC5qc29uXCI6XG4gKiBIZXJlIGlzIHRoZSBjb250ZW50IG9mIHByb2plY3QuanNvbiBmaWxlLCB0aGlzIGlzIHRoZSBnbG9iYWwgY29uZmlndXJhdGlvbiBmb3IgeW91ciBnYW1lLCB5b3UgY2FuIG1vZGlmeSBpdCB0byBjdXN0b21pemUgc29tZSBiZWhhdmlvci5cbiAqIFRoZSBkZXRhaWwgb2YgZWFjaCBmaWVsZCBpcyB1bmRlciBpdC5cbiB7XG4gICAgXCJwcm9qZWN0X3R5cGVcIjogXCJqYXZhc2NyaXB0XCIsXG4gICAgLy8gXCJwcm9qZWN0X3R5cGVcIiBpbmRpY2F0ZSB0aGUgcHJvZ3JhbSBsYW5ndWFnZSBvZiB5b3VyIHByb2plY3QsIHlvdSBjYW4gaWdub3JlIHRoaXMgZmllbGRcblxuICAgIFwiZGVidWdNb2RlXCIgICAgIDogMSxcbiAgICAvLyBcImRlYnVnTW9kZVwiIHBvc3NpYmxlIHZhbHVlcyA6XG4gICAgLy8gICAgICAwIC0gTm8gbWVzc2FnZSB3aWxsIGJlIHByaW50ZWQuXG4gICAgLy8gICAgICAxIC0gY2MuZXJyb3IsIGNjLmFzc2VydCwgY2Mud2FybiwgY2MubG9nIHdpbGwgcHJpbnQgaW4gY29uc29sZS5cbiAgICAvLyAgICAgIDIgLSBjYy5lcnJvciwgY2MuYXNzZXJ0LCBjYy53YXJuIHdpbGwgcHJpbnQgaW4gY29uc29sZS5cbiAgICAvLyAgICAgIDMgLSBjYy5lcnJvciwgY2MuYXNzZXJ0IHdpbGwgcHJpbnQgaW4gY29uc29sZS5cbiAgICAvLyAgICAgIDQgLSBjYy5lcnJvciwgY2MuYXNzZXJ0LCBjYy53YXJuLCBjYy5sb2cgd2lsbCBwcmludCBvbiBjYW52YXMsIGF2YWlsYWJsZSBvbmx5IG9uIHdlYi5cbiAgICAvLyAgICAgIDUgLSBjYy5lcnJvciwgY2MuYXNzZXJ0LCBjYy53YXJuIHdpbGwgcHJpbnQgb24gY2FudmFzLCBhdmFpbGFibGUgb25seSBvbiB3ZWIuXG4gICAgLy8gICAgICA2IC0gY2MuZXJyb3IsIGNjLmFzc2VydCB3aWxsIHByaW50IG9uIGNhbnZhcywgYXZhaWxhYmxlIG9ubHkgb24gd2ViLlxuXG4gICAgXCJzaG93RlBTXCIgICAgICAgOiB0cnVlLFxuICAgIC8vIExlZnQgYm90dG9tIGNvcm5lciBmcHMgaW5mb3JtYXRpb24gd2lsbCBzaG93IHdoZW4gXCJzaG93RlBTXCIgZXF1YWxzIHRydWUsIG90aGVyd2lzZSBpdCB3aWxsIGJlIGhpZGUuXG5cbiAgICBcImZyYW1lUmF0ZVwiICAgICA6IDYwLFxuICAgIC8vIFwiZnJhbWVSYXRlXCIgc2V0IHRoZSB3YW50ZWQgZnJhbWUgcmF0ZSBmb3IgeW91ciBnYW1lLCBidXQgdGhlIHJlYWwgZnBzIGRlcGVuZHMgb24geW91ciBnYW1lIGltcGxlbWVudGF0aW9uIGFuZCB0aGUgcnVubmluZyBlbnZpcm9ubWVudC5cblxuICAgIFwiaWRcIiAgICAgICAgICAgIDogXCJnYW1lQ2FudmFzXCIsXG4gICAgLy8gXCJnYW1lQ2FudmFzXCIgc2V0cyB0aGUgaWQgb2YgeW91ciBjYW52YXMgZWxlbWVudCBvbiB0aGUgd2ViIHBhZ2UsIGl0J3MgdXNlZnVsIG9ubHkgb24gd2ViLlxuXG4gICAgXCJyZW5kZXJNb2RlXCIgICAgOiAwLFxuICAgIC8vIFwicmVuZGVyTW9kZVwiIHNldHMgdGhlIHJlbmRlcmVyIHR5cGUsIG9ubHkgdXNlZnVsIG9uIHdlYiA6XG4gICAgLy8gICAgICAwIC0gQXV0b21hdGljYWxseSBjaG9zZW4gYnkgZW5naW5lXG4gICAgLy8gICAgICAxIC0gRm9yY2VkIHRvIHVzZSBjYW52YXMgcmVuZGVyZXJcbiAgICAvLyAgICAgIDIgLSBGb3JjZWQgdG8gdXNlIFdlYkdMIHJlbmRlcmVyLCBidXQgdGhpcyB3aWxsIGJlIGlnbm9yZWQgb24gbW9iaWxlIGJyb3dzZXJzXG5cbiAgICBcImVuZ2luZURpclwiICAgICA6IFwiZnJhbWV3b3Jrcy9jb2NvczJkLWh0bWw1L1wiLFxuICAgIC8vIEluIGRlYnVnIG1vZGUsIGlmIHlvdSB1c2UgdGhlIHdob2xlIGVuZ2luZSB0byBkZXZlbG9wIHlvdXIgZ2FtZSwgeW91IHNob3VsZCBzcGVjaWZ5IGl0cyByZWxhdGl2ZSBwYXRoIHdpdGggXCJlbmdpbmVEaXJcIixcbiAgICAvLyBidXQgaWYgeW91IGFyZSB1c2luZyBhIHNpbmdsZSBlbmdpbmUgZmlsZSwgeW91IGNhbiBpZ25vcmUgaXQuXG5cbiAgICBcIm1vZHVsZXNcIiAgICAgICA6IFtcImNvY29zMmRcIl0sXG4gICAgLy8gXCJtb2R1bGVzXCIgZGVmaW5lcyB3aGljaCBtb2R1bGVzIHlvdSB3aWxsIG5lZWQgaW4geW91ciBnYW1lLCBpdCdzIHVzZWZ1bCBvbmx5IG9uIHdlYixcbiAgICAvLyB1c2luZyB0aGlzIGNhbiBncmVhdGx5IHJlZHVjZSB5b3VyIGdhbWUncyByZXNvdXJjZSBzaXplLCBhbmQgdGhlIGNvY29zIGNvbnNvbGUgdG9vbCBjYW4gcGFja2FnZSB5b3VyIGdhbWUgd2l0aCBvbmx5IHRoZSBtb2R1bGVzIHlvdSBzZXQuXG4gICAgLy8gRm9yIGRldGFpbHMgYWJvdXQgbW9kdWxlcyBkZWZpbml0aW9ucywgeW91IGNhbiByZWZlciB0byBcIi4uLy4uL2ZyYW1ld29ya3MvY29jb3MyZC1odG1sNS9tb2R1bGVzQ29uZmlnLmpzb25cIi5cblxuICAgIFwianNMaXN0XCIgICAgICAgIDogW1xuICAgIF1cbiAgICAvLyBcImpzTGlzdFwiIHNldHMgdGhlIGxpc3Qgb2YganMgZmlsZXMgaW4geW91ciBnYW1lLlxuIH1cbiAqXG4gKi9cblxuY2MuZ2FtZS5vblN0YXJ0ID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKCFjYy5zeXMuaXNOYXRpdmUgJiYgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjb2Nvc0xvYWRpbmdcIikpXG4gICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjb2Nvc0xvYWRpbmdcIikpO1xuXG4gICAgY2Mudmlldy5lbmFibGVSZXRpbmEoZmFsc2UpO1xuICAgIGNjLnZpZXcuYWRqdXN0Vmlld1BvcnQodHJ1ZSk7XG5cbiAgICB2YXIgTG9naWNNYW4gPSByZXF1aXJlKFwiLi9jb21tb24vbW9kZWwvTG9naWNNYW5cIik7XG4gICAgTG9naWNNYW4uZ2V0SW5zdGFuY2UoKS5pbml0KCk7XG5cbiAgICB2YXIgVXRpbHMgPSByZXF1aXJlKFwiLi9jb21tb24vdXRpbC9VdGlsc1wiKTtcbiAgICBjYy52aWV3LnJlc2l6ZVdpdGhCcm93c2VyU2l6ZSh0cnVlKTtcbiAgICBjYy52aWV3LnNldERlc2lnblJlc29sdXRpb25TaXplKDEwMDAsIDEzMDAsIGNjLlJlc29sdXRpb25Qb2xpY3kuU0hPV19BTEwpO1xuICAgIC8vaWYgKGNjLnN5cy5pc05hdGl2ZSkge1xuICAgIC8vICAgIHZhciB3aWR0aCA9IDA7XG4gICAgLy8gICAgdmFyIGhlaWdodCA9IDA7XG4gICAgLy8gICAgaWYgKCEhR2FtZUJyaWRnZS5nZXRDb25maWcoKS5ob3Jpem9udGFsR2FtZSkge1xuICAgIC8vICAgICAgICBoZWlnaHQgPSA2NDA7XG4gICAgLy8gICAgICAgIGlmIChVdGlscy5pc1BhZCgpKSB7XG4gICAgLy8gICAgICAgICAgICBoZWlnaHQgPSA3Njg7XG4gICAgLy8gICAgICAgIH1cbiAgICAvLyAgICAgICAgd2lkdGggPSBoZWlnaHQgKiBjYy53aW5TaXplLndpZHRoIC8gY2Mud2luU2l6ZS5oZWlnaHQ7XG4gICAgLy8gICAgICAgIGNjLmxvZyhcImNjLndpblNpemUud2lkdGg6XCIgKyBjYy53aW5TaXplLndpZHRoKTtcbiAgICAvLyAgICAgICAgY2MubG9nKFwiY2Mud2luU2l6ZS5oZWlnaHQ6XCIgKyBjYy53aW5TaXplLmhlaWdodCk7XG4gICAgLy9cbiAgICAvLyAgICB9IGVsc2Uge1xuICAgIC8vICAgICAgICBoZWlnaHQgPSAxMTM2O1xuICAgIC8vICAgICAgICBpZiAoVXRpbHMuaXNQYWQoKSkge1xuICAgIC8vICAgICAgICAgICAgaGVpZ2h0ID0gMTAyNDtcbiAgICAvLyAgICAgICAgfVxuICAgIC8vICAgICAgICB3aWR0aCA9IGhlaWdodCAqIGNjLndpblNpemUud2lkdGggLyBjYy53aW5TaXplLmhlaWdodDtcbiAgICAvLyAgICB9XG4gICAgLy8gICAgY2MubG9nKFwid2lkdGg6XCIgKyB3aWR0aCk7XG4gICAgLy8gICAgY2MubG9nKFwiaGVpZ2h0OlwiICsgaGVpZ2h0KTtcbiAgICAvLyAgICBjYy52aWV3LnNldERlc2lnblJlc29sdXRpb25TaXplKHdpZHRoLCBoZWlnaHQsIGNjLlJlc29sdXRpb25Qb2xpY3kuU0hPV19BTEwpO1xuICAgIC8vfSBlbHNlIHtcbiAgICAvLyAgICBpZiAoISFHYW1lQnJpZGdlLmdldENvbmZpZygpLmhvcml6b250YWxHYW1lKSB7XG4gICAgLy8gICAgICAgIGNjLnZpZXcuc2V0RGVzaWduUmVzb2x1dGlvblNpemUoOTYwLCA2NDAsIGNjLlJlc29sdXRpb25Qb2xpY3kuU0hPV19BTEwpO1xuICAgIC8vICAgIH0gZWxzZSB7XG4gICAgLy8gICAgICAgIGNjLnZpZXcuc2V0RGVzaWduUmVzb2x1dGlvblNpemUoNjQwLCA5NjAsIGNjLlJlc29sdXRpb25Qb2xpY3kuU0hPV19BTEwpO1xuICAgIC8vICAgIH1cbiAgICAvL31cblxuICAgIC8vIFRoZSBnYW1lIHdpbGwgYmUgcmVzaXplZCB3aGVuIGJyb3dzZXIgc2l6ZSBjaGFuZ2VcbiAgICBjYy5CdWlsZGVyUmVhZGVyLnNldFJlc291cmNlUGF0aChcInJlcy9cIik7XG4gICAgY2Mudmlldy5yZXNpemVXaXRoQnJvd3NlclNpemUodHJ1ZSk7XG5cbiAgICBnYW1lLmRpYWxvZ01hbmFnZXIuY3JlYXRlT3ZlcmxheSgpO1xuICAgIHdpbmRvdy5pc0VkaXRvciA9IHRydWU7XG5cbiAgICB2YXIgQWRzUmVtaW5kZXJDb250cm9sbGVyID0gcmVxdWlyZShcIi4vbWFueV9icmlja3MvY29udHJvbGxlci9BZHNSZW1pbmRlckNvbnRyb2xsZXJcIik7XG4gICAgdmFyIERpYW1vbmRzQ29udHJvbGxlciA9IHJlcXVpcmUoXCIuL21hbnlfYnJpY2tzL2NvbnRyb2xsZXIvRGlhbW9uZHNDb250cm9sbGVyXCIpO1xuICAgIGNjLkJ1aWxkZXJSZWFkZXIucmVnaXN0ZXJDb250cm9sbGVyKFwiQWRzUmVtaW5kZXJDb250cm9sbGVyXCIsIG5ldyBBZHNSZW1pbmRlckNvbnRyb2xsZXIoKSk7XG4gICAgY2MuQnVpbGRlclJlYWRlci5yZWdpc3RlckNvbnRyb2xsZXIoXCJEaWFtb25kc0NvbnRyb2xsZXJcIiwgbmV3IERpYW1vbmRzQ29udHJvbGxlcigpKTtcblxuICAgIGlmIChjYy5zeXMuaXNOYXRpdmUpIHtcbiAgICAgICAgZ2FtZS5sb2NhbC5yZWxvYWQoKTtcbiAgICAgICAgY2MuZGlyZWN0b3IucnVuU2NlbmUobmV3IEdhbWVCcmlkZ2UuZ2V0TWVudVNjZW5lKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNjLmxvYWRlci5sb2FkSnNvbihcInJlcy9yZXNvdXJjZV9saXN0L3Jlc291cmNlX2xpc3QuanNvblwiLCBmdW5jdGlvbiAoZXJyb3IsIHJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKCFlcnJvcikge1xuICAgICAgICAgICAgICAgIGNjLkxvYWRlclNjZW5lLnByZWxvYWQocmVzdWx0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGdhbWUubG9jYWwucmVsb2FkKCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBFZGl0b3JTY2VuZSA9IHJlcXVpcmUoXCIuL21hbnlfYnJpY2tzL2VkaXRvci9zY2VuZS9FZGl0b3JTY2VuZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgY2MuZGlyZWN0b3IucnVuU2NlbmUobmV3IEVkaXRvclNjZW5lKCkpO1xuICAgICAgICAgICAgICAgIH0sIHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59O1xuY2MuZ2FtZS5ydW4oKTtcbiIsIlxudmFyIEJyaWNrQ29uZmlnID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMud2lkdGggPSAwO1xuICAgIHRoaXMuaGVpZ2h0ID0gMDtcbiAgICB0aGlzLnggPSAwO1xuICAgIHRoaXMueSA9IDA7XG4gICAgdGhpcy50eXBlID0gMDtcbn07XG5cbkJyaWNrQ29uZmlnLnByb3RvdHlwZS51bm1hcnNoYWwgPSBmdW5jdGlvbiAoanNvbk9iaikge1xuICAgIHRoaXMueCA9IGpzb25PYmpbMF07XG4gICAgdGhpcy55ID0ganNvbk9ialsxXTtcbiAgICB0aGlzLndpZHRoID0ganNvbk9ialsyXTtcbiAgICB0aGlzLmhlaWdodCA9IGpzb25PYmpbM107XG4gICAgdGhpcy50eXBlID0ganNvbk9ials0XTtcbn07XG5cbkJyaWNrQ29uZmlnLnByb3RvdHlwZS5nZXRIYXJkQ2ZnID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBoYXJkQ2ZnID0gbmV3IEJyaWNrQ29uZmlnKCk7XG4gICAgaGFyZENmZy54ID0gdGhpcy54ICogMjtcbiAgICBoYXJkQ2ZnLnkgPSB0aGlzLnkgKiAyO1xuICAgIGhhcmRDZmcud2lkdGggPSB0aGlzLndpZHRoICogMjtcbiAgICBoYXJkQ2ZnLmhlaWdodCA9IHRoaXMuaGVpZ2h0ICogMjtcbiAgICBoYXJkQ2ZnLnR5cGUgPSB0aGlzLnR5cGU7XG4gICAgcmV0dXJuIGhhcmRDZmc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJyaWNrQ29uZmlnOyIsIi8qKlxuICogQ3JlYXRlZCBieSBveWUgb24gMTYvNS8xOS5cbiAqL1xudmFyIENvbmZpZyA9IHtcbiAgICBpdHVuZXNEb3dubG9hZFVybDogXCJpdG1zLWFwcHM6Ly9pdHVuZXMuYXBwbGUuY29tL2FwcC9pZDEzNzI4MzcxMjM/YWN0aW9uPXdyaXRlLXJldmlld1wiLFxuICAgIGdvb2dsZVBsYXlVcmw6IFwiaHR0cDovL2JpdC5seS8yTzhHOXZ4XCIsXG4gICAgaW9zU2hvcnRVcmw6IFwiaHR0cHM6Ly9hcHBsZS5jby8yVVBDd3o2XCIsXG4gICAgYW5kcm9pZFNob3J0VXJsOiBcImh0dHA6Ly9iaXQubHkvMk84Rzl2eFwiLFxuICAgIGFwcE5hbWU6IFwiQnJlYWsgQnJpY2tzXCIsXG4gICAgaW9zTGVhZGVyQm9hcmRLZXk6IFwiY29tLmRvdWFwcC5tYW55YnJpY2tzLnJhbmtcIixcbiAgICBpb3NIYXJkTGVhZGVyQm9hcmRLZXk6IFwiY29tLmRvdWFwcC5tYW55YnJpY2tzLmhhcmRyYW5rXCIsXG4gICAgZ29vZ2xlUGxheUxlYWRlckJvYXJkS2V5OiBcIkNna0lvdUN0MC1rQkVBSVFBUVwiLFxuICAgIGZhY2Vib29rRmFuUGFnZVVybDogXCJodHRwczovL3d3dy5mYWNlYm9vay5jb20vUGxheUJyZWFrQnJpY2tzL1wiLFxuICAgIGlvc1N0YXJSYW5rS2V5OiBcImNvbS5kb3VhcHAubWFueWJyaWNrcy5zdGFycmFua1wiLFxuICAgIElTX0RFQlVHOiBmYWxzZSxcbiAgICBJU19FTkFCTEVfSE9UX1VQREFURTogZmFsc2UsXG5cbiAgICBnZXRTdGFyTGVhZGVyQm9hcmRLZXk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW9zU3RhclJhbmtLZXk7XG4gICAgfSxcblxuICAgIGdldExlYWRlckJvYXJkS2V5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChjYy5zeXMub3MgPT0gY2Muc3lzLk9TX0FORFJPSUQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdvb2dsZVBsYXlMZWFkZXJCb2FyZEtleTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmlvc0xlYWRlckJvYXJkS2V5O1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIGdldEhhcmRCb2FyZEtleTogZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoY2Muc3lzLm9zID09IGNjLnN5cy5PU19BTkRST0lEKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nb29nbGVQbGF5TGVhZGVyQm9hcmRLZXk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pb3NIYXJkTGVhZGVyQm9hcmRLZXk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgZ2V0UGxhdGZvcm1Eb3dubG9hZFVybDogZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoY2Muc3lzLm9zID09IGNjLnN5cy5PU19BTkRST0lEKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nb29nbGVQbGF5VXJsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaXR1bmVzRG93bmxvYWRVcmw7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgZ2V0U2hvcnRQbGF0Zm9ybURvd25sb2FkVXJsOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChjYy5zeXMub3MgPT0gY2Muc3lzLk9TX0FORFJPSUQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFuZHJvaWRTaG9ydFVybDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmlvc1Nob3J0VXJsO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIGdldENyb3NzUHJvbVVybDogZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoY2Muc3lzLm9zID09IGNjLnN5cy5PU19BTkRST0lEKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hbmRyb2lkQ3Jvc3NQcm9tVXJsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGdhbWUudXRpbHMuaXNTZWxmR2FtZSgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY25Dcm9zc1Byb21Vcmw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jcm9zc1Byb21Vcmw7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGdldFBhY2thZ2VOYW1lOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChjYy5zeXMub3MgPT0gY2Muc3lzLk9TX0FORFJPSUQpIHtcbiAgICAgICAgICAgIGlmIChnYW1lLnV0aWxzLmlzU2VsZkdhbWUoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBcImNvbS5kb3VhcHAubWFueWJyaWNrc1wiO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJjb20ucTEuYnJlYWticmlja3NcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBcImNvbS5kb3VhcHAubWFueWJyaWNrc1wiO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBnZXRBZFVybDogZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoZ2FtZS51dGlscy5pc1NlbGZHYW1lKCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNuTmV3QWRDb25maWdVcmw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuYWRDb25maWdVcmw7XG4gICAgfSxcbiAgICBob3Jpem9udGFsR2FtZTogZmFsc2UsXG5cbiAgICAvL2JpbmdjaHVhbiBhZCB1cmwuXG4gICAgYWRDb25maWdVcmw6IFwiaHR0cHM6Ly9vbmVnYW1laW5jLmdpdGh1Yi5pby9tYW55X2JyaWNrcy9nYW1lX2JpbmdjaHVhbi5odG1sXCIsXG4gICAgLy9iaW5nY2h1YW4gcHJvbSB1cmwuXG4gICAgY3Jvc3NQcm9tVXJsOiBcImh0dHBzOi8vb25lZ2FtZWluYy5naXRodWIuaW8vY3Jvc3NfcHJvbW90aW9uL2NvbmZpZy9tYW55X2JyaWNrcy9jcm9zc19wcm9tb3Rpb25fYmluZ2NodWFuLmh0bWxcIixcblxuICAgIC8vb2xkIHZlcnNpb24gY24gYWQgdXJsLlxuICAgIGNuQWRDb25maWdVcmw6IFwiaHR0cHM6Ly9vbmVnYW1laW5jLmdpdGh1Yi5pby9tYW55X2JyaWNrcy9nYW1lLmh0bWxcIixcbiAgICAvL25ldyB2ZXJzaW9uIGNuIGFkIHVybC5cbiAgICBjbk5ld0FkQ29uZmlnVXJsOiBcImh0dHBzOi8vb25lZ2FtZWluYy5naXRodWIuaW8vbWFueV9icmlja3MvZ2FtZV9jbi5odG1sXCIsXG4gICAgLy9jbiBwcm9tIHVybC5cbiAgICBjbkNyb3NzUHJvbVVybDogXCJodHRwczovL29uZWdhbWVpbmMuZ2l0aHViLmlvL2Nyb3NzX3Byb21vdGlvbi9jb25maWcvbWFueV9icmlja3MvY3Jvc3NfcHJvbW90aW9uLmh0bWxcIixcblxuXG4gICAgYW5kcm9pZENyb3NzUHJvbVVybDogXCJodHRwczovL29uZWdhbWVpbmMuZ2l0aHViLmlvL2Nyb3NzX3Byb21vdGlvbi9jb25maWcvbWFueV9icmlja3NfYW5kcm9pZC9jcm9zc19wcm9tb3Rpb24uaHRtbFwiLFxuICAgIGNvbm5lY3RFbWFpbDogXCJicmlja3MuY3J1c2gucGxheUBnbWFpbC5jb21cIixcblxuICAgIHJld2FyZEFkTWF4Q291bnRQZXJEYXk6IDEwLFxuICAgIHJld2FyZERpYW1vbmRzOiA1LFxuICAgIG1pblBvc3NpYmlsaXR5OiAwLjAxLFxuICAgIGVzdGltYXRlZFJhdGlvOiAwLjEsXG4gICAgcmV3YXJkRGlhbW9uZE1hcDoge1xuICAgICAgICBcIjFcIjogMSxcbiAgICAgICAgXCIyXCI6IDMsXG4gICAgICAgIFwiM1wiOiA1XG4gICAgfSxcbiAgICByZWxpZmVEaWFtb25kczogNTAsXG4gICAgc2tpcERpYW1vbmRzOiAxMDAsXG4gICAgYWltSXRlbURpYW1vbmRzOiA1MCxcbiAgICBsb3dBbmRyb2lkRlBTOiA0MCxcbiAgICBkYWlseURpYW1vbmRzOiA1MFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDb25maWc7IiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHFpbm5pbmcgb24gMjAxNy8zLzI1LlxuICovXG52YXIgTGV2ZWxDb25maWcgPSByZXF1aXJlKFwiLi9MZXZlbENvbmZpZ1wiKTtcbi8vdmFyIFBhY2thZ2VDb25maWcgPSByZXF1aXJlKFwiLi9QYWNrYWdlQ29uZmlnXCIpO1xudmFyIFN0b3JlQ29uZmlnID0gcmVxdWlyZShcIi4vU3RvcmVDb25maWdcIik7XG52YXIgV2hlZWxDb25maWcgPSByZXF1aXJlKFwiLi9XaGVlbENvbmZpZ1wiKTtcbnZhciBTaGFyZUNvbmZpZyA9IHJlcXVpcmUoXCIuL1NoYXJlQ29uZmlnXCIpO1xudmFyIFNraW5Db25maWcgPSByZXF1aXJlKFwiLi9Ta2luQ29uZmlnXCIpO1xudmFyIERhaWx5Qm9udXNDb25maWcgPSByZXF1aXJlKFwiLi9EYWlseUJvbnVzQ29uZmlnXCIpO1xudmFyIFN0b3JlVHlwZSA9IHJlcXVpcmUoXCIuLi9lbnVtL1N0b3JlVHlwZVwiKTtcbnZhciBUYXNrQ29uZmlnID0gcmVxdWlyZShcIi4vVGFza0NvbmZpZ1wiKTtcbnZhciBCb29zdFR5cGUgPSByZXF1aXJlKFwiLi4vZW51bS9Cb29zdFR5cGVcIik7XG52YXIgVGFza09sZENvbmZpZyA9IHJlcXVpcmUoXCIuL1Rhc2tPbGRDb25maWdcIik7XG5cbnZhciBMZXZlbENvbmZpZ01hbiA9IGNjLkNsYXNzLmV4dGVuZCh7XG5cbiAgICBsZXZlbExpc3Q6IG51bGwsXG4gICAgc3RvcmVMaXN0OiBudWxsLFxuICAgIHdoZWVsTGlzdDogbnVsbCxcbiAgICBib3hXaGVlbExpc3Q6IG51bGwsXG4gICAgc2hhcmVMaXN0OiBudWxsLFxuICAgIHNraW5MaXN0OiBudWxsLFxuICAgIGRhaWx5Qm9udXNMaXN0OiBudWxsLFxuICAgIHN0b3JlTGlzdFdpdGhvdXRGaXJzdFB1cmNoYXNlOiBudWxsLFxuICAgIHRhc2tMaXN0OiBudWxsLFxuICAgIG9sZFRhc2tMaXN0OiBudWxsLFxuICAgIG9yaWdpbmFsTGV2ZWxMaXN0OiBudWxsLFxuXG4gICAgY3RvcjogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnN0b3JlTGlzdCA9IFtdO1xuICAgICAgICB0aGlzLmxldmVsTGlzdCA9IFtdO1xuICAgICAgICB0aGlzLndoZWVsTGlzdCA9IFtdO1xuICAgICAgICB0aGlzLmJveFdoZWVsTGlzdCA9IFtdO1xuICAgICAgICB0aGlzLnNoYXJlTGlzdCA9IFtdO1xuICAgICAgICB0aGlzLnNraW5MaXN0ID0gW107XG4gICAgICAgIHRoaXMuZGFpbHlCb251c0xpc3QgPSBbXTtcbiAgICAgICAgdGhpcy5zdG9yZUxpc3RXaXRob3V0Rmlyc3RQdXJjaGFzZSA9IFtdO1xuICAgICAgICB0aGlzLnRhc2tMaXN0ID0gW107XG4gICAgICAgIHRoaXMub2xkVGFza0xpc3QgPSBbXTtcblxuICAgICAgICB0aGlzLnJlbG9hZCgpO1xuICAgIH0sXG5cbiAgICByZWxvYWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGk7XG5cbiAgICAgICAgdmFyIGpzb25PYmogPSBnYW1lLnV0aWxzLmxvYWRKc29uKFwicmVzL2NvbmZpZy9zdG9yZV9jb25maWcuanNvblwiKTtcbiAgICAgICAgdmFyIHN0b3JlQ29uZmlncyA9IGpzb25PYmpbXCJzdG9yZXNcIl07XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBzdG9yZUNvbmZpZ3MubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBzdG9yZUNvbmZpZyA9IG5ldyBTdG9yZUNvbmZpZygpO1xuICAgICAgICAgICAgc3RvcmVDb25maWcudW5tYXJzaGFsKHN0b3JlQ29uZmlnc1tpXSk7XG4gICAgICAgICAgICB0aGlzLnN0b3JlTGlzdC5wdXNoKHN0b3JlQ29uZmlnKTtcblxuICAgICAgICAgICAgaWYgKHN0b3JlQ29uZmlnLnR5cGUgPT09IFN0b3JlVHlwZS5GSVJTVF9QVVJDSEFTRSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3BlY2lhbE9mZmVyQ2ZnID0gc3RvcmVDb25maWc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RvcmVMaXN0V2l0aG91dEZpcnN0UHVyY2hhc2UucHVzaChzdG9yZUNvbmZpZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnJlbG9hZExldmVsQ29uZmlnKCk7XG5cbiAgICAgICAganNvbk9iaiA9IGdhbWUudXRpbHMubG9hZEpzb24oXCJyZXMvY29uZmlnL2RhdGFfY29uZmlnLmpzb25cIik7XG4gICAgICAgIHZhciB3aGVlbENvbmZpZ3MgPSBqc29uT2JqW1wid2hlZWxcIl07XG4gICAgICAgIHZhciB3aGVlbENvbmZpZztcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHdoZWVsQ29uZmlncy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgd2hlZWxDb25maWcgPSBuZXcgV2hlZWxDb25maWcoKTtcbiAgICAgICAgICAgIHdoZWVsQ29uZmlnLnVubWFyc2hhbCh3aGVlbENvbmZpZ3NbaV0pO1xuICAgICAgICAgICAgdGhpcy53aGVlbExpc3QucHVzaCh3aGVlbENvbmZpZyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYm94V2hlZWxDb25maWdzID0ganNvbk9ialtcImJveFwiXTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGJveFdoZWVsQ29uZmlncy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgd2hlZWxDb25maWcgPSBuZXcgV2hlZWxDb25maWcoKTtcbiAgICAgICAgICAgIHdoZWVsQ29uZmlnLnVubWFyc2hhbChib3hXaGVlbENvbmZpZ3NbaV0pO1xuICAgICAgICAgICAgdGhpcy5ib3hXaGVlbExpc3QucHVzaCh3aGVlbENvbmZpZyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc2hhcmVDb25maWdzID0ganNvbk9ialtcInNoYXJlXCJdO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgc2hhcmVDb25maWdzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB2YXIgc2hhcmVDb25maWcgPSBuZXcgU2hhcmVDb25maWcoKTtcbiAgICAgICAgICAgIHNoYXJlQ29uZmlnLnVubWFyc2hhbChzaGFyZUNvbmZpZ3NbaV0pO1xuICAgICAgICAgICAgdGhpcy5zaGFyZUxpc3QucHVzaChzaGFyZUNvbmZpZyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZGFpbHlCb251c0NvbmZpZ3MgPSBqc29uT2JqW1wiZGFpbHlfYm9udXNcIl07XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBkYWlseUJvbnVzQ29uZmlncy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdmFyIGRhaWx5Qm9udXNDb25maWcgPSBuZXcgRGFpbHlCb251c0NvbmZpZygpO1xuICAgICAgICAgICAgZGFpbHlCb251c0NvbmZpZy51bm1hcnNoYWwoZGFpbHlCb251c0NvbmZpZ3NbaV0pO1xuICAgICAgICAgICAgaWYgKGRhaWx5Qm9udXNDb25maWcudHlwZSA9PT0gQm9vc3RUeXBlLlNLSU4pIHtcbiAgICAgICAgICAgICAgICB2YXIgZ2V0dGVkID0gZ2FtZS5wbGF5ZXJNYW4uaGFzU2tpbihkYWlseUJvbnVzQ29uZmlnLmFyZzEpO1xuICAgICAgICAgICAgICAgIGlmIChnZXR0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZGFpbHlCb251c0NvbmZpZy50eXBlID0gZGFpbHlCb251c0NvbmZpZy5leHRyYS50eXBlO1xuICAgICAgICAgICAgICAgICAgICBkYWlseUJvbnVzQ29uZmlnLmNvdW50ID0gZGFpbHlCb251c0NvbmZpZy5leHRyYS5jb3VudDtcbiAgICAgICAgICAgICAgICAgICAgZGFpbHlCb251c0NvbmZpZy5pbWFnZSA9IGRhaWx5Qm9udXNDb25maWcuZXh0cmEuaW1hZ2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmRhaWx5Qm9udXNMaXN0LnB1c2goZGFpbHlCb251c0NvbmZpZyk7XG4gICAgICAgIH1cblxuICAgICAgICBqc29uT2JqID0gZ2FtZS51dGlscy5sb2FkSnNvbihcInJlcy9jb25maWcvc2tpbnNfY29uZmlnLmpzb25cIik7XG4gICAgICAgIHZhciBza2luc0NvbmZpZ3MgPSBqc29uT2JqW1wic2tpbnNcIl07XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBza2luc0NvbmZpZ3MubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBza2luQ29uZmlnID0gbmV3IFNraW5Db25maWcoKTtcbiAgICAgICAgICAgIHNraW5Db25maWcudW5tYXJzaGFsKHNraW5zQ29uZmlnc1tpXSk7XG4gICAgICAgICAgICB0aGlzLnNraW5MaXN0LnB1c2goc2tpbkNvbmZpZyk7XG4gICAgICAgIH1cblxuICAgICAgICBqc29uT2JqID0gZ2FtZS51dGlscy5sb2FkSnNvbihcInJlcy9jb25maWcvdGFza19jb25maWcuanNvblwiKTtcbiAgICAgICAgdmFyIHRhc2tDb25maWdzID0ganNvbk9ialtcInRhc2tzXCJdO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGFza0NvbmZpZ3MubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHZhciB0YXNrQ29uZmlnID0gbmV3IFRhc2tDb25maWcoKTtcbiAgICAgICAgICAgIHRhc2tDb25maWcudW5tYXJzaGFsKHRhc2tDb25maWdzW2ldKTtcbiAgICAgICAgICAgIHRoaXMudGFza0xpc3QucHVzaCh0YXNrQ29uZmlnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGpzb25PYmogPSBnYW1lLnV0aWxzLmxvYWRKc29uKFwicmVzL2NvbmZpZy90YXNrX29sZF9jb25maWcuanNvblwiKTtcbiAgICAgICAgdmFyIHRhc2tDb25maWdzID0ganNvbk9ialtcInRhc2tzXCJdO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGFza0NvbmZpZ3MubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHZhciB0YXNrQ29uZmlnID0gbmV3IFRhc2tPbGRDb25maWcoKTtcbiAgICAgICAgICAgIHRhc2tDb25maWcudW5tYXJzaGFsKHRhc2tDb25maWdzW2ldKTtcbiAgICAgICAgICAgIHRoaXMub2xkVGFza0xpc3QucHVzaCh0YXNrQ29uZmlnKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICByZWxvYWRMZXZlbENvbmZpZzogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmxldmVsTGlzdCA9IFtdO1xuICAgICAgICB2YXIgbGV2ZWxDb25maWdHcm91cCA9IGdhbWUucmVtb3RlQ29uZmlnLmdldFJlbW90ZUNvbmZpZyhcImxldmVsX2NvbmZpZ19ncm91cFwiKTtcbiAgICAgICAgY2MubG9nKFwicmVtb3RlIGNvbmZpZyBsZXZlbF9jb25maWdfZ3JvdXA6XCIgKyBsZXZlbENvbmZpZ0dyb3VwKTtcbiAgICAgICAgdmFyIGRlZmF1bHRDb25maWdOYW1lID0gXCJyZXMvY29uZmlnL2xldmVsX2NvbmZpZ3MuanNvblwiO1xuICAgICAgICB2YXIgbGV2ZWxDb25maWdOYW1lID0gZGVmYXVsdENvbmZpZ05hbWU7XG4gICAgICAgIGlmIChsZXZlbENvbmZpZ0dyb3VwICYmIGxldmVsQ29uZmlnR3JvdXAubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgbGV2ZWxDb25maWdOYW1lID0gXCJyZXMvY29uZmlnL2xldmVsX2NvbmZpZ3MtXCIgKyBsZXZlbENvbmZpZ0dyb3VwICsgXCIuanNvblwiO1xuICAgICAgICAgICAgaWYgKCFnYW1lLnV0aWxzLmlzRmlsZUV4aXN0KGxldmVsQ29uZmlnTmFtZSkpIHtcbiAgICAgICAgICAgICAgICBsZXZlbENvbmZpZ05hbWUgPSBkZWZhdWx0Q29uZmlnTmFtZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIganNvbk9iaiA9IGdhbWUudXRpbHMubG9hZEpzb24obGV2ZWxDb25maWdOYW1lKTtcbiAgICAgICAgdmFyIGxldmVsQ29uZmlncyA9IGpzb25PYmpbXCJsZXZlbHNcIl07XG4gICAgICAgIHRoaXMub3JpZ2luYWxMZXZlbExpc3QgPSBsZXZlbENvbmZpZ3M7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGV2ZWxDb25maWdzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB2YXIgbGV2ZWxDb25maWcgPSBuZXcgTGV2ZWxDb25maWcoKTtcbiAgICAgICAgICAgIGxldmVsQ29uZmlnLnVubWFyc2hhbChsZXZlbENvbmZpZ3NbaV0pO1xuICAgICAgICAgICAgdGhpcy5sZXZlbExpc3QucHVzaChsZXZlbENvbmZpZyk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgb25SZW1vdGVDb25maWdSZWNlaXZlZDogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnJlbG9hZExldmVsQ29uZmlnKCk7XG4gICAgfSxcblxuICAgIGdldFN0b3JlTGlzdDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdG9yZUxpc3Q7XG4gICAgfSxcblxuICAgIGdldFN0b3JlTGlzdFdpdGhvdXRGaXJzdFB1cmNoYXNlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0b3JlTGlzdFdpdGhvdXRGaXJzdFB1cmNoYXNlO1xuICAgIH0sXG5cbiAgICBnZXRMZXZlbExpc3Q6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGV2ZWxMaXN0O1xuICAgIH0sXG5cbiAgICBnZXRMZXZlbENvbmZpZzogZnVuY3Rpb24gKGxldmVsSWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGV2ZWxMaXN0W2xldmVsSWQgLSAxXTtcbiAgICB9LFxuXG4gICAgZ2V0T3JpZ2luYWxMZXZlbENvbmZpZzogZnVuY3Rpb24gKGxldmVsSWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3JpZ2luYWxMZXZlbExpc3RbbGV2ZWxJZCAtIDFdO1xuICAgIH0sXG5cbiAgICBnZXRXaGVlbExpc3Q6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud2hlZWxMaXN0O1xuICAgIH0sXG5cbiAgICBnZXRCb3hXaGVlbExpc3Q6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYm94V2hlZWxMaXN0O1xuICAgIH0sXG5cbiAgICBnZXRTaGFyZUxpc3Q6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2hhcmVMaXN0O1xuICAgIH0sXG5cbiAgICBnZXRTa2luTGlzdDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5za2luTGlzdDtcbiAgICB9LFxuXG4gICAgZ2V0U2tpbkxpc3RCeVR5cGU6IGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICAgIHZhciBsaXN0ID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5za2luTGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgaWYgKHR5cGUgPT09IHRoaXMuc2tpbkxpc3RbaV0udHlwZSkge1xuICAgICAgICAgICAgICAgIGxpc3QucHVzaCh0aGlzLnNraW5MaXN0W2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGlzdDtcbiAgICB9LFxuXG4gICAgZ2V0VGFza0xpc3Q6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGFza0xpc3Q7XG4gICAgfSxcblxuICAgIGdldE9sZFRhc2tMaXN0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9sZFRhc2tMaXN0O1xuICAgIH0sXG5cbiAgICBnZXRTa2luQ2ZnOiBmdW5jdGlvbiAoc2tpbklkKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5za2luTGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgaWYgKHNraW5JZCA9PSB0aGlzLnNraW5MaXN0W2ldLmlkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2tpbkxpc3RbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcblxuICAgIGdldERhaWx5Qm9udXNMaXN0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhaWx5Qm9udXNMaXN0O1xuICAgIH0sXG5cbiAgICBnZXRTcGVjaWFsT2ZmZXJDZmc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3BlY2lhbE9mZmVyQ2ZnO1xuICAgIH1cblxuICAgIC8vZ2V0UGFja2FnZTogZnVuY3Rpb24gKHBhY2thZ2VJZCkge1xuICAgIC8vICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5wYWNrYWdlTGlzdC5sZW5ndGg7ICsraSkge1xuICAgIC8vICAgICAgICBpZiAodGhpcy5wYWNrYWdlTGlzdFtpXS5pZCA9PT0gcGFja2FnZUlkKSB7XG4gICAgLy8gICAgICAgICAgICByZXR1cm4gdGhpcy5wYWNrYWdlTGlzdFtpXTtcbiAgICAvLyAgICAgICAgfVxuICAgIC8vICAgIH1cbiAgICAvLyAgICByZXR1cm4gbnVsbDtcbiAgICAvL31cbn0pO1xuXG5MZXZlbENvbmZpZ01hbi5faW5zdGFuY2UgPSBudWxsO1xuTGV2ZWxDb25maWdNYW4uX2ZpcnN0VXNlSW5zdGFuY2UgPSB0cnVlO1xuXG4vKipcbiAqXG4gKiBAcmV0dXJucyB7TGV2ZWxDb25maWdNYW59XG4gKi9cbkxldmVsQ29uZmlnTWFuLmdldEluc3RhbmNlID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChMZXZlbENvbmZpZ01hbi5fZmlyc3RVc2VJbnN0YW5jZSkge1xuICAgICAgICBMZXZlbENvbmZpZ01hbi5fZmlyc3RVc2VJbnN0YW5jZSA9IGZhbHNlO1xuICAgICAgICBMZXZlbENvbmZpZ01hbi5faW5zdGFuY2UgPSBuZXcgTGV2ZWxDb25maWdNYW4oKTtcbiAgICB9XG4gICAgcmV0dXJuIExldmVsQ29uZmlnTWFuLl9pbnN0YW5jZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTGV2ZWxDb25maWdNYW47XG4iLCIvKipcbiAqIENyZWF0ZWQgYnkgcWlubmluZyBvbiAyMDE3LzEyLzE1LlxuICovXG5cbnZhciBEYWlseUJvbnVzQ29uZmlnID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuaWQgPSAwO1xuICAgIHRoaXMudHlwZSA9IDA7XG4gICAgdGhpcy5jb3VudCA9IDA7XG4gICAgLy90aGlzLnByb2JhYmlsaXR5ID0gMDtcbiAgICB0aGlzLmltYWdlID0gXCJcIjtcbiAgICB0aGlzLmFyZzEgPSBcIlwiO1xufTtcblxuRGFpbHlCb251c0NvbmZpZy5wcm90b3R5cGUudW5tYXJzaGFsID0gZnVuY3Rpb24gKGpzb25PYmopIHtcbiAgICB0aGlzLmlkID0ganNvbk9ialtcImlkXCJdO1xuICAgIHRoaXMudHlwZSA9IGpzb25PYmpbXCJ0eXBlXCJdO1xuICAgIHRoaXMuY291bnQgPSBqc29uT2JqW1wiY291bnRcIl07XG4gICAgLy90aGlzLnByb2JhYmlsaXR5ID0ganNvbk9ialtcInByb2JhYmlsaXR5XCJdO1xuICAgIHRoaXMuaW1hZ2UgPSBqc29uT2JqW1wiaW1hZ2VcIl07XG4gICAgdGhpcy5hcmcxID0ganNvbk9ialtcImFyZzFcIl07XG4gICAgdGhpcy5leHRyYSA9IGpzb25PYmpbXCJleHRyYVwiXTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRGFpbHlCb251c0NvbmZpZztcblxuIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHFpbm5pbmcgb24gMjAxNy8zLzI1LlxuICovXG52YXIgQnJpY2tDb25maWcgPSByZXF1aXJlKFwiLi9Ccmlja0NvbmZpZ1wiKTtcblxudmFyIExldmVsQ29uZmlnID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMubGlmZVByb2JhYmlsaXR5ID0gMDtcbiAgICB0aGlzLmJvb3N0UHJvYmFiaWxpdHkgPSAwO1xuICAgIHRoaXMucGl4ZWxXaWR0aCA9IDA7XG4gICAgdGhpcy5waXhlbEhlaWdodCA9IDA7XG4gICAgdGhpcy53aWR0aCA9IDA7XG4gICAgdGhpcy5oZWlnaHQgPSAwO1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtBcnJheS48QnJpY2tDb25maWc+fVxuICAgICAqL1xuICAgIHRoaXMub2JzdGFjbGVzID0gW107XG4gICAgLyoqXG4gICAgICogQHR5cGUge0FycmF5LjxCcmlja0NvbmZpZz59XG4gICAgICovXG4gICAgdGhpcy5icmlja3MgPSBbXTtcbiAgICB0aGlzLnN0YXJUaW1lID0gMDtcbn07XG5cbkxldmVsQ29uZmlnLnByb3RvdHlwZS51bm1hcnNoYWwgPSBmdW5jdGlvbiAoanNvbk9iaikge1xuICAgIHRoaXMubGlmZVByb2JhYmlsaXR5ID0ganNvbk9ialtcImxcIl0gfHwgMDtcbiAgICB0aGlzLmJvb3N0UHJvYmFiaWxpdHkgPSBqc29uT2JqW1wiYlwiXSB8fCAwO1xuICAgIHRoaXMucGl4ZWxXaWR0aCA9IGpzb25PYmpbXCJwaXhlbFdpZHRoXCJdO1xuICAgIHRoaXMucGl4ZWxIZWlnaHQgPSBqc29uT2JqW1wicGl4ZWxIZWlnaHRcIl07XG4gICAgdGhpcy53aWR0aCA9IGpzb25PYmpbXCJ3aWR0aFwiXTtcbiAgICB0aGlzLmhlaWdodCA9IGpzb25PYmpbXCJoZWlnaHRcIl07XG4gICAgdmFyIGk7XG4gICAgdmFyIG9ic3RhY2xlcyA9IGpzb25PYmpbXCJvYnN0YWNsZXNcIl07XG4gICAgZm9yIChpID0gMDsgaSA8IG9ic3RhY2xlcy5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIgb2JzdGFjbGUgPSBvYnN0YWNsZXNbaV07XG4gICAgICAgIHZhciBvYnN0YWNsZUNmZyA9IG5ldyBCcmlja0NvbmZpZygpO1xuICAgICAgICBvYnN0YWNsZUNmZy51bm1hcnNoYWwob2JzdGFjbGUpO1xuICAgICAgICB0aGlzLm9ic3RhY2xlcy5wdXNoKG9ic3RhY2xlQ2ZnKTtcbiAgICB9XG5cbiAgICB2YXIgYnJpY2tzID0ganNvbk9ialtcImJyaWNrc1wiXTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgYnJpY2tzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciBicmljayA9IGJyaWNrc1tpXTtcbiAgICAgICAgdmFyIGJyaWNrQ2ZnID0gbmV3IEJyaWNrQ29uZmlnKCk7XG4gICAgICAgIGJyaWNrQ2ZnLnVubWFyc2hhbChicmljayk7XG4gICAgICAgIHRoaXMuYnJpY2tzLnB1c2goYnJpY2tDZmcpO1xuICAgIH1cbiAgICB0aGlzLnN0YXJUaW1lID0ganNvbk9ialtcInN0YXJUaW1lXCJdIHx8IDA7XG59O1xuXG5MZXZlbENvbmZpZy5wcm90b3R5cGUuZ2V0SGFyZENmZyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbGV2ZWxDZmcgPSBuZXcgTGV2ZWxDb25maWcoKTtcbiAgICBsZXZlbENmZy5saWZlUHJvYmFiaWxpdHkgPSB0aGlzLmxpZmVQcm9iYWJpbGl0eTtcbiAgICBsZXZlbENmZy5ib29zdFByb2JhYmlsaXR5ID0gdGhpcy5ib29zdFByb2JhYmlsaXR5ICogMC45O1xuICAgIGxldmVsQ2ZnLnBpeGVsV2lkdGggPSB0aGlzLnBpeGVsV2lkdGg7XG4gICAgbGV2ZWxDZmcucGl4ZWxIZWlnaHQgPSB0aGlzLnBpeGVsSGVpZ2h0O1xuICAgIGxldmVsQ2ZnLndpZHRoID0gdGhpcy53aWR0aCAqIDI7XG4gICAgbGV2ZWxDZmcuaGVpZ2h0ID0gdGhpcy5oZWlnaHQgKiAyO1xuICAgIGxldmVsQ2ZnLm9ic3RhY2xlcyA9IFtdO1xuICAgIGxldmVsQ2ZnLmJyaWNrcyA9IFtdO1xuICAgIGxldmVsQ2ZnLnN0YXJUaW1lID0gdGhpcy5zdGFyVGltZSAqIDEuMjtcbiAgICB2YXIgaTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5vYnN0YWNsZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgbGV2ZWxDZmcub2JzdGFjbGVzLnB1c2godGhpcy5vYnN0YWNsZXNbaV0uZ2V0SGFyZENmZygpKTtcbiAgICB9XG4gICAgZm9yIChpID0gMDsgaSA8IHRoaXMuYnJpY2tzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGxldmVsQ2ZnLmJyaWNrcy5wdXNoKHRoaXMuYnJpY2tzW2ldLmdldEhhcmRDZmcoKSk7XG4gICAgfVxuICAgIHJldHVybiBsZXZlbENmZztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTGV2ZWxDb25maWc7IiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHFpbm5pbmcgb24gMjAxNy8xMi8xNS5cbiAqL1xuXG52YXIgU2hhcmVDb25maWcgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5pZCA9IDA7XG4gICAgdGhpcy5pbWFnZSA9IFwiXCI7XG4gICAgdGhpcy5kZXNjID0gXCJcIjtcbn07XG5cblNoYXJlQ29uZmlnLnByb3RvdHlwZS51bm1hcnNoYWwgPSBmdW5jdGlvbiAoanNvbk9iaikge1xuICAgIHRoaXMuaWQgPSBqc29uT2JqW1wiaWRcIl07XG4gICAgdGhpcy5pbWFnZSA9IGpzb25PYmpbXCJpbWFnZVwiXTtcbiAgICB0aGlzLmRlc2MgPSBqc29uT2JqW1wiZGVzY1wiXTtcbn07XG5cblNoYXJlQ29uZmlnLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBjb25maWcgPSBuZXcgU2hhcmVDb25maWcoKTtcbiAgICBjb25maWcuaWQgPSB0aGlzLmlkO1xuICAgIGNvbmZpZy5pbWFnZSA9IHRoaXMuaW1hZ2U7XG4gICAgY29uZmlnLmRlc2MgPSB0aGlzLmRlc2M7XG4gICAgcmV0dXJuIGNvbmZpZztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU2hhcmVDb25maWc7XG5cbiIsIi8qKlxuICogQ3JlYXRlZCBieSBxaW5uaW5nIG9uIDIwMTcvMTIvMTUuXG4gKi9cblxudmFyIFNraW5Db25maWcgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5pZCA9IDA7XG4gICAgdGhpcy5jb3VudCA9IFwiXCI7XG4gICAgdGhpcy5pbWFnZSA9IDA7XG4gICAgdGhpcy5zY2FsZSA9IDE7XG4gICAgdGhpcy50eXBlID0gMDtcbn07XG5cblNraW5Db25maWcucHJvdG90eXBlLnVubWFyc2hhbCA9IGZ1bmN0aW9uIChqc29uT2JqKSB7XG4gICAgdGhpcy5pZCA9IGpzb25PYmpbXCJpZFwiXTtcbiAgICB0aGlzLmNvdW50ID0ganNvbk9ialtcImNvdW50XCJdO1xuICAgIHRoaXMuaW1hZ2UgPSBqc29uT2JqW1wiaW1hZ2VcIl07XG4gICAgdGhpcy5zY2FsZSA9IGpzb25PYmpbXCJzY2FsZVwiXSB8fCAxO1xuICAgIHRoaXMudHlwZSA9IGpzb25PYmpbXCJ0eXBlXCJdIHx8IDI7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNraW5Db25maWc7XG5cbiIsIi8qKlxuICogQ3JlYXRlZCBieSBxaW5uaW5nIG9uIDIwMTcvMTIvMTUuXG4gKi9cblxudmFyIFN0b3JlQ29uZmlnID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuaWQgPSAwO1xuICAgIHRoaXMudHlwZSA9IDA7XG4gICAgdGhpcy5uYW1lID0gXCJcIjtcbiAgICB0aGlzLnByaWNlID0gMDtcbiAgICB0aGlzLmNvdW50ID0gMTtcbiAgICB0aGlzLmltYWdlID0gXCJcIjtcbiAgICB0aGlzLnBpZCA9IFwiXCI7XG4gICAgdGhpcy5rZXkgPSBcIlwiO1xuICAgIHRoaXMuaG90ID0gZmFsc2U7XG4gICAgdGhpcy5iZXN0ID0gZmFsc2U7XG4gICAgdGhpcy5kYXRhID0gbnVsbDtcbiAgICB0aGlzLm9yaWdpbmFsX3ByaWNlID0gMDtcbiAgICB0aGlzLmRpc2NvdW50X211bHRpID0gMDtcbiAgICB0aGlzLmV4dHJhID0gMDtcbiAgICB0aGlzLnByaWNlVVMgPSAwO1xufTtcblxuU3RvcmVDb25maWcucHJvdG90eXBlLnVubWFyc2hhbCA9IGZ1bmN0aW9uIChqc29uT2JqKSB7XG4gICAgdGhpcy5pZCA9IGpzb25PYmpbXCJpZFwiXTtcbiAgICB0aGlzLnR5cGUgPSBqc29uT2JqW1widHlwZVwiXTtcbiAgICB0aGlzLm5hbWUgPSBqc29uT2JqW1wibmFtZVwiXTtcbiAgICB0aGlzLnByaWNlID0ganNvbk9ialtcInByaWNlXCJdO1xuICAgIHRoaXMuY291bnQgPSBqc29uT2JqW1wiY291bnRcIl07XG4gICAgdGhpcy5pbWFnZSA9IGpzb25PYmpbXCJpbWFnZVwiXTtcbiAgICB0aGlzLnBpZCA9IGpzb25PYmpbXCJwaWRcIl07XG4gICAgaWYgKGNjLnN5cy5vcyA9PT0gY2Muc3lzLk9TX0FORFJPSUQpIHtcbiAgICAgICAgdGhpcy5waWQgPSBqc29uT2JqW1wicGlkX2dwXCJdO1xuICAgIH1cbiAgICB0aGlzLmtleSA9IGpzb25PYmpbXCJrZXlcIl07XG4gICAgdGhpcy5ob3QgPSBqc29uT2JqW1wiaG90XCJdO1xuICAgIHRoaXMuYmVzdCA9IGpzb25PYmpbXCJiZXN0XCJdO1xuICAgIHRoaXMuZGF0YSA9IGpzb25PYmpbXCJkYXRhXCJdIHx8IHt9O1xuICAgIHRoaXMub3JpZ2luYWxfcHJpY2UgPSBqc29uT2JqW1wib3JpZ2luYWxfcHJpY2VcIl07XG4gICAgdGhpcy5kaXNjb3VudF9tdWx0aSA9IGpzb25PYmpbXCJkaXNjb3VudF9tdWx0aVwiXTtcbiAgICB0aGlzLmV4dHJhID0ganNvbk9ialtcImV4dHJhXCJdIHx8IDA7XG4gICAgdGhpcy5wcmljZVVTID0gcGFyc2VGbG9hdCh0aGlzLnByaWNlLnN1YnN0cigxKSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN0b3JlQ29uZmlnO1xuXG4iLCIvKipcbiAqIENyZWF0ZWQgYnkgcWlubmluZyBvbiAyMDE3LzEyLzE1LlxuICovXG5cbnZhciBUYXNrQ29uZmlnID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuaWQgPSAwO1xuICAgIHRoaXMudHlwZSA9IDA7XG4gICAgdGhpcy5jb3VudCA9IFwiXCI7XG4gICAgdGhpcy5yZXdhcmRDb3VudCA9IDA7XG59O1xuXG5UYXNrQ29uZmlnLnByb3RvdHlwZS51bm1hcnNoYWwgPSBmdW5jdGlvbiAoanNvbk9iaikge1xuICAgIHRoaXMuaWQgPSBqc29uT2JqW1wiaWRcIl07XG4gICAgdGhpcy50eXBlID0ganNvbk9ialtcInR5cGVcIl07XG4gICAgdGhpcy5jb3VudCA9IGpzb25PYmpbXCJjb3VudFwiXTtcbiAgICB0aGlzLnJld2FyZENvdW50ID0ganNvbk9ialtcInJld2FyZENvdW50XCJdO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBUYXNrQ29uZmlnO1xuXG4iLCJcbi8qKlxuICogQ3JlYXRlZCBieSBxaW5uaW5nIG9uIDIwMTcvMTIvMTUuXG4gKi9cblxudmFyIFRhc2tPbGRDb25maWcgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5pZCA9IDA7XG4gICAgdGhpcy5jb3VudCA9IFwiXCI7XG4gICAgdGhpcy5pbWFnZSA9IDA7XG4gICAgdGhpcy5zY2FsZSA9IDE7XG4gICAgdGhpcy50eXBlID0gMDtcbn07XG5cblRhc2tPbGRDb25maWcucHJvdG90eXBlLnVubWFyc2hhbCA9IGZ1bmN0aW9uIChqc29uT2JqKSB7XG4gICAgdGhpcy5pZCA9IGpzb25PYmpbXCJpZFwiXTtcbiAgICB0aGlzLnR5cGUgPSBqc29uT2JqW1widHlwZVwiXTtcbiAgICB0aGlzLmNvdW50ID0ganNvbk9ialtcImNvdW50XCJdO1xuICAgIHRoaXMuaW1hZ2UgPSBqc29uT2JqW1wiaW1hZ2VcIl07XG4gICAgdGhpcy5zY2FsZSA9IGpzb25PYmpbXCJzY2FsZVwiXSB8fCAxO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBUYXNrT2xkQ29uZmlnO1xuXG4iLCIvKipcbiAqIENyZWF0ZWQgYnkgcWlubmluZyBvbiAyMDE3LzEyLzE1LlxuICovXG5cbnZhciBXaGVlbENvbmZpZyA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmlkID0gMDtcbiAgICB0aGlzLnR5cGUgPSAwO1xuICAgIHRoaXMuY291bnQgPSAwO1xuICAgIHRoaXMucHJvYmFiaWxpdHkgPSAwO1xuICAgIHRoaXMuaW1hZ2UgPSBcIlwiO1xuICAgIHRoaXMuc2NhbGUgPSAxO1xufTtcblxuV2hlZWxDb25maWcucHJvdG90eXBlLnVubWFyc2hhbCA9IGZ1bmN0aW9uIChqc29uT2JqKSB7XG4gICAgdGhpcy5pZCA9IGpzb25PYmpbXCJpZFwiXTtcbiAgICB0aGlzLnR5cGUgPSBqc29uT2JqW1widHlwZVwiXTtcbiAgICB0aGlzLmNvdW50ID0ganNvbk9ialtcImNvdW50XCJdO1xuICAgIHRoaXMucHJvYmFiaWxpdHkgPSBqc29uT2JqW1wicHJvYmFiaWxpdHlcIl07XG4gICAgdGhpcy5pbWFnZSA9IGpzb25PYmpbXCJpbWFnZVwiXTtcbiAgICB0aGlzLnNjYWxlID0ganNvbk9ialtcInNjYWxlXCJdIHx8IDE7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFdoZWVsQ29uZmlnO1xuXG4iLCJ2YXIgRXZlbnRzTmFtZSA9IHJlcXVpcmUoXCIuLi9ldmVudHMvRXZlbnRzTmFtZVwiKTtcblxudmFyIEFkc1JlbWluZGVyQ29udHJvbGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICBCYXNlQ0NCQ29udHJvbGxlci5jYWxsKHRoaXMpO1xuXG4gICAgdGhpcy5zcFJlbWluZGVyID0gbnVsbDtcbiAgICB0aGlzLmxiUmVtaW5kZXIgPSBudWxsO1xufTtcblxuZ2FtZS51dGlscy5pbmhlcml0cyhBZHNSZW1pbmRlckNvbnRyb2xsZXIsIEJhc2VDQ0JDb250cm9sbGVyKTtcblxuQWRzUmVtaW5kZXJDb250cm9sbGVyLnByb3RvdHlwZS5vbkVudGVyID0gZnVuY3Rpb24gKCkge1xuICAgIEJhc2VDQ0JDb250cm9sbGVyLnByb3RvdHlwZS5vbkVudGVyLmNhbGwodGhpcyk7XG4gICAgZ2FtZS5ldmVudERpc3BhdGNoZXIuYWRkRXZlbnRMaXN0ZW5lcihFdmVudHNOYW1lLlJFV0FSREVEX1ZJREVPX0NPVU5ULCB0aGlzLm9uVXBkYXRlUmVtaW5kZXIsIHRoaXMpO1xufTtcblxuQWRzUmVtaW5kZXJDb250cm9sbGVyLnByb3RvdHlwZS5vbkV4aXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgZ2FtZS5ldmVudERpc3BhdGNoZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihFdmVudHNOYW1lLlJFV0FSREVEX1ZJREVPX0NPVU5ULCB0aGlzLm9uVXBkYXRlUmVtaW5kZXIsIHRoaXMpO1xuICAgIEJhc2VDQ0JDb250cm9sbGVyLnByb3RvdHlwZS5vbkV4aXQuY2FsbCh0aGlzKTtcbn07XG5cbkFkc1JlbWluZGVyQ29udHJvbGxlci5wcm90b3R5cGUub25EaWRMb2FkRnJvbUNDQiAgPSBmdW5jdGlvbigpIHtcbiAgICBCYXNlQ0NCQ29udHJvbGxlci5wcm90b3R5cGUub25EaWRMb2FkRnJvbUNDQi5jYWxsKHRoaXMpO1xuICAgIHRoaXMub25VcGRhdGVSZW1pbmRlcigpO1xufTtcblxuQWRzUmVtaW5kZXJDb250cm9sbGVyLnByb3RvdHlwZS5vblVwZGF0ZVJlbWluZGVyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBjb3VudCA9IGdhbWUuY29uZmlnLnJld2FyZEFkTWF4Q291bnRQZXJEYXkgLSBnYW1lLnBsYXllck1hbi5nZXRSZXdhcmRBZFBsYWNlQ291bnRQZXJEYXkoKTtcbiAgICBpZiAoY291bnQgPCAwKSB7XG4gICAgICAgIGNvdW50ID0gMDtcbiAgICB9XG4gICAgdGhpcy5sYlJlbWluZGVyLnNldFN0cmluZyhjb3VudCk7XG59O1xuXG5BZHNSZW1pbmRlckNvbnRyb2xsZXIuY3JlYXRlRnJvbUNDQiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBub2RlID0gZ2FtZS51dGlscy5sb2FkTm9kZUZyb21DQ0IoXCJyZXMvbWVudS9hZHNfcmVtaW5kZXJfdmlldy5jY2JpXCIsIG51bGwsIFwiQWRzUmVtaW5kZXJDb250cm9sbGVyXCIsIG5ldyBBZHNSZW1pbmRlckNvbnRyb2xsZXIoKSwgdHJ1ZSk7XG4gICAgcmV0dXJuIG5vZGU7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFkc1JlbWluZGVyQ29udHJvbGxlcjsiLCJcblxudmFyIEFpbUhlbHBDb250cm9sbGVyID0gZnVuY3Rpb24gKCkge1xuICAgIEJhc2VDQ0JDb250cm9sbGVyLmNhbGwodGhpcyk7XG4gICAgdGhpcy5zcEhhbmQgPSBudWxsO1xufTtcblxuZ2FtZS51dGlscy5pbmhlcml0cyhBaW1IZWxwQ29udHJvbGxlciwgQmFzZUNDQkNvbnRyb2xsZXIpO1xuXG5BaW1IZWxwQ29udHJvbGxlci5wcm90b3R5cGUub25EaWRMb2FkRnJvbUNDQiAgPSBmdW5jdGlvbigpIHtcbiAgICBCYXNlQ0NCQ29udHJvbGxlci5wcm90b3R5cGUub25EaWRMb2FkRnJvbUNDQi5jYWxsKHRoaXMpO1xuICAgIC8vdGhpcy5sYkhlbHBJbmZvLnNldFN0cmluZyhnYW1lLmxvY2FsLmdldFZhbHVlKFwiYWltX2hlbHBfY29udGVudFwiKSk7XG4gICAgLy90aGlzLmxiSGVscEluZm8uc2V0QWxpZ25tZW50KGNjLlRFWFRfQUxJR05NRU5UX0NFTlRFUik7XG59O1xuXG5BaW1IZWxwQ29udHJvbGxlci5wcm90b3R5cGUuZ2V0SGFuZFdvcmxkUG9zaXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3BIYW5kLnBhcmVudC5jb252ZXJ0VG9Xb3JsZFNwYWNlKHRoaXMuc3BIYW5kLmdldFBvc2l0aW9uKCkpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBBaW1IZWxwQ29udHJvbGxlcjsiLCJ2YXIgRXZlbnRzTmFtZSA9IHJlcXVpcmUoXCIuLi9ldmVudHMvRXZlbnRzTmFtZVwiKTtcblxudmFyIEFpbUl0ZW1Db250cm9sbGVyID0gZnVuY3Rpb24gKCkge1xuICAgIEJhc2VDQ0JDb250cm9sbGVyLmNhbGwodGhpcyk7XG5cbiAgICB0aGlzLmJ0bkFpbUl0ZW0gPSBudWxsO1xuICAgIHRoaXMubGJBaW1QcmljZSA9IG51bGw7XG4gICAgLy90aGlzLmxiQWltVGlwcyA9IG51bGw7XG5cbiAgICB0aGlzLmhpZGVkID0gZmFsc2U7XG59O1xuXG5nYW1lLnV0aWxzLmluaGVyaXRzKEFpbUl0ZW1Db250cm9sbGVyLCBCYXNlQ0NCQ29udHJvbGxlcik7XG5cbkFpbUl0ZW1Db250cm9sbGVyLnByb3RvdHlwZS5vbkRpZExvYWRGcm9tQ0NCICA9IGZ1bmN0aW9uKCkge1xuICAgIEJhc2VDQ0JDb250cm9sbGVyLnByb3RvdHlwZS5vbkRpZExvYWRGcm9tQ0NCLmNhbGwodGhpcyk7XG4gICAgdGhpcy5sYkFpbVByaWNlLnNldFN0cmluZyhnYW1lLmNvbmZpZy5haW1JdGVtRGlhbW9uZHMpO1xufTtcblxuQWltSXRlbUNvbnRyb2xsZXIucHJvdG90eXBlLnRyeUFpbUl0ZW1DbGlja2VkID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBTdG9yZUhlbHBlciA9IHJlcXVpcmUoXCIuLi9tb2RlbC9TdG9yZUhlbHBlclwiKTtcbiAgICBTdG9yZUhlbHBlci5nZXRJbnN0YW5jZSgpLnRyeUFpbUl0ZW0oZ2FtZS5nYW1lTWFuLmxldmVsSWQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZ2FtZS5nYW1lTWFuLnRyeUFpbUl0ZW0oKTtcbiAgICAgICAgdGhpcy5wbGF5SGlkZUFuaW0oKTtcbiAgICB9LmJpbmQodGhpcykpO1xufTtcblxuQWltSXRlbUNvbnRyb2xsZXIucHJvdG90eXBlLnBsYXlIaWRlQW5pbSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5oaWRlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuaGlkZWQgPSB0cnVlO1xuICAgIHRoaXMuYnRuQWltSXRlbS5lbmFibGVkID0gZmFsc2U7XG4gICAgZ2FtZS51dGlscy5wbGF5Q0NCQW5pbWF0aW9uKHRoaXMucm9vdE5vZGUsIFwiaGlkZVwiKTtcblxuICAgIHRoaXMucm9vdE5vZGUucnVuQWN0aW9uKGNjLnNlcXVlbmNlKGNjLmRlbGF5VGltZSgwLjUpLCBjYy5oaWRlKCkpKTtcbn07XG5cbkFpbUl0ZW1Db250cm9sbGVyLmNyZWF0ZUZyb21DQ0IgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbm9kZSA9IGdhbWUudXRpbHMubG9hZE5vZGVGcm9tQ0NCKFwicmVzL21lbnUvYWltX2l0ZW1fdmlldy5jY2JpXCIsIG51bGwsIFwiQWltSXRlbUNvbnRyb2xsZXJcIiwgbmV3IEFpbUl0ZW1Db250cm9sbGVyKCksIHRydWUpO1xuICAgIHJldHVybiBub2RlO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBBaW1JdGVtQ29udHJvbGxlcjsiLCIvL3ZhciBTa2luSXRlbUNvbnRyb2xsZXIgPSByZXF1aXJlKFwiLi9Ta2luSXRlbUNvbnRyb2xsZXJcIik7XG4vL3ZhciBDb25maWdNYW4gPSByZXF1aXJlKFwiLi4vY29uZmlnL0NvbmZpZ01hblwiKTtcbi8vdmFyIEV2ZW50c05hbWUgPSByZXF1aXJlKFwiLi4vZXZlbnRzL0V2ZW50c05hbWVcIik7XG4vL1xuLy92YXIgR1JJRF9TSVpFID0gY2Muc2l6ZSgzNTAsIDUwMCk7XG4vL1xuLy92YXIgU3RvcmVJdGVtQ2VsbFZpZXcgPSBjYy5UYWJsZVZpZXdDZWxsLmV4dGVuZCh7XG4vLyAgICBlbnRpdHk6IG51bGwsXG4vLyAgICBpdGVtTm9kZTogbnVsbCxcbi8vICAgIGN0b3I6IGZ1bmN0aW9uICgpIHtcbi8vICAgICAgICB0aGlzLl9zdXBlcigpO1xuLy8gICAgICAgIHRoaXMuaXRlbU5vZGUgPSBTa2luSXRlbUNvbnRyb2xsZXIuY3JlYXRlRnJvbUNDQigpO1xuLy8gICAgICAgIHRoaXMuYWRkQ2hpbGQodGhpcy5pdGVtTm9kZSk7XG4vLyAgICAgICAgdGhpcy5pdGVtTm9kZS5zZXRQb3NpdGlvbihjYy5wKEdSSURfU0laRS53aWR0aCAqIDAuNSwgR1JJRF9TSVpFLmhlaWdodCAqIDAuNSkpO1xuLy8gICAgfSxcbi8vXG4vLyAgICBpbml0V2l0aDogZnVuY3Rpb24gKGVudGl0eSwgaWR4LCBpbml0ZWQpIHtcbi8vICAgICAgICB0aGlzLmVudGl0eSA9IGVudGl0eTtcbi8vICAgICAgICB0aGlzLml0ZW1Ob2RlLmNvbnRyb2xsZXIuaW5pdFdpdGgoZW50aXR5LCBpZHgpO1xuLy8gICAgfVxuLy99KTtcbnZhciBCb29zdFR5cGUgPSByZXF1aXJlKFwiLi4vZW51bS9Cb29zdFR5cGVcIik7XG52YXIgR2FtZU1hbiA9IHJlcXVpcmUoXCIuLi9tb2RlbC9HYW1lTWFuXCIpO1xuXG52YXIgQmFnQ29udHJvbGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICBCYXNlQ0NCQ29udHJvbGxlci5jYWxsKHRoaXMpO1xuICAgIHRoaXMubGJCb29zdE5hbWUxID0gbnVsbDtcbiAgICB0aGlzLmxiQm9vc3ROYW1lMiA9IG51bGw7XG4gICAgdGhpcy5sYkJvb3N0RGVzYzEgPSBudWxsO1xuICAgIHRoaXMubGJCb29zdERlc2MyID0gbnVsbDtcbiAgICB0aGlzLmxiU2hhcmVUaXBzID0gbnVsbDtcbn07XG5cbmdhbWUudXRpbHMuaW5oZXJpdHMoQmFnQ29udHJvbGxlciwgQmFzZUNDQkNvbnRyb2xsZXIpO1xuXG5CYWdDb250cm9sbGVyLnByb3RvdHlwZS5vbkVudGVyID0gZnVuY3Rpb24gKCkge1xuICAgIEJhc2VDQ0JDb250cm9sbGVyLnByb3RvdHlwZS5vbkVudGVyLmNhbGwodGhpcyk7XG59O1xuXG5CYWdDb250cm9sbGVyLnByb3RvdHlwZS5vbkV4aXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgQmFzZUNDQkNvbnRyb2xsZXIucHJvdG90eXBlLm9uRXhpdC5jYWxsKHRoaXMpO1xufTtcblxuQmFnQ29udHJvbGxlci5wcm90b3R5cGUub25EaWRMb2FkRnJvbUNDQiAgPSBmdW5jdGlvbigpIHtcbiAgICBCYXNlQ0NCQ29udHJvbGxlci5wcm90b3R5cGUub25EaWRMb2FkRnJvbUNDQi5jYWxsKHRoaXMpO1xuICAgIHRoaXMubGJCb29zdE5hbWUxLnNldFN0cmluZyhfKFwiYm9vc3Rfc3BsaXRfdGl0bGVcIikgKyBcIiBYXCIgKyAoZ2FtZS5wbGF5ZXJNYW4uZ2V0Qm9vc3RDb3VudChCb29zdFR5cGUuU1BMSVQpKSk7XG4gICAgdGhpcy5sYkJvb3N0TmFtZTIuc2V0U3RyaW5nKF8oXCJib29zdF9uZXdfdGl0bGVcIikgKyBcIiBYXCIgKyAoZ2FtZS5wbGF5ZXJNYW4uZ2V0Qm9vc3RDb3VudChCb29zdFR5cGUuVEhSRUVfQkFMTCkpKTtcbiAgICB0aGlzLmxiQm9vc3REZXNjMS5zZXRTdHJpbmcoXyhcImJvb3N0X3NwbGl0X2Rlc2NcIikpO1xuICAgIHRoaXMubGJCb29zdERlc2MyLnNldFN0cmluZyhfKFwiYm9vc3RfbmV3X2Rlc2NcIikpO1xuICAgIHRoaXMubGJTaGFyZVRpcHMuc2V0U3RyaW5nKFwiXCIpOy8vXyhcImJhZ19zaGFyZV90aXBzXCIpKTtcbiAgICB0aGlzLmxiVGl0bGUuc2V0U3RyaW5nKF8oXCJiYWdfdGl0bGVcIikpO1xufTtcblxuQmFnQ29udHJvbGxlci5wcm90b3R5cGUuYmFja0NsaWNrZWQgPSBmdW5jdGlvbiAoc2VuZGVyKSB7XG4gICAgQXVkaW9IZWxwZXIucGxheUJ0blNvdW5kKCk7XG5cbiAgICB0aGlzLmNsb3NlKCk7XG59O1xuXG5CYWdDb250cm9sbGVyLnByb3RvdHlwZS5zaGFyZUNsaWNrZWQgPSBmdW5jdGlvbiAoc2VuZGVyKSB7XG4gICAgQXVkaW9IZWxwZXIucGxheUJ0blNvdW5kKCk7XG4gICAgdmFyIHNoYXJlID0gR2FtZU1hbi5nZXRJbnN0YW5jZSgpLmdldFNoYXJlQ29uZmlnKCk7XG4gICAgZ2FtZS5zaGFyZU1hbmFnZXIud3hTaGFyZShzaGFyZSwgZnVuY3Rpb24gKHNoYXJlZCkge1xuXG4gICAgfSk7XG59O1xuXG5CYWdDb250cm9sbGVyLnByb3RvdHlwZS5wb3B1cCA9IGZ1bmN0aW9uICgpIHtcbiAgICBnYW1lLmRpYWxvZ01hbmFnZXIucG9wdXAodGhpcy5yb290Tm9kZSk7XG59O1xuXG5CYWdDb250cm9sbGVyLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBnYW1lLmRpYWxvZ01hbmFnZXIuY2xvc2UodGhpcy5yb290Tm9kZSk7XG59O1xuXG5CYWdDb250cm9sbGVyLmNyZWF0ZUZyb21DQ0IgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbm9kZSA9IGdhbWUudXRpbHMubG9hZE5vZGVGcm9tQ0NCKFwicmVzL21lbnUvYmFnX3ZpZXcuY2NiaVwiLCBudWxsLCBcIkJhZ0NvbnRyb2xsZXJcIiwgbmV3IEJhZ0NvbnRyb2xsZXIoKSk7XG4gICAgcmV0dXJuIG5vZGU7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJhZ0NvbnRyb2xsZXI7IiwidmFyIEdhbWVNYW4gPSByZXF1aXJlKFwiLi4vbW9kZWwvR2FtZU1hblwiKTtcblxudmFyIEJvYXJkQ29udHJvbGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICBCYXNlQ0NCQ29udHJvbGxlci5jYWxsKHRoaXMpO1xuXG4gICAgdGhpcy5zcENpcmNsZSA9IG51bGw7XG4gICAgdGhpcy5uZEJvYXJkID0gbnVsbDtcbiAgICB0aGlzLnNwQmFsbCA9IG51bGw7XG59O1xuXG5nYW1lLnV0aWxzLmluaGVyaXRzKEJvYXJkQ29udHJvbGxlciwgQmFzZUNDQkNvbnRyb2xsZXIpO1xuXG5Cb2FyZENvbnRyb2xsZXIucHJvdG90eXBlLm9uRGlkTG9hZEZyb21DQ0IgID0gZnVuY3Rpb24oKSB7XG4gICAgQmFzZUNDQkNvbnRyb2xsZXIucHJvdG90eXBlLm9uRGlkTG9hZEZyb21DQ0IuY2FsbCh0aGlzKTtcbiAgICBHYW1lTWFuLmdldEluc3RhbmNlKCkudXBkYXRlU2tpbih0aGlzLnNwQmFsbCk7XG59O1xuXG5Cb2FyZENvbnRyb2xsZXIucHJvdG90eXBlLmluaXRXaXRoID0gZnVuY3Rpb24gKGJhbGxXaWR0aCkge1xuICAgIHZhciBzY2FsZSA9IEdhbWVNYW4uZ2V0SW5zdGFuY2UoKS5nZXRDdXJyZW50U2tpbkNmZygpLnNjYWxlO1xuICAgIHRoaXMuc3BCYWxsLnNjYWxlWCA9IGJhbGxXaWR0aCAvIHRoaXMuc3BCYWxsLndpZHRoICogc2NhbGU7XG4gICAgdGhpcy5zcEJhbGwuc2NhbGVZID0gYmFsbFdpZHRoIC8gdGhpcy5zcEJhbGwuaGVpZ2h0ICogc2NhbGU7XG59O1xuXG5Cb2FyZENvbnRyb2xsZXIucHJvdG90eXBlLmhpZGVCYWxsID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuc3BCYWxsLnZpc2libGUgPSBmYWxzZTtcbn07XG5cbkJvYXJkQ29udHJvbGxlci5wcm90b3R5cGUuc2hvd0JhbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5zcEJhbGwudmlzaWJsZSA9IHRydWU7XG59O1xuXG5Cb2FyZENvbnRyb2xsZXIuY3JlYXRlRnJvbUNDQiA9IGZ1bmN0aW9uKGJhbGxXaWR0aCkge1xuICAgIHZhciBub2RlID0gZ2FtZS51dGlscy5sb2FkTm9kZUZyb21DQ0IoXCJyZXMvZ2FtZS9ib2FyZF92aWV3LmNjYmlcIiwgbnVsbCwgXCJCb2FyZENvbnRyb2xsZXJcIiwgbmV3IEJvYXJkQ29udHJvbGxlcigpKTtcbiAgICBub2RlLmNvbnRyb2xsZXIuaW5pdFdpdGgoYmFsbFdpZHRoKTtcbiAgICByZXR1cm4gbm9kZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQm9hcmRDb250cm9sbGVyOyIsInZhciBDb25maWdNYW4gPSByZXF1aXJlKFwiLi4vY29uZmlnL0NvbmZpZ01hblwiKTtcbnZhciBEYWlseUJvbnVzSXRlbUNvbnRyb2xsZXIgPSByZXF1aXJlKFwiLi9EYWlseUJvbnVzSXRlbUNvbnRyb2xsZXJcIik7XG52YXIgQm9vc3RUeXBlID0gcmVxdWlyZShcIi4uL2VudW0vQm9vc3RUeXBlXCIpO1xudmFyIFN0b3JlSGVscGVyID0gcmVxdWlyZShcIi4uL21vZGVsL1N0b3JlSGVscGVyXCIpO1xuXG52YXIgRGFpbHlCb251c0NvbnRyb2xsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgQmFzZUNDQkNvbnRyb2xsZXIuY2FsbCh0aGlzKTtcbiAgICB0aGlzLkRBSUxZX0JPTlVTX0NPVU5UID0gNztcbiAgICB0aGlzLkRBSUxZX0JPTlVTX1RBRyA9IDIwMDtcbiAgICB0aGlzLm5kQ29udGFpbmVyID0gbnVsbDtcblxuICAgIHRoaXMubGJsVGl0bGUgPSBudWxsO1xuXG4gICAgdGhpcy5uZERhaWx5Qm9udXMgPSBudWxsO1xuXG4gICAgdGhpcy5idG5Eb3VibGUgPSBudWxsO1xuICAgIHRoaXMuYnRuQ2xhaW0gPSBudWxsO1xuXG4gICAgdGhpcy5sYmxDbGFpbSA9IG51bGw7XG4gICAgdGhpcy5sYmxEb3VibGUgPSBudWxsO1xuXG4gICAgdGhpcy5kYWlseUJvbnVzTm9kZXMgPSBbXTtcblxuICAgIC8vdXNlciBkYXRhLlxuICAgIHRoaXMuY29uZmlncyA9IG51bGw7XG5cbiAgICB0aGlzLmN1ckNvbmZpZyA9IG51bGw7XG5cbiAgICB0aGlzLmNsYWltZWQgPSBmYWxzZTtcbn07XG5cbmdhbWUudXRpbHMuaW5oZXJpdHMoRGFpbHlCb251c0NvbnRyb2xsZXIsIEJhc2VDQ0JDb250cm9sbGVyKTtcblxuRGFpbHlCb251c0NvbnRyb2xsZXIucHJvdG90eXBlLm9uRGlkTG9hZEZyb21DQ0IgID0gZnVuY3Rpb24oKSB7XG4gICAgQmFzZUNDQkNvbnRyb2xsZXIucHJvdG90eXBlLm9uRGlkTG9hZEZyb21DQ0IuY2FsbCh0aGlzKTtcbiAgICB0aGlzLmxibFRpdGxlLnNldFN0cmluZyhfKFwiZGFpbHlfYm9udXNfdGl0bGVcIikpO1xuICAgIHRoaXMubGJsQ2xhaW0uc2V0U3RyaW5nKF8oXCJjbGFpbV90aXRsZVwiKSk7XG4gICAgdGhpcy5sYmxEb3VibGUuc2V0U3RyaW5nKF8oXCJkb3VibGVfdGl0bGVcIikpO1xuXG4gICAgdGhpcy5jb25maWdzID0gQ29uZmlnTWFuLmdldEluc3RhbmNlKCkuZ2V0RGFpbHlCb251c0xpc3QoKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5EQUlMWV9CT05VU19DT1VOVDsgKytpKSB7XG4gICAgICAgIHZhciBub2RlID0gdGhpcy5uZERhaWx5Qm9udXMuZ2V0Q2hpbGRCeVRhZyh0aGlzLkRBSUxZX0JPTlVTX1RBRyArIGkpO1xuICAgICAgICB2YXIgaXRlbU5vZGUgPSBEYWlseUJvbnVzSXRlbUNvbnRyb2xsZXIuY3JlYXRlRnJvbUNDQigpO1xuICAgICAgICB0aGlzLmRhaWx5Qm9udXNOb2Rlcy5wdXNoKGl0ZW1Ob2RlKTtcbiAgICAgICAgbm9kZS5hZGRDaGlsZChpdGVtTm9kZSk7XG4gICAgfVxuXG4gICAgdGhpcy5pbml0VUkoKTtcbn07XG5cbkRhaWx5Qm9udXNDb250cm9sbGVyLnByb3RvdHlwZS5pbml0VUkgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGxhc3RDbGFpbURheSA9IGdhbWUucGxheWVyTWFuLnBsYXllci5sYXN0Q2xhaW1EYWlseUJvbnVzRGF5O1xuICAgIHZhciBjb25zZWN1dGl2ZURheSA9IGdhbWUucGxheWVyTWFuLmNoZWNrQ29uc2VjdXRpdmVMb2dpbkRheSgpO1xuICAgIHZhciBjdXJyZW50RGF5Q2xhaW1lZCA9IGxhc3RDbGFpbURheSA+PSBnYW1lLnV0aWxzLmdldERheUJ5VHMoRGF0ZS5ub3coKSk7XG4gICAgY29uc2VjdXRpdmVEYXkgJT0gNztcbiAgICBjb25zZWN1dGl2ZURheSA9IGNvbnNlY3V0aXZlRGF5IHx8IDc7XG4gICAgdGhpcy5jbGFpbWVkID0gY3VycmVudERheUNsYWltZWQ7XG5cbiAgICB0aGlzLmJ0bkNsYWltLmVuYWJsZWQgPSAhY3VycmVudERheUNsYWltZWQ7XG4gICAgdGhpcy5idG5Eb3VibGUuZW5hYmxlZCA9ICFjdXJyZW50RGF5Q2xhaW1lZDtcblxuICAgIGNjLmxvZyhcImNvbnNlY3V0aXZlRGF5OlwiICsgY29uc2VjdXRpdmVEYXkgKyBcIixkYWlseUJvbnVzTm9kZXMgbGVuZ3RoOlwiICsgdGhpcy5kYWlseUJvbnVzTm9kZXMubGVuZ3RoICsgXCIsY3VycmVudERheUNsYWltZWQ6XCIgKyBjdXJyZW50RGF5Q2xhaW1lZCk7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPD0gNzsgKytpKSB7XG4gICAgICAgIGNjLmxvZyhcImluaXRVSTpcIiArIGkpO1xuICAgICAgICB2YXIgY29uZmlnID0gdGhpcy5jb25maWdzW2kgLSAxXTtcbiAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmRhaWx5Qm9udXNOb2Rlc1tpIC0gMV07XG4gICAgICAgIGlmICghbm9kZSkge1xuICAgICAgICAgICAgY2MubG9nKFwiZGFpbHkgYm9udXMgbm9kZSBpcyBudWxsOlwiICsgaSk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY29udHJvbGxlciA9IG5vZGUuY29udHJvbGxlcjtcbiAgICAgICAgaWYgKCFjb250cm9sbGVyKSB7XG4gICAgICAgICAgICBjYy5sb2coXCJkYWlseSBib251cyBjb250cm9sbGVyIGlzIG51bGw6XCIgKyBpKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpIDwgY29uc2VjdXRpdmVEYXkpIHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXIuaW5pdFdpdGgoY29uZmlnLCBpLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaSA9PT0gY29uc2VjdXRpdmVEYXkpIHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXIuaW5pdFdpdGgoY29uZmlnLCBpLCB0cnVlLCBjdXJyZW50RGF5Q2xhaW1lZCk7XG4gICAgICAgICAgICB0aGlzLmN1ckNvbmZpZyA9IGNvbmZpZztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXIuaW5pdFdpdGgoY29uZmlnLCBpLCBmYWxzZSwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNvbnNlY3V0aXZlRGF5ID09PSAzKSB7XG4gICAgICAgIHRoaXMuYnRuRG91YmxlLmVuYWJsZWQgPSBmYWxzZTtcbiAgICB9XG59O1xuXG5EYWlseUJvbnVzQ29udHJvbGxlci5wcm90b3R5cGUucG9wdXBDbGFpbVJld2FyZCA9IGZ1bmN0aW9uIChjb25maWcsIGRvdWJsZSwgY2FsbGJhY2spIHtcbiAgICAvL3ZhciBjb3VudCA9IGRvdWJsZSA/IGNvbmZpZy5jb3VudCAqIDIgOiBjb25maWcuY291bnQ7XG4gICAgdmFyIHBhcmFtID0gZG91YmxlID8gMiA6IDE7XG4gICAgdmFyIGNvdW50ID0gY29uZmlnLmNvdW50O1xuICAgIHZhciBzcGxpdENvdW50ID0gMDtcbiAgICB2YXIgdGhyZWVCYWxsQ291bnQgPSAwO1xuICAgIHZhciByZXdhcmROYW1lID0gZ2FtZS51dGlscy5pc0lPUygpID8gXCJkYWlseV9ib251c190aXBzXCIgOiBcImRhaWx5X2JvbnVzX3RpcHNcIjtcbiAgICBpZiAoY29uZmlnLnR5cGUgPT09IEJvb3N0VHlwZS5TUExJVCkge1xuICAgICAgICBzcGxpdENvdW50ID0gY291bnQ7XG4gICAgfSBlbHNlIGlmIChjb25maWcudHlwZSA9PT0gQm9vc3RUeXBlLlRIUkVFX0JBTEwpIHtcbiAgICAgICAgdGhyZWVCYWxsQ291bnQgPSBjb3VudDtcbiAgICB9IGVsc2UgaWYgKGNvbmZpZy50eXBlID09PSBCb29zdFR5cGUuR0lGVCkge1xuICAgICAgICBzcGxpdENvdW50ID0gZ2FtZS51dGlscy5yYW5kb21OZXh0SW50SW5SYW5nZSgyLCA0KTtcbiAgICAgICAgdGhyZWVCYWxsQ291bnQgPSBnYW1lLnV0aWxzLnJhbmRvbU5leHRJbnRJblJhbmdlKDIsIDQpO1xuICAgIH0gZWxzZSBpZiAoY29uZmlnLnR5cGUgPT09IEJvb3N0VHlwZS5TS0lOKSB7XG4gICAgICAgIGdhbWUucG9wdXBNYW4ucG9wdXBSZXdhcmROb3RpY2VEbGcoZ2FtZS5sb2NhbC5nZXRWYWx1ZShcInNraW5fY2xhaW1lZFwiKSxcbiAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBnYW1lLnBsYXllck1hbi5zZXRDbGFpbWVkU2tpbihjb25maWcuYXJnMSk7XG4gICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgY29uZmlnLmltYWdlLCAxKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH0gZWxzZSBpZiAoY29uZmlnLnR5cGUgPT09IEJvb3N0VHlwZS5ESUFNT05EKSB7XG4gICAgICAgIHZhciBkaWFtb25kQ291bnQgPSBjb25maWcuY291bnQ7XG4gICAgICAgIGlmIChkb3VibGUpIHtcbiAgICAgICAgICAgIGdhbWUucG9wdXBNYW4ucG9wdXBSZXdhcmROb3RpY2VEbGcoZ2FtZS5sb2NhbC5nZXRWYWx1ZShcInJld2FyZF92aWRlb19kaWFtb25kc1wiKSxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGdhbWUucGxheWVyTWFuLmFkZERpYW1vbmRzKGRpYW1vbmRDb3VudCwgcmV3YXJkTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIGNvbmZpZy5pbWFnZSwgZGlhbW9uZENvdW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIFN0b3JlSGVscGVyLmdldEluc3RhbmNlKCkucG9wdXBSZXdhcmREb3VibGVEbGcoZGlhbW9uZENvdW50LCBCb29zdFR5cGUuRElBTU9ORCwgcmV3YXJkTmFtZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzcGxpdENvdW50ID0gc3BsaXRDb3VudCAqIHBhcmFtO1xuICAgIHRocmVlQmFsbENvdW50ID0gdGhyZWVCYWxsQ291bnQgKiBwYXJhbTtcbiAgICBpZiAoZG91YmxlKSB7XG4gICAgICAgIFN0b3JlSGVscGVyLmdldEluc3RhbmNlKCkucG9wdXBCb29zdFJld2FyZERsZyhzcGxpdENvdW50LCB0aHJlZUJhbGxDb3VudCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soKTtcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHNwbGl0Q291bnQgPiAwKSB7XG4gICAgICAgICAgICBTdG9yZUhlbHBlci5nZXRJbnN0YW5jZSgpLnBvcHVwUmV3YXJkRG91YmxlRGxnKHNwbGl0Q291bnQsIEJvb3N0VHlwZS5TUExJVCwgcmV3YXJkTmFtZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9LmJpbmQodGhpcykpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aHJlZUJhbGxDb3VudCA+IDApIHtcbiAgICAgICAgICAgIFN0b3JlSGVscGVyLmdldEluc3RhbmNlKCkucG9wdXBSZXdhcmREb3VibGVEbGcodGhyZWVCYWxsQ291bnQsIEJvb3N0VHlwZS5USFJFRV9CQUxMLCByZXdhcmROYW1lLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5EYWlseUJvbnVzQ29udHJvbGxlci5wcm90b3R5cGUuY2xhaW1DbGlja2VkID0gZnVuY3Rpb24gKHNlbmRlcikge1xuICAgIEF1ZGlvSGVscGVyLnBsYXlCdG5Tb3VuZCgpO1xuICAgIGlmICghdGhpcy5jbGFpbWVkKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgdGhpcy5wb3B1cENsYWltUmV3YXJkKHRoaXMuY3VyQ29uZmlnLCBmYWxzZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc2VsZi5zZXRDbGFpbWVkKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB0aGlzLmNsb3NlKCk7XG59O1xuXG5EYWlseUJvbnVzQ29udHJvbGxlci5wcm90b3R5cGUuZG91YmxlQ2xpY2tlZCA9IGZ1bmN0aW9uIChzZW5kZXIpIHtcbiAgICBBdWRpb0hlbHBlci5wbGF5QnRuU291bmQoKTtcbiAgICBpZiAoIXRoaXMuY2xhaW1lZCkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIFN0b3JlSGVscGVyLmdldEluc3RhbmNlKCkuY2hlY2tBbmRTaG93UmV3YXJkVmlkZW8oZ2FtZS51dGlscy5pc0lPUygpID8gXCJzaHVhbmdiZWlsaWJhb1wiIDogXCJkYWlseWJvbnVzXCIsIGZ1bmN0aW9uIChyZXdhcmRlZCkge1xuICAgICAgICAgICAgaWYgKHJld2FyZGVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wb3B1cENsYWltUmV3YXJkKHRoaXMuY3VyQ29uZmlnLCB0cnVlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuc2V0Q2xhaW1lZCgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgICB9XG59O1xuXG5EYWlseUJvbnVzQ29udHJvbGxlci5wcm90b3R5cGUuc2V0Q2xhaW1lZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBnYW1lLnBsYXllck1hbi5zZXRMYXN0Q2xhaW1EYWlseUJvbnVzRGF5KGdhbWUudXRpbHMuZ2V0RGF5QnlUcyhEYXRlLm5vdygpKSk7XG4gICAgdGhpcy5jbGFpbWVkID0gdHJ1ZTtcbn07XG5cbkRhaWx5Qm9udXNDb250cm9sbGVyLnByb3RvdHlwZS5iYWNrQ2xpY2tlZCA9IGZ1bmN0aW9uIChzZW5kZXIpIHtcbiAgICBBdWRpb0hlbHBlci5wbGF5QnRuU291bmQoKTtcblxuICAgIHRoaXMuY2xvc2UoKTtcbn07XG5cbkRhaWx5Qm9udXNDb250cm9sbGVyLnByb3RvdHlwZS5wb3B1cCA9IGZ1bmN0aW9uICgpIHtcbiAgICBnYW1lLmRpYWxvZ01hbmFnZXIucG9wdXAodGhpcy5yb290Tm9kZSwge3BvcHVwQW5pbTogdHJ1ZX0pO1xufTtcblxuRGFpbHlCb251c0NvbnRyb2xsZXIucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKCkge1xuICAgIGdhbWUuZGlhbG9nTWFuYWdlci5jbG9zZSh0aGlzLnJvb3ROb2RlKTtcbn07XG5cbkRhaWx5Qm9udXNDb250cm9sbGVyLnByb3RvdHlwZS5vbkV4aXQgPSBmdW5jdGlvbiAoKSB7XG59O1xuXG5EYWlseUJvbnVzQ29udHJvbGxlci5jcmVhdGVGcm9tQ0NCID0gZnVuY3Rpb24oKSB7XG4gICAgY2MuQnVpbGRlclJlYWRlci5yZWdpc3RlckNvbnRyb2xsZXIoXCJEYWlseUJvbnVzSXRlbUNvbnRyb2xsZXJcIiwgbmV3IERhaWx5Qm9udXNJdGVtQ29udHJvbGxlcigpKTtcbiAgICAvL2NjLkJ1aWxkZXJSZWFkZXIucmVnaXN0ZXJDb250cm9sbGVyKFwiVGl0bGVDb250cm9sbGVyXCIsIG5ldyBUaXRsZUNvbnRyb2xsZXIoKSk7XG4gICAgdmFyIG5vZGUgPSBnYW1lLnV0aWxzLmxvYWROb2RlRnJvbUNDQihcInJlcy9tZW51L2RhaWx5X2JvbnVzX3ZpZXcuY2NiaVwiLCBudWxsLCBcIkRhaWx5Qm9udXNDb250cm9sbGVyXCIsIG5ldyBEYWlseUJvbnVzQ29udHJvbGxlcigpKTtcbiAgICBjYy5CdWlsZGVyUmVhZGVyLl9jb250cm9sbGVyQ2xhc3NDYWNoZVtcIkRhaWx5Qm9udXNJdGVtQ29udHJvbGxlclwiXSA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gbm9kZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRGFpbHlCb251c0NvbnRyb2xsZXI7IiwidmFyIEJvb3N0VHlwZSA9IHJlcXVpcmUoXCIuLi9lbnVtL0Jvb3N0VHlwZVwiKTtcblxudmFyIERhaWx5Qm9udXNJdGVtQ29udHJvbGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICBCYXNlQ0NCQ29udHJvbGxlci5jYWxsKHRoaXMpO1xuXG4gICAgdGhpcy5zcEJsYWNrID0gbnVsbDtcbiAgICB0aGlzLnNwSXRlbSA9IG51bGw7XG4gICAgdGhpcy5zcEN1cnJlbnQgPSBudWxsO1xuICAgIHRoaXMuc3BDbGFpbWVkID0gbnVsbDtcbiAgICB0aGlzLmxibENvdW50ID0gbnVsbDtcbiAgICB0aGlzLmxibERheSA9IG51bGw7XG5cbiAgICB0aGlzLmRhaWx5Qm9udXNDZmcgPSBudWxsO1xufTtcblxuZ2FtZS51dGlscy5pbmhlcml0cyhEYWlseUJvbnVzSXRlbUNvbnRyb2xsZXIsIEJhc2VDQ0JDb250cm9sbGVyKTtcblxuRGFpbHlCb251c0l0ZW1Db250cm9sbGVyLnByb3RvdHlwZS5vbkRpZExvYWRGcm9tQ0NCICA9IGZ1bmN0aW9uKCkge1xuICAgIEJhc2VDQ0JDb250cm9sbGVyLnByb3RvdHlwZS5vbkRpZExvYWRGcm9tQ0NCLmNhbGwodGhpcyk7XG59O1xuLyoqXG4gKiBAcGFyYW0ge0RhaWx5Qm9udXNDb25maWd9IGRhdGFcbiAqIEBwYXJhbSB7bnVtYmVyfSBkYXlcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gY3VycmVudFxuICogQHBhcmFtIHtib29sZWFufSBjbGFpbWVkXG4gKi9cbi8vZGF5LCBzdGF0ZSwgcmV3YXJkT2JqLCBjbGFpbWVkXG5EYWlseUJvbnVzSXRlbUNvbnRyb2xsZXIucHJvdG90eXBlLmluaXRXaXRoID0gZnVuY3Rpb24gKGRhdGEsIGRheSwgY3VycmVudCwgY2xhaW1lZCkge1xuICAgIHRoaXMuZGFpbHlCb251c0NmZyA9IGRhdGE7XG5cbiAgICBpZiAoZGF0YS50eXBlID09PSBCb29zdFR5cGUuU0tJTikge1xuICAgICAgICB2YXIgZ2V0dGVkID0gZ2FtZS5wbGF5ZXJNYW4uaGFzU2tpbihkYXRhLmFyZzEpO1xuICAgICAgICBpZiAoZ2V0dGVkKSB7XG4gICAgICAgICAgICBkYXRhLnR5cGUgPSBkYXRhLmV4dHJhLnR5cGU7XG4gICAgICAgICAgICBkYXRhLmNvdW50ID0gZGF0YS5leHRyYS5jb3VudDtcbiAgICAgICAgICAgIGRhdGEuaW1hZ2UgPSBkYXRhLmV4dHJhLmltYWdlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5zcEJsYWNrLnZpc2libGUgPSBjbGFpbWVkO1xuICAgIHRoaXMuc3BJdGVtLnNldFNwcml0ZUZyYW1lKGRhdGEuaW1hZ2UpO1xuICAgIC8vZ2FtZS51dGlscy5zY2FsZUNDTGFiZWxCTUZvbnQodGhpcy5zcEl0ZW0sIDU5KTtcbiAgICBpZiAoIWNsYWltZWQpIHtcbiAgICAgICAgdGhpcy5zcEN1cnJlbnQudmlzaWJsZSA9IGN1cnJlbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zcEN1cnJlbnQudmlzaWJsZSA9IGZhbHNlO1xuICAgIH1cblxuICAgIHRoaXMuc3BDbGFpbWVkLnZpc2libGUgPSBjbGFpbWVkO1xuICAgIHRoaXMubGJsQ291bnQuc2V0U3RyaW5nKFwieFwiICsgZGF0YS5jb3VudCk7XG4gICAgdGhpcy5sYmxEYXkuc2V0U3RyaW5nKGdhbWUudXRpbHMuc3ByaW50ZihfKFwiZGF5X3RpdGxlXCIpLCBkYXkpKTtcbn07XG5cbkRhaWx5Qm9udXNJdGVtQ29udHJvbGxlci5wcm90b3R5cGUuZ2V0Q29udGVudFNpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3BCZ1NlbGVjdGVkLmdldENvbnRlbnRTaXplKCk7XG59O1xuXG5EYWlseUJvbnVzSXRlbUNvbnRyb2xsZXIuY3JlYXRlRnJvbUNDQiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBnYW1lLnV0aWxzLmxvYWROb2RlRnJvbUNDQihcInJlcy9tZW51L2RhaWx5X2JvbnVzX2l0ZW1fdmlldy5jY2JpXCIsIG51bGwsIFwiRGFpbHlCb251c0l0ZW1Db250cm9sbGVyXCIsIG5ldyBEYWlseUJvbnVzSXRlbUNvbnRyb2xsZXIoKSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IERhaWx5Qm9udXNJdGVtQ29udHJvbGxlcjsiLCJ2YXIgRXZlbnRzTmFtZSA9IHJlcXVpcmUoXCIuLi9ldmVudHMvRXZlbnRzTmFtZVwiKTtcbnZhciBOdW1iZXJBbmltYXRpb24gPSByZXF1aXJlKFwiLi4vLi4vY29tbW9uL2VudGl0eS9OdW1iZXJBbmltYXRpb25cIik7XG5cbnZhciBEaWFtb25kc0NvbnRyb2xsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgQmFzZUNDQkNvbnRyb2xsZXIuY2FsbCh0aGlzKTtcblxuICAgIHRoaXMubGJEaWFtb25kcyA9IG51bGw7XG5cbiAgICB0aGlzLm51bWJlckFuaW1hdGlvbiA9IG51bGw7XG59O1xuXG5nYW1lLnV0aWxzLmluaGVyaXRzKERpYW1vbmRzQ29udHJvbGxlciwgQmFzZUNDQkNvbnRyb2xsZXIpO1xuXG5EaWFtb25kc0NvbnRyb2xsZXIucHJvdG90eXBlLm9uRW50ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgQmFzZUNDQkNvbnRyb2xsZXIucHJvdG90eXBlLm9uRW50ZXIuY2FsbCh0aGlzKTtcbiAgICBnYW1lLmV2ZW50RGlzcGF0Y2hlci5hZGRFdmVudExpc3RlbmVyKEV2ZW50c05hbWUuRElBTU9ORFNfVVBEQVRFLCB0aGlzLm9uVXBkYXRlRGlhbW9uZHMsIHRoaXMpO1xuICAgIGNjLmRpcmVjdG9yLmdldFNjaGVkdWxlcigpLnNjaGVkdWxlQ2FsbGJhY2tGb3JUYXJnZXQodGhpcywgdGhpcy5vblVwZGF0ZSwgMC4wNSwgY2MuUkVQRUFUX0ZPUkVWRVIsIDAsIGZhbHNlKTtcbn07XG5cbkRpYW1vbmRzQ29udHJvbGxlci5wcm90b3R5cGUub25FeGl0ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMubnVtYmVyQW5pbWF0aW9uLmRlc3Ryb3koKTtcbiAgICBjYy5kaXJlY3Rvci5nZXRTY2hlZHVsZXIoKS51bnNjaGVkdWxlQ2FsbGJhY2tGb3JUYXJnZXQodGhpcywgdGhpcy5vblVwZGF0ZSk7XG4gICAgZ2FtZS5ldmVudERpc3BhdGNoZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihFdmVudHNOYW1lLkRJQU1PTkRTX1VQREFURSwgdGhpcy5vblVwZGF0ZURpYW1vbmRzLCB0aGlzKTtcbiAgICBCYXNlQ0NCQ29udHJvbGxlci5wcm90b3R5cGUub25FeGl0LmNhbGwodGhpcyk7XG59O1xuXG5EaWFtb25kc0NvbnRyb2xsZXIucHJvdG90eXBlLm9uRGlkTG9hZEZyb21DQ0IgID0gZnVuY3Rpb24oKSB7XG4gICAgQmFzZUNDQkNvbnRyb2xsZXIucHJvdG90eXBlLm9uRGlkTG9hZEZyb21DQ0IuY2FsbCh0aGlzKTtcbiAgICB0aGlzLm51bWJlckFuaW1hdGlvbiA9IG5ldyBOdW1iZXJBbmltYXRpb24odGhpcy5sYkRpYW1vbmRzKTtcbiAgICB0aGlzLmxiRGlhbW9uZHMuc2V0U3RyaW5nKGdhbWUucGxheWVyTWFuLmdldERpYW1vbmRzKCkpO1xufTtcblxuRGlhbW9uZHNDb250cm9sbGVyLnByb3RvdHlwZS5vblVwZGF0ZURpYW1vbmRzID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgdmFyIGRhdGEgPSBldmVudC5nZXRVc2VyRGF0YSgpO1xuICAgIHZhciBkaWFtb25kcyA9IGRhdGEuZGlhbW9uZHM7XG4gICAgdmFyIGRlbHRhID0gZGF0YS5kZWx0YTtcbiAgICB0aGlzLm51bWJlckFuaW1hdGlvbi5wbGF5TnVtQW5pbShkaWFtb25kcyAtIGRlbHRhLCBkaWFtb25kcyk7XG59O1xuXG5EaWFtb25kc0NvbnRyb2xsZXIucHJvdG90eXBlLmRpYW1vbmRDbGlja2VkID0gZnVuY3Rpb24gKHNlbmRlcikge1xuICAgIEF1ZGlvSGVscGVyLnBsYXlCdG5Tb3VuZCgpO1xuICAgIHZhciBTdG9yZVR5cGUgPSByZXF1aXJlKFwiLi4vZW51bS9TdG9yZVR5cGVcIik7XG4gICAgZ2FtZS5wb3B1cE1hbi5wb3B1cFN0b3JlRGxnKFN0b3JlVHlwZS5ESUFNT05EKTtcbn07XG5cbkRpYW1vbmRzQ29udHJvbGxlci5wcm90b3R5cGUub25VcGRhdGUgPSBmdW5jdGlvbiAoZHQpIHtcbiAgICB0aGlzLm51bWJlckFuaW1hdGlvbi51cGRhdGUoZHQpO1xufTtcblxuRGlhbW9uZHNDb250cm9sbGVyLmNyZWF0ZUZyb21DQ0IgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbm9kZSA9IGdhbWUudXRpbHMubG9hZE5vZGVGcm9tQ0NCKFwicmVzL21lbnUvZGlhbW9uZF92aWV3LmNjYmlcIiwgbnVsbCwgXCJEaWFtb25kc0NvbnRyb2xsZXJcIiwgbmV3IERpYW1vbmRzQ29udHJvbGxlcigpLCB0cnVlKTtcbiAgICByZXR1cm4gbm9kZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRGlhbW9uZHNDb250cm9sbGVyOyIsIi8qKlxuICogQ3JlYXRlZCBieSBxaW5uaW5nIG9uIDIwMTcvMTIvMTUuXG4gKi9cbnZhciBHYW1lTWFuID0gcmVxdWlyZShcIi4uL21vZGVsL0dhbWVNYW5cIik7XG5cbnZhciBGYWlsQ29udHJvbGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICBCYXNlQ0NCQ29udHJvbGxlci5jYWxsKHRoaXMpO1xuICAgIHRoaXMuX3JlcGxheUNhbGxiYWNrID0gbnVsbDtcbiAgICB0aGlzLl9uZXh0Q2FsbGJhY2sgPSBudWxsO1xuXG4gICAgdGhpcy5zcEZhaWxDbiA9IG51bGw7XG4gICAgdGhpcy5zcEZhaWxFbiA9IG51bGw7XG5cbiAgICB0aGlzLmxibFJld2FyZCA9IG51bGw7XG4gICAgLy90aGlzLmxibFJlbGlmZSA9IG51bGw7XG4gICAgdGhpcy5sYmxXaGVlbCA9IG51bGw7XG5cbiAgICB0aGlzLmxibFNraXAgPSBudWxsO1xuICAgIC8vdGhpcy5uZFNraXBNYXNrID0gbnVsbDtcbiAgICAvL25ld1xuICAgIHRoaXMubGJsU2tpcENvc3REaWFtb25kcyA9IG51bGw7XG5cbiAgICAvL3RoaXMuYnRuU2tpcCA9IG51bGw7XG59O1xuXG5nYW1lLnV0aWxzLmluaGVyaXRzKEZhaWxDb250cm9sbGVyLCBCYXNlQ0NCQ29udHJvbGxlcik7XG5cbkZhaWxDb250cm9sbGVyLnByb3RvdHlwZS5vbkV4aXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5fcmVwbGF5Q2FsbGJhY2sgPSBudWxsO1xuICAgIGdhbWUuZXZlbnREaXNwYXRjaGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJkaWFsb2dfcG9wZWRcIiwgdGhpcy5vbkRpYWxvZ1BvcGVkLCB0aGlzKTtcbiAgICBnYW1lLmV2ZW50RGlzcGF0Y2hlci5yZW1vdmVFdmVudExpc3RlbmVyKFwiZGlhbG9nX2Nsb3NlZFwiLCB0aGlzLm9uRGlhbG9nQ2xvc2VkLCB0aGlzKTtcbiAgICB0aGlzLnJlbW92ZU5hdGl2ZUFkKCk7XG59O1xuXG5GYWlsQ29udHJvbGxlci5wcm90b3R5cGUub25FbnRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICBnYW1lLmV2ZW50RGlzcGF0Y2hlci5hZGRFdmVudExpc3RlbmVyKFwiZGlhbG9nX3BvcGVkXCIsIHRoaXMub25EaWFsb2dQb3BlZCwgdGhpcyk7XG4gICAgZ2FtZS5ldmVudERpc3BhdGNoZXIuYWRkRXZlbnRMaXN0ZW5lcihcImRpYWxvZ19jbG9zZWRcIiwgdGhpcy5vbkRpYWxvZ0Nsb3NlZCwgdGhpcyk7XG4gICAgLy90aGlzLnNob3dOYXRpdmVBZCgpO1xuICAgIGlmIChnYW1lLmFkc01hbmFnZXIuc2hvd1RvcEJhbm5lcikge1xuICAgICAgICBnYW1lLmFkc01hbmFnZXIucmVtb3ZlQmFubmVyQWRzKFwidG9wXCIpO1xuICAgIH1cbn07XG5cbkZhaWxDb250cm9sbGVyLnByb3RvdHlwZS5vbkRpYWxvZ1BvcGVkID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMudXBkYXRlTmF0aXZlQWQoKTtcbn07XG5cbkZhaWxDb250cm9sbGVyLnByb3RvdHlwZS5vbkRpYWxvZ0Nsb3NlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnVwZGF0ZU5hdGl2ZUFkKCk7XG59O1xuXG5GYWlsQ29udHJvbGxlci5wcm90b3R5cGUudXBkYXRlTmF0aXZlQWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGdhbWUuZGlhbG9nTWFuYWdlci5pc1RvcGVzdERpYWxvZyh0aGlzLnJvb3ROb2RlKSkge1xuICAgICAgICB0aGlzLnNob3dOYXRpdmVBZCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmVtb3ZlTmF0aXZlQWQoKTtcbiAgICB9XG59O1xuXG5GYWlsQ29udHJvbGxlci5wcm90b3R5cGUuc2hvd05hdGl2ZUFkID0gZnVuY3Rpb24gKCkge1xuICAgIGdhbWUuYWRzTWFuYWdlci5zaG93TmF0aXZlQWQoXCJmYWlsXCIsIDAsIDApO1xufTtcblxuRmFpbENvbnRyb2xsZXIucHJvdG90eXBlLnJlbW92ZU5hdGl2ZUFkID0gZnVuY3Rpb24gKCkge1xuICAgIGdhbWUuYWRzTWFuYWdlci5yZW1vdmVOYXRpdmVBZChcImZhaWxcIik7XG59O1xuXG5GYWlsQ29udHJvbGxlci5wcm90b3R5cGUub25EaWRMb2FkRnJvbUNDQiAgPSBmdW5jdGlvbigpIHtcbiAgICBCYXNlQ0NCQ29udHJvbGxlci5wcm90b3R5cGUub25EaWRMb2FkRnJvbUNDQi5jYWxsKHRoaXMpO1xuICAgIHRoaXMubGJsV2hlZWwuc2V0U3RyaW5nKF8oXCJsdWNreV93aGVlbF90aXRsZVwiKSk7XG4gICAgdGhpcy5sYmxSZXdhcmQuc2V0U3RyaW5nKF8oXCJ3YXRjaF9hZHNfZ2V0X2Jvb3N0c1wiKSk7XG4gICAgdGhpcy5sYmxTa2lwLnNldFN0cmluZyhfKFwic2tpcF9sZXZlbF90aXRsZVwiKSk7XG4gICAgLy90aGlzLmxibFNraXBDb3N0RGlhbW9uZHMuc2V0U3RyaW5nKFwieFwiICsgZ2FtZS5jb25maWcuc2tpcERpYW1vbmRzKTtcbiAgICBnYW1lLmF1ZGlvUGxheWVyLnBsYXlFZmZlY3RCeUtleShcImZhaWxcIik7XG5cbiAgICAvLzIwMCBkaWFtb25kcyB0byBza2lwLlxuXG4gICAgLy8gaWYgKGdhbWUuZ2FtZU1hbi5jYW5Ta2lwKCkpIHtcbiAgICAvLyAgICAgY2MubG9nKFwiY2FuIHNraXBcIik7XG4gICAgLy8gICAgIHRoaXMubmRTa2lwTWFzay52aXNpYmxlID0gZmFsc2U7XG4gICAgLy8gICAgIHRoaXMuYnRuU2tpcC5lbmFibGVkID0gdHJ1ZTtcbiAgICAvLyB9IGVsc2Uge1xuICAgIC8vICAgICBjYy5sb2coXCJjYW4gbm90IHNraXBcIik7XG4gICAgLy8gICAgIHRoaXMubmRTa2lwTWFzay52aXNpYmxlID0gdHJ1ZTtcbiAgICAvLyAgICAgdGhpcy5idG5Ta2lwLmVuYWJsZWQgPSBmYWxzZTtcbiAgICAvLyB9XG59O1xuXG5GYWlsQ29udHJvbGxlci5wcm90b3R5cGUuaW5pdFdpdGggPSBmdW5jdGlvbiAocmVwbGF5Q2FsbGJhY2ssIHNraXBDYWxsYmFjaykge1xuICAgIHRoaXMuX3JlcGxheUNhbGxiYWNrID0gcmVwbGF5Q2FsbGJhY2s7XG4gICAgdGhpcy5fc2tpcENhbGxiYWNrID0gc2tpcENhbGxiYWNrO1xufTtcblxuRmFpbENvbnRyb2xsZXIucHJvdG90eXBlLm9uQW5pbUVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBHYW1lTWFuLmdldEluc3RhbmNlKCkudHJ5U2hvd0ZhaWxQb3B1cCgpO1xufTtcblxuRmFpbENvbnRyb2xsZXIucHJvdG90eXBlLnJlc3RhcnRDbGlja2VkID0gZnVuY3Rpb24gKHNlbmRlcikge1xuICAgIGdhbWUuYXVkaW9QbGF5ZXIucGxheUVmZmVjdEJ5S2V5KFwiZW50ZXJcIik7XG4gICAgR2FtZU1hbi5nZXRJbnN0YW5jZSgpLnNob3dBZHMoZmFsc2UpO1xuICAgIGlmICh0aGlzLl9yZXBsYXlDYWxsYmFjaykge1xuICAgICAgICB0aGlzLl9yZXBsYXlDYWxsYmFjaygpO1xuICAgIH1cbiAgICB0aGlzLmNsb3NlKCk7XG59O1xuXG5GYWlsQ29udHJvbGxlci5wcm90b3R5cGUuaG9tZUNsaWNrZWQgPSBmdW5jdGlvbiAoc2VuZGVyKSB7XG4gICAgZ2FtZS5hdWRpb1BsYXllci5wbGF5RWZmZWN0QnlLZXkoXCJlbnRlclwiKTtcbiAgICBHYW1lTWFuLmdldEluc3RhbmNlKCkuc2hvd0FkcyhmYWxzZSk7XG4gICAgZ2FtZS5zY2VuZU1hbi5zd2l0Y2hTY2VuZShnYW1lLnNjZW5lVHlwZS5NRU5VKTtcbn07XG5cbkZhaWxDb250cm9sbGVyLnByb3RvdHlwZS53YXRjaEFkc0NsaWNrZWQgPSBmdW5jdGlvbiAoc2VuZGVyKSB7XG4gICAgZ2FtZS5hdWRpb1BsYXllci5wbGF5RWZmZWN0QnlLZXkoXCJlbnRlclwiKTtcbiAgICB2YXIgU3RvcmVIZWxwZXIgPSByZXF1aXJlKFwiLi4vbW9kZWwvU3RvcmVIZWxwZXJcIik7XG4gICAgU3RvcmVIZWxwZXIuZ2V0SW5zdGFuY2UoKS5jaGVja0FuZFNob3dSZXdhcmRWaWRlbyhnYW1lLnV0aWxzLmlzSU9TKCkgPyBcImZhaWxnaWZ0XCIgOiBcImppbGkwNlwiLCBudWxsLCBcIkZhaWxBbmRXYXRjaERpYW1vbmRzQWRzXCIpO1xufTtcblxuRmFpbENvbnRyb2xsZXIucHJvdG90eXBlLnJlbGlmZUNsaWNrZWQgPSBmdW5jdGlvbiAoc2VuZGVyKSB7XG4gICAgLy9nYW1lLmF1ZGlvUGxheWVyLnBsYXlFZmZlY3RCeUtleShcImVudGVyXCIpO1xuICAgIC8vdmFyIFN0b3JlSGVscGVyID0gcmVxdWlyZShcIi4uL21vZGVsL1N0b3JlSGVscGVyXCIpO1xuICAgIC8vU3RvcmVIZWxwZXIuZ2V0SW5zdGFuY2UoKS5jaGVja0FuZFNob3dSZXdhcmRWaWRlbyhmdW5jdGlvbiAoKSB7XG4gICAgLy99KTtcbn07XG5cbkZhaWxDb250cm9sbGVyLnByb3RvdHlwZS5za2lwQ2xpY2tlZCA9IGZ1bmN0aW9uIChzZW5kZXIpIHtcbiAgICB2YXIgU3RvcmVIZWxwZXIgPSByZXF1aXJlKFwiLi4vbW9kZWwvU3RvcmVIZWxwZXJcIik7XG4gICAgU3RvcmVIZWxwZXIuZ2V0SW5zdGFuY2UoKS5jaGVja0FuZFNob3dSZXdhcmRWaWRlbyhnYW1lLnV0aWxzLmlzSU9TKCkgPyBcInRpYW9ndW8wMVwiIDogXCJza2lwXCIsIGZ1bmN0aW9uIChyZXdhcmRlZCkge1xuICAgICAgICBpZiAocmV3YXJkZWQpIHtcbiAgICAgICAgICAgIGdhbWUuYW5hbHlzZU1hbmFnZXIudHJhY2tFdmVudChcIldhdGNoQWRzVG9Ta2lwTGV2ZWxcIiwge1wibGV2ZWxcIjogR2FtZU1hbi5nZXRJbnN0YW5jZSgpLmxldmVsSWR9KTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9za2lwQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9za2lwQ2FsbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0uYmluZCh0aGlzKSk7XG59XG5cbkZhaWxDb250cm9sbGVyLnByb3RvdHlwZS53aGVlbENsaWNrZWQgPSBmdW5jdGlvbiAoc2VuZGVyKSB7XG4gICAgQXVkaW9IZWxwZXIucGxheUJ0blNvdW5kKCk7XG4gICAgdmFyIFdoZWVsVHlwZSA9IHJlcXVpcmUoXCIuLi9lbnVtL1doZWVsVHlwZVwiKTtcbiAgICBnYW1lLnBvcHVwTWFuLnBvcHVwV2hlZWxEbGcoV2hlZWxUeXBlLkRhaWx5Qm9udXMpO1xufTtcblxuRmFpbENvbnRyb2xsZXIucHJvdG90eXBlLnBvcHVwID0gZnVuY3Rpb24gKCkge1xuICAgIGdhbWUuZGlhbG9nTWFuYWdlci5wb3B1cCh0aGlzLnJvb3ROb2RlKTtcbn07XG5cbkZhaWxDb250cm9sbGVyLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBnYW1lLmRpYWxvZ01hbmFnZXIuY2xvc2UodGhpcy5yb290Tm9kZSk7XG59O1xuXG5GYWlsQ29udHJvbGxlci5jcmVhdGVGcm9tQ0NCID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG5vZGUgPSBnYW1lLnV0aWxzLmxvYWROb2RlRnJvbUNDQihcInJlcy9ub3RpY2UvZmFpbF92aWV3LmNjYmlcIiwgbnVsbCwgXCJGYWlsQ29udHJvbGxlclwiLCBuZXcgRmFpbENvbnRyb2xsZXIoKSk7XG4gICAgcmV0dXJuIG5vZGU7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZhaWxDb250cm9sbGVyOyIsInZhciBFdmVudHNOYW1lID0gcmVxdWlyZShcIi4uL2V2ZW50cy9FdmVudHNOYW1lXCIpO1xudmFyIEJyaWNrc1ZpZXcgPSByZXF1aXJlKFwiLi4vdmlldy9Ccmlja3NWaWV3XCIpO1xudmFyIEdhbWVNYW4gPSByZXF1aXJlKFwiLi4vbW9kZWwvR2FtZU1hblwiKTtcbnZhciBCb29zdFR5cGUgPSByZXF1aXJlKFwiLi4vZW51bS9Cb29zdFR5cGVcIik7XG52YXIgSGVscENvbnRyb2xsZXIgPSByZXF1aXJlKFwiLi9IZWxwQ29udHJvbGxlclwiKTtcbnZhciBTdG9yZVR5cGUgPSByZXF1aXJlKFwiLi4vZW51bS9TdG9yZVR5cGVcIik7XG52YXIgQWltSXRlbUNvbnRyb2xsZXIgPSByZXF1aXJlKFwiLi9BaW1JdGVtQ29udHJvbGxlclwiKTtcbnZhciBBaW1IZWxwQ29udHJvbGxlciA9IHJlcXVpcmUoXCIuL0FpbUhlbHBDb250cm9sbGVyXCIpO1xuXG52YXIgR2FtZUNvbnRyb2xsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgQmFzZUNDQkNvbnRyb2xsZXIuY2FsbCh0aGlzKTtcbiAgICB0aGlzLkxJRkVfU1RBUlRfVEFHID0gMTAwO1xuICAgIHRoaXMuTElGRV9DT1VOVCA9IDY7XG5cbiAgICB0aGlzLm5kTGlmZU5vZGUgPSBudWxsO1xuICAgIHRoaXMubGJUaW1lID0gbnVsbDtcbiAgICB0aGlzLmxiM05ldyA9IG51bGw7XG4gICAgdGhpcy5sYjNNdWx0aXBsZSA9IG51bGw7XG4gICAgdGhpcy5fZ2FtZU5vZGUgPSBudWxsO1xuICAgIHRoaXMubmRIZWxwID0gbnVsbDtcbiAgICB0aGlzLm5kQWltSGVscCA9IG51bGw7XG5cbiAgICB0aGlzLm5kQm9vc3QxID0gbnVsbDtcbiAgICB0aGlzLm5kQm9vc3QyID0gbnVsbDtcblxuICAgIHRoaXMubmRMaWZlTm9kZXMgPSBudWxsO1xuXG4gICAgdGhpcy5zcFRvcFByb2dyZXNzID0gbnVsbDtcblxuICAgIHRoaXMuc3BZZWxsb3cxID0gbnVsbDtcbiAgICB0aGlzLnNwWWVsbG93MiA9IG51bGw7XG4gICAgdGhpcy5zcFllbGxvdzMgPSBudWxsO1xuXG4gICAgdGhpcy5zcEJsYWNrMSA9IG51bGw7XG4gICAgdGhpcy5zcEJsYWNrMiA9IG51bGw7XG4gICAgdGhpcy5zcEJsYWNrMyA9IG51bGw7XG5cbiAgICB0aGlzLmxiTGV2ZWwgPSBudWxsO1xuXG4gICAgdGhpcy5uZEFuaW1JdGVtID0gbnVsbDtcblxuICAgIHRoaXMubmRUb3BDb250YWluZXIgPSBudWxsO1xuICAgIHRoaXMubmRUb3BCZyA9IG51bGw7XG5cbiAgICB0aGlzLm5kTGVmdCA9IG51bGw7XG4gICAgdGhpcy5uZFJpZ2h0ID0gbnVsbDtcblxuICAgIHRoaXMuc3BZZWxsb3dzID0gW107XG4gICAgdGhpcy5zcEJsYWNrcyA9IFtdO1xufTtcblxuZ2FtZS51dGlscy5pbmhlcml0cyhHYW1lQ29udHJvbGxlciwgQmFzZUNDQkNvbnRyb2xsZXIpO1xuXG5HYW1lQ29udHJvbGxlci5wcm90b3R5cGUub25FbnRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICBnYW1lLmV2ZW50RGlzcGF0Y2hlci5hZGRFdmVudExpc3RlbmVyKEV2ZW50c05hbWUuVVBEQVRFX0xFVkVMLCB0aGlzLm9uVXBkYXRlTGV2ZWwsIHRoaXMpO1xuICAgIGdhbWUuZXZlbnREaXNwYXRjaGVyLmFkZEV2ZW50TGlzdGVuZXIoRXZlbnRzTmFtZS5SRUZSRVNIX0JPT1NULCB0aGlzLm9uVXBkYXRlQm9vc3QsIHRoaXMpO1xuICAgIGdhbWUuZXZlbnREaXNwYXRjaGVyLmFkZEV2ZW50TGlzdGVuZXIoRXZlbnRzTmFtZS5VUERBVEVfQUlNX0lURU0sIHRoaXMub25VcGRhdGVBaW1JdGVtLCB0aGlzKTtcbn07XG5cbkdhbWVDb250cm9sbGVyLnByb3RvdHlwZS5vbkV4aXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgZ2FtZS5ldmVudERpc3BhdGNoZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihFdmVudHNOYW1lLlJFRlJFU0hfQk9PU1QsIHRoaXMub25VcGRhdGVCb29zdCwgdGhpcyk7XG4gICAgZ2FtZS5ldmVudERpc3BhdGNoZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihFdmVudHNOYW1lLlVQREFURV9MRVZFTCwgdGhpcy5vblVwZGF0ZUxldmVsLCB0aGlzKTtcbiAgICBnYW1lLmV2ZW50RGlzcGF0Y2hlci5yZW1vdmVFdmVudExpc3RlbmVyKEV2ZW50c05hbWUuVVBEQVRFX0FJTV9JVEVNLCB0aGlzLm9uVXBkYXRlQWltSXRlbSwgdGhpcyk7XG4gICAgdGhpcy5fZ2FtZUNvcmVOb2RlID0gbnVsbDtcbn07XG5cbkdhbWVDb250cm9sbGVyLnByb3RvdHlwZS5vbkRpZExvYWRGcm9tQ0NCICA9IGZ1bmN0aW9uKCkge1xuICAgIEJhc2VDQ0JDb250cm9sbGVyLnByb3RvdHlwZS5vbkRpZExvYWRGcm9tQ0NCLmNhbGwodGhpcyk7XG5cbiAgICB0aGlzLm5kTGlmZU5vZGVzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLkxJRkVfQ09VTlQ7ICsraSkge1xuICAgICAgICB2YXIgbGlmZU5vZGUgPSB0aGlzLm5kTGlmZU5vZGUuZ2V0Q2hpbGRCeVRhZyh0aGlzLkxJRkVfU1RBUlRfVEFHICsgaSk7XG4gICAgICAgIHRoaXMubmRMaWZlTm9kZXMucHVzaChsaWZlTm9kZSk7XG4gICAgfVxuXG4gICAgdGhpcy5zcFllbGxvd3MgPSBbdGhpcy5zcFllbGxvdzEsIHRoaXMuc3BZZWxsb3cyLCB0aGlzLnNwWWVsbG93M107XG4gICAgdGhpcy5zcEJsYWNrcyA9IFt0aGlzLnNwQmxhY2sxLCB0aGlzLnNwQmxhY2syLCB0aGlzLnNwQmxhY2szXTtcblxuICAgIHZhciBjb25maWcgPSBudWxsO1xuICAgIHZhciBsZXZlbElkID0gbnVsbDtcbiAgICBpZiAod2luZG93LmlzRWRpdG9yKSB7XG4gICAgICAgIGNvbmZpZyA9IGdhbWUuZ2FtZU1hbi5sZXZlbENmZztcbiAgICAgICAgbGV2ZWxJZCA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29uZmlnID0gR2FtZU1hbi5nZXRJbnN0YW5jZSgpLmdldEN1ckNvbmZpZygpO1xuICAgICAgICBsZXZlbElkID0gR2FtZU1hbi5nZXRJbnN0YW5jZSgpLmxldmVsSWQ7XG4gICAgfVxuXG4gICAgdGhpcy5fZ2FtZUNvcmVOb2RlID0gbmV3IEJyaWNrc1ZpZXcoY29uZmlnLCB0aGlzKTtcbiAgICB0aGlzLl9nYW1lTm9kZS5hZGRDaGlsZCh0aGlzLl9nYW1lQ29yZU5vZGUpO1xuXG4gICAgdGhpcy5sYkxldmVsLnNldFN0cmluZyhnYW1lLnV0aWxzLnNwcmludGYoXyhcImxldmVsX3RpdGxlXCIpLCBsZXZlbElkKSk7XG5cbiAgICB0aGlzLnVwZGF0ZUxpZmVDb3VudCgpO1xuICAgIHRoaXMudXBkYXRlQm9vc3QoKTtcblxuICAgIHZhciBmaXJzdEVudGVyID0gZ2FtZS5zdG9yYWdlQ29udHJvbGxlci5nZXRJdGVtKFwiZmlyc3RfZW50ZXJcIiwgXCJ0cnVlXCIpO1xuICAgIGlmIChmaXJzdEVudGVyID09PSBcInRydWVcIikge1xuICAgICAgICB0aGlzLm5kSGVscC52aXNpYmxlID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm5kSGVscC52aXNpYmxlID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdGhpcy51cGRhdGVUaW1lKCk7XG5cbiAgICBpZiAoZ2FtZS51dGlscy5pc05vdGNoU2NyZWVuKCkpIHtcbiAgICAgICAgdGhpcy5uZFRvcENvbnRhaW5lci5oZWlnaHQgKz0gNzA7XG4gICAgICAgIHRoaXMubmRUb3BCZy5oZWlnaHQgKz0gNzA7XG4gICAgfVxuICAgIGlmICh3aW5kb3cuaXNFZGl0b3IpIHtcbiAgICAgICAgdmFyIHhPZmZzZXQgPSBjYy53aW5TaXplLndpZHRoIC0gNjQwO1xuICAgICAgICB0aGlzLm5kTGVmdC53aWR0aCA9IHRoaXMubmRMZWZ0LndpZHRoICsgeE9mZnNldCAqIDAuNTtcbiAgICAgICAgdGhpcy5uZFJpZ2h0LndpZHRoID0gdGhpcy5uZFJpZ2h0LndpZHRoICsgeE9mZnNldCAqIDAuNTtcbiAgICB9XG4gICAgdGhpcy5vblVwZGF0ZUFpbUl0ZW0oKTtcbiAgICB0aGlzLm5kQWltSGVscC52aXNpYmxlID0gZmFsc2U7XG59O1xuXG5HYW1lQ29udHJvbGxlci5wcm90b3R5cGUuc2hvd0FpbUhlbHAgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5uZEFpbUhlbHAudmlzaWJsZSA9IHRydWU7XG59O1xuXG5HYW1lQ29udHJvbGxlci5wcm90b3R5cGUub25VcGRhdGVBaW1JdGVtID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChnYW1lLmdhbWVNYW4uY2FuVHJ5QWltSXRlbSgpKSB7XG4gICAgICAgIHRoaXMubmRBbmltSXRlbS52aXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgY2MubG9nKFwiZ2FtZSBjb250cm9sbGVyIGNhbiB1c2UgYWltIGl0ZW1cIik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5uZEFuaW1JdGVtLnZpc2libGUgPSBmYWxzZTtcbiAgICAgICAgY2MubG9nKFwiZ2FtZSBjb250cm9sbGVyIG5vdCB1c2UgYWltIGl0ZW1cIik7XG4gICAgfVxufTtcblxuR2FtZUNvbnRyb2xsZXIucHJvdG90eXBlLnVwZGF0ZUxpZmVDb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbm93TGlmZUNvdW50ID0gdGhpcy5fZ2FtZUNvcmVOb2RlLmxpZmVDb3VudDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuTElGRV9DT1VOVDsgKytpKSB7XG4gICAgICAgIHZhciBsaWZlTm9kZSA9IHRoaXMubmRMaWZlTm9kZXNbaV07XG4gICAgICAgIGlmIChsaWZlTm9kZSkge1xuICAgICAgICAgICAgbGlmZU5vZGUudmlzaWJsZSA9IChub3dMaWZlQ291bnQgPiBpKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbkdhbWVDb250cm9sbGVyLnByb3RvdHlwZS5vblVwZGF0ZUJvb3N0ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMudXBkYXRlQm9vc3QoKTtcbn07XG5cbkdhbWVDb250cm9sbGVyLnByb3RvdHlwZS51cGRhdGVCb29zdCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmxiM05ldy5zZXRTdHJpbmcoZ2FtZS5wbGF5ZXJNYW4uZ2V0Qm9vc3RDb3VudChCb29zdFR5cGUuVEhSRUVfQkFMTCkpO1xuICAgIHRoaXMubGIzTXVsdGlwbGUuc2V0U3RyaW5nKGdhbWUucGxheWVyTWFuLmdldEJvb3N0Q291bnQoQm9vc3RUeXBlLlNQTElUKSk7XG59O1xuXG5HYW1lQ29udHJvbGxlci5wcm90b3R5cGUudXBkYXRlVGltZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY29zdFRpbWUgPSAwO1xuICAgIGlmICh0aGlzLl9nYW1lQ29yZU5vZGUuZWNsaXBzZWRUaW1lKSB7XG4gICAgICAgIGNvc3RUaW1lID0gdGhpcy5fZ2FtZUNvcmVOb2RlLmVjbGlwc2VkVGltZSAvIDEwMDA7XG4gICAgfVxuICAgIHRoaXMubGJUaW1lLnNldFN0cmluZyhnYW1lLnV0aWxzLmdldExvbmdGb3JtYXRUaW1lKGNvc3RUaW1lKSk7XG5cbiAgICB2YXIgcGVyY2VudCA9IEdhbWVNYW4uZ2V0SW5zdGFuY2UoKS5nZXRQcm9ncmVzc1BlcmNlbnQoY29zdFRpbWUpO1xuICAgIHRoaXMuc3BUb3BQcm9ncmVzcy5zZXRQcmVmZXJyZWRTaXplKGNjLnNpemUoMTUwICogcGVyY2VudCAqIDAuMDEsIDgpKTtcbiAgICB2YXIgc3RhciA9IEdhbWVNYW4uZ2V0SW5zdGFuY2UoKS5nZXRDdXJyZW50U3Rhcihjb3N0VGltZSk7XG4gICAgdGhpcy51cGRhdGVTdGFyKHN0YXIpO1xufTtcblxuR2FtZUNvbnRyb2xsZXIucHJvdG90eXBlLnVwZGF0ZVN0YXIgPSBmdW5jdGlvbiAoc3Rhcikge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMzsgKytpKSB7XG4gICAgICAgIHRoaXMuc3BZZWxsb3dzW2ldLnZpc2libGUgPSAoc3RhciA+PSBpICsgMSk7XG4gICAgICAgIHRoaXMuc3BCbGFja3NbaV0udmlzaWJsZSA9IChzdGFyIDwgaSArIDEpO1xuICAgIH1cbn07XG5cbkdhbWVDb250cm9sbGVyLnByb3RvdHlwZS5wYXVzZUNsaWNrZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgQXVkaW9IZWxwZXIucGxheUJ0blNvdW5kKCk7XG4gICAgaWYgKHdpbmRvdy5pc0VkaXRvcikge1xuICAgICAgICB2YXIgRWRpdG9yU2NlbmUgPSByZXF1aXJlKFwiLi4vZWRpdG9yL3NjZW5lL0VkaXRvclNjZW5lXCIpO1xuICAgICAgICBjYy5kaXJlY3Rvci5ydW5TY2VuZShuZXcgRWRpdG9yU2NlbmUoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zaG93UGF1c2UoKTtcbiAgICB9XG59O1xuXG5HYW1lQ29udHJvbGxlci5wcm90b3R5cGUuc2hvd1BhdXNlID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX2dhbWVDb3JlTm9kZS5zdG9wKCk7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIGdhbWUucG9wdXBNYW4ucG9wdXBQYXVzZURsZyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNlbGYuX2dhbWVDb3JlTm9kZS5yZXN1bWUoKTtcbiAgICB9KTtcbn07XG5cbi8vR2FtZUNvbnRyb2xsZXIucHJvdG90eXBlLnN0b3JlQ2xpY2tlZCA9IGZ1bmN0aW9uICgpIHtcbi8vICAgIEF1ZGlvSGVscGVyLnBsYXlCdG5Tb3VuZCgpO1xuLy8gICAgdGhpcy5fZ2FtZUNvcmVOb2RlLnN0b3AoKTtcbi8vICAgIHZhciBzZWxmID0gdGhpcztcbi8vICAgIGdhbWUucG9wdXBNYW4ucG9wdXBTdG9yZURsZyhTdG9yZVR5cGUuRElBTU9ORCwgZnVuY3Rpb24gKCkge1xuLy8gICAgICAgIHNlbGYuX2dhbWVDb3JlTm9kZS5yZXN1bWUoKTtcbi8vICAgIH0pO1xuLy99O1xuXG5HYW1lQ29udHJvbGxlci5wcm90b3R5cGUubmV3M0NsaWNrZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgQXVkaW9IZWxwZXIucGxheUJ0blNvdW5kKCk7XG4gICAgaWYgKGdhbWUucGxheWVyTWFuLnVzZUJvb3N0KEJvb3N0VHlwZS5USFJFRV9CQUxMKSkge1xuICAgICAgICB0aGlzLl9nYW1lQ29yZU5vZGUudXNlTmV3M0JhbGxCb29zdCgpO1xuICAgICAgICB0aGlzLnVwZGF0ZUJvb3N0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fZ2FtZUNvcmVOb2RlLnN0b3AoKTtcbiAgICAgICAgLy9HYW1lTWFuLmdldEluc3RhbmNlKCkuc2hvd0FkcygpO1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIGdhbWUucG9wdXBNYW4ucG9wdXBTdG9yZURsZyhTdG9yZVR5cGUuRElBTU9ORCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc2VsZi5fZ2FtZUNvcmVOb2RlLnJlc3VtZSgpO1xuICAgICAgICB9KTtcbiAgICB9XG59O1xuXG5HYW1lQ29udHJvbGxlci5wcm90b3R5cGUubXVsdGlwbGUzQ2xpY2tlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBBdWRpb0hlbHBlci5wbGF5QnRuU291bmQoKTtcbiAgICBpZiAoZ2FtZS5wbGF5ZXJNYW4udXNlQm9vc3QoQm9vc3RUeXBlLlNQTElUKSkge1xuICAgICAgICB0aGlzLl9nYW1lQ29yZU5vZGUudXNlU3BsaXRCYWxsQm9vc3QoKTtcbiAgICAgICAgdGhpcy51cGRhdGVCb29zdCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2dhbWVDb3JlTm9kZS5zdG9wKCk7XG4gICAgICAgIC8vR2FtZU1hbi5nZXRJbnN0YW5jZSgpLnNob3dBZHMoKTtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICBnYW1lLnBvcHVwTWFuLnBvcHVwU3RvcmVEbGcoU3RvcmVUeXBlLkRJQU1PTkQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHNlbGYuX2dhbWVDb3JlTm9kZS5yZXN1bWUoKTtcbiAgICAgICAgfSk7XG4gICAgfVxufTtcblxuR2FtZUNvbnRyb2xsZXIucHJvdG90eXBlLnN0b3JlQ2xpY2tlZCA9IGZ1bmN0aW9uIChzZW5kZXIpIHtcbiAgICBBdWRpb0hlbHBlci5wbGF5QnRuU291bmQoKTtcbiAgICBnYW1lLmFuYWx5c2VNYW5hZ2VyLnRyYWNrRXZlbnQoXCJDbGlja1N0b3JlSW5HYW1lXCIpO1xuICAgIHRoaXMuX2dhbWVDb3JlTm9kZS5zdG9wKCk7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIGdhbWUucG9wdXBNYW4ucG9wdXBTdG9yZURsZyhTdG9yZVR5cGUuRElBTU9ORCwgZnVuY3Rpb24gKCkge1xuICAgICAgICBzZWxmLl9nYW1lQ29yZU5vZGUucmVzdW1lKCk7XG4gICAgfSk7XG59O1xuXG5HYW1lQ29udHJvbGxlci5wcm90b3R5cGUuc2tpbkNsaWNrZWQgPSBmdW5jdGlvbiAoc2VuZGVyKSB7XG4gICAgQXVkaW9IZWxwZXIucGxheUJ0blNvdW5kKCk7XG4gICAgZ2FtZS5hbmFseXNlTWFuYWdlci50cmFja0V2ZW50KFwiQ2xpY2tTa2luc0luR2FtZVwiKTtcbiAgICB0aGlzLl9nYW1lQ29yZU5vZGUuc3RvcCgpO1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBnYW1lLnBvcHVwTWFuLnBvcHVwU3RvcmVEbGcoU3RvcmVUeXBlLlNLSU4sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2VsZi5fZ2FtZUNvcmVOb2RlLnJlc3VtZSgpO1xuICAgIH0pO1xufTtcblxuR2FtZUNvbnRyb2xsZXIuY3JlYXRlRnJvbUNDQiA9IGZ1bmN0aW9uKCkge1xuICAgIGdhbWUudXRpbHMucmVnaXN0ZXJDb250cm9sbGVyKFwiSGVscENvbnRyb2xsZXJcIiwgbmV3IEhlbHBDb250cm9sbGVyKCkpO1xuICAgIGdhbWUudXRpbHMucmVnaXN0ZXJDb250cm9sbGVyKFwiQWltSGVscENvbnRyb2xsZXJcIiwgbmV3IEFpbUhlbHBDb250cm9sbGVyKCkpO1xuICAgIGdhbWUudXRpbHMucmVnaXN0ZXJDb250cm9sbGVyKFwiQWltSXRlbUNvbnRyb2xsZXJcIiwgbmV3IEFpbUl0ZW1Db250cm9sbGVyKCkpO1xuICAgIHZhciBub2RlID0gZ2FtZS51dGlscy5sb2FkTm9kZUZyb21DQ0IoXCJyZXMvZ2FtZS9nYW1lX3ZpZXcuY2NiaVwiLCBudWxsLCBcIkdhbWVDb250cm9sbGVyXCIsIG5ldyBHYW1lQ29udHJvbGxlcigpKTtcbiAgICBnYW1lLnV0aWxzLnVuUmVnaXN0ZXJDb250cm9sbGVyKFwiQWltSXRlbUNvbnRyb2xsZXJcIik7XG4gICAgZ2FtZS51dGlscy51blJlZ2lzdGVyQ29udHJvbGxlcihcIkhlbHBDb250cm9sbGVyXCIpO1xuICAgIGdhbWUudXRpbHMudW5SZWdpc3RlckNvbnRyb2xsZXIoXCJBaW1IZWxwQ29udHJvbGxlclwiKTtcbiAgICByZXR1cm4gbm9kZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gR2FtZUNvbnRyb2xsZXI7IiwidmFyIEdhbWVNYW4gPSByZXF1aXJlKFwiLi4vbW9kZWwvR2FtZU1hblwiKTtcbnZhciBHYW1lTW9kZSA9IHJlcXVpcmUoXCIuLi9lbnVtL0dhbWVNb2RlXCIpO1xuXG52YXIgR2FtZU92ZXJDb250cm9sbGVyID0gZnVuY3Rpb24gKCkge1xuICAgIEJhc2VDQ0JDb250cm9sbGVyLmNhbGwodGhpcyk7XG4gICAgdGhpcy5fYmVzdFNjb3JlTGFiZWwgPSBudWxsO1xuICAgIHRoaXMuX3Njb3JlTGFiZWwgPSBudWxsO1xuXG4gICAgdGhpcy5faWNvbkVuZ2xpc2ggPSBudWxsO1xuICAgIHRoaXMuX2ljb25DaGluZXNlID0gbnVsbDtcbiAgICB0aGlzLl9uZXdSZWNvcmRMYWJlbCA9IG51bGw7XG5cbiAgICB0aGlzLl9yZXBsYXlDYWxsYmFjayA9IG51bGw7XG59O1xuXG5nYW1lLnV0aWxzLmluaGVyaXRzKEdhbWVPdmVyQ29udHJvbGxlciwgQmFzZUNDQkNvbnRyb2xsZXIpO1xuXG5HYW1lT3ZlckNvbnRyb2xsZXIucHJvdG90eXBlLm9uRGlkTG9hZEZyb21DQ0IgID0gZnVuY3Rpb24oKSB7XG4gICAgQmFzZUNDQkNvbnRyb2xsZXIucHJvdG90eXBlLm9uRGlkTG9hZEZyb21DQ0IuY2FsbCh0aGlzKTtcbiAgICB0aGlzLl9uZXdSZWNvcmRMYWJlbC52aXNpYmxlID0gZmFsc2U7XG59O1xuXG5HYW1lT3ZlckNvbnRyb2xsZXIucHJvdG90eXBlLmluaXRXaXRoID0gZnVuY3Rpb24gKHBlcmNlbnQsIGNhbGxiYWNrKSB7XG4gICAgaWYgKEdhbWVNYW4uZ2V0SW5zdGFuY2UoKS5nYW1lTW9kZSA9PT0gR2FtZU1vZGUuR0FNRV9NT0RFX0VORExFU1MpIHtcbiAgICAgICAgdGhpcy5fYmVzdFNjb3JlTGFiZWwuc2V0U3RyaW5nKGdhbWUudXRpbHMuc3ByaW50ZihnYW1lLmxvY2FsLmdldFZhbHVlKFwiYmVzdF9zY29yZV90aXRsZVwiKSwgZ2FtZS5wbGF5ZXJNYW4uZ2V0QmVzdFNjb3JlKCkpKTtcbiAgICAgICAgdGhpcy5fc2NvcmVMYWJlbC5zZXRTdHJpbmcocGVyY2VudCk7XG4gICAgICAgIHRoaXMuX25ld1JlY29yZExhYmVsLnNldFN0cmluZyhnYW1lLmxvY2FsLmdldFZhbHVlKFwibmV3X3JlY29yZF90aXRsZVwiKSk7XG4gICAgICAgIGlmIChHYW1lTWFuLmdldEluc3RhbmNlKCkuaXNOZXdSZWNvcmQpIHtcbiAgICAgICAgICAgIHRoaXMuX25ld1JlY29yZExhYmVsLnZpc2libGUgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5fbmV3UmVjb3JkTGFiZWwucnVuQWN0aW9uKGNjLnNlcXVlbmNlKGNjLmZhZGVPdXQoMC4zKSwgY2MuZmFkZUluKDAuMykpLnJlcGVhdEZvcmV2ZXIoKSk7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9iZXN0U2NvcmVMYWJlbC5zZXRTdHJpbmcoZ2FtZS51dGlscy5zcHJpbnRmKGdhbWUubG9jYWwuZ2V0VmFsdWUoXCJsZXZlbF90aXRsZVwiKSwgR2FtZU1hbi5nZXRJbnN0YW5jZSgpLmxldmVsQ29uZmlnLmlkKSk7XG4gICAgICAgIHRoaXMuX3Njb3JlTGFiZWwuc2V0U3RyaW5nKGdhbWUudXRpbHMuc3ByaW50ZihcIiVkJSVcIiwgcGVyY2VudCkpO1xuICAgIH1cbiAgICB0aGlzLl9yZXBsYXlDYWxsYmFjayA9IGNhbGxiYWNrO1xufTtcblxuR2FtZU92ZXJDb250cm9sbGVyLnByb3RvdHlwZS5ob21lQ2xpY2tlZCA9IGZ1bmN0aW9uIChzZW5kZXIpIHtcbiAgICBBdWRpb0hlbHBlci5wbGF5QnRuU291bmQoKTtcbiAgICB2YXIgcmVTY2VuZSA9IG5ldyBjYy5UcmFuc2l0aW9uRmFkZSgwLjUsIEdhbWVCcmlkZ2UuZ2V0TWVudVNjZW5lKCksIGNjLmNvbG9yKDI1NSwgMjU1LCAyNTUpKTtcbiAgICBjYy5kaXJlY3Rvci5ydW5TY2VuZShyZVNjZW5lKTtcbn07XG5cbkdhbWVPdmVyQ29udHJvbGxlci5wcm90b3R5cGUucmVwbGF5Q2xpY2tlZCA9IGZ1bmN0aW9uIChzZW5kZXIpIHtcbiAgICBBdWRpb0hlbHBlci5wbGF5QnRuU291bmQoKTtcbiAgICBpZiAodGhpcy5fcmVwbGF5Q2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5fcmVwbGF5Q2FsbGJhY2soKTtcbiAgICB9XG4gICAgdGhpcy5jbG9zZSgpO1xufTtcblxuR2FtZU92ZXJDb250cm9sbGVyLnByb3RvdHlwZS5yYW5rQ2xpY2tlZCA9IGZ1bmN0aW9uIChzZW5kZXIpIHtcbiAgICBBdWRpb0hlbHBlci5wbGF5QnRuU291bmQoKTtcbiAgICBnYW1lLmdjTWFuYWdlci5zaG93TGVhZGVyYm9hcmQoZ2FtZS5jb25maWcuZ2V0TGVhZGVyQm9hcmRLZXkoKSk7XG59O1xuXG5HYW1lT3ZlckNvbnRyb2xsZXIucHJvdG90eXBlLnNoYXJlQ2xpY2tlZCA9IGZ1bmN0aW9uIChzZW5kZXIpIHtcbiAgICBBdWRpb0hlbHBlci5wbGF5QnRuU291bmQoKTtcbiAgICBnYW1lLnNoYXJlTWFuYWdlci5zaGFyZVdpdGhTeXN0ZW0oZ2FtZS51dGlscy5zcHJpbnRmKGdhbWUubG9jYWwuZ2V0VmFsdWUoXCJzaGFyZV90aXBzXCIpLFxuICAgICAgICBnYW1lLnBsYXllck1hbi5nZXRCZXN0U2NvcmUoKSwgZ2FtZS5jb25maWcuZ2V0UGxhdGZvcm1Eb3dubG9hZFVybCgpKSk7XG59O1xuXG5HYW1lT3ZlckNvbnRyb2xsZXIucHJvdG90eXBlLnBvcHVwID0gZnVuY3Rpb24gKCkge1xuICAgIC8vZ2FtZS5kaWFsb2dNYW5hZ2VyLnBvcHVwKHRoaXMucm9vdE5vZGUpO1xuICAgIC8vZ2FtZS5kaWFsb2dNYW5hZ2VyLnBvcHVwKHRoaXMucm9vdE5vZGUsIHtcIm92ZXJsYXlPcGFjaXR5XCI6IDEwMH0pO1xuICAgIGdhbWUuZGlhbG9nTWFuYWdlci5wb3B1cCh0aGlzLnJvb3ROb2RlLCB7XCJvdmVybGF5Q29sb3JcIjogY2MuY29sb3IoMjQzLCAyNDMsIDI0MyksIFwib3ZlcmxheU9wYWNpdHlcIjogMjEwfSk7XG59O1xuXG5HYW1lT3ZlckNvbnRyb2xsZXIucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKCkge1xuICAgIGdhbWUuZGlhbG9nTWFuYWdlci5jbG9zZSh0aGlzLnJvb3ROb2RlKTtcbn07XG5cbkdhbWVPdmVyQ29udHJvbGxlci5jcmVhdGVGcm9tQ0NCID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG5vZGUgPSBnYW1lLnV0aWxzLmxvYWROb2RlRnJvbUNDQihcInJlcy9tZW51L2dhbWVfb3Zlcl92aWV3LmNjYmlcIiwgbnVsbCwgXCJHYW1lT3ZlckNvbnRyb2xsZXJcIiwgbmV3IEdhbWVPdmVyQ29udHJvbGxlcigpKTtcbiAgICByZXR1cm4gbm9kZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gR2FtZU92ZXJDb250cm9sbGVyOyIsInZhciBHYW1lTWFuID0gcmVxdWlyZShcIi4uL21vZGVsL0dhbWVNYW5cIik7XG5cbnZhciBHYW1lV2luQ29udHJvbGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICBCYXNlQ0NCQ29udHJvbGxlci5jYWxsKHRoaXMpO1xuICAgIHRoaXMuWUVMTE9XX0NPTE9SID0gY2MuY29sb3IoMjU0LCAxNzUsIDI1KTtcblxuICAgIHRoaXMuX25leHROb2RlID0gbnVsbDtcblxuICAgIHRoaXMuX3Jlc3VsdExhYmVsID0gbnVsbDtcblxuICAgIHRoaXMuX3JlcGxheUNhbGxiYWNrID0gbnVsbDtcbiAgICB0aGlzLl9uZXh0Q2FsbGJhY2sgPSBudWxsO1xufTtcblxuZ2FtZS51dGlscy5pbmhlcml0cyhHYW1lV2luQ29udHJvbGxlciwgQmFzZUNDQkNvbnRyb2xsZXIpO1xuXG5HYW1lV2luQ29udHJvbGxlci5wcm90b3R5cGUub25EaWRMb2FkRnJvbUNDQiAgPSBmdW5jdGlvbigpIHtcbiAgICBCYXNlQ0NCQ29udHJvbGxlci5wcm90b3R5cGUub25EaWRMb2FkRnJvbUNDQi5jYWxsKHRoaXMpO1xuXG4gICAgdGhpcy5fcmVzdWx0TGFiZWwuc2V0U3RyaW5nKGdhbWUubG9jYWwuZ2V0VmFsdWUoXCJtaXNzaW9uX2NvbXBsZXRlZF90aXRsZVwiKSk7XG4gICAgdmFyIGhhc05leHRMZXZlbCA9IEdhbWVNYW4uZ2V0SW5zdGFuY2UoKS5oYXNOZXh0TGV2ZWwoKTtcbiAgICBpZiAoIWhhc05leHRMZXZlbCkge1xuICAgICAgICB0aGlzLl9uZXh0Tm9kZS52aXNpYmxlID0gZmFsc2U7XG4gICAgfVxufTtcblxuR2FtZVdpbkNvbnRyb2xsZXIucHJvdG90eXBlLmluaXRXaXRoID0gZnVuY3Rpb24gKGNhbGxiYWNrLCBuZXh0Q2FsbGJhY2spIHtcbiAgICB0aGlzLl9yZXBsYXlDYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIHRoaXMuX25leHRDYWxsYmFjayA9IG5leHRDYWxsYmFjaztcbn07XG5cbkdhbWVXaW5Db250cm9sbGVyLnByb3RvdHlwZS5ob21lQ2xpY2tlZCA9IGZ1bmN0aW9uIChzZW5kZXIpIHtcbiAgICBBdWRpb0hlbHBlci5wbGF5QnRuU291bmQoKTtcbiAgICB2YXIgcmVTY2VuZSA9IG5ldyBjYy5UcmFuc2l0aW9uRmFkZSgwLjUsIEdhbWVCcmlkZ2UuZ2V0TWVudVNjZW5lKCksIGNjLmNvbG9yKDI1NSwgMjU1LCAyNTUpKTtcbiAgICBjYy5kaXJlY3Rvci5ydW5TY2VuZShyZVNjZW5lKTtcbn07XG5cbkdhbWVXaW5Db250cm9sbGVyLnByb3RvdHlwZS5uZXh0Q2xpY2tlZCA9IGZ1bmN0aW9uIChzZW5kZXIpIHtcbiAgICBBdWRpb0hlbHBlci5wbGF5QnRuU291bmQoKTtcbiAgICBpZiAodGhpcy5fbmV4dENhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuX25leHRDYWxsYmFjaygpO1xuICAgIH1cbiAgICB0aGlzLmNsb3NlKCk7XG59O1xuXG5HYW1lV2luQ29udHJvbGxlci5wcm90b3R5cGUucmVwbGF5Q2xpY2tlZCA9IGZ1bmN0aW9uIChzZW5kZXIpIHtcbiAgICBpZiAodGhpcy5fcmVwbGF5Q2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5fcmVwbGF5Q2FsbGJhY2soKTtcbiAgICB9XG4gICAgdGhpcy5jbG9zZSgpO1xufTtcblxuR2FtZVdpbkNvbnRyb2xsZXIucHJvdG90eXBlLnJhbmtDbGlja2VkID0gZnVuY3Rpb24gKHNlbmRlcikge1xuICAgIEF1ZGlvSGVscGVyLnBsYXlCdG5Tb3VuZCgpO1xuICAgIGdhbWUuZ2NNYW5hZ2VyLnNob3dMZWFkZXJib2FyZChnYW1lLmNvbmZpZy5nZXRMZWFkZXJCb2FyZEtleSgpKTtcbn07XG5cbkdhbWVXaW5Db250cm9sbGVyLnByb3RvdHlwZS5zaGFyZUNsaWNrZWQgPSBmdW5jdGlvbiAoc2VuZGVyKSB7XG4gICAgQXVkaW9IZWxwZXIucGxheUJ0blNvdW5kKCk7XG4gICAgZ2FtZS5zaGFyZU1hbmFnZXIuc2hhcmVXaXRoU3lzdGVtKGdhbWUudXRpbHMuc3ByaW50ZihnYW1lLmxvY2FsLmdldFZhbHVlKFwic2hhcmVfdGlwc1wiKSxcbiAgICAgICAgZ2FtZS5wbGF5ZXJNYW4uZ2V0QmVzdFNjb3JlKCksIGdhbWUuY29uZmlnLmdldFBsYXRmb3JtRG93bmxvYWRVcmwoKSkpO1xufTtcblxuR2FtZVdpbkNvbnRyb2xsZXIucHJvdG90eXBlLnBvcHVwID0gZnVuY3Rpb24gKCkge1xuICAgIGdhbWUuZGlhbG9nTWFuYWdlci5wb3B1cCh0aGlzLnJvb3ROb2RlLCB7XCJvdmVybGF5Q29sb3JcIjogY2MuY29sb3IoMjQzLCAyNDMsIDI0MyksIFwib3ZlcmxheU9wYWNpdHlcIjogMjEwfSk7XG59O1xuXG5HYW1lV2luQ29udHJvbGxlci5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgZ2FtZS5kaWFsb2dNYW5hZ2VyLmNsb3NlKHRoaXMucm9vdE5vZGUpO1xufTtcblxuR2FtZVdpbkNvbnRyb2xsZXIuY3JlYXRlRnJvbUNDQiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBub2RlID0gZ2FtZS51dGlscy5sb2FkTm9kZUZyb21DQ0IoXCJyZXMvbWVudS9nYW1lX3dpbl92aWV3LmNjYmlcIiwgbnVsbCwgXCJHYW1lV2luQ29udHJvbGxlclwiLCBuZXcgR2FtZVdpbkNvbnRyb2xsZXIoKSk7XG4gICAgcmV0dXJuIG5vZGU7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEdhbWVXaW5Db250cm9sbGVyOyIsIlxuXG52YXIgSGVscENvbnRyb2xsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgQmFzZUNDQkNvbnRyb2xsZXIuY2FsbCh0aGlzKTtcbiAgICB0aGlzLmxiSGVscEluZm8gPSBudWxsO1xufTtcblxuZ2FtZS51dGlscy5pbmhlcml0cyhIZWxwQ29udHJvbGxlciwgQmFzZUNDQkNvbnRyb2xsZXIpO1xuXG5IZWxwQ29udHJvbGxlci5wcm90b3R5cGUub25EaWRMb2FkRnJvbUNDQiAgPSBmdW5jdGlvbigpIHtcbiAgICBCYXNlQ0NCQ29udHJvbGxlci5wcm90b3R5cGUub25EaWRMb2FkRnJvbUNDQi5jYWxsKHRoaXMpO1xuICAgIHRoaXMubGJIZWxwSW5mby5zZXRTdHJpbmcoZ2FtZS5sb2NhbC5nZXRWYWx1ZShcImhlbHBfY29udGVudFwiKSk7XG4gICAgdGhpcy5sYkhlbHBJbmZvLnNldEFsaWdubWVudChjYy5URVhUX0FMSUdOTUVOVF9DRU5URVIpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBIZWxwQ29udHJvbGxlcjsiLCJ2YXIgR2FtZVNjZW5lID0gcmVxdWlyZShcIi4uL3NjZW5lL0dhbWVTY2VuZVwiKTtcbnZhciBTdG9yZUhlbHBlciA9IHJlcXVpcmUoXCIuLi9tb2RlbC9TdG9yZUhlbHBlclwiKTtcbnZhciBNdWx0aUNvbFRhYmxlVmlldyA9IHJlcXVpcmUoXCIuLi8uLi9jb21tb24vZXh0L011bHRpQ29sVGFibGVWaWV3XCIpO1xudmFyIExldmVsSXRlbUNvbnRyb2xsZXIgPSByZXF1aXJlKFwiLi9MZXZlbEl0ZW1Db250cm9sbGVyXCIpO1xudmFyIExldmVsQ29uZmlnTWFuID0gcmVxdWlyZShcIi4uL2NvbmZpZy9Db25maWdNYW5cIik7XG52YXIgTG9ja1N0YXR1cyA9IHJlcXVpcmUoXCIuLi9lbnVtL0xvY2tTdGF0dXNcIik7XG52YXIgR2FtZU1hbiA9IHJlcXVpcmUoXCIuLi9tb2RlbC9HYW1lTWFuXCIpO1xudmFyIFRpdGxlQ29udHJvbGxlciA9IHJlcXVpcmUoXCIuL1RpdGxlQ29udHJvbGxlclwiKTtcblxudmFyIEdSSURfU0laRSA9IFsxMzcuNSwgMTIwXTtcblxudmFyIExldmVsSXRlbUNlbGxWaWV3ID0gY2MuVGFibGVWaWV3Q2VsbC5leHRlbmQoe1xuICAgIGxldmVsRW50aXR5OiBudWxsLFxuICAgIGxldmVsSXRlbU5vZGU6IG51bGwsXG4gICAgY3RvcjogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9zdXBlcigpO1xuICAgICAgICB0aGlzLmxldmVsSXRlbU5vZGUgPSBMZXZlbEl0ZW1Db250cm9sbGVyLmNyZWF0ZUZyb21DQ0IoKTtcbiAgICAgICAgdGhpcy5hZGRDaGlsZCh0aGlzLmxldmVsSXRlbU5vZGUpO1xuXG4gICAgICAgIHRoaXMubGV2ZWxJdGVtTm9kZS5zZXRQb3NpdGlvbihjYy5wKEdSSURfU0laRVswXSAqIDAuNSwgR1JJRF9TSVpFWzFdICogMC41KSk7XG4gICAgfSxcblxuICAgIGluaXRXaXRoOiBmdW5jdGlvbiAobGV2ZWxFbnRpdHksIGlkeCkge1xuICAgICAgICB0aGlzLmxldmVsRW50aXR5ID0gbGV2ZWxFbnRpdHk7XG4gICAgICAgIHRoaXMubGV2ZWxJdGVtTm9kZS5jb250cm9sbGVyLmluaXRXaXRoKGxldmVsRW50aXR5LCBpZHgpO1xuICAgIH0sXG5cbiAgICBzaG93QXBwZWFyQW5pbTogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmxldmVsSXRlbU5vZGUuY29udHJvbGxlci5zaG93QXBwZWFyQW5pbSgpO1xuICAgIH0sXG5cbiAgICBzaG93RGlzYXBwZWFyQW5pbTogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmxldmVsSXRlbU5vZGUuY29udHJvbGxlci5zaG93RGlzYXBwZWFyQW5pbSgpO1xuICAgIH1cbn0pO1xuXG52YXIgTGV2ZWxDb250cm9sbGVyID0gZnVuY3Rpb24gKCkge1xuICAgIEJhc2VDQ0JDb250cm9sbGVyLmNhbGwodGhpcyk7XG4gICAgdGhpcy5uZENvbnRhaW5lciA9IG51bGw7XG4gICAgdGhpcy5sYkxldmVsTmFtZSA9IG51bGw7XG5cbiAgICAvL3VzZXIgZGF0YS5cbiAgICB0aGlzLl9sZXZlbExpc3QgPSBudWxsO1xufTtcblxuZ2FtZS51dGlscy5pbmhlcml0cyhMZXZlbENvbnRyb2xsZXIsIEJhc2VDQ0JDb250cm9sbGVyKTtcblxuTGV2ZWxDb250cm9sbGVyLnByb3RvdHlwZS5vbkRpZExvYWRGcm9tQ0NCICA9IGZ1bmN0aW9uKCkge1xuICAgIEJhc2VDQ0JDb250cm9sbGVyLnByb3RvdHlwZS5vbkRpZExvYWRGcm9tQ0NCLmNhbGwodGhpcyk7XG5cbiAgICB0aGlzLl9sZXZlbExpc3QgPSBHYW1lTWFuLmdldEluc3RhbmNlKCkuZ2V0TGV2ZWxMaXN0KCk7XG4gICAgdGhpcy5zaG93TGV2ZWxUYWJsZVZpZXcoKTtcblxuICAgIHZhciB1c2VyTGV2ZWwgPSBHYW1lTWFuLmdldEluc3RhbmNlKCkuZ2V0UGxheWVyTGV2ZWwoKTtcbiAgICBpZiAodXNlckxldmVsID4gdGhpcy5fbGV2ZWxMaXN0Lmxlbmd0aCkge1xuICAgICAgICB1c2VyTGV2ZWwgPSB0aGlzLl9sZXZlbExpc3QubGVuZ3RoO1xuICAgIH1cbiAgICB2YXIgY3VyUm93ID0gMDtcbiAgICBpZiAodXNlckxldmVsICUgdGhpcy5udW1iZXJPZkdyaWRzSW5DZWxsKCkgPT09IDApIHtcbiAgICAgICAgY3VyUm93ID0gTWF0aC5mbG9vcih1c2VyTGV2ZWwgLyB0aGlzLm51bWJlck9mR3JpZHNJbkNlbGwoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY3VyUm93ID0gTWF0aC5mbG9vcih1c2VyTGV2ZWwgLyB0aGlzLm51bWJlck9mR3JpZHNJbkNlbGwoKSkgKyAxO1xuICAgIH1cblxuICAgIHZhciB5T2Zmc2V0ID0gLSh0aGlzLm51bWJlck9mQ2VsbHNJblRhYmxlVmlldygpIC0gY3VyUm93ICsgMSkgKiB0aGlzLmdyaWRTaXplRm9yVGFibGUoKS5oZWlnaHQgK1xuICAgICAgICB0aGlzLl90YWJsZVZpZXcuZ2V0Vmlld1NpemUoKS5oZWlnaHQ7XG5cbiAgICBpZiAoeU9mZnNldCA8IHRoaXMuX3RhYmxlVmlldy5taW5Db250YWluZXJPZmZzZXQoKS55KSB7XG4gICAgICAgIHlPZmZzZXQgPSB0aGlzLl90YWJsZVZpZXcubWluQ29udGFpbmVyT2Zmc2V0KCkueTtcbiAgICB9IGVsc2UgaWYgKHlPZmZzZXQgPj0gdGhpcy5fdGFibGVWaWV3Lm1heENvbnRhaW5lck9mZnNldCgpLnkpIHtcbiAgICAgICAgeU9mZnNldCA9IHRoaXMuX3RhYmxlVmlldy5tYXhDb250YWluZXJPZmZzZXQoKS55O1xuICAgIH1cblxuICAgIHRoaXMuX3RhYmxlVmlldy5zZXRDb250ZW50T2Zmc2V0KGNjLnAoMCwgeU9mZnNldCkpO1xufTtcblxuTGV2ZWxDb250cm9sbGVyLnByb3RvdHlwZS5zaG93TGV2ZWxUYWJsZVZpZXcgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNpemUgPSB0aGlzLm5kQ29udGFpbmVyLmdldENvbnRlbnRTaXplKCk7XG4gICAgdGhpcy5fdGFibGVWaWV3ID0gbmV3IE11bHRpQ29sVGFibGVWaWV3KHRoaXMsIHNpemUsIG51bGwpO1xuICAgIHRoaXMuX3RhYmxlVmlldy5zZXREaXJlY3Rpb24oY2MuU0NST0xMVklFV19ESVJFQ1RJT05fVkVSVElDQUwpO1xuICAgIHRoaXMuX3RhYmxlVmlldy5zZXRWZXJ0aWNhbEZpbGxPcmRlcihjYy5UQUJMRVZJRVdfRklMTF9UT1BET1dOKTtcbiAgICB0aGlzLl90YWJsZVZpZXcuc2V0TXVsdGlUYWJsZVZpZXdEZWxlZ2F0ZSh0aGlzKTtcbiAgICB0aGlzLl90YWJsZVZpZXcuaWdub3JlQW5jaG9yUG9pbnRGb3JQb3NpdGlvbihmYWxzZSk7XG4gICAgdGhpcy5fdGFibGVWaWV3LnNldEFuY2hvclBvaW50KGNjLnAoMCwgMCkpO1xuICAgIHRoaXMubmRDb250YWluZXIuYWRkQ2hpbGQodGhpcy5fdGFibGVWaWV3KTtcbiAgICB0aGlzLl90YWJsZVZpZXcucmVsb2FkRGF0YSgpO1xufTtcblxuTGV2ZWxDb250cm9sbGVyLnByb3RvdHlwZS5zY3JvbGxWaWV3RGlkU2Nyb2xsID0gZnVuY3Rpb24gKHZpZXcpIHtcbn07XG5cbkxldmVsQ29udHJvbGxlci5wcm90b3R5cGUuc2Nyb2xsVmlld0RpZFpvb20gPSBmdW5jdGlvbiAodmlldykge1xufTtcblxuTGV2ZWxDb250cm9sbGVyLnByb3RvdHlwZS5ncmlkQXRJbmRleCA9IGZ1bmN0aW9uKG11bHRpVGFibGUsICBpZHgpIHtcbiAgICB2YXIgY2VsbCA9IG11bHRpVGFibGUuZGVxdWV1ZUdyaWQoKTtcbiAgICBpZiAoIWNlbGwpIHtcbiAgICAgICAgY2VsbCA9IG5ldyBMZXZlbEl0ZW1DZWxsVmlldygpO1xuICAgIH1cblxuICAgIGlmIChpZHggPCB0aGlzLl9sZXZlbExpc3QubGVuZ3RoKSB7XG4gICAgICAgIHZhciBsZXZlbEVudGl0eSA9IHRoaXMuX2xldmVsTGlzdFtpZHhdO1xuICAgICAgICBjZWxsLmluaXRXaXRoKGxldmVsRW50aXR5LCBpZHgpO1xuICAgICAgICBjZWxsLnZpc2libGUgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNlbGwudmlzaWJsZSA9IGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiBjZWxsO1xufTtcblxuTGV2ZWxDb250cm9sbGVyLnByb3RvdHlwZS5udW1iZXJPZkNlbGxzSW5UYWJsZVZpZXcgPSBmdW5jdGlvbihtdWx0aVRhYmxlKSB7XG4gICAgdmFyIGdyaWRzSW5DZWxsID0gdGhpcy5udW1iZXJPZkdyaWRzSW5DZWxsKG11bHRpVGFibGUpO1xuICAgIGlmICh0aGlzLl9sZXZlbExpc3QubGVuZ3RoICUgZ3JpZHNJbkNlbGwgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IodGhpcy5fbGV2ZWxMaXN0Lmxlbmd0aCAvIGdyaWRzSW5DZWxsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcih0aGlzLl9sZXZlbExpc3QubGVuZ3RoIC8gZ3JpZHNJbkNlbGwpICsgMTtcbiAgICB9XG59O1xuXG5MZXZlbENvbnRyb2xsZXIucHJvdG90eXBlLm51bWJlck9mR3JpZHNJbkNlbGwgPSBmdW5jdGlvbihtdWx0aVRhYmxlLCBjb2xJZHgpIHtcbiAgICByZXR1cm4gNDtcbn07XG5cbkxldmVsQ29udHJvbGxlci5wcm90b3R5cGUuZ3JpZFNpemVGb3JUYWJsZSA9IGZ1bmN0aW9uKHRhYmxlLCBjb2xJZHgpIHtcbiAgICByZXR1cm4gY2Muc2l6ZShHUklEX1NJWkVbMF0sIEdSSURfU0laRVsxXSk7XG59O1xuXG5MZXZlbENvbnRyb2xsZXIucHJvdG90eXBlLmdyaWRUb3VjaGVkID0gZnVuY3Rpb24odGFibGUsIGdyaWQpIHtcbiAgICAvL2NvbnNvbGUubG9nKFwiZ3JpZCB0b3VjaGVkIGF0IGluZGV4OiBcIiArIGdyaWQuZ2V0SWR4KCkpO1xuICAgIEF1ZGlvSGVscGVyLnBsYXlCdG5Tb3VuZCgpO1xuICAgIGlmIChncmlkLmdldElkeCgpIDwgR2FtZU1hbi5nZXRJbnN0YW5jZSgpLmdldFBsYXllckxldmVsKCkpIHtcbiAgICAgICAgaWYgKHRoaXMuY2xpY2tlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2xpY2tlZCA9IHRydWU7XG4gICAgICAgIEdhbWVNYW4uZ2V0SW5zdGFuY2UoKS5jaG9vc2VMZXZlbChncmlkLmdldElkeCgpICsgMSk7XG4gICAgICAgIGdhbWUuc2NlbmVNYW4uc3dpdGNoU2NlbmUoZ2FtZS5zY2VuZVR5cGUuR0FNRSk7XG4gICAgfVxufTtcblxuTGV2ZWxDb250cm9sbGVyLnByb3RvdHlwZS5iYWNrQ2xpY2tlZCA9IGZ1bmN0aW9uIChzZW5kZXIpIHtcbiAgICBBdWRpb0hlbHBlci5wbGF5QnRuU291bmQoKTtcbiAgICBnYW1lLnNjZW5lTWFuLnN3aXRjaFNjZW5lKGdhbWUuc2NlbmVUeXBlLk1FTlUpO1xufTtcblxuTGV2ZWxDb250cm9sbGVyLmNyZWF0ZUZyb21DQ0IgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbm9kZSA9IGdhbWUudXRpbHMubG9hZE5vZGVGcm9tQ0NCKFwicmVzL21lbnUvbGV2ZWxfdmlldy5jY2JpXCIsIG51bGwsIFwiTGV2ZWxDb250cm9sbGVyXCIsIG5ldyBMZXZlbENvbnRyb2xsZXIoKSk7XG4gICAgcmV0dXJuIG5vZGU7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IExldmVsQ29udHJvbGxlcjsiLCJ2YXIgTG9ja1N0YXR1cyA9IHJlcXVpcmUoXCIuLi9lbnVtL0xvY2tTdGF0dXNcIik7XG52YXIgR2FtZU1hbiA9IHJlcXVpcmUoXCIuLi9tb2RlbC9HYW1lTWFuXCIpO1xuXG52YXIgTGV2ZWxJdGVtQ29udHJvbGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICBCYXNlQ0NCQ29udHJvbGxlci5jYWxsKHRoaXMpO1xuXG4gICAgdGhpcy5sYkxldmVsID0gbnVsbDtcbiAgICB0aGlzLnNwUGxheWVkID0gbnVsbDtcbiAgICB0aGlzLnNwTG9ja2VkID0gbnVsbDtcblxuICAgIHRoaXMuc3BDdXJyZW50ID0gbnVsbDtcblxuICAgIHRoaXMubmRTdGFyID0gbnVsbDtcblxuICAgIHRoaXMuc3BZZWxsb3cxID0gbnVsbDtcbiAgICB0aGlzLnNwWWVsbG93MiA9IG51bGw7XG4gICAgdGhpcy5zcFllbGxvdzMgPSBudWxsO1xuXG4gICAgdGhpcy5zcEJsYWNrMSA9IG51bGw7XG4gICAgdGhpcy5zcEJsYWNrMiA9IG51bGw7XG4gICAgdGhpcy5zcEJsYWNrMyA9IG51bGw7XG5cbiAgICB0aGlzLnNwWWVsbG93cyA9IFtdO1xuICAgIHRoaXMuc3BCbGFja3MgPSBbXTtcblxuICAgIHRoaXMuaWR4ID0gMDtcbn07XG5cbmdhbWUudXRpbHMuaW5oZXJpdHMoTGV2ZWxJdGVtQ29udHJvbGxlciwgQmFzZUNDQkNvbnRyb2xsZXIpO1xuXG5MZXZlbEl0ZW1Db250cm9sbGVyLnByb3RvdHlwZS5vbkRpZExvYWRGcm9tQ0NCICA9IGZ1bmN0aW9uKCkge1xuICAgIEJhc2VDQ0JDb250cm9sbGVyLnByb3RvdHlwZS5vbkRpZExvYWRGcm9tQ0NCLmNhbGwodGhpcyk7XG4gICAgdGhpcy5zcFllbGxvd3MgPSBbdGhpcy5zcFllbGxvdzEsIHRoaXMuc3BZZWxsb3cyLCB0aGlzLnNwWWVsbG93M107XG4gICAgdGhpcy5zcEJsYWNrcyA9IFt0aGlzLnNwQmxhY2sxLCB0aGlzLnNwQmxhY2syLCB0aGlzLnNwQmxhY2szXTtcbn07XG5cbkxldmVsSXRlbUNvbnRyb2xsZXIucHJvdG90eXBlLnNob3dBcHBlYXJBbmltID0gZnVuY3Rpb24gKCkge1xuICAgIGdhbWUudXRpbHMucmFuZG9tU2NhbGVBbmltKHRoaXMucm9vdE5vZGUsIDEsIDAuOCk7XG59O1xuXG5MZXZlbEl0ZW1Db250cm9sbGVyLnByb3RvdHlwZS5zaG93RGlzYXBwZWFyQW5pbSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnJvb3ROb2RlLnJ1bkFjdGlvbihjYy5zY2FsZVRvKDAuNCwgMCkpO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge0xldmVsQ29uZmlnfSBkYXRhXG4gKiBAcGFyYW0ge251bWJlcn0gaWR4XG4gKi9cbkxldmVsSXRlbUNvbnRyb2xsZXIucHJvdG90eXBlLmluaXRXaXRoID0gZnVuY3Rpb24gKGRhdGEsIGlkeCkge1xuICAgIGNjLmxvZyhcIkxldmVsSXRlbUNvbnRyb2xsZXIgaW5pdFdpdGhcIik7XG4gICAgdGhpcy5pZHggPSBpZHg7XG4gICAgdGhpcy5sYkxldmVsLnNldFN0cmluZyhpZHggKyAxKTtcbiAgICB2YXIgbGV2ZWwgPSBpZHggKyAxO1xuXG4gICAgdGhpcy5zcEN1cnJlbnQudmlzaWJsZSA9IGZhbHNlO1xuICAgIHRoaXMuc3BMb2NrZWQudmlzaWJsZSA9IGZhbHNlO1xuICAgIHRoaXMuc3BQbGF5ZWQudmlzaWJsZSA9IGZhbHNlO1xuICAgIHRoaXMubmRTdGFyLnZpc2libGUgPSBmYWxzZTtcbiAgICB0aGlzLmxiTGV2ZWwudmlzaWJsZSA9IHRydWU7XG4gICAgdmFyIGN1ckxldmVsID0gR2FtZU1hbi5nZXRJbnN0YW5jZSgpLmdldFBsYXllckxldmVsKCk7XG4gICAgaWYgKGN1ckxldmVsID09PSBpZHggKyAxKSB7XG4gICAgICAgIHRoaXMuc3BDdXJyZW50LnZpc2libGUgPSB0cnVlO1xuICAgICAgICB0aGlzLmxiTGV2ZWwueSA9IDA7XG4gICAgfSBlbHNlIGlmIChjdXJMZXZlbCA+IGlkeCArIDEpIHtcbiAgICAgICAgdGhpcy5zcFBsYXllZC52aXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5uZFN0YXIudmlzaWJsZSA9IHRydWU7XG4gICAgICAgIHZhciBzdGFyID0gMDtcbiAgICAgICAgaWYgKEdhbWVNYW4uZ2V0SW5zdGFuY2UoKS5pc0hhcmRNb2RlKCkpIHtcbiAgICAgICAgICAgIHN0YXIgPSBnYW1lLnBsYXllck1hbi5nZXRIYXJkTGV2ZWxTdGFyKGxldmVsKSB8fCAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RhciA9IGdhbWUucGxheWVyTWFuLmdldExldmVsU3RhcihsZXZlbCkgfHwgMDtcbiAgICAgICAgfVxuICAgICAgICBjYy5sb2coXCJMZXZlbEl0ZW1Db250cm9sbGVyIHN0YXI6XCIgKyBzdGFyKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAzOyArK2kpIHtcbiAgICAgICAgICAgIHRoaXMuc3BZZWxsb3dzW2ldLnZpc2libGUgPSAoc3RhciA+PSBpICsgMSk7XG4gICAgICAgICAgICB0aGlzLnNwQmxhY2tzW2ldLnZpc2libGUgPSAoc3RhciA8IGkgKyAxKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxiTGV2ZWwueSA9IDExO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubGJMZXZlbC55ID0gMDtcbiAgICAgICAgLy90aGlzLmxiTGV2ZWwudmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnNwTG9ja2VkLnZpc2libGUgPSB0cnVlO1xuICAgIH1cbn07XG5cbkxldmVsSXRlbUNvbnRyb2xsZXIucHJvdG90eXBlLmxldmVsQ2xpY2tlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBBdWRpb0hlbHBlci5wbGF5QnRuU291bmQoKTtcbiAgICBpZiAodGhpcy5pZHggPCBHYW1lTWFuLmdldEluc3RhbmNlKCkuZ2V0UGxheWVyTGV2ZWwoKSkge1xuICAgICAgICBHYW1lTWFuLmdldEluc3RhbmNlKCkuY2hvb3NlTGV2ZWwodGhpcy5pZHggKyAxKTtcbiAgICAgICAgZ2FtZS5zY2VuZU1hbi5zd2l0Y2hTY2VuZShnYW1lLnNjZW5lVHlwZS5HQU1FKTtcbiAgICB9XG59O1xuXG5MZXZlbEl0ZW1Db250cm9sbGVyLnByb3RvdHlwZS5nZXRDb250ZW50U2l6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5zcFBsYXllZC5nZXRDb250ZW50U2l6ZSgpO1xufTtcblxuTGV2ZWxJdGVtQ29udHJvbGxlci5jcmVhdGVGcm9tQ0NCID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGdhbWUudXRpbHMubG9hZE5vZGVGcm9tQ0NCKFwicmVzL21lbnUvbGV2ZWxfaXRlbV92aWV3LmNjYmlcIiwgbnVsbCwgXCJMZXZlbEl0ZW1Db250cm9sbGVyXCIsIG5ldyBMZXZlbEl0ZW1Db250cm9sbGVyKCkpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBMZXZlbEl0ZW1Db250cm9sbGVyOyIsInZhciBNZW51U2NlbmUgPSByZXF1aXJlKFwiLi4vc2NlbmUvTWVudVNjZW5lXCIpO1xudmFyIFBsYXllck1hbiA9IHJlcXVpcmUoXCIuLi9tb2RlbC9QbGF5ZXJNYW5cIik7XG52YXIgU3RvcmVIZWxwZXIgPSByZXF1aXJlKFwiLi4vbW9kZWwvU3RvcmVIZWxwZXJcIik7XG52YXIgR2FtZVNjZW5lID0gcmVxdWlyZShcIi4uL3NjZW5lL0dhbWVTY2VuZVwiKTtcbnZhciBTY2VuZVR5cGUgPSByZXF1aXJlKFwiLi4vZW51bS9TY2VuZVR5cGVcIik7XG52YXIgR2FtZU1hbiA9IHJlcXVpcmUoXCIuLi9tb2RlbC9HYW1lTWFuXCIpO1xudmFyIFNjZW5lTWFuID0gcmVxdWlyZShcIi4uL21vZGVsL1NjZW5lTWFuXCIpO1xudmFyIEFkc1JlbWluZGVyQ29udHJvbGxlciA9IHJlcXVpcmUoXCIuLi9jb250cm9sbGVyL0Fkc1JlbWluZGVyQ29udHJvbGxlclwiKTtcbnZhciBEaWFtb25kc0NvbnRyb2xsZXIgPSByZXF1aXJlKFwiLi4vY29udHJvbGxlci9EaWFtb25kc0NvbnRyb2xsZXJcIik7XG5cbnZhciBMb2FkaW5nQ29udHJvbGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICBCYXNlQ0NCQ29udHJvbGxlci5jYWxsKHRoaXMpO1xuICAgIHRoaXMuYmdFblNwcml0ZSA9IG51bGw7XG4gICAgdGhpcy5iZ0NuU3ByaXRlID0gbnVsbDtcbn07XG5cbmdhbWUudXRpbHMuaW5oZXJpdHMoTG9hZGluZ0NvbnRyb2xsZXIsIEJhc2VDQ0JDb250cm9sbGVyKTtcblxuTG9hZGluZ0NvbnRyb2xsZXIucHJvdG90eXBlLm9uRW50ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgQmFzZUNDQkNvbnRyb2xsZXIucHJvdG90eXBlLm9uRW50ZXIuY2FsbCh0aGlzKTtcblxuICAgIGNjLkJ1aWxkZXJSZWFkZXIucmVnaXN0ZXJDb250cm9sbGVyKFwiQWRzUmVtaW5kZXJDb250cm9sbGVyXCIsIG5ldyBBZHNSZW1pbmRlckNvbnRyb2xsZXIoKSk7XG4gICAgY2MuQnVpbGRlclJlYWRlci5yZWdpc3RlckNvbnRyb2xsZXIoXCJEaWFtb25kc0NvbnRyb2xsZXJcIiwgbmV3IERpYW1vbmRzQ29udHJvbGxlcigpKTtcblxuICAgIGdhbWUucGxheWVyTWFuID0gUGxheWVyTWFuLmdldEluc3RhbmNlKCk7XG4gICAgZ2FtZS5wbGF5ZXJNYW4uaW5pdERhdGEoKTtcblxuICAgIHZhciBMb2dpY01hbiA9IHJlcXVpcmUoXCIuLi8uLi9jb21tb24vbW9kZWwvTG9naWNNYW5cIik7XG4gICAgTG9naWNNYW4uZ2V0SW5zdGFuY2UoKS5zdGFydEdhbWUodHJ1ZSk7XG5cbiAgICB2YXIgUmVzb3VyY2VzTWFuID0gcmVxdWlyZShcIi4uL21vZGVsL1Jlc291cmNlc01hblwiKTtcblxuICAgIGdhbWUuc2NlbmVNYW4gPSBTY2VuZU1hbi5nZXRJbnN0YW5jZSgpO1xuICAgIGdhbWUuc2NlbmVUeXBlID0gU2NlbmVUeXBlO1xuXG4gICAgZ2FtZS5nYW1lTWFuLmluaXQoKTtcbiAgICBnYW1lLmdhbWVNYW4uY2hlY2tSZW1vdGVDb25maWcoKTtcbiAgICAvL2dhbWUuZ2FtZU1hbi5hZGp1c3RTa2luQ29uZmlncygpO1xuXG4gICAgZ2FtZS5hbmFseXNlTWFuYWdlci50cmFja0V2ZW50KFwiTG9hZGluZ1wiKTtcbiAgICB2YXIgaXNGaXJzdEVudGVyR2FtZSA9IHRydWU7XG4gICAgdmFyIGZpcnN0T3BlbkdhbWUgPSBnYW1lLnN0b3JhZ2VDb250cm9sbGVyLmdldEl0ZW0oXCJmaXJzdE9wZW5HYW1lXCIsIFwidHJ1ZVwiKTtcbiAgICBpZiAoZmlyc3RPcGVuR2FtZSAhPSBcInRydWVcIikge1xuICAgICAgICBpc0ZpcnN0RW50ZXJHYW1lID0gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZ2FtZS5zdG9yYWdlQ29udHJvbGxlci5zZXRJdGVtKFwiZmlyc3RPcGVuR2FtZVwiLCBcImZhbHNlXCIpO1xuICAgIH1cblxuICAgIHZhciBteUxvZ28gPSBnYW1lLnV0aWxzLmlzU2VsZkdhbWUoKTtcblxuICAgIGNjLmxvZyhcImlzRmlyc3RFbnRlckdhbWU6XCIgKyBpc0ZpcnN0RW50ZXJHYW1lKTtcblxuICAgIHRoaXMuYmdDblNwcml0ZS52aXNpYmxlID0gZmFsc2U7XG4gICAgdGhpcy5iZ0VuU3ByaXRlLnZpc2libGUgPSBmYWxzZTtcbiAgICB2YXIgc3ByaXRlID0gbXlMb2dvID8gdGhpcy5iZ0NuU3ByaXRlIDogdGhpcy5iZ0VuU3ByaXRlO1xuICAgIHNwcml0ZS52aXNpYmxlID0gdHJ1ZTtcbiAgICBzcHJpdGUub3BhY2l0eSA9IDA7XG4gICAgdmFyIFdBSVRfVElNRSA9IDIwMDA7XG4gICAgc3ByaXRlLnJ1bkFjdGlvbihjYy5zZXF1ZW5jZShjYy5mYWRlSW4oMC41KSwgY2MuY2FsbEZ1bmMoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdGltZSA9IERhdGUubm93KCk7XG4gICAgICAgIFJlc291cmNlc01hbi5nZXRJbnN0YW5jZSgpLnByZWxvYWQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGxvYWRUaW1lID0gRGF0ZS5ub3coKSAtIHRpbWU7XG4gICAgICAgICAgICBjYy5sb2coXCJsb2FkVGltZTpcIiArIGxvYWRUaW1lKTtcbiAgICAgICAgICAgIHZhciBkZWxheVRpbWUgPSBNYXRoLm1heChXQUlUX1RJTUUgLSBsb2FkVGltZSwgMjAwKTtcbiAgICAgICAgICAgIHNwcml0ZS5ydW5BY3Rpb24oY2Muc2VxdWVuY2UoY2MuZGVsYXlUaW1lKGRlbGF5VGltZSAvIDEwMDApLCBjYy5mYWRlT3V0KDAuNSksIGNjLmNhbGxGdW5jKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNGaXJzdEVudGVyR2FtZSkge1xuICAgICAgICAgICAgICAgICAgICBHYW1lTWFuLmdldEluc3RhbmNlKCkuY2hvb3NlTGF0ZXN0TGV2ZWwoKTtcbiAgICAgICAgICAgICAgICAgICAgZ2FtZS5zY2VuZU1hbi5zd2l0Y2hTY2VuZShnYW1lLnNjZW5lVHlwZS5HQU1FKTtcbiAgICAgICAgICAgICAgICAgICAgZ2FtZS5hbmFseXNlTWFuYWdlci50cmFja0V2ZW50KFwiRW50ZXJGaXJzdExldmVsXCIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNjLmRpcmVjdG9yLnJ1blNjZW5lKG5ldyBNZW51U2NlbmUoKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgdGhpcykpKTtcbiAgICAgICAgfSk7XG4gICAgfSwgdGhpcykpKTtcbn07XG5cbkxvYWRpbmdDb250cm9sbGVyLnByb3RvdHlwZS5vbkV4aXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgQmFzZUNDQkNvbnRyb2xsZXIucHJvdG90eXBlLm9uRXhpdC5jYWxsKHRoaXMpO1xufTtcblxuTG9hZGluZ0NvbnRyb2xsZXIucHJvdG90eXBlLm9uRGlkTG9hZEZyb21DQ0IgID0gZnVuY3Rpb24oKSB7XG4gICAgQmFzZUNDQkNvbnRyb2xsZXIucHJvdG90eXBlLm9uRGlkTG9hZEZyb21DQ0IuY2FsbCh0aGlzKTtcbn07XG5cbkxvYWRpbmdDb250cm9sbGVyLmNyZWF0ZUZyb21DQ0IgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbm9kZSA9IGdhbWUudXRpbHMubG9hZE5vZGVGcm9tQ0NCKFwicmVzL21lbnUvbG9hZGluZ192aWV3LmNjYmlcIiwgbnVsbCwgXCJMb2FkaW5nQ29udHJvbGxlclwiLCBuZXcgTG9hZGluZ0NvbnRyb2xsZXIoKSk7XG4gICAgcmV0dXJuIG5vZGU7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IExvYWRpbmdDb250cm9sbGVyOyIsIi8vdmFyIFBhY2thZ2VTY2VuZSA9IHJlcXVpcmUoXCIuLi9zY2VuZS9QYWNrYWdlU2NlbmVcIik7XG4vL3ZhciBTdG9yZUhlbHBlciA9IHJlcXVpcmUoXCIuLi9tb2RlbC9TdG9yZUhlbHBlclwiKTtcbi8vdmFyIExldmVsU2NlbmUgPSByZXF1aXJlKFwiLi4vc2NlbmUvTGV2ZWxTY2VuZVwiKTtcbi8vdmFyIEdhbWVTY2VuZSA9IHJlcXVpcmUoXCIuLi9zY2VuZS9HYW1lU2NlbmVcIik7XG52YXIgR2FtZU1hbiA9IHJlcXVpcmUoXCIuLi9tb2RlbC9HYW1lTWFuXCIpO1xudmFyIFN0b3JlSGVscGVyID0gcmVxdWlyZShcIi4uL21vZGVsL1N0b3JlSGVscGVyXCIpO1xudmFyIEV2ZW50c05hbWUgPSByZXF1aXJlKFwiLi4vZXZlbnRzL0V2ZW50c05hbWVcIik7XG5cbmdhbWUuZmlyc3RFbnRlciA9IHRydWU7XG5cbnZhciBNZW51Q29udHJvbGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICBCYXNlQ0NCQ29udHJvbGxlci5jYWxsKHRoaXMpO1xuXG4gICAgLy90aGlzLnNwUGxheUVuID0gbnVsbDtcbiAgICAvL3RoaXMuc3BQbGF5Q24gPSBudWxsO1xuICAgIC8vdGhpcy5zcExldmVsc0VuID0gbnVsbDtcbiAgICAvL3RoaXMuc3BMZXZlbHNDbiA9IG51bGw7XG4gICAgdGhpcy5zcEljb25FbiA9IG51bGw7XG4gICAgdGhpcy5zcEljb25DbiA9IG51bGw7XG5cbiAgICB0aGlzLl9yYW5rSXRlbSA9IG51bGw7XG4gICAgdGhpcy5fc3VwcG9ydEl0ZW0gPSBudWxsO1xuICAgIHRoaXMuX3N0b3JlSXRlbSA9IG51bGw7XG4gICAgdGhpcy5fcmF0ZUl0ZW0gPSBudWxsO1xuICAgIHRoaXMuX3NvdW5kSXRlbSA9IG51bGw7XG5cbiAgICAvL3RoaXMuc3BIYXJkQ24gPSBudWxsO1xuICAgIC8vdGhpcy5zcEhhcmRFbiA9IG51bGw7XG5cbiAgICB0aGlzLnNwSGFyZEhpbnQgPSBudWxsO1xuXG4gICAgLy90aGlzLmJ0bkdpZnRFbiA9IG51bGw7XG4gICAgLy90aGlzLmJ0bkdpZnRDbiA9IG51bGw7XG4gICAgLy9cbiAgICAvL3RoaXMuYnRuV2hlZWxDbiA9IG51bGw7XG4gICAgLy90aGlzLmJ0bldoZWVsRW4gPSBudWxsO1xuXG4gICAgdGhpcy5zcEdpZnRCZyA9IG51bGw7XG4gICAgdGhpcy5uZFNwZWNpYWxPZmZlciA9IG51bGw7XG5cbiAgICB0aGlzLm5kR2lmdHMgPSBudWxsO1xuXG4gICAgdGhpcy5zcFRhc2tSZW1pbmRlciA9IG51bGw7XG4gICAgdGhpcy5zcFNraW5SZW1pbmRlciA9IG51bGw7XG5cbiAgICB0aGlzLmxiU3RhckNvdW50ID0gbnVsbDtcbn07XG5cbmdhbWUudXRpbHMuaW5oZXJpdHMoTWVudUNvbnRyb2xsZXIsIEJhc2VDQ0JDb250cm9sbGVyKTtcblxuTWVudUNvbnRyb2xsZXIucHJvdG90eXBlLm9uRW50ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgQmFzZUNDQkNvbnRyb2xsZXIucHJvdG90eXBlLm9uRW50ZXIuY2FsbCh0aGlzKTtcbiAgICAvKlxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZmlyc3RPcGVuR2FtZSA9IGdhbWUuc3RvcmFnZUNvbnRyb2xsZXIuZ2V0SXRlbShcImZpcnN0T3BlbkdhbWVcIiwgXCJ0cnVlXCIpO1xuICAgICAgICBpZiAoZmlyc3RPcGVuR2FtZSAhPSBcInRydWVcIikge1xuICAgICAgICAgICAgaWYgKGdhbWUuZmlyc3RFbnRlciAmJiBHYW1lTWFuLmdldEluc3RhbmNlKCkuaXNGcmVlV2hlZWwoKSkge1xuICAgICAgICAgICAgICAgIGdhbWUucG9wdXBNYW4ucG9wdXBXaGVlbERsZygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2FtZS5zdG9yYWdlQ29udHJvbGxlci5zZXRJdGVtKFwiZmlyc3RPcGVuR2FtZVwiLCBcImZhbHNlXCIpO1xuICAgICAgICB9XG4gICAgICAgIGdhbWUuZmlyc3RFbnRlciA9IGZhbHNlO1xuICAgIH0sIDMwMCk7XG4gICAgKi9cbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGZpcnN0T3BlbkdhbWUgPSBnYW1lLnN0b3JhZ2VDb250cm9sbGVyLmdldEl0ZW0oXCJmaXJzdE9wZW5HYW1lXCIsIFwidHJ1ZVwiKTtcbiAgICAgICAgaWYgKGZpcnN0T3BlbkdhbWUgIT0gXCJ0cnVlXCIpIHtcbiAgICAgICAgICAgIEdhbWVNYW4uZ2V0SW5zdGFuY2UoKS5jaGVja0F1dG9Qb3B1cChnYW1lLmZpcnN0RW50ZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2FtZS5zdG9yYWdlQ29udHJvbGxlci5zZXRJdGVtKFwiZmlyc3RPcGVuR2FtZVwiLCBcImZhbHNlXCIpO1xuICAgICAgICB9XG4gICAgICAgIGdhbWUuZmlyc3RFbnRlciA9IGZhbHNlO1xuICAgIH0sIDMwMCk7XG4gICAgZ2FtZS5nYW1lTWFuLnNob3dGaXJzdEVudGVySG9tZUFkKCk7XG4gICAgdGhpcy51cGRhdGVUYXNrUmVtaW5kZXIoKTtcbiAgICAvL3RoaXMuaW50ZXJ2YWxLZXkgPSBzZXRJbnRlcnZhbCh0aGlzLm9uVXBkYXRlLmJpbmQodGhpcyksIDEwMDApO1xuICAgIGdhbWUuZXZlbnREaXNwYXRjaGVyLmFkZEV2ZW50TGlzdGVuZXIoRXZlbnRzTmFtZS5VUERBVEVfU1BFQ0lBTF9PRkZFUiwgdGhpcy51cGRhdGVTcGVpY2lhbE9mZmVyLCB0aGlzKTtcbiAgICBnYW1lLmV2ZW50RGlzcGF0Y2hlci5hZGRFdmVudExpc3RlbmVyKEV2ZW50c05hbWUuVEFTS19VUERBVEUsIHRoaXMudXBkYXRlVGFza1JlbWluZGVyLCB0aGlzKTtcbn07XG5cbk1lbnVDb250cm9sbGVyLnByb3RvdHlwZS5vbkV4aXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgY2xlYXJJbnRlcnZhbCh0aGlzLmludGVydmFsS2V5KTtcbiAgICBnYW1lLmV2ZW50RGlzcGF0Y2hlci5yZW1vdmVFdmVudExpc3RlbmVyKEV2ZW50c05hbWUuVEFTS19VUERBVEUsIHRoaXMudXBkYXRlVGFza1JlbWluZGVyLCB0aGlzKTtcbiAgICBnYW1lLmV2ZW50RGlzcGF0Y2hlci5yZW1vdmVFdmVudExpc3RlbmVyKEV2ZW50c05hbWUuVVBEQVRFX1NQRUNJQUxfT0ZGRVIsIHRoaXMudXBkYXRlU3BlaWNpYWxPZmZlciwgdGhpcyk7XG59O1xuXG5NZW51Q29udHJvbGxlci5wcm90b3R5cGUub25EaWRMb2FkRnJvbUNDQiAgPSBmdW5jdGlvbigpIHtcbiAgICBCYXNlQ0NCQ29udHJvbGxlci5wcm90b3R5cGUub25EaWRMb2FkRnJvbUNDQi5jYWxsKHRoaXMpO1xuXG4gICAgZ2FtZS5hbmFseXNlTWFuYWdlci50cmFja0V2ZW50KFwiRW50ZXJNZW51XCIpO1xuICAgIC8vdGhpcy5jcmVhdGVDbHViQnV0dG9uKCk7XG4gICAgdGhpcy51cGRhdGVTb3VuZEl0ZW0oKTtcbiAgICB0aGlzLnVwZGF0ZUdpZnRJdGVtKCk7XG4gICAgLy90aGlzLnNwUGxheUVuLnZpc2libGUgPSBmYWxzZTtcbiAgICAvL3RoaXMuc3BQbGF5Q24udmlzaWJsZSA9IGZhbHNlO1xuICAgIC8vdGhpcy5zcExldmVsc0VuLnZpc2libGUgPSBmYWxzZTtcbiAgICAvL3RoaXMuc3BMZXZlbHNDbi52aXNpYmxlID0gZmFsc2U7XG4gICAgdGhpcy5zcEljb25Fbi52aXNpYmxlID0gZmFsc2U7XG4gICAgdGhpcy5zcEljb25Dbi52aXNpYmxlID0gZmFsc2U7XG4gICAgLy90aGlzLnNwSGFyZENuLnZpc2libGUgPSBmYWxzZTtcbiAgICAvL3RoaXMuc3BIYXJkRW4udmlzaWJsZSA9IGZhbHNlO1xuICAgIC8vdGhpcy5idG5HaWZ0RW4udmlzaWJsZSA9IGZhbHNlO1xuICAgIC8vdGhpcy5idG5HaWZ0Q24udmlzaWJsZSA9IGZhbHNlO1xuICAgIC8vdGhpcy5idG5XaGVlbENuLnZpc2libGUgPSBmYWxzZTtcbiAgICAvL3RoaXMuYnRuV2hlZWxFbi52aXNpYmxlID0gZmFsc2U7XG5cbiAgICBpZiAoZ2FtZS5sb2NhbC5pc0NoaW5lc2UoKSkge1xuICAgICAgICAvL3RoaXMuc3BQbGF5Q24udmlzaWJsZSA9IHRydWU7XG4gICAgICAgIC8vdGhpcy5zcExldmVsc0NuLnZpc2libGUgPSB0cnVlO1xuICAgICAgICB0aGlzLnNwSWNvbkNuLnZpc2libGUgPSB0cnVlO1xuICAgICAgICAvL3RoaXMuc3BIYXJkQ24udmlzaWJsZSA9IHRydWU7XG4gICAgICAgIC8vdGhpcy5idG5HaWZ0Q24udmlzaWJsZSA9IHRydWU7XG4gICAgICAgIC8vdGhpcy5idG5XaGVlbENuLnZpc2libGUgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vdGhpcy5zcFBsYXlFbi52aXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgLy90aGlzLnNwTGV2ZWxzRW4udmlzaWJsZSA9IHRydWU7XG4gICAgICAgIHRoaXMuc3BJY29uRW4udmlzaWJsZSA9IHRydWU7XG4gICAgICAgIC8vdGhpcy5zcEhhcmRFbi52aXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgLy90aGlzLmJ0bkdpZnRFbi52aXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgLy90aGlzLmJ0bldoZWVsRW4udmlzaWJsZSA9IHRydWU7XG4gICAgfVxuICAgIHRoaXMubmRHaWZ0cy52aXNpYmxlID0gdHJ1ZTtcblxuICAgIHRoaXMuc3BHaWZ0QmcucnVuQWN0aW9uKGNjLnJvdGF0ZUJ5KDMsIDM2MCkucmVwZWF0Rm9yZXZlcigpKTtcbiAgICB0aGlzLnVwZGF0ZVNwZWljaWFsT2ZmZXIoKTtcbiAgICB0aGlzLnVwZGF0ZVNraW5SZW1pbmRlcigpO1xuXG4gICAgdGhpcy5sYlN0YXJDb3VudC5zZXRTdHJpbmcoZ2FtZS5nYW1lTWFuLmdldFRvdGFsU3RhckNvdW50KCkpO1xufTtcblxuTWVudUNvbnRyb2xsZXIucHJvdG90eXBlLnVwZGF0ZVNwZWljaWFsT2ZmZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5uZFNwZWNpYWxPZmZlci52aXNpYmxlID0gIUdhbWVNYW4uZ2V0SW5zdGFuY2UoKS5pc1NwZWNpYWxPZmZlclB1cmNoYXNlZCgpO1xufTtcblxuTWVudUNvbnRyb2xsZXIucHJvdG90eXBlLm9uVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMudXBkYXRlR2lmdEl0ZW0oKTtcbn07XG5cbk1lbnVDb250cm9sbGVyLnByb3RvdHlwZS51cGRhdGVHaWZ0SXRlbSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZ2FtZS5hZHNNYW5hZ2VyLmlzUmV3YXJkVmlkZW9SZWFkeSgpKSB7XG4gICAgICAgIHRoaXMubmRHaWZ0cy52aXNpYmxlID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm5kR2lmdHMudmlzaWJsZSA9IGZhbHNlO1xuICAgIH1cbn07XG5cbk1lbnVDb250cm9sbGVyLnByb3RvdHlwZS51cGRhdGVTb3VuZEl0ZW0gPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGlzU291bmRPbiA9IGdhbWUuYXVkaW9QbGF5ZXIuaXNFZmZlY3RPbigpO1xuICAgIGlmIChpc1NvdW5kT24pIHtcbiAgICAgICAgdGhpcy5fc291bmRJdGVtLnNldE5vcm1hbEltYWdlKG5ldyBjYy5TcHJpdGUoXCIjYnRuX3NvdW5kX29uLnBuZ1wiKSk7XG4gICAgICAgIHRoaXMuX3NvdW5kSXRlbS5zZXRTZWxlY3RlZEltYWdlKG5ldyBjYy5TcHJpdGUoXCIjYnRuX3NvdW5kX29uLnBuZ1wiKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fc291bmRJdGVtLnNldE5vcm1hbEltYWdlKG5ldyBjYy5TcHJpdGUoXCIjYnRuX3NvdW5kX29mZi5wbmdcIikpO1xuICAgICAgICB0aGlzLl9zb3VuZEl0ZW0uc2V0U2VsZWN0ZWRJbWFnZShuZXcgY2MuU3ByaXRlKFwiI2J0bl9zb3VuZF9vZmYucG5nXCIpKTtcbiAgICB9XG59O1xuXG5NZW51Q29udHJvbGxlci5wcm90b3R5cGUuc3RvcmVDbGlja2VkID0gZnVuY3Rpb24gKHNlbmRlcikge1xuICAgIEF1ZGlvSGVscGVyLnBsYXlCdG5Tb3VuZCgpO1xuICAgIHZhciBTdG9yZVR5cGUgPSByZXF1aXJlKFwiLi4vZW51bS9TdG9yZVR5cGVcIik7XG4gICAgZ2FtZS5wb3B1cE1hbi5wb3B1cFN0b3JlRGxnKFN0b3JlVHlwZS5ESUFNT05EKTtcbn07XG5cbk1lbnVDb250cm9sbGVyLnByb3RvdHlwZS5zaGFyZUNsaWNrZWQgPSBmdW5jdGlvbiAoc2VuZGVyKSB7XG4gICAgQXVkaW9IZWxwZXIucGxheUJ0blNvdW5kKCk7XG4gICAgZ2FtZS5zaGFyZU1hbmFnZXIuc2hhcmVXaXRoU3lzdGVtKGdhbWUudXRpbHMuc3ByaW50ZihnYW1lLmxvY2FsLmdldFZhbHVlKFwic2hhcmVfdGlwc1wiKSxcbiAgICAgICAgZ2FtZS5wbGF5ZXJNYW4uZ2V0TGV2ZWwoKSwgZ2FtZS5jb25maWcuZ2V0UGxhdGZvcm1Eb3dubG9hZFVybCgpKSk7XG59O1xuXG5NZW51Q29udHJvbGxlci5wcm90b3R5cGUucmFua0NsaWNrZWQgPSBmdW5jdGlvbiAoc2VuZGVyKSB7XG4gICAgQXVkaW9IZWxwZXIucGxheUJ0blNvdW5kKCk7XG4gICAgZ2FtZS5nY01hbmFnZXIuc2hvd0xlYWRlcmJvYXJkKGdhbWUuY29uZmlnLmdldExlYWRlckJvYXJkS2V5KCkpO1xufTtcblxuTWVudUNvbnRyb2xsZXIucHJvdG90eXBlLnN1cHBvcnRDbGlja2VkID0gZnVuY3Rpb24gKHNlbmRlcikge1xuICAgIEF1ZGlvSGVscGVyLnBsYXlCdG5Tb3VuZCgpO1xuICAgIGdhbWUuc2hhcmVNYW5hZ2VyLnNlbmRFbWFpbChnYW1lLmNvbmZpZy5jb25uZWN0RW1haWwsXG4gICAgICAgIGdhbWUubG9jYWwuZ2V0VmFsdWUoXCJmZWVkX2JhY2tfdGl0bGVcIiksIGdhbWUubG9jYWwuZ2V0VmFsdWUoXCJmZWVkX2JhY2tfY29udGVudFwiKSk7XG59O1xuXG5NZW51Q29udHJvbGxlci5wcm90b3R5cGUucmF0ZUNsaWNrZWQgPSBmdW5jdGlvbiAoc2VuZGVyKSB7XG4gICAgQXVkaW9IZWxwZXIucGxheUJ0blNvdW5kKCk7XG4gICAgY2Muc3lzLm9wZW5VUkwoZ2FtZS5jb25maWcuZ2V0UGxhdGZvcm1Eb3dubG9hZFVybCgpKTtcbn07XG5cbk1lbnVDb250cm9sbGVyLnByb3RvdHlwZS5wbGF5Q2xpY2tlZCA9IGZ1bmN0aW9uIChzZW5kZXIpIHtcbiAgICBBdWRpb0hlbHBlci5wbGF5QnRuU291bmQoKTtcbiAgICBpZiAodGhpcy5wbGF5ZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnBsYXllZCA9IHRydWU7XG4gICAgR2FtZU1hbi5nZXRJbnN0YW5jZSgpLmNob29zZUxhdGVzdExldmVsKCk7XG4gICAgZ2FtZS5zY2VuZU1hbi5zd2l0Y2hTY2VuZShnYW1lLnNjZW5lVHlwZS5HQU1FKTtcbn07XG5cbk1lbnVDb250cm9sbGVyLnByb3RvdHlwZS5wYWNrYWdlQ2xpY2tlZCA9IGZ1bmN0aW9uIChzZW5kZXIpIHtcbiAgICBBdWRpb0hlbHBlci5wbGF5QnRuU291bmQoKTtcbiAgICBpZiAodGhpcy5wbGF5ZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnBsYXllZCA9IHRydWU7XG4gICAgR2FtZU1hbi5nZXRJbnN0YW5jZSgpLnNldEhhcmRNb2RlKGZhbHNlKTtcbiAgICBnYW1lLnNjZW5lTWFuLnN3aXRjaFNjZW5lKGdhbWUuc2NlbmVUeXBlLkxFVkVMKTtcbn07XG5cbk1lbnVDb250cm9sbGVyLnByb3RvdHlwZS5zb3VuZENsaWNrZWQgPSBmdW5jdGlvbiAoc2VuZGVyKSB7XG4gICAgQXVkaW9IZWxwZXIucGxheUJ0blNvdW5kKCk7XG4gICAgZ2FtZS5hdWRpb1BsYXllci5zZXRFZmZlY3RPbighZ2FtZS5hdWRpb1BsYXllci5pc0VmZmVjdE9uKCkpO1xuICAgIGdhbWUuYXVkaW9QbGF5ZXIuc2V0TXVzaWNPbighZ2FtZS5hdWRpb1BsYXllci5pc011c2ljT24oKSk7XG4gICAgdGhpcy51cGRhdGVTb3VuZEl0ZW0oKTtcbn07XG5cbk1lbnVDb250cm9sbGVyLnByb3RvdHlwZS53aGVlbENsaWNrZWQgPSBmdW5jdGlvbiAoc2VuZGVyKSB7XG4gICAgQXVkaW9IZWxwZXIucGxheUJ0blNvdW5kKCk7XG4gICAgdmFyIFdoZWVsVHlwZSA9IHJlcXVpcmUoXCIuLi9lbnVtL1doZWVsVHlwZVwiKTtcbiAgICBnYW1lLnBvcHVwTWFuLnBvcHVwV2hlZWxEbGcoV2hlZWxUeXBlLkRhaWx5Qm9udXMpO1xufTtcblxuTWVudUNvbnRyb2xsZXIucHJvdG90eXBlLmRhaWx5Qm9udXNDbGlja2VkID0gZnVuY3Rpb24gKHNlbmRlcikge1xuICAgIEF1ZGlvSGVscGVyLnBsYXlCdG5Tb3VuZCgpO1xuICAgIGdhbWUucG9wdXBNYW4ucG9wdXBEYWlseUJvbnVzKCk7XG59O1xuXG5NZW51Q29udHJvbGxlci5wcm90b3R5cGUuaGFyZENsaWNrZWQgPSBmdW5jdGlvbiAoc2VuZGVyKSB7XG4gICAgQXVkaW9IZWxwZXIucGxheUJ0blNvdW5kKCk7XG4gICAgaWYgKHRoaXMucGxheWVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5wbGF5ZWQgPSB0cnVlO1xuICAgIGdhbWUuc3RvcmFnZUNvbnRyb2xsZXIuc2V0SXRlbShcImhhcmRfcmVtaW5kZWRcIiwgXCJmYWxzZVwiKTtcbiAgICB0aGlzLnNwSGFyZEhpbnQudmlzaWJsZSA9IGZhbHNlO1xuICAgIEdhbWVNYW4uZ2V0SW5zdGFuY2UoKS5zZXRIYXJkTW9kZSh0cnVlKTtcbiAgICBnYW1lLnNjZW5lTWFuLnN3aXRjaFNjZW5lKGdhbWUuc2NlbmVUeXBlLkxFVkVMKTtcbn07XG5cbk1lbnVDb250cm9sbGVyLnByb3RvdHlwZS5naWZ0Q2xpY2tlZCA9IGZ1bmN0aW9uIChzZW5kZXIpIHtcbiAgICBBdWRpb0hlbHBlci5wbGF5QnRuU291bmQoKTtcbiAgICBTdG9yZUhlbHBlci5nZXRJbnN0YW5jZSgpLmNoZWNrQW5kU2hvd1Jld2FyZFZpZGVvKGdhbWUudXRpbHMuaXNJT1MoKSA/IFwic2hvdXllXCIgOiBcImppbGkwNFwiKTtcbn07XG5cbk1lbnVDb250cm9sbGVyLnByb3RvdHlwZS50YXNrQ2xpY2tlZCA9IGZ1bmN0aW9uIChzZW5kZXIpIHtcbiAgICBBdWRpb0hlbHBlci5wbGF5QnRuU291bmQoKTtcbiAgICBnYW1lLmFuYWx5c2VNYW5hZ2VyLnRyYWNrRXZlbnQoXCJDbGlja1Rhc2tzXCIpO1xuICAgIGdhbWUucG9wdXBNYW4ucG9wdXBUYXNrRGxnKCk7XG5cbiAgICBnYW1lLnN0b3JhZ2VDb250cm9sbGVyLnNldEl0ZW0oXCJjbGlja190YXNrXCIsIFwidHJ1ZVwiKTtcbiAgICB0aGlzLnVwZGF0ZVRhc2tSZW1pbmRlcigpO1xufTtcblxuTWVudUNvbnRyb2xsZXIucHJvdG90eXBlLnVwZGF0ZVRhc2tSZW1pbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY2xpY2tTa2luID0gZ2FtZS5zdG9yYWdlQ29udHJvbGxlci5nZXRJdGVtKFwiY2xpY2tfdGFza1wiLCBcImZhbHNlXCIpO1xuICAgIGlmIChjbGlja1NraW4gPT0gXCJmYWxzZVwiKSB7XG4gICAgICAgIHRoaXMuc3BUYXNrUmVtaW5kZXIudmlzaWJsZSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKEdhbWVNYW4uZ2V0SW5zdGFuY2UoKS5oYXNDb21wbGV0ZWRUYXNrKCkpIHtcbiAgICAgICAgICAgIHRoaXMuc3BUYXNrUmVtaW5kZXIudmlzaWJsZSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNwVGFza1JlbWluZGVyLnZpc2libGUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbk1lbnVDb250cm9sbGVyLnByb3RvdHlwZS51cGRhdGVTa2luUmVtaW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNsaWNrU2tpbiA9IGdhbWUuc3RvcmFnZUNvbnRyb2xsZXIuZ2V0SXRlbShcImNsaWNrX3NraW5fbmV3XCIsIFwiZmFsc2VcIik7XG4gICAgaWYgKGNsaWNrU2tpbiA9PSBcImZhbHNlXCIpIHtcbiAgICAgICAgdGhpcy5zcFNraW5SZW1pbmRlci52aXNpYmxlID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNwU2tpblJlbWluZGVyLnZpc2libGUgPSBmYWxzZTtcbiAgICB9XG59O1xuXG5NZW51Q29udHJvbGxlci5wcm90b3R5cGUuc3BlY2lhbE9mZmVyQ2xpY2tlZCA9IGZ1bmN0aW9uIChzZW5kZXIpIHtcbiAgICBBdWRpb0hlbHBlci5wbGF5QnRuU291bmQoKTtcbiAgICBnYW1lLnBvcHVwTWFuLnBvcHVwU3BlaWNpYWxPZmZlcigpO1xufTtcblxuTWVudUNvbnRyb2xsZXIucHJvdG90eXBlLnNraW5DbGlja2VkID0gZnVuY3Rpb24gKHNlbmRlcikge1xuICAgIEF1ZGlvSGVscGVyLnBsYXlCdG5Tb3VuZCgpO1xuICAgIGdhbWUuYW5hbHlzZU1hbmFnZXIudHJhY2tFdmVudChcIkNsaWNrU2tpbnNcIik7XG4gICAgdmFyIFN0b3JlVHlwZSA9IHJlcXVpcmUoXCIuLi9lbnVtL1N0b3JlVHlwZVwiKTtcbiAgICBnYW1lLnBvcHVwTWFuLnBvcHVwU3RvcmVEbGcoU3RvcmVUeXBlLlNLSU4pO1xuICAgIGdhbWUuc3RvcmFnZUNvbnRyb2xsZXIuc2V0SXRlbShcImNsaWNrX3NraW5fbmV3XCIsIFwidHJ1ZVwiKTtcbiAgICB0aGlzLnVwZGF0ZVNraW5SZW1pbmRlcigpO1xufTtcblxuTWVudUNvbnRyb2xsZXIucHJvdG90eXBlLnNldHRpbmdDbGlja2VkID0gZnVuY3Rpb24gKHNlbmRlcikge1xuICAgIEF1ZGlvSGVscGVyLnBsYXlCdG5Tb3VuZCgpO1xuICAgIGdhbWUucG9wdXBNYW4ucG9wdXBTZXR0aW5nRGxnKCk7XG59O1xuXG5NZW51Q29udHJvbGxlci5wcm90b3R5cGUucmVtb3ZlQWRzQ2xpY2tlZCA9IGZ1bmN0aW9uIChzZW5kZXIpIHtcbiAgICB2YXIgU3RvcmVUeXBlID0gcmVxdWlyZShcIi4uL2VudW0vU3RvcmVUeXBlXCIpO1xuICAgIHZhciBTdG9yZUhlbHBlciA9IHJlcXVpcmUoXCIuLi9tb2RlbC9TdG9yZUhlbHBlclwiKTtcbiAgICB2YXIgcmVtb3ZlQWRFbnRpdHkgPSBTdG9yZUhlbHBlci5nZXRJbnN0YW5jZSgpLmdldFN0b3JlRW50aXR5QnlUeXBlKFN0b3JlVHlwZS5SRU1PVkVfQURTKTtcbiAgICBTdG9yZUhlbHBlci5nZXRJbnN0YW5jZSgpLmJ1eVByb2R1Y3QocmVtb3ZlQWRFbnRpdHkpO1xufTtcblxuTWVudUNvbnRyb2xsZXIuY3JlYXRlRnJvbUNDQiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBub2RlID0gZ2FtZS51dGlscy5sb2FkTm9kZUZyb21DQ0IoXCJyZXMvbWVudS9tZW51X3ZpZXcuY2NiaVwiLCBudWxsLCBcIk1lbnVDb250cm9sbGVyXCIsIG5ldyBNZW51Q29udHJvbGxlcigpKTtcbiAgICByZXR1cm4gbm9kZTtcbn07XG5cbk1lbnVDb250cm9sbGVyLnRpbWUgPSAwO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1lbnVDb250cm9sbGVyOyIsIlxuXG52YXIgTm90aWNlQ29udHJvbGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICBCYXNlQ0NCQ29udHJvbGxlci5jYWxsKHRoaXMpO1xuICAgIHRoaXMuX29rSXRlbSA9IG51bGw7XG4gICAgdGhpcy5fY2FuY2VsSXRlbSA9IG51bGw7XG4gICAgdGhpcy5fY29uZmlybUl0ZW0gPSBudWxsO1xuICAgIHRoaXMuX2Nsb3NlSXRlbSA9IG51bGw7XG4gICAgdGhpcy5faW5mb0xhYmVsID0gbnVsbDtcblxuICAgIHRoaXMuX29rTGFiZWwgPSBudWxsO1xuICAgIHRoaXMuX2NhbmNlbExhYmVsID0gbnVsbDtcbiAgICB0aGlzLl9jb25maXJtTGFiZWwgPSBudWxsO1xuXG4gICAgdGhpcy5uZFJld2FyZDEgPSBudWxsO1xuICAgIHRoaXMubmRSZXdhcmQyID0gbnVsbDtcblxuICAgIHRoaXMuc3BSZXdhcmQxID0gbnVsbDtcbiAgICB0aGlzLmxiUmV3YXJkMSA9IG51bGw7XG4gICAgdGhpcy5zcFJld2FyZDIgPSBudWxsO1xuICAgIHRoaXMubGJSZXdhcmQyID0gbnVsbDtcbiAgICB0aGlzLmxiUmV3YXJkMkluZm8gPSBudWxsO1xuXG4gICAgdGhpcy5zcFJld2FyZCA9IG51bGw7XG4gICAgdGhpcy5sYlJld2FyZCA9IG51bGw7XG4gICAgdGhpcy5sYlJld2FyZEluZm8gPSBudWxsO1xuXG4gICAgdGhpcy5zcHJBZCA9IG51bGw7XG5cbiAgICB0aGlzLl9va0NhbGxGdW5jID0gbnVsbDtcbiAgICB0aGlzLl9mYWlsQ2FsbEZ1bmMgPSBudWxsO1xufTtcblxuZ2FtZS51dGlscy5pbmhlcml0cyhOb3RpY2VDb250cm9sbGVyLCBCYXNlQ0NCQ29udHJvbGxlcik7XG5cbk5vdGljZUNvbnRyb2xsZXIucHJvdG90eXBlLm9uRW50ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgQmFzZUNDQkNvbnRyb2xsZXIucHJvdG90eXBlLm9uRW50ZXIuY2FsbCh0aGlzKTtcbiAgICAvL2dhbWUuYWRzTWFuYWdlci5zaG93TmF0aXZlQWQoXCJub3RpY2VcIiwgMCwgMCk7XG59O1xuXG5Ob3RpY2VDb250cm9sbGVyLnByb3RvdHlwZS5vbkV4aXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgLy9nYW1lLmFkc01hbmFnZXIucmVtb3ZlTmF0aXZlQWQoXCJub3RpY2VcIik7XG4gICAgQmFzZUNDQkNvbnRyb2xsZXIucHJvdG90eXBlLm9uRXhpdC5jYWxsKHRoaXMpO1xufTtcblxuTm90aWNlQ29udHJvbGxlci5wcm90b3R5cGUub25EaWRMb2FkRnJvbUNDQiAgPSBmdW5jdGlvbigpIHtcbiAgICBCYXNlQ0NCQ29udHJvbGxlci5wcm90b3R5cGUub25EaWRMb2FkRnJvbUNDQi5jYWxsKHRoaXMpO1xuICAgIHRoaXMuX3RpdGxlTGFiZWwuc2V0U3RyaW5nKGdhbWUubG9jYWwuZ2V0VmFsdWUoXCJub3RpY2VfdGl0bGVcIikpO1xuICAgIHRoaXMubmRSZXdhcmQxLnZpc2libGUgPSBmYWxzZTtcbiAgICB0aGlzLm5kUmV3YXJkMi52aXNpYmxlID0gZmFsc2U7XG4gICAgdGhpcy5faW5mb0xhYmVsLnZpc2libGUgPSBmYWxzZTtcbiAgICB0aGlzLnNwckFkLnZpc2libGUgPSBmYWxzZTtcbn07XG5cbk5vdGljZUNvbnRyb2xsZXIucHJvdG90eXBlLmluaXRXaXRoWWVzID0gZnVuY3Rpb24gKGluZm8sIG9rQ2FsbEZ1bmMpIHtcbiAgICB0aGlzLl9pbmZvTGFiZWwudmlzaWJsZSA9IHRydWU7XG4gICAgdGhpcy5faW5mb0xhYmVsLnNldFN0cmluZyhpbmZvKTtcbiAgICB0aGlzLl9pbmZvTGFiZWwuc2V0QWxpZ25tZW50KGNjLlRFWFRfQUxJR05NRU5UX0NFTlRFUik7XG4gICAgdGhpcy5fb2tDYWxsRnVuYyA9IG9rQ2FsbEZ1bmM7XG4gICAgdGhpcy5fY29uZmlybUl0ZW0udmlzaWJsZSA9IHRydWU7XG4gICAgdGhpcy5fb2tJdGVtLnZpc2libGUgPSBmYWxzZTtcbiAgICB0aGlzLl9jYW5jZWxJdGVtLnZpc2libGUgPSBmYWxzZTtcbiAgICB0aGlzLl9va0xhYmVsLnZpc2libGUgPSBmYWxzZTtcbiAgICB0aGlzLl9jYW5jZWxMYWJlbC52aXNpYmxlID0gZmFsc2U7XG4gICAgdGhpcy5fY2xvc2VJdGVtLnZpc2libGUgPSBmYWxzZTtcbiAgICB0aGlzLl9jb25maXJtTGFiZWwudmlzaWJsZSA9IHRydWU7XG4gICAgdGhpcy5fY29uZmlybUxhYmVsLnNldFN0cmluZyhnYW1lLmxvY2FsLmdldFZhbHVlKFwiY29uZmlybV9pbmZvXCIpKTtcbiAgICB0aGlzLl9jb25maXJtTGFiZWwuc2V0QWxpZ25tZW50KGNjLlRFWFRfQUxJR05NRU5UX0NFTlRFUik7XG59O1xuXG5Ob3RpY2VDb250cm9sbGVyLnByb3RvdHlwZS5pbml0V2l0aFllc05vID0gZnVuY3Rpb24gKGluZm8sIHllc0luZm8sIGNhbmNlbEluZm8sIG9rQ2FsbEZ1bmMsIGZhaWxDYWxsRnVuYywgc2hvd0Nsb3NlLCBpc1Nob3dBZHMpIHtcbiAgICB0aGlzLl9pbmZvTGFiZWwudmlzaWJsZSA9IHRydWU7XG4gICAgdGhpcy5faW5mb0xhYmVsLnNldFN0cmluZyhpbmZvKTtcbiAgICB0aGlzLl9pbmZvTGFiZWwuc2V0QWxpZ25tZW50KGNjLlRFWFRfQUxJR05NRU5UX0NFTlRFUik7XG4gICAgdGhpcy5fb2tDYWxsRnVuYyA9IG9rQ2FsbEZ1bmM7XG4gICAgdGhpcy5fZmFpbENhbGxGdW5jID0gZmFpbENhbGxGdW5jO1xuICAgIGlmICh0aGlzLl9jb25maXJtSXRlbSkge1xuICAgICAgICB0aGlzLl9jb25maXJtSXRlbS52aXNpYmxlID0gZmFsc2U7XG4gICAgfVxuICAgIHRoaXMuX29rSXRlbS52aXNpYmxlID0gdHJ1ZTtcbiAgICB0aGlzLl9jYW5jZWxJdGVtLnZpc2libGUgPSB0cnVlO1xuICAgIHRoaXMuX29rTGFiZWwudmlzaWJsZSA9IHRydWU7XG4gICAgdGhpcy5fY2FuY2VsTGFiZWwudmlzaWJsZSA9IHRydWU7XG4gICAgaWYgKHRoaXMuX2NvbmZpcm1MYWJlbCkge1xuICAgICAgICB0aGlzLl9jb25maXJtTGFiZWwudmlzaWJsZSA9IGZhbHNlO1xuICAgIH1cbiAgICB0aGlzLl9va0xhYmVsLnNldFN0cmluZyh5ZXNJbmZvKTtcbiAgICB0aGlzLl9jYW5jZWxMYWJlbC5zZXRTdHJpbmcoY2FuY2VsSW5mbyk7XG4gICAgdGhpcy5fb2tMYWJlbC5zZXRBbGlnbm1lbnQoY2MuVEVYVF9BTElHTk1FTlRfQ0VOVEVSKTtcbiAgICB0aGlzLl9jYW5jZWxMYWJlbC5zZXRBbGlnbm1lbnQoY2MuVEVYVF9BTElHTk1FTlRfQ0VOVEVSKTtcbiAgICB0aGlzLl9jbG9zZUl0ZW0udmlzaWJsZSA9IHNob3dDbG9zZTtcbiAgICB0aGlzLnNwckFkLnZpc2libGUgPSAhIWlzU2hvd0FkcztcbiAgICBpZiAoaXNTaG93QWRzKSB7XG4gICAgICAgIHRoaXMucm9vdE5vZGUuc2NoZWR1bGVPbmNlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGdhbWUudXRpbHMucGxheUNDQkFuaW1hdGlvbih0aGlzLnJvb3ROb2RlLCBcImxvb3BcIik7XG4gICAgICAgIH0uYmluZCh0aGlzKSwgMSk7XG4gICAgfVxufTtcblxuTm90aWNlQ29udHJvbGxlci5wcm90b3R5cGUuaW5pdFdpdGhSZXdhcmRZZXMgPSBmdW5jdGlvbiAoaW5mbywgb2tDYWxsRnVuYywgcmV3YXJkMVNwcml0ZSwgcmV3YXJkMUNvdW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV3YXJkMlNwcml0ZSwgcmV3YXJkMkNvdW50KSB7XG4gICAgdGhpcy5faW5mb0xhYmVsLnZpc2libGUgPSBmYWxzZTtcbiAgICB2YXIgc3ByaXRlRnJhbWU7XG4gICAgaWYgKHJld2FyZDFTcHJpdGUgJiYgcmV3YXJkMlNwcml0ZSkge1xuICAgICAgICB0aGlzLm5kUmV3YXJkMi52aXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5sYlJld2FyZDJJbmZvLnNldFN0cmluZyhpbmZvKTtcbiAgICAgICAgdGhpcy5sYlJld2FyZDJJbmZvLnNldEFsaWdubWVudChjYy5URVhUX0FMSUdOTUVOVF9DRU5URVIpO1xuICAgICAgICBzcHJpdGVGcmFtZSA9IGNjLnNwcml0ZUZyYW1lQ2FjaGUuZ2V0U3ByaXRlRnJhbWUocmV3YXJkMVNwcml0ZSk7XG4gICAgICAgIGlmIChzcHJpdGVGcmFtZSkge1xuICAgICAgICAgICAgdGhpcy5zcFJld2FyZDEuc2V0U3ByaXRlRnJhbWUoc3ByaXRlRnJhbWUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubGJSZXdhcmQxLnNldFN0cmluZyhcInhcIiArIHJld2FyZDFDb3VudCk7XG4gICAgICAgIHNwcml0ZUZyYW1lID0gY2Muc3ByaXRlRnJhbWVDYWNoZS5nZXRTcHJpdGVGcmFtZShyZXdhcmQyU3ByaXRlKTtcbiAgICAgICAgaWYgKHNwcml0ZUZyYW1lKSB7XG4gICAgICAgICAgICB0aGlzLnNwUmV3YXJkMi5zZXRTcHJpdGVGcmFtZShzcHJpdGVGcmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sYlJld2FyZDIuc2V0U3RyaW5nKFwieFwiICsgcmV3YXJkMkNvdW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm5kUmV3YXJkMS52aXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5sYlJld2FyZEluZm8uc2V0U3RyaW5nKGluZm8pO1xuICAgICAgICB0aGlzLmxiUmV3YXJkSW5mby5zZXRBbGlnbm1lbnQoY2MuVEVYVF9BTElHTk1FTlRfQ0VOVEVSKTtcbiAgICAgICAgc3ByaXRlRnJhbWUgPSBjYy5zcHJpdGVGcmFtZUNhY2hlLmdldFNwcml0ZUZyYW1lKHJld2FyZDFTcHJpdGUpO1xuICAgICAgICBpZiAoc3ByaXRlRnJhbWUpIHtcbiAgICAgICAgICAgIHRoaXMuc3BSZXdhcmQuc2V0U3ByaXRlRnJhbWUoc3ByaXRlRnJhbWUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubGJSZXdhcmQuc2V0U3RyaW5nKFwieFwiICsgcmV3YXJkMUNvdW50KTtcbiAgICB9XG5cbiAgICB0aGlzLl9va0NhbGxGdW5jID0gb2tDYWxsRnVuYztcbiAgICB0aGlzLl9jb25maXJtSXRlbS52aXNpYmxlID0gdHJ1ZTtcbiAgICB0aGlzLl9va0l0ZW0udmlzaWJsZSA9IGZhbHNlO1xuICAgIHRoaXMuX2NhbmNlbEl0ZW0udmlzaWJsZSA9IGZhbHNlO1xuICAgIHRoaXMuX29rTGFiZWwudmlzaWJsZSA9IGZhbHNlO1xuICAgIHRoaXMuX2NhbmNlbExhYmVsLnZpc2libGUgPSBmYWxzZTtcbiAgICB0aGlzLl9jbG9zZUl0ZW0udmlzaWJsZSA9IGZhbHNlO1xuICAgIHRoaXMuX2NvbmZpcm1MYWJlbC52aXNpYmxlID0gdHJ1ZTtcbiAgICB0aGlzLl9jb25maXJtTGFiZWwuc2V0U3RyaW5nKGdhbWUubG9jYWwuZ2V0VmFsdWUoXCJjb25maXJtX2luZm9cIikpO1xuICAgIHRoaXMuX2NvbmZpcm1MYWJlbC5zZXRBbGlnbm1lbnQoY2MuVEVYVF9BTElHTk1FTlRfQ0VOVEVSKTtcbn07XG5cbk5vdGljZUNvbnRyb2xsZXIucHJvdG90eXBlLm9rQ2xpY2tlZCA9IGZ1bmN0aW9uIChzZW5kZXIpIHtcbiAgICBBdWRpb0hlbHBlci5wbGF5QnRuU291bmQoKTtcbiAgICBpZiAodGhpcy5fb2tDYWxsRnVuYykge1xuICAgICAgICB0aGlzLl9va0NhbGxGdW5jKCk7XG4gICAgfVxuICAgIHRoaXMuY2xvc2UoKTtcbn07XG5cbk5vdGljZUNvbnRyb2xsZXIucHJvdG90eXBlLmNhbmNlbENsaWNrZWQgPSBmdW5jdGlvbiAoc2VuZGVyKSB7XG4gICAgQXVkaW9IZWxwZXIucGxheUJ0blNvdW5kKCk7XG4gICAgaWYgKHRoaXMuX2ZhaWxDYWxsRnVuYykge1xuICAgICAgICB0aGlzLl9mYWlsQ2FsbEZ1bmMoKTtcbiAgICB9XG4gICAgdGhpcy5jbG9zZSgpO1xufTtcblxuTm90aWNlQ29udHJvbGxlci5wcm90b3R5cGUuY2xvc2VDbGlja2VkID0gZnVuY3Rpb24gKHNlbmRlcikge1xuICAgIEF1ZGlvSGVscGVyLnBsYXlCdG5Tb3VuZCgpO1xuICAgIHRoaXMuY2xvc2UoKTtcbn07XG5cbk5vdGljZUNvbnRyb2xsZXIucHJvdG90eXBlLmNvbmZpcm1DbGlja2VkID0gZnVuY3Rpb24gKHNlbmRlcikge1xuICAgIEF1ZGlvSGVscGVyLnBsYXlCdG5Tb3VuZCgpO1xuICAgIGlmICh0aGlzLl9va0NhbGxGdW5jKSB7XG4gICAgICAgIHRoaXMuX29rQ2FsbEZ1bmMoKTtcbiAgICB9XG4gICAgdGhpcy5jbG9zZSgpO1xufTtcblxuTm90aWNlQ29udHJvbGxlci5wcm90b3R5cGUucG9wdXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgZ2FtZS5kaWFsb2dNYW5hZ2VyLnBvcHVwKHRoaXMucm9vdE5vZGUsIHtwb3B1cEFuaW06IHRydWV9KTtcbn07XG5cbk5vdGljZUNvbnRyb2xsZXIucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKCkge1xuICAgIGdhbWUuZGlhbG9nTWFuYWdlci5jbG9zZSh0aGlzLnJvb3ROb2RlKTtcbn07XG5cblxuTm90aWNlQ29udHJvbGxlci5jcmVhdGVGcm9tQ0NCID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG5vZGUgPSBnYW1lLnV0aWxzLmxvYWROb2RlRnJvbUNDQihcInJlcy9ub3RpY2Uvbm90aWNlX3ZpZXcuY2NiaVwiLCBudWxsLCBcIk5vdGljZUNvbnRyb2xsZXJcIiwgbmV3IE5vdGljZUNvbnRyb2xsZXIoKSk7XG4gICAgcmV0dXJuIG5vZGU7XG59O1xuXG5Ob3RpY2VDb250cm9sbGVyLmNyZWF0ZUd1aWRlRnJvbUNDQiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBub2RlID0gZ2FtZS51dGlscy5sb2FkTm9kZUZyb21DQ0IoXCJyZXMvbm90aWNlL25ld190aXBfdmlldy5jY2JpXCIsIG51bGwsIFwiTm90aWNlQ29udHJvbGxlclwiLCBuZXcgTm90aWNlQ29udHJvbGxlcigpKTtcbiAgICByZXR1cm4gbm9kZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTm90aWNlQ29udHJvbGxlcjsiLCJ2YXIgR2FtZVNjZW5lID0gcmVxdWlyZShcIi4uL3NjZW5lL0dhbWVTY2VuZVwiKTtcbnZhciBTdG9yZUhlbHBlciA9IHJlcXVpcmUoXCIuLi9tb2RlbC9TdG9yZUhlbHBlclwiKTtcbnZhciBNdWx0aUNvbFRhYmxlVmlldyA9IHJlcXVpcmUoXCIuLi8uLi9jb21tb24vZXh0L011bHRpQ29sVGFibGVWaWV3XCIpO1xudmFyIFBhY2thZ2VJdGVtQ29udHJvbGxlciA9IHJlcXVpcmUoXCIuL1BhY2thZ2VJdGVtQ29udHJvbGxlclwiKTtcbnZhciBMZXZlbENvbmZpZ01hbiA9IHJlcXVpcmUoXCIuLi9jb25maWcvQ29uZmlnTWFuXCIpO1xudmFyIExvY2tTdGF0dXMgPSByZXF1aXJlKFwiLi4vZW51bS9Mb2NrU3RhdHVzXCIpO1xudmFyIEdhbWVNYW4gPSByZXF1aXJlKFwiLi4vbW9kZWwvR2FtZU1hblwiKTtcbnZhciBMZXZlbFNjZW5lID0gcmVxdWlyZShcIi4uL3NjZW5lL0xldmVsU2NlbmVcIik7XG52YXIgVGl0bGVDb250cm9sbGVyID0gcmVxdWlyZShcIi4vVGl0bGVDb250cm9sbGVyXCIpO1xuXG4vL3ZhciBDRUxMX1dJRFRIID0gNTIwO1xuXG52YXIgUGFja2FnZUl0ZW1DZWxsVmlldyA9IGNjLlRhYmxlVmlld0NlbGwuZXh0ZW5kKHtcbiAgICBwYWNrYWdlRW50aXR5OiBudWxsLFxuICAgIHBhY2thZ2VJdGVtTm9kZTogbnVsbCxcblxuICAgIGN0b3I6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fc3VwZXIoKTtcbiAgICAgICAgdGhpcy5wYWNrYWdlSXRlbU5vZGUgPSBQYWNrYWdlSXRlbUNvbnRyb2xsZXIuY3JlYXRlRnJvbUNDQigpO1xuICAgICAgICB0aGlzLmFkZENoaWxkKHRoaXMucGFja2FnZUl0ZW1Ob2RlKTtcbiAgICAgICAgdmFyIHNpemUgPSB0aGlzLnBhY2thZ2VJdGVtTm9kZS5jb250cm9sbGVyLmdldENvbnRlbnRTaXplKCk7XG4gICAgICAgIHRoaXMucGFja2FnZUl0ZW1Ob2RlLnNldFBvc2l0aW9uKGNjLnAoY2Mud2luU2l6ZS53aWR0aCAqIDAuNSwgc2l6ZS5oZWlnaHQgKiAwLjUpKTtcbiAgICB9LFxuXG4gICAgaW5pdFdpdGg6IGZ1bmN0aW9uIChwYWNrYWdlRW50aXR5LCBpZHgpIHtcbiAgICAgICAgY2MubG9nKFwiUGFja2FnZUl0ZW1DZWxsVmlldyBpbml0V2l0aDppZHg6XCIgKyBpZHgpO1xuICAgICAgICB0aGlzLnBhY2thZ2VFbnRpdHkgPSBwYWNrYWdlRW50aXR5O1xuICAgICAgICB0aGlzLnBhY2thZ2VJdGVtTm9kZS5jb250cm9sbGVyLmluaXRXaXRoKHBhY2thZ2VFbnRpdHksIGlkeCk7XG4gICAgfSxcblxuICAgIHJlZnJlc2g6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5wYWNrYWdlSXRlbU5vZGUuY29udHJvbGxlci5yZWZyZXNoKCk7XG4gICAgfSxcblxuICAgIHNob3dBcHBlYXJBbmltOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMucGFja2FnZUl0ZW1Ob2RlLmNvbnRyb2xsZXIuc2hvd0FwcGVhckFuaW0oZmFsc2UpO1xuICAgIH0sXG5cbiAgICBzaG93RGlzYXBwZWFyQW5pbTogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnBhY2thZ2VJdGVtTm9kZS5jb250cm9sbGVyLnNob3dEaXNhcHBlYXJBbmltKCk7XG4gICAgfVxufSk7XG5cbnZhciBQYWNrYWdlQ29udHJvbGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICBCYXNlQ0NCQ29udHJvbGxlci5jYWxsKHRoaXMpO1xuICAgIHRoaXMubGJDaGFwdGVyTmFtZSA9IG51bGw7XG4gICAgdGhpcy5uZENvbnRhaW5lciA9IG51bGw7XG4gICAgdGhpcy5sYkxldmVsTmFtZSA9IG51bGw7XG4gICAgdGhpcy5fdGFibGVWaWV3ID0gbnVsbDtcblxuICAgIC8vdXNlciBkYXRhLlxuICAgIHRoaXMucGFja2FnZUNvbmZpZ3MgPSBudWxsO1xufTtcblxuZ2FtZS51dGlscy5pbmhlcml0cyhQYWNrYWdlQ29udHJvbGxlciwgQmFzZUNDQkNvbnRyb2xsZXIpO1xuXG5QYWNrYWdlQ29udHJvbGxlci5wcm90b3R5cGUub25EaWRMb2FkRnJvbUNDQiAgPSBmdW5jdGlvbigpIHtcbiAgICBCYXNlQ0NCQ29udHJvbGxlci5wcm90b3R5cGUub25EaWRMb2FkRnJvbUNDQi5jYWxsKHRoaXMpO1xuXG4gICAgdGhpcy5wYWNrYWdlQ29uZmlncyA9IExldmVsQ29uZmlnTWFuLmdldEluc3RhbmNlKCkuZ2V0UGFja2FnZUxpc3QoKTtcblxuICAgIHRoaXMuc2hvd0xldmVsVGFibGVWaWV3KCk7XG5cbiAgICB2YXIgcGFja2FnZUlkID0gMTtcbiAgICB2YXIgcGFja2FnZUluZm8gPSBHYW1lTWFuLmdldEluc3RhbmNlKCkuZ2V0TWluVW5Db21wbGV0ZWRQYWNrYWdlKCk7XG4gICAgaWYgKCFwYWNrYWdlSW5mbyB8fCAocGFja2FnZUluZm8uaWQgPiB0aGlzLnBhY2thZ2VDb25maWdzLmxlbmd0aCkpIHtcbiAgICAgICAgcGFja2FnZUlkID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBwYWNrYWdlSWQgPSBwYWNrYWdlSW5mby5pZDtcbiAgICB9XG4gICAgY2MubG9nKFwicGFja2FnZUlkOlwiICsgcGFja2FnZUlkKTtcbiAgICB2YXIgY3VyUm93ID0gMDtcbiAgICBpZiAocGFja2FnZUlkICUgdGhpcy5udW1iZXJPZkdyaWRzSW5DZWxsKCkgPT09IDApIHtcbiAgICAgICAgY3VyUm93ID0gTWF0aC5mbG9vcihwYWNrYWdlSWQgLyB0aGlzLm51bWJlck9mR3JpZHNJbkNlbGwoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY3VyUm93ID0gTWF0aC5mbG9vcihwYWNrYWdlSWQgLyB0aGlzLm51bWJlck9mR3JpZHNJbkNlbGwoKSkgKyAxO1xuICAgIH1cblxuICAgIHZhciB5T2Zmc2V0ID0gLSh0aGlzLm51bWJlck9mQ2VsbHNJblRhYmxlVmlldygpIC0gY3VyUm93ICsgMSkgKiB0aGlzLmdyaWRTaXplRm9yVGFibGUoKS5oZWlnaHQgK1xuICAgICAgICB0aGlzLl90YWJsZVZpZXcuZ2V0Vmlld1NpemUoKS5oZWlnaHQ7XG5cbiAgICBpZiAoeU9mZnNldCA8IHRoaXMuX3RhYmxlVmlldy5taW5Db250YWluZXJPZmZzZXQoKS55KSB7XG4gICAgICAgIHlPZmZzZXQgPSB0aGlzLl90YWJsZVZpZXcubWluQ29udGFpbmVyT2Zmc2V0KCkueTtcbiAgICB9IGVsc2UgaWYgKHlPZmZzZXQgPj0gdGhpcy5fdGFibGVWaWV3Lm1heENvbnRhaW5lck9mZnNldCgpLnkpIHtcbiAgICAgICAgeU9mZnNldCA9IHRoaXMuX3RhYmxlVmlldy5tYXhDb250YWluZXJPZmZzZXQoKS55O1xuICAgIH1cblxuICAgIHRoaXMuX3RhYmxlVmlldy5zZXRDb250ZW50T2Zmc2V0KGNjLnAoMCwgeU9mZnNldCkpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLm51bWJlck9mQ2VsbHNJblRhYmxlVmlldygpOyArK2kpIHtcbiAgICAgICAgdmFyIGNlbGwgPSB0aGlzLl90YWJsZVZpZXcuZ2V0R3JpZEF0SW5kZXgoaSk7XG4gICAgICAgIGlmIChjZWxsKSB7XG4gICAgICAgICAgICBjZWxsLnNob3dBcHBlYXJBbmltKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmxiTGV2ZWxOYW1lLnNldFN0cmluZyhnYW1lLmxvY2FsLmdldFZhbHVlKFwicGFja2FnZV90aXRsZVwiKSk7XG59O1xuXG5QYWNrYWdlQ29udHJvbGxlci5wcm90b3R5cGUuc2hvd0xldmVsVGFibGVWaWV3ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX3RhYmxlVmlldyA9IG5ldyBNdWx0aUNvbFRhYmxlVmlldyh0aGlzLCB0aGlzLm5kQ29udGFpbmVyLmdldENvbnRlbnRTaXplKCksIG51bGwpO1xuICAgIHRoaXMuX3RhYmxlVmlldy5zZXREaXJlY3Rpb24oY2MuU0NST0xMVklFV19ESVJFQ1RJT05fVkVSVElDQUwpO1xuICAgIHRoaXMuX3RhYmxlVmlldy5zZXRWZXJ0aWNhbEZpbGxPcmRlcihjYy5UQUJMRVZJRVdfRklMTF9UT1BET1dOKTtcbiAgICB0aGlzLl90YWJsZVZpZXcuc2V0TXVsdGlUYWJsZVZpZXdEZWxlZ2F0ZSh0aGlzKTtcbiAgICB0aGlzLl90YWJsZVZpZXcuaWdub3JlQW5jaG9yUG9pbnRGb3JQb3NpdGlvbihmYWxzZSk7XG4gICAgdGhpcy5fdGFibGVWaWV3LnNldEFuY2hvclBvaW50KGNjLnAoMCwgMCkpO1xuICAgIHRoaXMubmRDb250YWluZXIuYWRkQ2hpbGQodGhpcy5fdGFibGVWaWV3KTtcbiAgICB0aGlzLl90YWJsZVZpZXcucmVsb2FkRGF0YSgpO1xufTtcblxuUGFja2FnZUNvbnRyb2xsZXIucHJvdG90eXBlLnNjcm9sbFZpZXdEaWRTY3JvbGwgPSBmdW5jdGlvbiAodmlldykge1xufTtcblxuUGFja2FnZUNvbnRyb2xsZXIucHJvdG90eXBlLnNjcm9sbFZpZXdEaWRab29tID0gZnVuY3Rpb24gKHZpZXcpIHtcbn07XG5cblBhY2thZ2VDb250cm9sbGVyLnByb3RvdHlwZS5ncmlkQXRJbmRleCA9IGZ1bmN0aW9uKG11bHRpVGFibGUsICBpZHgpIHtcbiAgICB2YXIgY2VsbCA9IG11bHRpVGFibGUuZGVxdWV1ZUdyaWQoKTtcbiAgICBpZiAoIWNlbGwpIHtcbiAgICAgICAgY2VsbCA9IG5ldyBQYWNrYWdlSXRlbUNlbGxWaWV3KCk7XG4gICAgfVxuXG4gICAgaWYgKGlkeCA8IHRoaXMucGFja2FnZUNvbmZpZ3MubGVuZ3RoKSB7XG4gICAgICAgIHZhciBwYWNrYWdlQ29uZmlnID0gdGhpcy5wYWNrYWdlQ29uZmlnc1tpZHhdO1xuICAgICAgICBjZWxsLmluaXRXaXRoKHBhY2thZ2VDb25maWcsIGlkeCwgdGhpcy5pbml0ZWQpO1xuICAgICAgICBjZWxsLnZpc2libGUgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNlbGwudmlzaWJsZSA9IGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiBjZWxsO1xufTtcblxuUGFja2FnZUNvbnRyb2xsZXIucHJvdG90eXBlLm51bWJlck9mQ2VsbHNJblRhYmxlVmlldyA9IGZ1bmN0aW9uKG11bHRpVGFibGUpIHtcbiAgICByZXR1cm4gdGhpcy5wYWNrYWdlQ29uZmlncy5sZW5ndGg7XG59O1xuXG5QYWNrYWdlQ29udHJvbGxlci5wcm90b3R5cGUubnVtYmVyT2ZHcmlkc0luQ2VsbCA9IGZ1bmN0aW9uKG11bHRpVGFibGUsIGNvbElkeCkge1xuICAgIHJldHVybiAxO1xufTtcblxuUGFja2FnZUNvbnRyb2xsZXIucHJvdG90eXBlLmdyaWRTaXplRm9yVGFibGUgPSBmdW5jdGlvbih0YWJsZSwgY29sSWR4KSB7XG4gICAgcmV0dXJuIGNjLnNpemUoY2Mud2luU2l6ZS53aWR0aCwgMTQzKTtcbn07XG5cblBhY2thZ2VDb250cm9sbGVyLnByb3RvdHlwZS5ncmlkVG91Y2hlZCA9IGZ1bmN0aW9uKHRhYmxlLCBncmlkKSB7XG4gICAgY2MubG9nKFwiZ3JpZCB0b3VjaGVkIGF0IGluZGV4OiBcIiArIGdyaWQuZ2V0SWR4KCkpO1xuICAgIHZhciBwYWNrYWdlRW50aXR5ID0gZ3JpZC5wYWNrYWdlRW50aXR5O1xuICAgIEF1ZGlvSGVscGVyLnBsYXlCdG5Tb3VuZCgpO1xuICAgIGlmIChwYWNrYWdlRW50aXR5LmlzTG9ja2VkKCkpIHtcbiAgICAgICAgZ2FtZS5wb3B1cE1hbi5wb3B1cFllc05vQ29tbW9uRGxnKGdhbWUudXRpbHMuc3ByaW50ZihnYW1lLmxvY2FsLmdldFZhbHVlKFwidW5sb2NrX2luZm9cIiksIHBhY2thZ2VFbnRpdHkudW5sb2NrQ291bnQpLFxuICAgICAgICAgICAgZ2FtZS5sb2NhbC5nZXRWYWx1ZShcInVubG9ja190aXRsZVwiKSxcbiAgICAgICAgICAgIGdhbWUubG9jYWwuZ2V0VmFsdWUoXCJjYW5jZWxfdGl0bGVcIiksXG4gICAgICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoZ2FtZS5wbGF5ZXJNYW4ucGxheWVyLmNvaW5zID49IHBhY2thZ2VFbnRpdHkudW5sb2NrQ291bnQpIHtcbiAgICAgICAgICAgICAgICBnYW1lLnBsYXllck1hbi5hZGRDb2lucygtcGFja2FnZUVudGl0eS51bmxvY2tDb3VudCk7XG4gICAgICAgICAgICAgICAgZ2FtZS5wbGF5ZXJNYW4uc2V0UGFja2FnZVVubG9ja2VkKHBhY2thZ2VFbnRpdHkuaWQpO1xuICAgICAgICAgICAgICAgIGdyaWQucmVmcmVzaCgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBnYW1lLnBvcHVwTWFuLnBvcHVwU3RvcmVEbGcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zaG93Q2xvc2VBbmltKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIEdhbWVNYW4uZ2V0SW5zdGFuY2UoKS5zZXRQYWNrYWdlRW50aXR5KHBhY2thZ2VFbnRpdHkpO1xuICAgICAgICAgICAgZ2FtZS5zY2VuZU1hbi5zd2l0Y2hTY2VuZShnYW1lLnNjZW5lVHlwZS5MRVZFTCk7XG4gICAgICAgIH0pO1xuICAgIH1cbn07XG5cblBhY2thZ2VDb250cm9sbGVyLnByb3RvdHlwZS5iYWNrQ2xpY2tlZCA9IGZ1bmN0aW9uIChzZW5kZXIpIHtcbiAgICBBdWRpb0hlbHBlci5wbGF5QnRuU291bmQoKTtcbiAgICB0aGlzLnNob3dDbG9zZUFuaW0oZnVuY3Rpb24gKCkge1xuICAgICAgICBnYW1lLnNjZW5lTWFuLnN3aXRjaFNjZW5lKGdhbWUuc2NlbmVUeXBlLk1FTlUpO1xuICAgIH0pO1xufTtcblxuUGFja2FnZUNvbnRyb2xsZXIucHJvdG90eXBlLnNob3dDbG9zZUFuaW0gPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubnVtYmVyT2ZDZWxsc0luVGFibGVWaWV3KCk7ICsraSkge1xuICAgICAgICB2YXIgY2VsbCA9IHRoaXMuX3RhYmxlVmlldy5nZXRHcmlkQXRJbmRleChpKTtcbiAgICAgICAgaWYgKGNlbGwpIHtcbiAgICAgICAgICAgIGNlbGwuc2hvd0Rpc2FwcGVhckFuaW0oKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnJvb3ROb2RlLnNjaGVkdWxlT25jZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgfVxuICAgIH0uYmluZCh0aGlzKSwgMC44KTtcbn07XG5cblBhY2thZ2VDb250cm9sbGVyLmNyZWF0ZUZyb21DQ0IgPSBmdW5jdGlvbigpIHtcbiAgICBjYy5CdWlsZGVyUmVhZGVyLnJlZ2lzdGVyQ29udHJvbGxlcihcIlRpdGxlQ29udHJvbGxlclwiLCBuZXcgVGl0bGVDb250cm9sbGVyKCkpO1xuICAgIHZhciBub2RlID0gZ2FtZS51dGlscy5sb2FkTm9kZUZyb21DQ0IoXCJyZXMvbWVudS9wYWNrYWdlX3ZpZXcuY2NiaVwiLCBudWxsLCBcIlBhY2thZ2VDb250cm9sbGVyXCIsIG5ldyBQYWNrYWdlQ29udHJvbGxlcigpKTtcbiAgICBjYy5CdWlsZGVyUmVhZGVyLl9jb250cm9sbGVyQ2xhc3NDYWNoZVtcIlRpdGxlQ29udHJvbGxlclwiXSA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gbm9kZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUGFja2FnZUNvbnRyb2xsZXI7IiwidmFyIExvY2tTdGF0dXMgPSByZXF1aXJlKFwiLi4vZW51bS9Mb2NrU3RhdHVzXCIpO1xuXG52YXIgUGFja2FnZUl0ZW1Db250cm9sbGVyID0gZnVuY3Rpb24gKCkge1xuICAgIEJhc2VDQ0JDb250cm9sbGVyLmNhbGwodGhpcyk7XG4gICAgdGhpcy5sYk5hbWUgPSBudWxsO1xuICAgIHRoaXMubGJDb3VudCA9IG51bGw7XG5cbiAgICB0aGlzLnNwQmcgPSBudWxsO1xuXG4gICAgdGhpcy5zcENvbXBsZXRlZCA9IG51bGw7XG4gICAgdGhpcy5zcFVuQ29tcGxldGVkID0gbnVsbDtcblxuICAgIHRoaXMubmRMb2NrID0gbnVsbDtcbiAgICB0aGlzLmxiVW5sb2NrQ291bnQgPSBudWxsO1xuXG4gICAgdGhpcy5wYWNrYWdlRW50aXR5ID0gbnVsbDtcblxuICAgIHRoaXMuaWR4ID0gMDtcbn07XG5cbmdhbWUudXRpbHMuaW5oZXJpdHMoUGFja2FnZUl0ZW1Db250cm9sbGVyLCBCYXNlQ0NCQ29udHJvbGxlcik7XG5cblBhY2thZ2VJdGVtQ29udHJvbGxlci5wcm90b3R5cGUub25EaWRMb2FkRnJvbUNDQiAgPSBmdW5jdGlvbigpIHtcbiAgICBCYXNlQ0NCQ29udHJvbGxlci5wcm90b3R5cGUub25EaWRMb2FkRnJvbUNDQi5jYWxsKHRoaXMpO1xufTtcblxuUGFja2FnZUl0ZW1Db250cm9sbGVyLnByb3RvdHlwZS5zaG93QXBwZWFyQW5pbSA9IGZ1bmN0aW9uIChpbml0ZWQpIHtcbiAgICAvL2lmICghaW5pdGVkKSB7XG4gICAgICAgIHRoaXMucm9vdE5vZGUuc3RvcEFsbEFjdGlvbnMoKTtcbiAgICAgICAgZ2FtZS51dGlscy5wbGF5Q0NCQW5pbWF0aW9uKHRoaXMucm9vdE5vZGUsIFwibGVmdFwiKTtcbiAgICAgICAgdGhpcy5yb290Tm9kZS5zY2hlZHVsZU9uY2UoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZ2FtZS51dGlscy5wbGF5Q0NCQW5pbWF0aW9uKHRoaXMucm9vdE5vZGUsIFwibm9ybWFsXCIpO1xuICAgICAgICB9LmJpbmQodGhpcyksIHRoaXMuaWR4ICogMC4wNSk7XG4gICAgLy99IGVsc2Uge1xuICAgIC8vICAgIGdhbWUudXRpbHMucGxheUNDQkFuaW1hdGlvbih0aGlzLnJvb3ROb2RlLCBcIm5vbmVcIik7XG4gICAgLy99XG59O1xuXG5QYWNrYWdlSXRlbUNvbnRyb2xsZXIucHJvdG90eXBlLnNob3dEaXNhcHBlYXJBbmltID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMucm9vdE5vZGUuc3RvcEFsbEFjdGlvbnMoKTtcbiAgICB0aGlzLnJvb3ROb2RlLnNjaGVkdWxlT25jZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGdhbWUudXRpbHMucGxheUNDQkFuaW1hdGlvbih0aGlzLnJvb3ROb2RlLCBcImRpc2FwcGVhclwiKTtcbiAgICB9LmJpbmQodGhpcyksIHRoaXMuaWR4ICogMC4wNSk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7UGFja2FnZUNvbmZpZ30gZGF0YVxuICogQHBhcmFtIHtudW1iZXJ9IGlkeFxuICovXG5QYWNrYWdlSXRlbUNvbnRyb2xsZXIucHJvdG90eXBlLmluaXRXaXRoID0gZnVuY3Rpb24gKGRhdGEsIGlkeCkge1xuICAgIHRoaXMucGFja2FnZUVudGl0eSA9IGRhdGE7XG4gICAgdGhpcy5pZHggPSBpZHg7XG4gICAgdGhpcy5yZWZyZXNoKCk7XG4gICAgZ2FtZS51dGlscy5wbGF5Q0NCQW5pbWF0aW9uKHRoaXMucm9vdE5vZGUsIFwibm9uZVwiKTtcbn07XG5cblBhY2thZ2VJdGVtQ29udHJvbGxlci5wcm90b3R5cGUucmVmcmVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmxiTmFtZS5zZXRTdHJpbmcoZ2FtZS5sb2NhbC5nZXRWYWx1ZShnYW1lLnV0aWxzLnNwcmludGYoXCJwYWNrYWdlXyVkXCIsIHRoaXMuaWR4ICsgMSkpKTtcbiAgICB2YXIgbWF4TGV2ZWwgPSBnYW1lLnBsYXllck1hbi5nZXRQYWNrYWdlVW5sb2NrTGV2ZWwodGhpcy5wYWNrYWdlRW50aXR5LmlkKSArIDE7XG4gICAgaWYgKG1heExldmVsID4gdGhpcy5wYWNrYWdlRW50aXR5LmNvdW50KSB7XG4gICAgICAgIG1heExldmVsID0gdGhpcy5wYWNrYWdlRW50aXR5LmNvdW50O1xuICAgIH1cbiAgICB0aGlzLmxiQ291bnQuc2V0U3RyaW5nKG1heExldmVsICsgXCIvXCIgKyB0aGlzLnBhY2thZ2VFbnRpdHkuY291bnQpO1xuICAgIHRoaXMuc3BCZy5zZXRTcHJpdGVGcmFtZShjYy5zcHJpdGVGcmFtZUNhY2hlLmdldFNwcml0ZUZyYW1lKHRoaXMucGFja2FnZUVudGl0eS5pbWFnZSkpO1xuICAgIHRoaXMuc3BDb21wbGV0ZWQudmlzaWJsZSA9IGZhbHNlO1xuICAgIHRoaXMuc3BVbkNvbXBsZXRlZC52aXNpYmxlID0gZmFsc2U7XG4gICAgaWYgKG1heExldmVsID09PSB0aGlzLnBhY2thZ2VFbnRpdHkuY291bnQpIHtcbiAgICAgICAgdGhpcy5zcENvbXBsZXRlZC52aXNpYmxlID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNwVW5Db21wbGV0ZWQudmlzaWJsZSA9IHRydWU7XG4gICAgfVxuICAgIGlmICh0aGlzLnBhY2thZ2VFbnRpdHkuaXNMb2NrZWQoKSkge1xuICAgICAgICB0aGlzLm5kTG9jay52aXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5sYlVubG9ja0NvdW50LnNldFN0cmluZyh0aGlzLnBhY2thZ2VFbnRpdHkudW5sb2NrQ291bnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubmRMb2NrLnZpc2libGUgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoIWdhbWUubG9jYWwuaXNDaGluZXNlKCkpIHtcbiAgICAgICAgdGhpcy5sYk5hbWUuc2V0U2NhbGUoMS4wKTtcbiAgICB9XG59O1xuXG5QYWNrYWdlSXRlbUNvbnRyb2xsZXIucHJvdG90eXBlLmdldENvbnRlbnRTaXplID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLnNwQmcuZ2V0Q29udGVudFNpemUoKTtcbn07XG5cblBhY2thZ2VJdGVtQ29udHJvbGxlci5jcmVhdGVGcm9tQ0NCID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGdhbWUudXRpbHMubG9hZE5vZGVGcm9tQ0NCKFwicmVzL21lbnUvcGFja2FnZV9pdGVtX3ZpZXcuY2NiaVwiLCBudWxsLCBcIlBhY2thZ2VJdGVtQ29udHJvbGxlclwiLCBuZXcgUGFja2FnZUl0ZW1Db250cm9sbGVyKCkpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBQYWNrYWdlSXRlbUNvbnRyb2xsZXI7IiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHFpbm5pbmcgb24gMjAxNy8xMi8xNS5cbiAqL1xudmFyIEdhbWVNYW4gPSByZXF1aXJlKFwiLi4vbW9kZWwvR2FtZU1hblwiKTtcbnZhciBFdmVudHNOYW1lID0gcmVxdWlyZShcIi4uL2V2ZW50cy9FdmVudHNOYW1lXCIpO1xuXG52YXIgUGFzc0NvbnRyb2xsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgQmFzZUNDQkNvbnRyb2xsZXIuY2FsbCh0aGlzKTtcbiAgICB0aGlzLl9yZXBsYXlDYWxsYmFjayA9IG51bGw7XG4gICAgdGhpcy5fbmV4dENhbGxiYWNrID0gbnVsbDtcblxuICAgIC8vdGhpcy5zcFdpbkNuID0gbnVsbDtcbiAgICAvL3RoaXMuc3BXaW5FbiA9IG51bGw7XG5cbiAgICB0aGlzLm5kV2hlZWwgPSBudWxsO1xuICAgIHRoaXMubmRDbGFpbURpYW1vbmRzID0gbnVsbDtcbiAgICB0aGlzLm5kRGlhbW9uZHMgPSBudWxsO1xuICAgIHRoaXMubGJsRGlhbW9uZFJld2FyZCA9IG51bGw7XG4gICAgdGhpcy5zcFJld2FyZERpYW1vbmRzID0gbnVsbDtcblxuICAgIHRoaXMubGJsUmV3YXJkID0gbnVsbDtcbiAgICB0aGlzLmxibFdoZWVsID0gbnVsbDtcblxuICAgIHRoaXMuc3BZZWxsb3cxID0gbnVsbDtcbiAgICB0aGlzLnNwWWVsbG93MiA9IG51bGw7XG4gICAgdGhpcy5zcFllbGxvdzMgPSBudWxsO1xuXG4gICAgdGhpcy5zcEJsYWNrMSA9IG51bGw7XG4gICAgdGhpcy5zcEJsYWNrMiA9IG51bGw7XG4gICAgdGhpcy5zcEJsYWNrMyA9IG51bGw7XG5cbiAgICB0aGlzLnNwWWVsbG93cyA9IFtdO1xuICAgIC8vdGhpcy5zcEJsYWNrcyA9IFtdO1xufTtcblxuZ2FtZS51dGlscy5pbmhlcml0cyhQYXNzQ29udHJvbGxlciwgQmFzZUNDQkNvbnRyb2xsZXIpO1xuXG5QYXNzQ29udHJvbGxlci5wcm90b3R5cGUub25FeGl0ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX3JlcGxheUNhbGxiYWNrID0gbnVsbDtcbiAgICB0aGlzLl9uZXh0Q2FsbGJhY2sgPSBudWxsO1xuICAgIGdhbWUuZXZlbnREaXNwYXRjaGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJkaWFsb2dfcG9wZWRcIiwgdGhpcy5vbkRpYWxvZ1BvcGVkLCB0aGlzKTtcbiAgICBnYW1lLmV2ZW50RGlzcGF0Y2hlci5yZW1vdmVFdmVudExpc3RlbmVyKFwiZGlhbG9nX2Nsb3NlZFwiLCB0aGlzLm9uRGlhbG9nQ2xvc2VkLCB0aGlzKTtcbiAgICB0aGlzLnJlbW92ZU5hdGl2ZUFkKCk7XG59O1xuXG5QYXNzQ29udHJvbGxlci5wcm90b3R5cGUub25FbnRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICBnYW1lLmV2ZW50RGlzcGF0Y2hlci5hZGRFdmVudExpc3RlbmVyKFwiZGlhbG9nX3BvcGVkXCIsIHRoaXMub25EaWFsb2dQb3BlZCwgdGhpcyk7XG4gICAgZ2FtZS5ldmVudERpc3BhdGNoZXIuYWRkRXZlbnRMaXN0ZW5lcihcImRpYWxvZ19jbG9zZWRcIiwgdGhpcy5vbkRpYWxvZ0Nsb3NlZCwgdGhpcyk7XG4gICAgaWYgKGdhbWUuYWRzTWFuYWdlci5zaG93VG9wQmFubmVyKSB7XG4gICAgICAgIGdhbWUuYWRzTWFuYWdlci5yZW1vdmVCYW5uZXJBZHMoXCJ0b3BcIik7XG4gICAgfVxuICAgIC8vdGhpcy5zaG93TmF0aXZlQWQoKTtcbn07XG5cblBhc3NDb250cm9sbGVyLnByb3RvdHlwZS5vbkRpYWxvZ1BvcGVkID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMudXBkYXRlTmF0aXZlQWQoKTtcbn07XG5cblBhc3NDb250cm9sbGVyLnByb3RvdHlwZS5vbkRpYWxvZ0Nsb3NlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnVwZGF0ZU5hdGl2ZUFkKCk7XG59O1xuXG5QYXNzQ29udHJvbGxlci5wcm90b3R5cGUudXBkYXRlTmF0aXZlQWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGdhbWUuZGlhbG9nTWFuYWdlci5pc1RvcGVzdERpYWxvZyh0aGlzLnJvb3ROb2RlKSkge1xuICAgICAgICB0aGlzLnNob3dOYXRpdmVBZCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmVtb3ZlTmF0aXZlQWQoKTtcbiAgICB9XG59O1xuXG5QYXNzQ29udHJvbGxlci5wcm90b3R5cGUuc2hvd05hdGl2ZUFkID0gZnVuY3Rpb24gKCkge1xuICAgIGdhbWUuYWRzTWFuYWdlci5zaG93TmF0aXZlQWQoXCJwYXNzXCIsIDAsIDApO1xufTtcblxuUGFzc0NvbnRyb2xsZXIucHJvdG90eXBlLnJlbW92ZU5hdGl2ZUFkID0gZnVuY3Rpb24gKCkge1xuICAgIGdhbWUuYWRzTWFuYWdlci5yZW1vdmVOYXRpdmVBZChcInBhc3NcIik7XG59O1xuXG5QYXNzQ29udHJvbGxlci5wcm90b3R5cGUub25EaWRMb2FkRnJvbUNDQiAgPSBmdW5jdGlvbigpIHtcbiAgICBCYXNlQ0NCQ29udHJvbGxlci5wcm90b3R5cGUub25EaWRMb2FkRnJvbUNDQi5jYWxsKHRoaXMpO1xuXG4gICAgdGhpcy5sYmxSZXdhcmQuc2V0U3RyaW5nKF8oXCJ3YXRjaF9hZHNfZ2V0X2Jvb3N0c1wiKSk7XG4gICAgdGhpcy5sYmxXaGVlbC5zZXRTdHJpbmcoXyhcImx1Y2t5X3doZWVsX3RpdGxlXCIpKTtcblxuICAgIHRoaXMuc3BZZWxsb3dzID0gW3RoaXMuc3BZZWxsb3cxLCB0aGlzLnNwWWVsbG93MiwgdGhpcy5zcFllbGxvdzNdO1xuXG4gICAgdmFyIHN0YXIgPSBHYW1lTWFuLmdldEluc3RhbmNlKCkuY3VycmVudFN0YXI7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAzOyArK2kpIHtcbiAgICAgICAgdGhpcy5zcFllbGxvd3NbaV0udmlzaWJsZSA9IChzdGFyID49IGkgKyAxKTtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgc3RhcjsgKytpKSB7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGdhbWUuYXVkaW9QbGF5ZXIucGxheUVmZmVjdEJ5S2V5KFwic3Rhcl9cIiArIChpbmRleCArIDEpKTtcbiAgICAgICAgICAgICAgICBnYW1lLmF1ZGlvUGxheWVyLnZpYnJhdGVTaG9ydCgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfShpKSwgMjUwICogKGkgKyAxKSk7XG4gICAgfVxuXG4gICAgaWYgKGdhbWUuZ2FtZU1hbi5nZXRDdXJyZW50UmV3YXJkRGlhbW9uZHMoKSA+IDApIHtcbiAgICAgICAgdGhpcy5uZENsYWltRGlhbW9uZHMudmlzaWJsZSA9IHRydWU7XG4gICAgICAgIHRoaXMubGJsRGlhbW9uZFJld2FyZC5zZXRTdHJpbmcoZ2FtZS5nYW1lTWFuLmdldEN1cnJlbnRSZXdhcmREaWFtb25kcygpKTtcbiAgICAgICAgc2V0VGltZW91dCh0aGlzLmRvQ2xhaW1EaWFtb25kcy5iaW5kKHRoaXMpLCA5MDApO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubmRDbGFpbURpYW1vbmRzLnZpc2libGUgPSBmYWxzZTtcbiAgICB9XG59O1xuXG5QYXNzQ29udHJvbGxlci5wcm90b3R5cGUuZG9DbGFpbURpYW1vbmRzID0gZnVuY3Rpb24gKCkge1xuICAgIC8vZ2FtZS5hdWRpb1BsYXllci5wbGF5RWZmZWN0QnlLZXkoXCJjb2luc19mbHlcIik7XG4gICAgdmFyIGRpYW1vbmRQb3MgPSB0aGlzLnNwUmV3YXJkRGlhbW9uZHMucGFyZW50LmNvbnZlcnRUb1dvcmxkU3BhY2UodGhpcy5zcFJld2FyZERpYW1vbmRzLmdldFBvc2l0aW9uKCkpO1xuICAgIHZhciBkaWFtbmRFbmRQb3MgPSB0aGlzLm5kRGlhbW9uZHMucGFyZW50LmNvbnZlcnRUb1dvcmxkU3BhY2UodGhpcy5uZERpYW1vbmRzLmdldFBvc2l0aW9uKCkpO1xuICAgIGdhbWUuZWZmZWN0TWFuLnBsYXlGbHlDb2lucyhkaWFtb25kUG9zLCBkaWFtbmRFbmRQb3MsIDEwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGdhbWUucGxheWVyTWFuLmFkZERpYW1vbmRzKGdhbWUuZ2FtZU1hbi5nZXRDdXJyZW50UmV3YXJkRGlhbW9uZHMoKSwgXCJwYXNzX2xldmVsXCIpO1xuICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy90aGlzLm5kQ2xhaW1EaWFtb25kcy5ydW5BY3Rpb24oY2Muc2VxdWVuY2UoY2MuZGVsYXlUaW1lKDEpLCBjYy5mYWRlT3V0KDAuMykpKTtcbiAgICB9LmJpbmQodGhpcykpO1xufTtcblxuUGFzc0NvbnRyb2xsZXIucHJvdG90eXBlLmluaXRXaXRoID0gZnVuY3Rpb24gKHJlcGxheUNhbGxiYWNrLCBuZXh0Q2FsbGJhY2spIHtcbiAgICB0aGlzLl9yZXBsYXlDYWxsYmFjayA9IHJlcGxheUNhbGxiYWNrO1xuICAgIHRoaXMuX25leHRDYWxsYmFjayA9IG5leHRDYWxsYmFjaztcbn07XG5cblBhc3NDb250cm9sbGVyLnByb3RvdHlwZS5vbkFuaW1FbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgIHZhciBzaG93ZWRSYXRlID0gR2FtZU1hbi5nZXRJbnN0YW5jZSgpLnNob3dSYXRlKCk7XG4gICAgIGlmICghc2hvd2VkUmF0ZSkge1xuICAgICAgICAgZ2FtZS5nYW1lTWFuLnRyeVNob3dQYXNzUG9wdXAoKTtcbiAgICAgfVxufTtcblxuUGFzc0NvbnRyb2xsZXIucHJvdG90eXBlLm9uVXBkYXRlRGlhbW9uZHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5sYkRpYW1vbmRzLnNldFN0cmluZyhnYW1lLnBsYXllck1hbi5nZXREaWFtb25kcygpKTtcbn07XG5cblBhc3NDb250cm9sbGVyLnByb3RvdHlwZS5uZXh0Q2xpY2tlZCA9IGZ1bmN0aW9uIChzZW5kZXIpIHtcbiAgICBnYW1lLmF1ZGlvUGxheWVyLnBsYXlFZmZlY3RCeUtleShcImVudGVyXCIpO1xuICAgIEdhbWVNYW4uZ2V0SW5zdGFuY2UoKS5zaG93QWRzKHRydWUpO1xuICAgIGlmICh0aGlzLl9uZXh0Q2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5fbmV4dENhbGxiYWNrKCk7XG4gICAgfVxuICAgIEdhbWVNYW4uZ2V0SW5zdGFuY2UoKS5zaG93UmVnaXN0ZXJOb3RpZmljYXRpb24oKTtcbiAgICB0aGlzLmNsb3NlKCk7XG59O1xuXG5QYXNzQ29udHJvbGxlci5wcm90b3R5cGUucmVzdGFydENsaWNrZWQgPSBmdW5jdGlvbiAoc2VuZGVyKSB7XG4gICAgZ2FtZS5hdWRpb1BsYXllci5wbGF5RWZmZWN0QnlLZXkoXCJlbnRlclwiKTtcbiAgICBHYW1lTWFuLmdldEluc3RhbmNlKCkuc2hvd0Fkcyh0cnVlKTtcbiAgICBpZiAodGhpcy5fcmVwbGF5Q2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5fcmVwbGF5Q2FsbGJhY2soKTtcbiAgICB9XG4gICAgdGhpcy5jbG9zZSgpO1xufTtcblxuUGFzc0NvbnRyb2xsZXIucHJvdG90eXBlLmhvbWVDbGlja2VkID0gZnVuY3Rpb24gKHNlbmRlcikge1xuICAgIGdhbWUuYXVkaW9QbGF5ZXIucGxheUVmZmVjdEJ5S2V5KFwiZW50ZXJcIik7XG4gICAgR2FtZU1hbi5nZXRJbnN0YW5jZSgpLnNob3dBZHModHJ1ZSk7XG4gICAgZ2FtZS5zY2VuZU1hbi5zd2l0Y2hTY2VuZShnYW1lLnNjZW5lVHlwZS5NRU5VKTtcbn07XG5cblBhc3NDb250cm9sbGVyLnByb3RvdHlwZS53YXRjaEFkc0NsaWNrZWQgPSBmdW5jdGlvbiAoc2VuZGVyKSB7XG4gICAgZ2FtZS5hdWRpb1BsYXllci5wbGF5RWZmZWN0QnlLZXkoXCJlbnRlclwiKTtcbiAgICB2YXIgU3RvcmVIZWxwZXIgPSByZXF1aXJlKFwiLi4vbW9kZWwvU3RvcmVIZWxwZXJcIik7XG4gICAgU3RvcmVIZWxwZXIuZ2V0SW5zdGFuY2UoKS5jaGVja0FuZFNob3dSZXdhcmRWaWRlbyhnYW1lLnV0aWxzLmlzSU9TKCkgPyBcIndpbmdpZnRcIiA6IFwiamlsaTA1XCIsIG51bGwsIFwiV2luQW5kV2F0Y2hEaWFtb25kc0Fkc1wiKTtcbn07XG5cblBhc3NDb250cm9sbGVyLnByb3RvdHlwZS53aGVlbENsaWNrZWQgPSBmdW5jdGlvbiAoc2VuZGVyKSB7XG4gICAgQXVkaW9IZWxwZXIucGxheUJ0blNvdW5kKCk7XG4gICAgdmFyIFdoZWVsVHlwZSA9IHJlcXVpcmUoXCIuLi9lbnVtL1doZWVsVHlwZVwiKTtcbiAgICBnYW1lLnBvcHVwTWFuLnBvcHVwV2hlZWxEbGcoV2hlZWxUeXBlLkRhaWx5Qm9udXMpO1xufTtcblxuUGFzc0NvbnRyb2xsZXIucHJvdG90eXBlLnBvcHVwID0gZnVuY3Rpb24gKCkge1xuICAgIGdhbWUuZGlhbG9nTWFuYWdlci5wb3B1cCh0aGlzLnJvb3ROb2RlKTtcbn07XG5cblBhc3NDb250cm9sbGVyLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBnYW1lLmRpYWxvZ01hbmFnZXIuY2xvc2UodGhpcy5yb290Tm9kZSk7XG59O1xuXG5QYXNzQ29udHJvbGxlci5jcmVhdGVGcm9tQ0NCID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG5vZGUgPSBnYW1lLnV0aWxzLmxvYWROb2RlRnJvbUNDQihcInJlcy9ub3RpY2UvcGFzc192aWV3LmNjYmlcIiwgbnVsbCwgXCJQYXNzQ29udHJvbGxlclwiLCBuZXcgUGFzc0NvbnRyb2xsZXIoKSk7XG4gICAgcmV0dXJuIG5vZGU7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBhc3NDb250cm9sbGVyOyIsIi8qKlxuICogQ3JlYXRlZCBieSBxaW5uaW5nIG9uIDIwMTcvMTIvMTUuXG4gKi9cbnZhciBBZHNQbGFjZSA9IHJlcXVpcmUoXCIuLi8uLi9jb21tb24vZW51bS9BZHNQbGFjZVwiKTtcbnZhciBEaWFtb25kc0NvbnRyb2xsZXIgPSByZXF1aXJlKFwiLi4vY29udHJvbGxlci9EaWFtb25kc0NvbnRyb2xsZXJcIik7XG52YXIgQWRzUmVtaW5kZXJDb250cm9sbGVyID0gcmVxdWlyZShcIi4uL2NvbnRyb2xsZXIvQWRzUmVtaW5kZXJDb250cm9sbGVyXCIpO1xuXG52YXIgUGF1c2VDb250cm9sbGVyID0gZnVuY3Rpb24gKCkge1xuICAgIEJhc2VDQ0JDb250cm9sbGVyLmNhbGwodGhpcyk7XG4gICAgdGhpcy5sYmxSZXdhcmQgPSBudWxsO1xuXG4gICAgdGhpcy5uZEFkUmVtaW5kZXIgPSBudWxsO1xuICAgIHRoaXMubmREaWFtb25kcyA9IG51bGw7XG5cbiAgICB0aGlzLl9yZXBsYXlDYWxsYmFjayA9IG51bGw7XG4gICAgdGhpcy5fbmV4dENhbGxiYWNrID0gbnVsbDtcbn07XG5cbmdhbWUudXRpbHMuaW5oZXJpdHMoUGF1c2VDb250cm9sbGVyLCBCYXNlQ0NCQ29udHJvbGxlcik7XG5cblBhdXNlQ29udHJvbGxlci5wcm90b3R5cGUub25FeGl0ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX3Jlc3VtZUNhbGxiYWNrID0gbnVsbDtcbiAgICBnYW1lLmV2ZW50RGlzcGF0Y2hlci5yZW1vdmVFdmVudExpc3RlbmVyKFwiZGlhbG9nX3BvcGVkXCIsIHRoaXMub25EaWFsb2dQb3BlZCwgdGhpcyk7XG4gICAgZ2FtZS5ldmVudERpc3BhdGNoZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImRpYWxvZ19jbG9zZWRcIiwgdGhpcy5vbkRpYWxvZ0Nsb3NlZCwgdGhpcyk7XG4gICAgdGhpcy5yZW1vdmVOYXRpdmVBZCgpO1xufTtcblxuUGF1c2VDb250cm9sbGVyLnByb3RvdHlwZS5vbkVudGVyID0gZnVuY3Rpb24gKCkge1xuICAgIGdhbWUuZXZlbnREaXNwYXRjaGVyLmFkZEV2ZW50TGlzdGVuZXIoXCJkaWFsb2dfcG9wZWRcIiwgdGhpcy5vbkRpYWxvZ1BvcGVkLCB0aGlzKTtcbiAgICBnYW1lLmV2ZW50RGlzcGF0Y2hlci5hZGRFdmVudExpc3RlbmVyKFwiZGlhbG9nX2Nsb3NlZFwiLCB0aGlzLm9uRGlhbG9nQ2xvc2VkLCB0aGlzKTtcbiAgICAvL3RoaXMuc2hvd05hdGl2ZUFkKCk7XG59O1xuXG5QYXVzZUNvbnRyb2xsZXIucHJvdG90eXBlLm9uRGlhbG9nUG9wZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy51cGRhdGVOYXRpdmVBZCgpO1xufTtcblxuUGF1c2VDb250cm9sbGVyLnByb3RvdHlwZS5vbkRpYWxvZ0Nsb3NlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnVwZGF0ZU5hdGl2ZUFkKCk7XG59O1xuXG5QYXVzZUNvbnRyb2xsZXIucHJvdG90eXBlLnVwZGF0ZU5hdGl2ZUFkID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChnYW1lLmRpYWxvZ01hbmFnZXIuaXNUb3Blc3REaWFsb2codGhpcy5yb290Tm9kZSkpIHtcbiAgICAgICAgdGhpcy5zaG93TmF0aXZlQWQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnJlbW92ZU5hdGl2ZUFkKCk7XG4gICAgfVxufTtcblxuUGF1c2VDb250cm9sbGVyLnByb3RvdHlwZS5zaG93TmF0aXZlQWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgZ2FtZS5hZHNNYW5hZ2VyLnNob3dOYXRpdmVBZChcInBhdXNlXCIsIDAsIDk5KTtcbn07XG5cblBhdXNlQ29udHJvbGxlci5wcm90b3R5cGUucmVtb3ZlTmF0aXZlQWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgZ2FtZS5hZHNNYW5hZ2VyLnJlbW92ZU5hdGl2ZUFkKFwicGF1c2VcIik7XG59O1xuXG5QYXVzZUNvbnRyb2xsZXIucHJvdG90eXBlLm9uRGlkTG9hZEZyb21DQ0IgID0gZnVuY3Rpb24oKSB7XG4gICAgQmFzZUNDQkNvbnRyb2xsZXIucHJvdG90eXBlLm9uRGlkTG9hZEZyb21DQ0IuY2FsbCh0aGlzKTtcbiAgICB0aGlzLmxibFJld2FyZC5zZXRTdHJpbmcoXyhcIndhdGNoX2Fkc19nZXRfYm9vc3RzXCIpKTtcbiAgICB0aGlzLm5kQWRSZW1pbmRlci5hZGRDaGlsZChBZHNSZW1pbmRlckNvbnRyb2xsZXIuY3JlYXRlRnJvbUNDQigpKTtcbiAgICB0aGlzLm5kRGlhbW9uZHMuYWRkQ2hpbGQoRGlhbW9uZHNDb250cm9sbGVyLmNyZWF0ZUZyb21DQ0IoKSk7XG59O1xuXG5QYXVzZUNvbnRyb2xsZXIucHJvdG90eXBlLmluaXRXaXRoID0gZnVuY3Rpb24gKHJlc3VtZUNhbGxiYWNrKSB7XG4gICAgdGhpcy5fcmVzdW1lQ2FsbGJhY2sgPSByZXN1bWVDYWxsYmFjaztcbn07XG5cblBhdXNlQ29udHJvbGxlci5wcm90b3R5cGUucmVzdW1lQ2xpY2tlZCA9IGZ1bmN0aW9uIChzZW5kZXIpIHtcbiAgICBnYW1lLmF1ZGlvUGxheWVyLnBsYXlFZmZlY3RCeUtleShcImVudGVyXCIpO1xuICAgIGlmICh0aGlzLl9yZXN1bWVDYWxsYmFjaykge1xuICAgICAgICB0aGlzLl9yZXN1bWVDYWxsYmFjaygpO1xuICAgIH1cbiAgICB0aGlzLmNsb3NlKCk7XG59O1xuXG5QYXVzZUNvbnRyb2xsZXIucHJvdG90eXBlLmhvbWVDbGlja2VkID0gZnVuY3Rpb24gKHNlbmRlcikge1xuICAgIGdhbWUuYXVkaW9QbGF5ZXIucGxheUVmZmVjdEJ5S2V5KFwiZW50ZXJcIik7XG4gICAgZ2FtZS5hbmFseXNlTWFuYWdlci50cmFja0V2ZW50KFwiUGF1c2VIb21lXCIpO1xuICAgIGdhbWUucG9wdXBNYW4ucG9wdXBZZXNOb0NvbW1vbkRsZyhfKFwiZXhpdF9nYW1lX2NvbmZpcm1cIiksIF8oXCJ5ZXNfdGl0bGVcIiksIF8oXCJub190aXRsZVwiKSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBnYW1lLnNjZW5lTWFuLnN3aXRjaFNjZW5lKGdhbWUuc2NlbmVUeXBlLk1FTlUpO1xuICAgICAgICBpZiAoZ2FtZS5wbGF5ZXJNYW4uZ2V0TGV2ZWwoKSA+PSA0KSB7XG4gICAgICAgICAgICBnYW1lLmFkc01hbmFnZXIuc2hvd0ludGVyc3RpdGlhbChBZHNQbGFjZS5Ib21lKTtcbiAgICAgICAgfVxuICAgIH0pO1xufTtcblxuUGF1c2VDb250cm9sbGVyLnByb3RvdHlwZS5yZXN0YXJ0Q2xpY2tlZCA9IGZ1bmN0aW9uIChzZW5kZXIpIHtcbiAgICBnYW1lLmF1ZGlvUGxheWVyLnBsYXlFZmZlY3RCeUtleShcImVudGVyXCIpO1xuICAgIGdhbWUuZ2FtZU1hbi5hZGRGYWlsQ291bnQoKTtcbiAgICBnYW1lLnNjZW5lTWFuLnN3aXRjaFNjZW5lKGdhbWUuc2NlbmVUeXBlLkdBTUUpO1xuICAgIGdhbWUuYWRzTWFuYWdlci5zaG93SW50ZXJzdGl0aWFsKEFkc1BsYWNlLlJlZnJlc2gpO1xuICAgIGdhbWUuYW5hbHlzZU1hbmFnZXIudHJhY2tFdmVudChcIlBhdXNlUmV0cnlcIik7XG59O1xuXG5QYXVzZUNvbnRyb2xsZXIucHJvdG90eXBlLndhdGNoQWRzQ2xpY2tlZCA9IGZ1bmN0aW9uIChzZW5kZXIpIHtcbiAgICBnYW1lLmF1ZGlvUGxheWVyLnBsYXlFZmZlY3RCeUtleShcImVudGVyXCIpO1xuICAgIHZhciBTdG9yZUhlbHBlciA9IHJlcXVpcmUoXCIuLi9tb2RlbC9TdG9yZUhlbHBlclwiKTtcbiAgICBTdG9yZUhlbHBlci5nZXRJbnN0YW5jZSgpLmNoZWNrQW5kU2hvd1Jld2FyZFZpZGVvKGdhbWUudXRpbHMuaXNJT1MoKSA/IFwicGF1c2VcIiA6IFwicGF1c2VcIik7XG59O1xuXG5QYXVzZUNvbnRyb2xsZXIucHJvdG90eXBlLnBvcHVwID0gZnVuY3Rpb24gKCkge1xuICAgIGdhbWUuZGlhbG9nTWFuYWdlci5wb3B1cCh0aGlzLnJvb3ROb2RlKTtcbn07XG5cblBhdXNlQ29udHJvbGxlci5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgZ2FtZS5kaWFsb2dNYW5hZ2VyLmNsb3NlKHRoaXMucm9vdE5vZGUpO1xufTtcblxuUGF1c2VDb250cm9sbGVyLmNyZWF0ZUZyb21DQ0IgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbm9kZSA9IGdhbWUudXRpbHMubG9hZE5vZGVGcm9tQ0NCKFwicmVzL25vdGljZS9wYXVzZV92aWV3LmNjYmlcIiwgbnVsbCwgXCJQYXVzZUNvbnRyb2xsZXJcIiwgbmV3IFBhdXNlQ29udHJvbGxlcigpKTtcbiAgICByZXR1cm4gbm9kZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUGF1c2VDb250cm9sbGVyOyIsIi8vdmFyIFNraW5JdGVtQ29udHJvbGxlciA9IHJlcXVpcmUoXCIuL1NraW5JdGVtQ29udHJvbGxlclwiKTtcbi8vdmFyIENvbmZpZ01hbiA9IHJlcXVpcmUoXCIuLi9jb25maWcvQ29uZmlnTWFuXCIpO1xuLy92YXIgRXZlbnRzTmFtZSA9IHJlcXVpcmUoXCIuLi9ldmVudHMvRXZlbnRzTmFtZVwiKTtcbi8vXG4vL3ZhciBHUklEX1NJWkUgPSBjYy5zaXplKDM1MCwgNTAwKTtcbi8vXG4vL3ZhciBTdG9yZUl0ZW1DZWxsVmlldyA9IGNjLlRhYmxlVmlld0NlbGwuZXh0ZW5kKHtcbi8vICAgIGVudGl0eTogbnVsbCxcbi8vICAgIGl0ZW1Ob2RlOiBudWxsLFxuLy8gICAgY3RvcjogZnVuY3Rpb24gKCkge1xuLy8gICAgICAgIHRoaXMuX3N1cGVyKCk7XG4vLyAgICAgICAgdGhpcy5pdGVtTm9kZSA9IFNraW5JdGVtQ29udHJvbGxlci5jcmVhdGVGcm9tQ0NCKCk7XG4vLyAgICAgICAgdGhpcy5hZGRDaGlsZCh0aGlzLml0ZW1Ob2RlKTtcbi8vICAgICAgICB0aGlzLml0ZW1Ob2RlLnNldFBvc2l0aW9uKGNjLnAoR1JJRF9TSVpFLndpZHRoICogMC41LCBHUklEX1NJWkUuaGVpZ2h0ICogMC41KSk7XG4vLyAgICB9LFxuLy9cbi8vICAgIGluaXRXaXRoOiBmdW5jdGlvbiAoZW50aXR5LCBpZHgsIGluaXRlZCkge1xuLy8gICAgICAgIHRoaXMuZW50aXR5ID0gZW50aXR5O1xuLy8gICAgICAgIHRoaXMuaXRlbU5vZGUuY29udHJvbGxlci5pbml0V2l0aChlbnRpdHksIGlkeCk7XG4vLyAgICB9XG4vL30pO1xudmFyIFJhbmtUeXBlID0gcmVxdWlyZShcIi4uL2VudW0vUmFua1R5cGVcIik7XG5cbnZhciBSYW5rQ29udHJvbGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICBCYXNlQ0NCQ29udHJvbGxlci5jYWxsKHRoaXMpO1xuICAgIHRoaXMubmRDb250YWluZXIgPSBudWxsO1xuICAgIHRoaXMubGJsVGl0bGUgPSBudWxsO1xuXG4gICAgdGhpcy5yYW5rVHlwZSA9IDA7XG5cbiAgICB0aGlzLnVwZGF0ZUNvdW50ID0gMDtcbn07XG5cbmdhbWUudXRpbHMuaW5oZXJpdHMoUmFua0NvbnRyb2xsZXIsIEJhc2VDQ0JDb250cm9sbGVyKTtcblxuUmFua0NvbnRyb2xsZXIucHJvdG90eXBlLm9uRW50ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgQmFzZUNDQkNvbnRyb2xsZXIucHJvdG90eXBlLm9uRW50ZXIuY2FsbCh0aGlzKTtcbiAgICAvL3RoaXMucm9vdE5vZGUuc2NoZWR1bGUodGhpcy5vblVwZGF0ZS5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLmludGVydmFsS2V5ID0gc2V0SW50ZXJ2YWwodGhpcy5vblVwZGF0ZS5iaW5kKHRoaXMpLCA1MDApO1xufTtcblxuUmFua0NvbnRyb2xsZXIucHJvdG90eXBlLm9uRXhpdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAvL3RoaXMucm9vdE5vZGUudW5zY2hlZHVsZSh0aGlzLm9uVXBkYXRlLmJpbmQodGhpcykpO1xuICAgIGNsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbEtleSk7XG4gICAgaWYgKHRoaXMuY2xvc2VDYWxsYmFjaykge1xuICAgICAgICB0aGlzLmNsb3NlQ2FsbGJhY2soKTtcbiAgICB9XG4gICAgdGhpcy5jbG9zZUNhbGxiYWNrID0gbnVsbDtcbiAgICBCYXNlQ0NCQ29udHJvbGxlci5wcm90b3R5cGUub25FeGl0LmNhbGwodGhpcyk7XG59O1xuXG5SYW5rQ29udHJvbGxlci5wcm90b3R5cGUub25EaWRMb2FkRnJvbUNDQiAgPSBmdW5jdGlvbigpIHtcbiAgICBCYXNlQ0NCQ29udHJvbGxlci5wcm90b3R5cGUub25EaWRMb2FkRnJvbUNDQi5jYWxsKHRoaXMpO1xuICAgIC8vLy9vbmV3eC5zb2NpYWwubG9hZFNoYXJlQ2FudmFzKHRoaXMubmRDb250YWluZXIpO1xuICAgIC8vdGhpcy5vblVwZGF0ZSgwKTtcbn07XG5cblJhbmtDb250cm9sbGVyLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKHJhbmtUeXBlLCBjbG9zZUNhbGxiYWNrKSB7XG4gICAgdGhpcy5yYW5rVHlwZSA9IHJhbmtUeXBlO1xuICAgIHRoaXMuY2xvc2VDYWxsYmFjayA9IGNsb3NlQ2FsbGJhY2s7XG4gICAgaWYgKHJhbmtUeXBlID09PSBSYW5rVHlwZS5GcmllbmRzKSB7XG4gICAgICAgIHRoaXMubGJsVGl0bGUuc2V0U3RyaW5nKGdhbWUubG9jYWwuZ2V0VmFsdWUoXCJmcmllbmRzX3JhbmtfdGl0bGVcIikpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubGJsVGl0bGUuc2V0U3RyaW5nKGdhbWUubG9jYWwuZ2V0VmFsdWUoXCJncm91cF9yYW5rX3RpdGxlXCIpKTtcbiAgICB9XG4gICAgaWYgKHRoaXMucmFua1R5cGUgPT09IFJhbmtUeXBlLkZyaWVuZHMpIHtcbiAgICAgICAgb25ld3guc29jaWFsLmluaXRGcmllbmQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBvbmV3eC5zb2NpYWwuaW5pdEdyb3VwKCk7XG4gICAgfVxuICAgIHRoaXMucmVmcmVzaFJhbmsoKTtcbn07XG5cblJhbmtDb250cm9sbGVyLnByb3RvdHlwZS5yZWZyZXNoUmFuayA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnVwZGF0ZUNvdW50ID0gMDtcbiAgICB0aGlzLm9uVXBkYXRlKDApO1xufTtcblxuUmFua0NvbnRyb2xsZXIucHJvdG90eXBlLm9uVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLnVwZGF0ZUNvdW50IDw9IDEwKSB7XG4gICAgICAgIG9uZXd4LnNvY2lhbC5sb2FkU2hhcmVDYW52YXModGhpcy5uZENvbnRhaW5lcik7XG4gICAgICAgIHRoaXMudXBkYXRlQ291bnQrKztcbiAgICB9XG59O1xuXG5SYW5rQ29udHJvbGxlci5wcm90b3R5cGUucHJldkNsaWNrZWQgPSBmdW5jdGlvbiAoc2VuZGVyKSB7XG4gICAgQXVkaW9IZWxwZXIucGxheUJ0blNvdW5kKCk7XG4gICAgb25ld3guc29jaWFsLm9uUGFnZUNoYW5nZSh0aGlzLm5kQ29udGFpbmVyLCAtMSk7XG4gICAgdGhpcy5yZWZyZXNoUmFuaygpO1xufTtcblxuUmFua0NvbnRyb2xsZXIucHJvdG90eXBlLm5leHRDbGlja2VkID0gZnVuY3Rpb24gKHNlbmRlcikge1xuICAgIEF1ZGlvSGVscGVyLnBsYXlCdG5Tb3VuZCgpO1xuICAgIG9uZXd4LnNvY2lhbC5vblBhZ2VDaGFuZ2UodGhpcy5uZENvbnRhaW5lciwgMSk7XG4gICAgdGhpcy5yZWZyZXNoUmFuaygpO1xufTtcblxuUmFua0NvbnRyb2xsZXIucHJvdG90eXBlLmJhY2tDbGlja2VkID0gZnVuY3Rpb24gKHNlbmRlcikge1xuICAgIEF1ZGlvSGVscGVyLnBsYXlCdG5Tb3VuZCgpO1xuXG4gICAgdGhpcy5jbG9zZSgpO1xufTtcblxuUmFua0NvbnRyb2xsZXIucHJvdG90eXBlLmNoYWxsZW5nZUNsaWNrZWQgPSBmdW5jdGlvbiAoc2VuZGVyKSB7XG4gICAgQXVkaW9IZWxwZXIucGxheUJ0blNvdW5kKCk7XG4gICAgZ2FtZS5zY2VuZU1hbi5zd2l0Y2hTY2VuZShnYW1lLnNjZW5lVHlwZS5HQU1FKTtcbn07XG5cblJhbmtDb250cm9sbGVyLnByb3RvdHlwZS5wb3B1cCA9IGZ1bmN0aW9uICgpIHtcbiAgICBnYW1lLmRpYWxvZ01hbmFnZXIucG9wdXAodGhpcy5yb290Tm9kZSk7XG59O1xuXG5SYW5rQ29udHJvbGxlci5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgZ2FtZS5kaWFsb2dNYW5hZ2VyLmNsb3NlKHRoaXMucm9vdE5vZGUpO1xufTtcblxuUmFua0NvbnRyb2xsZXIuY3JlYXRlRnJvbUNDQiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBub2RlID0gZ2FtZS51dGlscy5sb2FkTm9kZUZyb21DQ0IoXCJyZXMvbWVudS9yYW5rX3ZpZXcuY2NiaVwiLCBudWxsLCBcIlJhbmtDb250cm9sbGVyXCIsIG5ldyBSYW5rQ29udHJvbGxlcigpKTtcbiAgICByZXR1cm4gbm9kZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmFua0NvbnRyb2xsZXI7IiwidmFyIFN0b3JlSGVscGVyID0gcmVxdWlyZShcIi4uL21vZGVsL1N0b3JlSGVscGVyXCIpO1xuXG52YXIgUmVsaXZlQ29udHJvbGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICBCYXNlQ0NCQ29udHJvbGxlci5jYWxsKHRoaXMpO1xuXG4gICAgdGhpcy5sYkNvc3REaWFtb25kcyA9IG51bGw7XG5cbiAgICB0aGlzLl9yZWxpdmVDYWxsYmFjayA9IG51bGw7XG4gICAgdGhpcy5fY2FuY2VsQ2FsbGJhY2sgPSBudWxsO1xufTtcblxuZ2FtZS51dGlscy5pbmhlcml0cyhSZWxpdmVDb250cm9sbGVyLCBCYXNlQ0NCQ29udHJvbGxlcik7XG5cblJlbGl2ZUNvbnRyb2xsZXIucHJvdG90eXBlLm9uRXhpdCA9IGZ1bmN0aW9uICgpIHtcbiAgICBCYXNlQ0NCQ29udHJvbGxlci5wcm90b3R5cGUub25FeGl0LmNhbGwodGhpcyk7XG4gICAgdGhpcy5fcmVsaXZlQ2FsbGJhY2sgPSBudWxsO1xuICAgIHRoaXMuX2NhbmNlbENhbGxiYWNrID0gbnVsbDtcbn07XG5cblJlbGl2ZUNvbnRyb2xsZXIucHJvdG90eXBlLm9uRGlkTG9hZEZyb21DQ0IgID0gZnVuY3Rpb24oKSB7XG4gICAgQmFzZUNDQkNvbnRyb2xsZXIucHJvdG90eXBlLm9uRGlkTG9hZEZyb21DQ0IuY2FsbCh0aGlzKTtcblxuICAgIHRoaXMubGJDb3N0RGlhbW9uZHMuc2V0U3RyaW5nKFwieFwiICsgZ2FtZS5jb25maWcucmVsaWZlRGlhbW9uZHMpO1xufTtcblxuUmVsaXZlQ29udHJvbGxlci5wcm90b3R5cGUud2F0Y2hBZHNDbGlja2VkID0gZnVuY3Rpb24gKHNlbmRlcikge1xuICAgIGdhbWUuYXVkaW9QbGF5ZXIucGxheUVmZmVjdEJ5S2V5KFwiZW50ZXJcIik7XG4gICAgdmFyIFN0b3JlSGVscGVyID0gcmVxdWlyZShcIi4uL21vZGVsL1N0b3JlSGVscGVyXCIpO1xuICAgIFN0b3JlSGVscGVyLmdldEluc3RhbmNlKCkuY2hlY2tBbmRTaG93UmV3YXJkVmlkZW8oZ2FtZS51dGlscy5pc0lPUygpID8gXCJyZWxpdmVcIiA6IFwicmVsaXZlXCIpO1xufTtcblxuUmVsaXZlQ29udHJvbGxlci5wcm90b3R5cGUucmVsaXZlQ2xpY2tlZCA9IGZ1bmN0aW9uIChzZW5kZXIpIHtcbiAgICBBdWRpb0hlbHBlci5wbGF5QnRuU291bmQoKTtcbiAgICBpZiAoU3RvcmVIZWxwZXIuZ2V0SW5zdGFuY2UoKS5yZWxpdmVMZXZlbChnYW1lLmdhbWVNYW4ubGV2ZWxJZCkpIHtcbiAgICAgICAgaWYgKHRoaXMuX3JlbGl2ZUNhbGxiYWNrKSB7XG4gICAgICAgICAgICB0aGlzLl9yZWxpdmVDYWxsYmFjaygpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICB9XG59O1xuXG5SZWxpdmVDb250cm9sbGVyLnByb3RvdHlwZS5jbG9zZUNsaWNrZWQgPSBmdW5jdGlvbiAoc2VuZGVyKSB7XG4gICAgQXVkaW9IZWxwZXIucGxheUJ0blNvdW5kKCk7XG4gICAgaWYgKHRoaXMuX2NhbmNlbENhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuX2NhbmNlbENhbGxiYWNrKCk7XG4gICAgfVxuICAgIHRoaXMuY2xvc2UoKTtcbn07XG5cblJlbGl2ZUNvbnRyb2xsZXIucHJvdG90eXBlLmluaXRXaXRoID0gZnVuY3Rpb24gKHJlbGl2ZUNhbGxiYWNrLCBjYW5jZWxDYWxsYmFjaykge1xuICAgIHRoaXMuX3JlbGl2ZUNhbGxiYWNrID0gcmVsaXZlQ2FsbGJhY2s7XG4gICAgdGhpcy5fY2FuY2VsQ2FsbGJhY2sgPSBjYW5jZWxDYWxsYmFjaztcbn07XG5cblJlbGl2ZUNvbnRyb2xsZXIucHJvdG90eXBlLnBvcHVwID0gZnVuY3Rpb24gKCkge1xuICAgIGdhbWUuZGlhbG9nTWFuYWdlci5wb3B1cCh0aGlzLnJvb3ROb2RlLCB7cG9wdXBBbmltOiB0cnVlfSk7XG59O1xuXG5SZWxpdmVDb250cm9sbGVyLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBnYW1lLmRpYWxvZ01hbmFnZXIuY2xvc2UodGhpcy5yb290Tm9kZSk7XG59O1xuXG5SZWxpdmVDb250cm9sbGVyLmNyZWF0ZUZyb21DQ0IgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbm9kZSA9IGdhbWUudXRpbHMubG9hZE5vZGVGcm9tQ0NCKFwicmVzL25vdGljZS9yZWxpZmVfdmlldy5jY2JpXCIsIG51bGwsIFwiUmVsaXZlQ29udHJvbGxlclwiLCBuZXcgUmVsaXZlQ29udHJvbGxlcigpKTtcbiAgICByZXR1cm4gbm9kZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVsaXZlQ29udHJvbGxlcjsiLCJ2YXIgU3RvcmVIZWxwZXIgPSByZXF1aXJlKFwiLi4vbW9kZWwvU3RvcmVIZWxwZXJcIik7XG5cbnZhciBSZXdhcmREb3VibGVDb250cm9sbGVyID0gZnVuY3Rpb24gKCkge1xuICAgIEJhc2VDQ0JDb250cm9sbGVyLmNhbGwodGhpcyk7XG5cbiAgICB0aGlzLl90aXRsZUxhYmVsID0gbnVsbDtcblxuICAgIHRoaXMubGJSZXdhcmQgPSBudWxsO1xuICAgIHRoaXMuc3BSZXdhcmQgPSBudWxsO1xuICAgIHRoaXMuc3BSZXdhcmRCZyA9IG51bGw7XG5cbiAgICAvL3RoaXMuYnRuQ2xvc2VDbiA9IG51bGw7XG4gICAgLy90aGlzLmJ0bkNsb3NlRW4gPSBudWxsO1xuXG4gICAgdGhpcy5sYkRvdWJsZSA9IG51bGw7XG5cbiAgICB0aGlzLmNsb3NlQ2FsbGJhY2sgPSBudWxsO1xuXG4gICAgdGhpcy5kb3VibGVkID0gZmFsc2U7XG4gICAgdGhpcy5yZXdhcmROYW1lID0gXCJcIjtcbn07XG5cbmdhbWUudXRpbHMuaW5oZXJpdHMoUmV3YXJkRG91YmxlQ29udHJvbGxlciwgQmFzZUNDQkNvbnRyb2xsZXIpO1xuXG5SZXdhcmREb3VibGVDb250cm9sbGVyLnByb3RvdHlwZS5vbkRpZExvYWRGcm9tQ0NCICA9IGZ1bmN0aW9uKCkge1xuICAgIEJhc2VDQ0JDb250cm9sbGVyLnByb3RvdHlwZS5vbkRpZExvYWRGcm9tQ0NCLmNhbGwodGhpcyk7XG4gICAgLy90aGlzLmJ0bkNsb3NlQ24udmlzaWJsZSA9IGZhbHNlO1xuICAgIC8vdGhpcy5idG5DbG9zZUVuLnZpc2libGUgPSBmYWxzZTtcbiAgICAvL3RoaXMuc3BUaXRsZUNuLnZpc2libGUgPSBmYWxzZTtcbiAgICAvL3RoaXMuc3BUaXRsZUVuLnZpc2libGUgPSBmYWxzZTtcbiAgICAvL2lmIChnYW1lLmxvY2FsLmlzQ2hpbmVzZSgpKSB7XG4gICAgLy8gICAgdGhpcy5idG5DbG9zZUNuLnZpc2libGUgPSB0cnVlO1xuICAgIC8vICAgIC8vdGhpcy5zcFRpdGxlQ24udmlzaWJsZSA9IHRydWU7XG4gICAgLy99IGVsc2Uge1xuICAgIC8vICAgIHRoaXMuYnRuQ2xvc2VFbi52aXNpYmxlID0gdHJ1ZTtcbiAgICAvLyAgICAvL3RoaXMuc3BUaXRsZUVuLnZpc2libGUgPSB0cnVlO1xuICAgIC8vfVxuICAgIHRoaXMubGJEb3VibGUuc2V0U3RyaW5nKF8oXCJkb3VibGVfcmV3YXJkc1wiKSk7XG5cbiAgICBnYW1lLmF1ZGlvUGxheWVyLnBsYXlFZmZlY3RCeUtleShcImdldF9kaWFtb25kc1wiKTtcbn07XG5cblJld2FyZERvdWJsZUNvbnRyb2xsZXIucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoaW1hZ2UsIGNvdW50LCByZXdhcmROYW1lLCBjbG9zZUNhbGxiYWNrKSB7XG4gICAgY29uc29sZS5sb2coXCJSZXdhcmREb3VibGVDb250cm9sbGVyLnByb3RvdHlwZS5pbml0XCIpO1xuICAgIHRoaXMuc3BSZXdhcmQuc2V0U3ByaXRlRnJhbWUoaW1hZ2UpO1xuICAgIHRoaXMubGJSZXdhcmQuc2V0U3RyaW5nKFwiWFwiICsgY291bnQpO1xuICAgIHRoaXMuY2xvc2VDYWxsYmFjayA9IGNsb3NlQ2FsbGJhY2s7XG4gICAgdGhpcy5yZXdhcmROYW1lID0gcmV3YXJkTmFtZTtcblxuICAgIHRoaXMuc3BSZXdhcmRCZy5ydW5BY3Rpb24oY2Mucm90YXRlQnkoMiwgMzYwKS5yZXBlYXRGb3JldmVyKCkpO1xufTtcblxuUmV3YXJkRG91YmxlQ29udHJvbGxlci5wcm90b3R5cGUuY2xvc2VDbGlja2VkID0gZnVuY3Rpb24gKHNlbmRlcikge1xuICAgIEF1ZGlvSGVscGVyLnBsYXlCdG5Tb3VuZCgpO1xuICAgIHRoaXMuY2xvc2UoKTtcbn07XG5cblJld2FyZERvdWJsZUNvbnRyb2xsZXIucHJvdG90eXBlLndhdGNoQWRzQ2xpY2tlZCA9IGZ1bmN0aW9uIChzZW5kZXIpIHtcbiAgICBBdWRpb0hlbHBlci5wbGF5QnRuU291bmQoKTtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgU3RvcmVIZWxwZXIuZ2V0SW5zdGFuY2UoKS5jaGVja0FuZFNob3dSZXdhcmRWaWRlbyh0aGlzLnJld2FyZE5hbWUsIGZ1bmN0aW9uIChyZXdhcmRlZCkge1xuICAgICAgICBpZiAocmV3YXJkZWQpIHtcbiAgICAgICAgICAgIHNlbGYuZG91YmxlZCA9IHRydWU7XG4gICAgICAgICAgICBzZWxmLmNsb3NlKCk7XG4gICAgICAgIH1cbiAgICB9KTtcbn07XG5cblJld2FyZERvdWJsZUNvbnRyb2xsZXIucHJvdG90eXBlLnBvcHVwID0gZnVuY3Rpb24gKCkge1xuICAgIGdhbWUuZGlhbG9nTWFuYWdlci5wb3B1cCh0aGlzLnJvb3ROb2RlLCB7b3ZlcmxheU9wYWNpdHk6IDIxMH0pO1xufTtcblxuUmV3YXJkRG91YmxlQ29udHJvbGxlci5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgZ2FtZS5kaWFsb2dNYW5hZ2VyLmNsb3NlKHRoaXMucm9vdE5vZGUpO1xuICAgIGlmICh0aGlzLmNsb3NlQ2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5jbG9zZUNhbGxiYWNrKHRoaXMuZG91YmxlZCk7XG4gICAgICAgIHRoaXMuY2xvc2VDYWxsYmFjayA9IG51bGw7XG4gICAgfVxufTtcblxuUmV3YXJkRG91YmxlQ29udHJvbGxlci5jcmVhdGVGcm9tQ0NCID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG5vZGUgPSBnYW1lLnV0aWxzLmxvYWROb2RlRnJvbUNDQihcInJlcy9ub3RpY2UvcmV3YXJkX2RvdWJsZV92aWV3LmNjYmlcIiwgbnVsbCwgXCJSZXdhcmREb3VibGVDb250cm9sbGVyXCIsIG5ldyBSZXdhcmREb3VibGVDb250cm9sbGVyKCkpO1xuICAgIHJldHVybiBub2RlO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZXdhcmREb3VibGVDb250cm9sbGVyOyIsInZhciBTdG9yZUhlbHBlciA9IHJlcXVpcmUoXCIuLi9tb2RlbC9TdG9yZUhlbHBlclwiKTtcbnZhciBHYW1lTWFuID0gcmVxdWlyZShcIi4uL21vZGVsL0dhbWVNYW5cIik7XG52YXIgQm9vc3RUeXBlID0gcmVxdWlyZShcIi4uL2VudW0vQm9vc3RUeXBlXCIpO1xuXG52YXIgUmV3YXJkR2lmdENvbnRyb2xsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgQmFzZUNDQkNvbnRyb2xsZXIuY2FsbCh0aGlzKTtcblxuICAgIHRoaXMubGJUaXRsZSA9IG51bGw7XG5cbiAgICB0aGlzLmxiVGlwcyA9IG51bGw7XG4gICAgdGhpcy5sYkJ1dHRvbiA9IG51bGw7XG5cbiAgICB0aGlzLmNsb3NlQ2FsbGJhY2sgPSBudWxsO1xufTtcblxuZ2FtZS51dGlscy5pbmhlcml0cyhSZXdhcmRHaWZ0Q29udHJvbGxlciwgQmFzZUNDQkNvbnRyb2xsZXIpO1xuXG5SZXdhcmRHaWZ0Q29udHJvbGxlci5wcm90b3R5cGUub25EaWRMb2FkRnJvbUNDQiAgPSBmdW5jdGlvbigpIHtcbiAgICBCYXNlQ0NCQ29udHJvbGxlci5wcm90b3R5cGUub25EaWRMb2FkRnJvbUNDQi5jYWxsKHRoaXMpO1xuICAgIHRoaXMubGJUaXRsZS5zZXRTdHJpbmcoXyhcImdpZnRfdGl0bGVcIikpO1xuICAgIHRoaXMubGJUaXBzLnNldFN0cmluZyhfKFwiZ2lmdF90aXBzXCIpKTtcbiAgICB0aGlzLmxiQnV0dG9uLnNldFN0cmluZyhfKFwiZ2lmdF9idXR0b25cIikpO1xuXG4gICAgLy90aGlzLmxiVGlwcy5zZXRBbGlnbm1lbnQoY2MuVEVYVF9BTElHTk1FTlRfQ0VOVEVSKTtcbn07XG5cblJld2FyZEdpZnRDb250cm9sbGVyLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKGNsb3NlQ2FsbGJhY2spIHtcbiAgICB0aGlzLmNsb3NlQ2FsbGJhY2sgPSBjbG9zZUNhbGxiYWNrO1xufTtcblxuUmV3YXJkR2lmdENvbnRyb2xsZXIucHJvdG90eXBlLmNsb3NlQ2xpY2tlZCA9IGZ1bmN0aW9uIChzZW5kZXIpIHtcbiAgICBBdWRpb0hlbHBlci5wbGF5QnRuU291bmQoKTtcbiAgICB0aGlzLmNsb3NlKCk7XG59O1xuXG5SZXdhcmRHaWZ0Q29udHJvbGxlci5wcm90b3R5cGUuZ2lmdENsaWNrZWQgPSBmdW5jdGlvbiAoc2VuZGVyKSB7XG4gICAgQXVkaW9IZWxwZXIucGxheUJ0blNvdW5kKCk7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBzaGFyZSA9IEdhbWVNYW4uZ2V0SW5zdGFuY2UoKS5nZXRTaGFyZUNvbmZpZygpO1xuICAgIGdhbWUuc2hhcmVNYW5hZ2VyLnd4R3JvdXBTaGFyZShzaGFyZSwgXCJnaWZ0X3NoYXJlXCIsIGZ1bmN0aW9uIChzaGFyZWQpIHtcbiAgICAgICAgaWYgKHNoYXJlZCkge1xuICAgICAgICAgICAgdmFyIHNwbGl0Q291bnQgPSBnYW1lLnV0aWxzLnJhbmRvbU5leHRJbnRJblJhbmdlKDIsIDMpO1xuICAgICAgICAgICAgdmFyIHRocmVlQmFsbENvdW50ID0gZ2FtZS51dGlscy5yYW5kb21OZXh0SW50SW5SYW5nZSgyLCAzKTtcbiAgICAgICAgICAgIFN0b3JlSGVscGVyLmdldEluc3RhbmNlKCkucG9wdXBCb29zdFJld2FyZERsZyhzcGxpdENvdW50LCB0aHJlZUJhbGxDb3VudCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHNlbGYuY2xvc2UoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2FtZS51dGlscy5zaG93V1hUb2FzdChcIumcgOimgeWIhuS6q+WIsOe+pFwiKTtcbiAgICAgICAgfVxuICAgIH0pO1xufTtcblxuUmV3YXJkR2lmdENvbnRyb2xsZXIucHJvdG90eXBlLnBvcHVwID0gZnVuY3Rpb24gKCkge1xuICAgIGdhbWUuZGlhbG9nTWFuYWdlci5wb3B1cCh0aGlzLnJvb3ROb2RlLCB7b3ZlcmxheU9wYWNpdHk6IDIxMH0pO1xufTtcblxuUmV3YXJkR2lmdENvbnRyb2xsZXIucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKCkge1xuICAgIGdhbWUuZGlhbG9nTWFuYWdlci5jbG9zZSh0aGlzLnJvb3ROb2RlKTtcbiAgICBpZiAodGhpcy5jbG9zZUNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuY2xvc2VDYWxsYmFjaygpO1xuICAgICAgICB0aGlzLmNsb3NlQ2FsbGJhY2sgPSBudWxsO1xuICAgIH1cbn07XG5cblJld2FyZEdpZnRDb250cm9sbGVyLmNyZWF0ZUZyb21DQ0IgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbm9kZSA9IGdhbWUudXRpbHMubG9hZE5vZGVGcm9tQ0NCKFwicmVzL25vdGljZS9yZXdhcmRfZ2lmdF92aWV3LmNjYmlcIiwgbnVsbCwgXCJSZXdhcmRHaWZ0Q29udHJvbGxlclwiLCBuZXcgUmV3YXJkR2lmdENvbnRyb2xsZXIoKSk7XG4gICAgcmV0dXJuIG5vZGU7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJld2FyZEdpZnRDb250cm9sbGVyOyIsIlxuXG52YXIgUmV3YXJkTm90aWNlQ29udHJvbGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICBCYXNlQ0NCQ29udHJvbGxlci5jYWxsKHRoaXMpO1xuICAgIHRoaXMubmRSZXdhcmQxID0gbnVsbDtcbiAgICB0aGlzLm5kUmV3YXJkMiA9IG51bGw7XG5cbiAgICB0aGlzLnNwUmV3YXJkMSA9IG51bGw7XG4gICAgdGhpcy5sYlJld2FyZDEgPSBudWxsO1xuICAgIHRoaXMuc3BSZXdhcmQyID0gbnVsbDtcbiAgICB0aGlzLmxiUmV3YXJkMiA9IG51bGw7XG5cbiAgICB0aGlzLnNwUmV3YXJkID0gbnVsbDtcbiAgICB0aGlzLmxiUmV3YXJkID0gbnVsbDtcblxuICAgIHRoaXMubGJsT2sgPSBudWxsO1xuXG4gICAgdGhpcy5fb2tDYWxsRnVuYyA9IG51bGw7XG59O1xuXG5nYW1lLnV0aWxzLmluaGVyaXRzKFJld2FyZE5vdGljZUNvbnRyb2xsZXIsIEJhc2VDQ0JDb250cm9sbGVyKTtcblxuUmV3YXJkTm90aWNlQ29udHJvbGxlci5wcm90b3R5cGUub25EaWRMb2FkRnJvbUNDQiAgPSBmdW5jdGlvbigpIHtcbiAgICBCYXNlQ0NCQ29udHJvbGxlci5wcm90b3R5cGUub25EaWRMb2FkRnJvbUNDQi5jYWxsKHRoaXMpO1xuICAgIHRoaXMubmRSZXdhcmQxLnZpc2libGUgPSBmYWxzZTtcbiAgICB0aGlzLm5kUmV3YXJkMi52aXNpYmxlID0gZmFsc2U7XG5cbiAgICBnYW1lLmF1ZGlvUGxheWVyLnBsYXlFZmZlY3RCeUtleShcImdldF9kaWFtb25kc1wiKTtcblxuICAgIC8vdGhpcy5zcEJnLnJ1bkFjdGlvbihjYy5yb3RhdGVCeSgyLCAzNjApLnJlcGVhdEZvcmV2ZXIoKSk7XG59O1xuXG5SZXdhcmROb3RpY2VDb250cm9sbGVyLnByb3RvdHlwZS5pbml0V2l0aFJld2FyZFllcyA9IGZ1bmN0aW9uIChpbmZvLCBva0NhbGxGdW5jLCByZXdhcmQxU3ByaXRlLCByZXdhcmQxQ291bnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXdhcmQyU3ByaXRlLCByZXdhcmQyQ291bnQpIHtcbiAgICB2YXIgc3ByaXRlRnJhbWU7XG4gICAgaWYgKHJld2FyZDFTcHJpdGUgJiYgcmV3YXJkMlNwcml0ZSkge1xuICAgICAgICB0aGlzLm5kUmV3YXJkMi52aXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgLy90aGlzLmxiUmV3YXJkMkluZm8uc2V0U3RyaW5nKGluZm8pO1xuICAgICAgICAvL3RoaXMubGJSZXdhcmQySW5mby5zZXRBbGlnbm1lbnQoY2MuVEVYVF9BTElHTk1FTlRfQ0VOVEVSKTtcbiAgICAgICAgc3ByaXRlRnJhbWUgPSBjYy5zcHJpdGVGcmFtZUNhY2hlLmdldFNwcml0ZUZyYW1lKHJld2FyZDFTcHJpdGUpO1xuICAgICAgICBpZiAoc3ByaXRlRnJhbWUpIHtcbiAgICAgICAgICAgIHRoaXMuc3BSZXdhcmQxLnNldFNwcml0ZUZyYW1lKHNwcml0ZUZyYW1lKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxiUmV3YXJkMS5zZXRTdHJpbmcoXCJ4XCIgKyByZXdhcmQxQ291bnQpO1xuICAgICAgICBzcHJpdGVGcmFtZSA9IGNjLnNwcml0ZUZyYW1lQ2FjaGUuZ2V0U3ByaXRlRnJhbWUocmV3YXJkMlNwcml0ZSk7XG4gICAgICAgIGlmIChzcHJpdGVGcmFtZSkge1xuICAgICAgICAgICAgdGhpcy5zcFJld2FyZDIuc2V0U3ByaXRlRnJhbWUoc3ByaXRlRnJhbWUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubGJSZXdhcmQyLnNldFN0cmluZyhcInhcIiArIHJld2FyZDJDb3VudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5uZFJld2FyZDEudmlzaWJsZSA9IHRydWU7XG4gICAgICAgIC8vdGhpcy5sYlJld2FyZEluZm8uc2V0U3RyaW5nKGluZm8pO1xuICAgICAgICAvL3RoaXMubGJSZXdhcmRJbmZvLnNldEFsaWdubWVudChjYy5URVhUX0FMSUdOTUVOVF9DRU5URVIpO1xuICAgICAgICBzcHJpdGVGcmFtZSA9IGNjLnNwcml0ZUZyYW1lQ2FjaGUuZ2V0U3ByaXRlRnJhbWUocmV3YXJkMVNwcml0ZSk7XG4gICAgICAgIGlmIChzcHJpdGVGcmFtZSkge1xuICAgICAgICAgICAgdGhpcy5zcFJld2FyZC5zZXRTcHJpdGVGcmFtZShzcHJpdGVGcmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sYlJld2FyZC5zZXRTdHJpbmcoXCJ4XCIgKyByZXdhcmQxQ291bnQpO1xuICAgIH1cblxuICAgIHRoaXMubGJsT2suc2V0U3RyaW5nKGdhbWUubG9jYWwuZ2V0VmFsdWUoXCJjb25maXJtX2luZm9cIikpO1xuICAgIHRoaXMuX29rQ2FsbEZ1bmMgPSBva0NhbGxGdW5jO1xufTtcblxuUmV3YXJkTm90aWNlQ29udHJvbGxlci5wcm90b3R5cGUub2tDbGlja2VkID0gZnVuY3Rpb24gKHNlbmRlcikge1xuICAgIEF1ZGlvSGVscGVyLnBsYXlCdG5Tb3VuZCgpO1xuICAgIGlmICh0aGlzLl9va0NhbGxGdW5jKSB7XG4gICAgICAgIHRoaXMuX29rQ2FsbEZ1bmMoKTtcbiAgICB9XG4gICAgdGhpcy5jbG9zZSgpO1xufTtcblxuUmV3YXJkTm90aWNlQ29udHJvbGxlci5wcm90b3R5cGUucG9wdXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgZ2FtZS5kaWFsb2dNYW5hZ2VyLnBvcHVwKHRoaXMucm9vdE5vZGUpO1xufTtcblxuUmV3YXJkTm90aWNlQ29udHJvbGxlci5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgZ2FtZS5kaWFsb2dNYW5hZ2VyLmNsb3NlKHRoaXMucm9vdE5vZGUpO1xufTtcblxuUmV3YXJkTm90aWNlQ29udHJvbGxlci5jcmVhdGVGcm9tQ0NCID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG5vZGUgPSBnYW1lLnV0aWxzLmxvYWROb2RlRnJvbUNDQihcInJlcy9ub3RpY2UvcmV3YXJkX25vdGljZV92aWV3LmNjYmlcIiwgbnVsbCwgXCJSZXdhcmROb3RpY2VDb250cm9sbGVyXCIsIG5ldyBSZXdhcmROb3RpY2VDb250cm9sbGVyKCkpO1xuICAgIHJldHVybiBub2RlO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZXdhcmROb3RpY2VDb250cm9sbGVyOyIsInZhciBTdG9yZUhlbHBlciA9IHJlcXVpcmUoXCIuLi9tb2RlbC9TdG9yZUhlbHBlclwiKTtcblxudmFyIFJld2FyZFZpZGVvQ29udHJvbGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICBCYXNlQ0NCQ29udHJvbGxlci5jYWxsKHRoaXMpO1xuXG4gICAgdGhpcy5fdGl0bGVMYWJlbCA9IG51bGw7XG5cbiAgICB0aGlzLnNwUmV3YXJkMSA9IG51bGw7XG4gICAgdGhpcy5sYlJld2FyZDEgPSBudWxsO1xuICAgIHRoaXMuc3BSZXdhcmQyID0gbnVsbDtcbiAgICB0aGlzLmxiUmV3YXJkMiA9IG51bGw7XG4gICAgdGhpcy5sYlJld2FyZDJJbmZvID0gbnVsbDtcbiAgICB0aGlzLmxibEZyZWUgPSBudWxsO1xuXG4gICAgdGhpcy5jbG9zZUNhbGxiYWNrID0gbnVsbDtcbn07XG5cbmdhbWUudXRpbHMuaW5oZXJpdHMoUmV3YXJkVmlkZW9Db250cm9sbGVyLCBCYXNlQ0NCQ29udHJvbGxlcik7XG5cblJld2FyZFZpZGVvQ29udHJvbGxlci5wcm90b3R5cGUub25EaWRMb2FkRnJvbUNDQiAgPSBmdW5jdGlvbigpIHtcbiAgICBCYXNlQ0NCQ29udHJvbGxlci5wcm90b3R5cGUub25EaWRMb2FkRnJvbUNDQi5jYWxsKHRoaXMpO1xuICAgIHRoaXMubGJSZXdhcmQxLnNldFN0cmluZyhcIlgxXCIpO1xuICAgIHRoaXMubGJSZXdhcmQyLnNldFN0cmluZyhcIlgxXCIpO1xuICAgIHRoaXMubGJSZXdhcmQySW5mby5zZXRTdHJpbmcoZ2FtZS5sb2NhbC5nZXRWYWx1ZShcIndhdGNoX2Fkc190aXBzXCIpKTtcbiAgICB0aGlzLl90aXRsZUxhYmVsLnNldFN0cmluZyhnYW1lLmxvY2FsLmdldFZhbHVlKFwid2F0Y2hfYWRzX3RpdGxlXCIpKTtcbiAgICB0aGlzLmxibEZyZWUuc2V0U3RyaW5nKF8oXCJmcmVlX2NvaW5zX3RpdGxlXCIpKTtcbn07XG5cblJld2FyZFZpZGVvQ29udHJvbGxlci5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uIChjbG9zZUNhbGxiYWNrKSB7XG4gICAgdGhpcy5jbG9zZUNhbGxiYWNrID0gY2xvc2VDYWxsYmFjaztcbn07XG5cblJld2FyZFZpZGVvQ29udHJvbGxlci5wcm90b3R5cGUuY2xvc2VDbGlja2VkID0gZnVuY3Rpb24gKHNlbmRlcikge1xuICAgIEF1ZGlvSGVscGVyLnBsYXlCdG5Tb3VuZCgpO1xuICAgIHRoaXMuY2xvc2UoKTtcbn07XG5cblJld2FyZFZpZGVvQ29udHJvbGxlci5wcm90b3R5cGUud2F0Y2hBZHNDbGlja2VkID0gZnVuY3Rpb24gKHNlbmRlcikge1xuICAgIEF1ZGlvSGVscGVyLnBsYXlCdG5Tb3VuZCgpO1xuICAgIFN0b3JlSGVscGVyLmdldEluc3RhbmNlKCkuY2hlY2tBbmRTaG93UmV3YXJkVmlkZW8oZ2FtZS51dGlscy5pc0lPUygpID8gXCJqaWxpMDMtSU9TXCIgOiBcImppbGkwM1wiKTtcbn07XG5cblJld2FyZFZpZGVvQ29udHJvbGxlci5wcm90b3R5cGUucG9wdXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgZ2FtZS5kaWFsb2dNYW5hZ2VyLnBvcHVwKHRoaXMucm9vdE5vZGUpO1xufTtcblxuUmV3YXJkVmlkZW9Db250cm9sbGVyLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBnYW1lLmRpYWxvZ01hbmFnZXIuY2xvc2UodGhpcy5yb290Tm9kZSk7XG4gICAgaWYgKHRoaXMuY2xvc2VDYWxsYmFjaykge1xuICAgICAgICB0aGlzLmNsb3NlQ2FsbGJhY2soKTtcbiAgICAgICAgdGhpcy5jbG9zZUNhbGxiYWNrID0gbnVsbDtcbiAgICB9XG59O1xuXG5SZXdhcmRWaWRlb0NvbnRyb2xsZXIuY3JlYXRlRnJvbUNDQiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBub2RlID0gZ2FtZS51dGlscy5sb2FkTm9kZUZyb21DQ0IoXCJyZXMvbm90aWNlL3Jld2FyZF92aWRlb192aWV3LmNjYmlcIiwgbnVsbCwgXCJSZXdhcmRWaWRlb0NvbnRyb2xsZXJcIiwgbmV3IFJld2FyZFZpZGVvQ29udHJvbGxlcigpKTtcbiAgICByZXR1cm4gbm9kZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmV3YXJkVmlkZW9Db250cm9sbGVyOyIsInZhciBTa2luSXRlbUNvbnRyb2xsZXIgPSByZXF1aXJlKFwiLi9Ta2luSXRlbUNvbnRyb2xsZXJcIik7XG52YXIgQ29uZmlnTWFuID0gcmVxdWlyZShcIi4uL2NvbmZpZy9Db25maWdNYW5cIik7XG52YXIgRXZlbnRzTmFtZSA9IHJlcXVpcmUoXCIuLi9ldmVudHMvRXZlbnRzTmFtZVwiKTtcblxuXG52YXIgU2V0dGluZ0NvbnRyb2xsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgQmFzZUNDQkNvbnRyb2xsZXIuY2FsbCh0aGlzKTtcbiAgICB0aGlzLnNwQXVkaW9PZmYgPSBudWxsO1xuICAgIHRoaXMuc3BBdWRpb09uID0gbnVsbDtcbiAgICB0aGlzLmxiQXVkaW8gPSBudWxsO1xuICAgIHRoaXMubGJWZXJzaW9uID0gbnVsbDtcbiAgICB0aGlzLm5kUmFuayA9IG51bGw7XG4gICAgdGhpcy5uZFZpYnJhdGUgPSBudWxsO1xuXG4gICAgdGhpcy5zcFZpYnJhdGVPbiA9IG51bGw7XG4gICAgdGhpcy5zcFZpYnJhdGVPZmYgPSBudWxsO1xuICAgIHRoaXMubGJsVmlicmF0ZSA9IG51bGw7XG59O1xuXG5nYW1lLnV0aWxzLmluaGVyaXRzKFNldHRpbmdDb250cm9sbGVyLCBCYXNlQ0NCQ29udHJvbGxlcik7XG5cblNldHRpbmdDb250cm9sbGVyLnByb3RvdHlwZS5vbkRpZExvYWRGcm9tQ0NCICA9IGZ1bmN0aW9uKCkge1xuICAgIEJhc2VDQ0JDb250cm9sbGVyLnByb3RvdHlwZS5vbkRpZExvYWRGcm9tQ0NCLmNhbGwodGhpcyk7XG4gICAgdGhpcy51cGRhdGVTb3VuZEl0ZW0oKTtcbiAgICB0aGlzLnVwZGF0ZVZpYnJhdGVJdGVtKCk7XG4gICAgdmFyIHZlcnNpb24gPSBcIndlYlwiO1xuICAgIGlmIChjYy5zeXMuaXNOYXRpdmUpIHtcbiAgICAgICAgdmVyc2lvbiA9IGpzYl9kcC5vbmVTZGtCcmlkZ2UuZ2V0VmVyc2lvbigpO1xuICAgIH1cbiAgICB0aGlzLmxiVmVyc2lvbi5zZXRTdHJpbmcoZ2FtZS51dGlscy5zcHJpbnRmKF8oXCJ2ZXJzaW9uX3RpdGxlXCIpLCB2ZXJzaW9uKSk7XG4gICAgaWYgKGNjLnN5cy5vcyA9PT0gY2Muc3lzLk9TX0FORFJPSUQpIHtcbiAgICAgICAgdGhpcy5uZFJhbmsudmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLm5kVmlicmF0ZS52aXNpYmxlID0gZmFsc2U7XG4gICAgfVxufTtcblxuU2V0dGluZ0NvbnRyb2xsZXIucHJvdG90eXBlLnVwZGF0ZVNvdW5kSXRlbSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaXNTb3VuZE9uID0gZ2FtZS5hdWRpb1BsYXllci5pc0VmZmVjdE9uKCk7XG4gICAgdGhpcy5zcEF1ZGlvT2ZmLnZpc2libGUgPSBmYWxzZTtcbiAgICB0aGlzLnNwQXVkaW9Pbi52aXNpYmxlID0gZmFsc2U7XG4gICAgaWYgKGlzU291bmRPbikge1xuICAgICAgICB0aGlzLnNwQXVkaW9Pbi52aXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5sYkF1ZGlvLnNldFN0cmluZyhfKFwiYXVkaW9fb25fdGl0bGVcIikpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc3BBdWRpb09mZi52aXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5sYkF1ZGlvLnNldFN0cmluZyhfKFwiYXVkaW9fb2ZmX3RpdGxlXCIpKTtcbiAgICB9XG59O1xuXG5TZXR0aW5nQ29udHJvbGxlci5wcm90b3R5cGUudXBkYXRlVmlicmF0ZUl0ZW0gPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGlzU291bmRPbiA9IGdhbWUuYXVkaW9QbGF5ZXIuaXNWaWJyYXRlT24oKTtcbiAgICB0aGlzLnNwVmlicmF0ZU9mZi52aXNpYmxlID0gZmFsc2U7XG4gICAgdGhpcy5zcFZpYnJhdGVPbi52aXNpYmxlID0gZmFsc2U7XG4gICAgaWYgKGlzU291bmRPbikge1xuICAgICAgICB0aGlzLnNwVmlicmF0ZU9uLnZpc2libGUgPSB0cnVlO1xuICAgICAgICB0aGlzLmxibFZpYnJhdGUuc2V0U3RyaW5nKF8oXCJ2aWJyYXRlX29uX3RpdGxlXCIpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNwVmlicmF0ZU9mZi52aXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5sYmxWaWJyYXRlLnNldFN0cmluZyhfKFwidmlicmF0ZV9vZmZfdGl0bGVcIikpO1xuICAgIH1cbn07XG5cblNldHRpbmdDb250cm9sbGVyLnByb3RvdHlwZS5zb3VuZENsaWNrZWQgPSBmdW5jdGlvbiAoc2VuZGVyKSB7XG4gICAgQXVkaW9IZWxwZXIucGxheUJ0blNvdW5kKCk7XG4gICAgZ2FtZS5hdWRpb1BsYXllci5zZXRFZmZlY3RPbighZ2FtZS5hdWRpb1BsYXllci5pc0VmZmVjdE9uKCkpO1xuICAgIGdhbWUuYXVkaW9QbGF5ZXIuc2V0TXVzaWNPbighZ2FtZS5hdWRpb1BsYXllci5pc011c2ljT24oKSk7XG4gICAgdGhpcy51cGRhdGVTb3VuZEl0ZW0oKTtcbn07XG5cblNldHRpbmdDb250cm9sbGVyLnByb3RvdHlwZS5zaGFyZUNsaWNrZWQgPSBmdW5jdGlvbiAoc2VuZGVyKSB7XG4gICAgQXVkaW9IZWxwZXIucGxheUJ0blNvdW5kKCk7XG4gICAgZ2FtZS5zaGFyZU1hbmFnZXIuc2hhcmVXaXRoU3lzdGVtKGdhbWUudXRpbHMuc3ByaW50ZihnYW1lLmxvY2FsLmdldFZhbHVlKFwic2hhcmVfdGlwc1wiKSxcbiAgICAgICAgZ2FtZS5wbGF5ZXJNYW4uZ2V0TGV2ZWwoKSwgZ2FtZS5jb25maWcuZ2V0U2hvcnRQbGF0Zm9ybURvd25sb2FkVXJsKCkpKTtcbn07XG5cblNldHRpbmdDb250cm9sbGVyLnByb3RvdHlwZS5yYW5rQ2xpY2tlZCA9IGZ1bmN0aW9uIChzZW5kZXIpIHtcbiAgICBBdWRpb0hlbHBlci5wbGF5QnRuU291bmQoKTtcbiAgICBnYW1lLmdjTWFuYWdlci5zaG93TGVhZGVyYm9hcmQoZ2FtZS5jb25maWcuZ2V0TGVhZGVyQm9hcmRLZXkoKSk7XG59O1xuXG5TZXR0aW5nQ29udHJvbGxlci5wcm90b3R5cGUuc3VwcG9ydENsaWNrZWQgPSBmdW5jdGlvbiAoc2VuZGVyKSB7XG4gICAgQXVkaW9IZWxwZXIucGxheUJ0blNvdW5kKCk7XG4gICAgZ2FtZS5zaGFyZU1hbmFnZXIuc2VuZEVtYWlsKGdhbWUuY29uZmlnLmNvbm5lY3RFbWFpbCxcbiAgICAgICAgZ2FtZS5sb2NhbC5nZXRWYWx1ZShcImZlZWRfYmFja190aXRsZVwiKSwgZ2FtZS5sb2NhbC5nZXRWYWx1ZShcImZlZWRfYmFja19jb250ZW50XCIpKTtcbn07XG5cblNldHRpbmdDb250cm9sbGVyLnByb3RvdHlwZS5yYXRlQ2xpY2tlZCA9IGZ1bmN0aW9uIChzZW5kZXIpIHtcbiAgICBBdWRpb0hlbHBlci5wbGF5QnRuU291bmQoKTtcbiAgICBjYy5zeXMub3BlblVSTChnYW1lLmNvbmZpZy5nZXRQbGF0Zm9ybURvd25sb2FkVXJsKCkpO1xufTtcblxuU2V0dGluZ0NvbnRyb2xsZXIucHJvdG90eXBlLmZhblBhZ2VDbGlja2VkID0gZnVuY3Rpb24gKHNlbmRlcikge1xuICAgIEF1ZGlvSGVscGVyLnBsYXlCdG5Tb3VuZCgpO1xuICAgIGNjLnN5cy5vcGVuVVJMKGdhbWUuY29uZmlnLmZhY2Vib29rRmFuUGFnZVVybCk7XG59O1xuXG5TZXR0aW5nQ29udHJvbGxlci5wcm90b3R5cGUubGlrZVVzQ2xpY2tlZCA9IGZ1bmN0aW9uIChzZW5kZXIpIHtcbiAgICBBdWRpb0hlbHBlci5wbGF5QnRuU291bmQoKTtcbiAgICBjYy5zeXMub3BlblVSTChnYW1lLmNvbmZpZy5nZXRQbGF0Zm9ybURvd25sb2FkVXJsKCkpO1xufTtcblxuU2V0dGluZ0NvbnRyb2xsZXIucHJvdG90eXBlLnZpYnJhdGVDbGlja2VkID0gZnVuY3Rpb24gKHNlbmRlcikge1xuICAgIEF1ZGlvSGVscGVyLnBsYXlCdG5Tb3VuZCgpO1xuICAgIGdhbWUuYXVkaW9QbGF5ZXIuc2V0VmlicmF0ZU9uKCFnYW1lLmF1ZGlvUGxheWVyLmlzVmlicmF0ZU9uKCkpO1xuICAgIHRoaXMudXBkYXRlVmlicmF0ZUl0ZW0oKTtcbn07XG5cblNldHRpbmdDb250cm9sbGVyLnByb3RvdHlwZS5iYWNrQ2xpY2tlZCA9IGZ1bmN0aW9uIChzZW5kZXIpIHtcbiAgICBBdWRpb0hlbHBlci5wbGF5QnRuU291bmQoKTtcblxuICAgIHRoaXMuY2xvc2UoKTtcbn07XG5cblNldHRpbmdDb250cm9sbGVyLnByb3RvdHlwZS5wb3B1cCA9IGZ1bmN0aW9uICgpIHtcbiAgICBnYW1lLmRpYWxvZ01hbmFnZXIucG9wdXAodGhpcy5yb290Tm9kZSwge3BvcHVwQW5pbTogdHJ1ZX0pO1xufTtcblxuU2V0dGluZ0NvbnRyb2xsZXIucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKCkge1xuICAgIGdhbWUuZGlhbG9nTWFuYWdlci5jbG9zZSh0aGlzLnJvb3ROb2RlKTtcbn07XG5cblNldHRpbmdDb250cm9sbGVyLmNyZWF0ZUZyb21DQ0IgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbm9kZSA9IGdhbWUudXRpbHMubG9hZE5vZGVGcm9tQ0NCKFwicmVzL25vdGljZS9zZXR0aW5nX3ZpZXcuY2NiaVwiLCBudWxsLCBcIlNldHRpbmdDb250cm9sbGVyXCIsIG5ldyBTZXR0aW5nQ29udHJvbGxlcigpKTtcbiAgICByZXR1cm4gbm9kZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU2V0dGluZ0NvbnRyb2xsZXI7IiwidmFyIFNraW5JdGVtQ29udHJvbGxlciA9IHJlcXVpcmUoXCIuL1NraW5JdGVtQ29udHJvbGxlclwiKTtcbnZhciBDb25maWdNYW4gPSByZXF1aXJlKFwiLi4vY29uZmlnL0NvbmZpZ01hblwiKTtcbnZhciBFdmVudHNOYW1lID0gcmVxdWlyZShcIi4uL2V2ZW50cy9FdmVudHNOYW1lXCIpO1xudmFyIE11bHRpQ29sVGFibGVWaWV3ID0gcmVxdWlyZShcIi4uLy4uL2NvbW1vbi9leHQvTXVsdGlDb2xUYWJsZVZpZXdcIik7XG5cbnZhciBHUklEX1NJWkUgPSBjYy5zaXplKDI3MCwgMjAwKTtcblxudmFyIFN0b3JlSXRlbUNlbGxWaWV3ID0gY2MuVGFibGVWaWV3Q2VsbC5leHRlbmQoe1xuICAgIGVudGl0eTogbnVsbCxcbiAgICBpdGVtTm9kZTogbnVsbCxcbiAgICBjdG9yOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX3N1cGVyKCk7XG4gICAgICAgIHRoaXMuaXRlbU5vZGUgPSBTa2luSXRlbUNvbnRyb2xsZXIuY3JlYXRlRnJvbUNDQigpO1xuICAgICAgICB0aGlzLmFkZENoaWxkKHRoaXMuaXRlbU5vZGUpO1xuICAgICAgICB0aGlzLml0ZW1Ob2RlLnNldFBvc2l0aW9uKGNjLnAoR1JJRF9TSVpFLndpZHRoICogMC41LCBHUklEX1NJWkUuaGVpZ2h0ICogMC41KSk7XG4gICAgfSxcblxuICAgIGluaXRXaXRoOiBmdW5jdGlvbiAoZW50aXR5LCBpZHgpIHtcbiAgICAgICAgdGhpcy5lbnRpdHkgPSBlbnRpdHk7XG4gICAgICAgIHRoaXMuaXRlbU5vZGUuY29udHJvbGxlci5pbml0V2l0aChlbnRpdHksIGlkeCk7XG4gICAgfVxufSk7XG5cbnZhciBTa2luQ29udHJvbGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICBCYXNlQ0NCQ29udHJvbGxlci5jYWxsKHRoaXMpO1xuICAgIHRoaXMubmRDb250YWluZXIgPSBudWxsO1xuXG4gICAgdGhpcy5sYmxUaXRsZSA9IG51bGw7XG5cbiAgICB0aGlzLl90YWJsZVZpZXcgPSBudWxsO1xuXG4gICAgLy91c2VyIGRhdGEuXG4gICAgdGhpcy5jb25maWdzID0gbnVsbDtcbn07XG5cbmdhbWUudXRpbHMuaW5oZXJpdHMoU2tpbkNvbnRyb2xsZXIsIEJhc2VDQ0JDb250cm9sbGVyKTtcblxuU2tpbkNvbnRyb2xsZXIucHJvdG90eXBlLm9uRW50ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgQmFzZUNDQkNvbnRyb2xsZXIucHJvdG90eXBlLm9uRW50ZXIuY2FsbCh0aGlzKTtcbiAgICBnYW1lLmV2ZW50RGlzcGF0Y2hlci5hZGRFdmVudExpc3RlbmVyKEV2ZW50c05hbWUuVVBEQVRFX1NLSU4sIHRoaXMub25VcGRhdGVTa2luLCB0aGlzKTtcbn07XG5cblNraW5Db250cm9sbGVyLnByb3RvdHlwZS5vbkV4aXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgZ2FtZS5ldmVudERpc3BhdGNoZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihFdmVudHNOYW1lLlVQREFURV9TS0lOLCB0aGlzLm9uVXBkYXRlU2tpbiwgdGhpcyk7XG4gICAgQmFzZUNDQkNvbnRyb2xsZXIucHJvdG90eXBlLm9uRXhpdC5jYWxsKHRoaXMpO1xufTtcblxuU2tpbkNvbnRyb2xsZXIucHJvdG90eXBlLm9uRGlkTG9hZEZyb21DQ0IgID0gZnVuY3Rpb24oKSB7XG4gICAgQmFzZUNDQkNvbnRyb2xsZXIucHJvdG90eXBlLm9uRGlkTG9hZEZyb21DQ0IuY2FsbCh0aGlzKTtcbiAgICB0aGlzLmxibFRpdGxlLnNldFN0cmluZyhfKFwic2tpbl90aXRsZVwiKSk7XG5cbiAgICB0aGlzLmNvbmZpZ3MgPSBDb25maWdNYW4uZ2V0SW5zdGFuY2UoKS5nZXRTa2luTGlzdCgpO1xuICAgIHRoaXMuc2hvd1RhYmxlVmlldygpO1xufTtcblxuU2tpbkNvbnRyb2xsZXIucHJvdG90eXBlLm9uVXBkYXRlU2tpbiA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHRoaXMuc2hvd1RhYmxlVmlldygpO1xufTtcblxuU2tpbkNvbnRyb2xsZXIucHJvdG90eXBlLnNob3dUYWJsZVZpZXcgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLl90YWJsZVZpZXcpIHtcbiAgICAgICAgdmFyIHNpemUgPSB0aGlzLm5kQ29udGFpbmVyLmdldENvbnRlbnRTaXplKCk7XG4gICAgICAgIHRoaXMuX3RhYmxlVmlldyA9IG5ldyBNdWx0aUNvbFRhYmxlVmlldyh0aGlzLCBzaXplLCBudWxsKTtcbiAgICAgICAgdGhpcy5fdGFibGVWaWV3LnNldERpcmVjdGlvbihjYy5TQ1JPTExWSUVXX0RJUkVDVElPTl9WRVJUSUNBTCk7XG4gICAgICAgIHRoaXMuX3RhYmxlVmlldy5zZXRWZXJ0aWNhbEZpbGxPcmRlcihjYy5UQUJMRVZJRVdfRklMTF9UT1BET1dOKTtcbiAgICAgICAgdGhpcy5fdGFibGVWaWV3LnNldE11bHRpVGFibGVWaWV3RGVsZWdhdGUodGhpcyk7XG4gICAgICAgIHRoaXMuX3RhYmxlVmlldy5pZ25vcmVBbmNob3JQb2ludEZvclBvc2l0aW9uKGZhbHNlKTtcbiAgICAgICAgdGhpcy5fdGFibGVWaWV3LnNldEFuY2hvclBvaW50KGNjLnAoMCwgMCkpO1xuICAgICAgICB0aGlzLm5kQ29udGFpbmVyLmFkZENoaWxkKHRoaXMuX3RhYmxlVmlldyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fb2Zmc2V0ID0gdGhpcy5fdGFibGVWaWV3LmdldENvbnRlbnRPZmZzZXQoKTtcbiAgICB9XG4gICAgdGhpcy5fdGFibGVWaWV3LnJlbG9hZERhdGEoKTtcbiAgICBpZiAodGhpcy5fb2Zmc2V0KSB7XG4gICAgICAgIHRoaXMuX3RhYmxlVmlldy5zZXRDb250ZW50T2Zmc2V0KHRoaXMuX29mZnNldCk7XG4gICAgICAgIHRoaXMuX29mZnNldCA9IG51bGw7XG4gICAgfVxufTtcblxuU2tpbkNvbnRyb2xsZXIucHJvdG90eXBlLnNjcm9sbFZpZXdEaWRTY3JvbGwgPSBmdW5jdGlvbiAodmlldykge1xufTtcblxuU2tpbkNvbnRyb2xsZXIucHJvdG90eXBlLnNjcm9sbFZpZXdEaWRab29tID0gZnVuY3Rpb24gKHZpZXcpIHtcbn07XG5cblNraW5Db250cm9sbGVyLnByb3RvdHlwZS5ncmlkQXRJbmRleCA9IGZ1bmN0aW9uKG11bHRpVGFibGUsICBpZHgpIHtcbiAgICB2YXIgY2VsbCA9IG11bHRpVGFibGUuZGVxdWV1ZUdyaWQoKTtcbiAgICBpZiAoIWNlbGwpIHtcbiAgICAgICAgY2VsbCA9IG5ldyBTdG9yZUl0ZW1DZWxsVmlldygpO1xuICAgIH1cblxuICAgIGlmIChpZHggPCB0aGlzLmNvbmZpZ3MubGVuZ3RoKSB7XG4gICAgICAgIHZhciBza2luQ2ZnID0gdGhpcy5jb25maWdzW2lkeF07XG4gICAgICAgIGNlbGwuaW5pdFdpdGgoc2tpbkNmZywgaWR4KTtcbiAgICAgICAgY2VsbC52aXNpYmxlID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjZWxsLnZpc2libGUgPSBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2VsbDtcbn07XG5cblNraW5Db250cm9sbGVyLnByb3RvdHlwZS5udW1iZXJPZkNlbGxzSW5UYWJsZVZpZXcgPSBmdW5jdGlvbihtdWx0aVRhYmxlKSB7XG4gICAgdmFyIGdyaWRzSW5DZWxsID0gdGhpcy5udW1iZXJPZkdyaWRzSW5DZWxsKG11bHRpVGFibGUpO1xuICAgIHJldHVybiBNYXRoLmNlaWwodGhpcy5jb25maWdzLmxlbmd0aCAvIGdyaWRzSW5DZWxsKTtcbn07XG5cblNraW5Db250cm9sbGVyLnByb3RvdHlwZS5udW1iZXJPZkdyaWRzSW5DZWxsID0gZnVuY3Rpb24obXVsdGlUYWJsZSwgY29sSWR4KSB7XG4gICAgcmV0dXJuIDI7XG59O1xuXG5Ta2luQ29udHJvbGxlci5wcm90b3R5cGUuZ3JpZFNpemVGb3JUYWJsZSA9IGZ1bmN0aW9uKHRhYmxlLCBjb2xJZHgpIHtcbiAgICByZXR1cm4gY2Muc2l6ZSgyNzAsIDIyMCk7XG59O1xuXG5Ta2luQ29udHJvbGxlci5wcm90b3R5cGUuZ3JpZFRvdWNoZWQgPSBmdW5jdGlvbih0YWJsZSwgZ3JpZCkge1xufTtcblxuU2tpbkNvbnRyb2xsZXIucHJvdG90eXBlLmJhY2tDbGlja2VkID0gZnVuY3Rpb24gKHNlbmRlcikge1xuICAgIEF1ZGlvSGVscGVyLnBsYXlCdG5Tb3VuZCgpO1xuXG4gICAgdGhpcy5jbG9zZSgpO1xufTtcblxuU2tpbkNvbnRyb2xsZXIucHJvdG90eXBlLnBvcHVwID0gZnVuY3Rpb24gKCkge1xuICAgIGdhbWUuZGlhbG9nTWFuYWdlci5wb3B1cCh0aGlzLnJvb3ROb2RlKTtcbn07XG5cblNraW5Db250cm9sbGVyLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBnYW1lLmRpYWxvZ01hbmFnZXIuY2xvc2UodGhpcy5yb290Tm9kZSk7XG59O1xuXG5Ta2luQ29udHJvbGxlci5wcm90b3R5cGUub25FeGl0ID0gZnVuY3Rpb24gKCkge1xuICAgIC8vaWYgKHRoaXMuY2xvc2VDYWxsYmFjaykge1xuICAgIC8vICAgIHRoaXMuY2xvc2VDYWxsYmFjaygpO1xuICAgIC8vICAgIHRoaXMuY2xvc2VDYWxsYmFjayA9IG51bGw7XG4gICAgLy99XG59O1xuXG5Ta2luQ29udHJvbGxlci5jcmVhdGVGcm9tQ0NCID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG5vZGUgPSBnYW1lLnV0aWxzLmxvYWROb2RlRnJvbUNDQihcInJlcy9tZW51L3NraW5fdmlldy5jY2JpXCIsIG51bGwsIFwiU2tpbkNvbnRyb2xsZXJcIiwgbmV3IFNraW5Db250cm9sbGVyKCkpO1xuICAgIHJldHVybiBub2RlO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTa2luQ29udHJvbGxlcjsiLCJ2YXIgU2tpblJld2FyZFR5cGUgPSByZXF1aXJlKFwiLi4vZW51bS9Ta2luUmV3YXJkVHlwZVwiKTtcbnZhciBFdmVudHNOYW1lID0gcmVxdWlyZShcIi4uL2V2ZW50cy9FdmVudHNOYW1lXCIpO1xudmFyIFNraW5UeXBlID0gcmVxdWlyZShcIi4uL2VudW0vU2tpblR5cGVcIik7XG5cbnZhciBTa2luSXRlbUNvbnRyb2xsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgQmFzZUNDQkNvbnRyb2xsZXIuY2FsbCh0aGlzKTtcblxuICAgIHRoaXMubmRQdXJjaGFzZSA9IG51bGw7XG4gICAgdGhpcy5uZE93bmVkID0gbnVsbDtcbiAgICB0aGlzLm5kV2F0Y2hBZHMgPSBudWxsO1xuXG4gICAgdGhpcy5sYkRpYW1vbmRQcmljZSA9IG51bGw7XG4gICAgdGhpcy5sYlVzaW5nID0gbnVsbDtcbiAgICB0aGlzLmxiUmV3YXJkQWRzQ291bnQgPSBudWxsO1xuXG4gICAgdGhpcy5zcFNraW4gPSBudWxsO1xuXG4gICAgdGhpcy5pZHggPSAwO1xuICAgIHRoaXMuc2tpbkNmZyA9IG51bGw7XG59O1xuXG5nYW1lLnV0aWxzLmluaGVyaXRzKFNraW5JdGVtQ29udHJvbGxlciwgQmFzZUNDQkNvbnRyb2xsZXIpO1xuXG5Ta2luSXRlbUNvbnRyb2xsZXIucHJvdG90eXBlLm9uRGlkTG9hZEZyb21DQ0IgID0gZnVuY3Rpb24oKSB7XG4gICAgQmFzZUNDQkNvbnRyb2xsZXIucHJvdG90eXBlLm9uRGlkTG9hZEZyb21DQ0IuY2FsbCh0aGlzKTtcbn07XG5cblNraW5JdGVtQ29udHJvbGxlci5wcm90b3R5cGUub25FbnRlciA9IGZ1bmN0aW9uKCkge1xuICAgIEJhc2VDQ0JDb250cm9sbGVyLnByb3RvdHlwZS5vbkVudGVyLmNhbGwodGhpcyk7XG4gICAgZ2FtZS5ldmVudERpc3BhdGNoZXIuYWRkRXZlbnRMaXN0ZW5lcihFdmVudHNOYW1lLlVQREFURV9TS0lOLCB0aGlzLm9uVXBkYXRlU2tpbiwgdGhpcyk7XG59O1xuXG5Ta2luSXRlbUNvbnRyb2xsZXIucHJvdG90eXBlLm9uRXhpdCA9IGZ1bmN0aW9uKCkge1xuICAgIGdhbWUuZXZlbnREaXNwYXRjaGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoRXZlbnRzTmFtZS5VUERBVEVfU0tJTiwgdGhpcy5vblVwZGF0ZVNraW4sIHRoaXMpO1xuICAgIEJhc2VDQ0JDb250cm9sbGVyLnByb3RvdHlwZS5vbkV4aXQuY2FsbCh0aGlzKTtcbn07XG4vKipcbiAqIEBwYXJhbSB7U2tpbkNvbmZpZ30gZGF0YVxuICogQHBhcmFtIHtudW1iZXJ9IGlkeFxuICovXG5Ta2luSXRlbUNvbnRyb2xsZXIucHJvdG90eXBlLmluaXRXaXRoID0gZnVuY3Rpb24gKGRhdGEsIGlkeCkge1xuICAgIHRoaXMuaWR4ID0gaWR4O1xuICAgIHRoaXMuc2tpbkNmZyA9IGRhdGE7XG4gICAgdHJ5IHtcbiAgICAgICAgdmFyIHNwcml0ZUZyYW1lID0gY2Muc3ByaXRlRnJhbWVDYWNoZS5nZXRTcHJpdGVGcmFtZShkYXRhLmltYWdlICsgXCIucG5nXCIpO1xuICAgICAgICB0aGlzLnNwU2tpbi5zZXRTcHJpdGVGcmFtZShzcHJpdGVGcmFtZSk7XG5cbiAgICAgICAgdGhpcy5uZFB1cmNoYXNlLnZpc2libGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5uZE93bmVkLnZpc2libGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5uZFdhdGNoQWRzLnZpc2libGUgPSBmYWxzZTtcblxuICAgICAgICB2YXIgb3duZWQgPSBnYW1lLnBsYXllck1hbi5oYXNTa2luKHRoaXMuc2tpbkNmZy5pZCk7XG4gICAgICAgIGlmIChvd25lZCkge1xuICAgICAgICAgICAgdGhpcy5uZE93bmVkLnZpc2libGUgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKGRhdGEuaWQgPT09IGdhbWUucGxheWVyTWFuLmdldEN1cnJlbnRTa2luSWQoKSkge1xuICAgICAgICAgICAgICAgIHRoaXMubGJVc2luZy5zZXRTdHJpbmcoXyhcInNlbGVjdGVkX3RpdGxlXCIpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sYlVzaW5nLnNldFN0cmluZyhfKFwic2VsZWN0X3RpdGxlXCIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN3aXRjaCAoZGF0YS50eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBTa2luVHlwZS5XYXRjaEFkczpcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNraW5SZXdhcmRDb3VudCA9IGdhbWUucGxheWVyTWFuLmdldFNraW5BZHNDb3VudChkYXRhLmlkKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5uZFdhdGNoQWRzLnZpc2libGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxiUmV3YXJkQWRzQ291bnQuc2V0U3RyaW5nKGdhbWUudXRpbHMuc3ByaW50ZihcIiVkLyVkXCIsIHNraW5SZXdhcmRDb3VudCwgZGF0YS5jb3VudCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFNraW5UeXBlLkRpYW1vbmRzOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLm5kUHVyY2hhc2UudmlzaWJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGJEaWFtb25kUHJpY2Uuc2V0U3RyaW5nKHRoaXMuc2tpbkNmZy5jb3VudCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgY2MuZXJyb3IoZXgpO1xuICAgIH1cbn07XG5cblNraW5JdGVtQ29udHJvbGxlci5wcm90b3R5cGUub25VcGRhdGVTa2luID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuaW5pdFdpdGgodGhpcy5za2luQ2ZnLCB0aGlzLmlkeCk7XG59O1xuXG5Ta2luSXRlbUNvbnRyb2xsZXIucHJvdG90eXBlLmdldENvbnRlbnRTaXplID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLnNwQmdTZWxlY3RlZC5nZXRDb250ZW50U2l6ZSgpO1xufTtcblxuU2tpbkl0ZW1Db250cm9sbGVyLnByb3RvdHlwZS5wdXJjaGFzZUNsaWNrZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgQXVkaW9IZWxwZXIucGxheUJ0blNvdW5kKCk7XG4gICAgdmFyIFN0b3JlSGVscGVyID0gcmVxdWlyZShcIi4uL21vZGVsL1N0b3JlSGVscGVyXCIpO1xuICAgIFN0b3JlSGVscGVyLmdldEluc3RhbmNlKCkuYnV5U2tpbih0aGlzLnNraW5DZmcsIFwiYnV5X3NraW5faW5fc3RvcmVcIik7XG59O1xuXG5Ta2luSXRlbUNvbnRyb2xsZXIucHJvdG90eXBlLnNlbGVjdENsaWNrZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgQXVkaW9IZWxwZXIucGxheUJ0blNvdW5kKCk7XG4gICAgZ2FtZS5wbGF5ZXJNYW4uc2V0Q3VycmVudFNraW5JZCh0aGlzLnNraW5DZmcuaWQpO1xuICAgIGdhbWUuZXZlbnREaXNwYXRjaGVyLmRpc3BhdGNoRXZlbnQoRXZlbnRzTmFtZS5VUERBVEVfU0tJTik7XG59O1xuXG5Ta2luSXRlbUNvbnRyb2xsZXIuY3JlYXRlRnJvbUNDQiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBnYW1lLnV0aWxzLmxvYWROb2RlRnJvbUNDQihcInJlcy9tZW51L3NraW5faXRlbV92aWV3LmNjYmlcIiwgbnVsbCwgXCJTa2luSXRlbUNvbnRyb2xsZXJcIiwgbmV3IFNraW5JdGVtQ29udHJvbGxlcigpKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU2tpbkl0ZW1Db250cm9sbGVyOyIsInZhciBTa2luUmV3YXJkVHlwZSA9IHJlcXVpcmUoXCIuLi9lbnVtL1NraW5SZXdhcmRUeXBlXCIpO1xudmFyIEV2ZW50c05hbWUgPSByZXF1aXJlKFwiLi4vZXZlbnRzL0V2ZW50c05hbWVcIik7XG52YXIgU2tpblR5cGUgPSByZXF1aXJlKFwiLi4vZW51bS9Ta2luVHlwZVwiKTtcblxudmFyIFNraW5JdGVtVGl0bGVDb250cm9sbGVyID0gZnVuY3Rpb24gKCkge1xuICAgIEJhc2VDQ0JDb250cm9sbGVyLmNhbGwodGhpcyk7XG5cbiAgICB0aGlzLmxiU2tpblRpdGxlID0gbnVsbDtcbn07XG5cbmdhbWUudXRpbHMuaW5oZXJpdHMoU2tpbkl0ZW1UaXRsZUNvbnRyb2xsZXIsIEJhc2VDQ0JDb250cm9sbGVyKTtcblxuU2tpbkl0ZW1UaXRsZUNvbnRyb2xsZXIucHJvdG90eXBlLm9uRGlkTG9hZEZyb21DQ0IgID0gZnVuY3Rpb24oKSB7XG4gICAgQmFzZUNDQkNvbnRyb2xsZXIucHJvdG90eXBlLm9uRGlkTG9hZEZyb21DQ0IuY2FsbCh0aGlzKTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnRcbiAqL1xuU2tpbkl0ZW1UaXRsZUNvbnRyb2xsZXIucHJvdG90eXBlLmluaXRXaXRoID0gZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgICB0aGlzLmxiU2tpblRpdGxlLnNldFN0cmluZyhjb250ZW50KTtcbn07XG5cblNraW5JdGVtVGl0bGVDb250cm9sbGVyLmNyZWF0ZUZyb21DQ0IgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZ2FtZS51dGlscy5sb2FkTm9kZUZyb21DQ0IoXCJyZXMvbWVudS9za2luX2l0ZW1fdGl0bGVfdmlldy5jY2JpXCIsIG51bGwsIFwiU2tpbkl0ZW1UaXRsZUNvbnRyb2xsZXJcIiwgbmV3IFNraW5JdGVtVGl0bGVDb250cm9sbGVyKCkpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTa2luSXRlbVRpdGxlQ29udHJvbGxlcjsiLCJ2YXIgU3RvcmVIZWxwZXIgPSByZXF1aXJlKFwiLi4vbW9kZWwvU3RvcmVIZWxwZXJcIik7XG52YXIgQ29uZmlnTWFuID0gcmVxdWlyZShcIi4uL2NvbmZpZy9Db25maWdNYW5cIik7XG52YXIgRXZlbnRzTmFtZSA9IHJlcXVpcmUoXCIuLi9ldmVudHMvRXZlbnRzTmFtZVwiKTtcblxudmFyIFNwZWNpYWxPZmZlckNvbnRyb2xsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgQmFzZUNDQkNvbnRyb2xsZXIuY2FsbCh0aGlzKTtcblxuICAgIHRoaXMubGJUaXRsZSA9IG51bGw7XG5cbiAgICB0aGlzLnNwUmV3YXJkMSA9IG51bGw7XG4gICAgdGhpcy5sYlJld2FyZDEgPSBudWxsO1xuICAgIHRoaXMubGJSZXdhcmQyID0gbnVsbDtcbiAgICB0aGlzLmxiUmV3YXJkMyA9IG51bGw7XG4gICAgLy90aGlzLnNwUmV3YXJkMiA9IG51bGw7XG4gICAgLy90aGlzLmxiUmV3YXJkMiA9IG51bGw7XG4gICAgLy90aGlzLmxiTGVmdFRpbWUgPSBudWxsO1xuXG4gICAgdGhpcy5sYmxPcmlnaW5hbFByaWNlID0gbnVsbDtcbiAgICB0aGlzLmxiUHJpY2UgPSBudWxsO1xuICAgIHRoaXMubGJsRGlzY291bnQgPSBudWxsO1xuXG4gICAgdGhpcy5idG5QdXJjaGFzZSA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7U3RvcmVDb25maWd9XG4gICAgICovXG4gICAgdGhpcy5zcGVjaWFsT2ZmZXJDZmcgPSBudWxsO1xufTtcblxuZ2FtZS51dGlscy5pbmhlcml0cyhTcGVjaWFsT2ZmZXJDb250cm9sbGVyLCBCYXNlQ0NCQ29udHJvbGxlcik7XG5cblNwZWNpYWxPZmZlckNvbnRyb2xsZXIucHJvdG90eXBlLm9uRW50ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgQmFzZUNDQkNvbnRyb2xsZXIucHJvdG90eXBlLm9uRW50ZXIuY2FsbCh0aGlzKTtcbiAgICBnYW1lLmV2ZW50RGlzcGF0Y2hlci5hZGRFdmVudExpc3RlbmVyKEV2ZW50c05hbWUuUFVSQ0hBU0VfRU5ELCB0aGlzLm9uUHVyY2hhc2VFbmQsIHRoaXMpO1xufTtcblxuU3BlY2lhbE9mZmVyQ29udHJvbGxlci5wcm90b3R5cGUub25FeGl0ID0gZnVuY3Rpb24gKCkge1xuICAgIGdhbWUuZXZlbnREaXNwYXRjaGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoRXZlbnRzTmFtZS5QVVJDSEFTRV9FTkQsIHRoaXMub25QdXJjaGFzZUVuZCwgdGhpcyk7XG4gICAgQmFzZUNDQkNvbnRyb2xsZXIucHJvdG90eXBlLm9uRXhpdC5jYWxsKHRoaXMpO1xufTtcblxuU3BlY2lhbE9mZmVyQ29udHJvbGxlci5wcm90b3R5cGUub25EaWRMb2FkRnJvbUNDQiAgPSBmdW5jdGlvbigpIHtcbiAgICBCYXNlQ0NCQ29udHJvbGxlci5wcm90b3R5cGUub25EaWRMb2FkRnJvbUNDQi5jYWxsKHRoaXMpO1xuICAgIHRoaXMuc3BlY2lhbE9mZmVyQ2ZnID0gQ29uZmlnTWFuLmdldEluc3RhbmNlKCkuZ2V0U3BlY2lhbE9mZmVyQ2ZnKCk7XG4gICAgdGhpcy5sYlRpdGxlLnNldFN0cmluZyhfKFwic3BlY2lhbF9vZmZlcl90aXRsZVwiKSk7XG4gICAgdGhpcy5sYlJld2FyZDEuc2V0U3RyaW5nKFwieFwiICsgdGhpcy5zcGVjaWFsT2ZmZXJDZmcuZGF0YS5kaWFtb25kcyk7XG4gICAgLy90aGlzLmxiUmV3YXJkMi5zZXRTdHJpbmcoXCJ4XCIgKyB0aGlzLnNwZWNpYWxPZmZlckNmZy5kYXRhLm11bHRpcGxlXzMpO1xuICAgIC8vdGhpcy5sYlJld2FyZDMuc2V0U3RyaW5nKFwieFwiICsgdGhpcy5zcGVjaWFsT2ZmZXJDZmcuZGF0YS5uZXdfMyk7XG5cblxuICAgIHRoaXMubGJQcmljZS5zZXRTdHJpbmcodGhpcy5zcGVjaWFsT2ZmZXJDZmcucHJpY2UpO1xuICAgIHRoaXMubGJsT3JpZ2luYWxQcmljZS5zZXRTdHJpbmcodGhpcy5zcGVjaWFsT2ZmZXJDZmcub3JpZ2luYWxfcHJpY2UpO1xuICAgIHRoaXMubGJsRGlzY291bnQuc2V0U3RyaW5nKGdhbWUudXRpbHMuc3ByaW50ZihfKFwibW9yZV90aXRsZVwiKSwgXCJcIiArICh0aGlzLnNwZWNpYWxPZmZlckNmZy5kaXNjb3VudF9tdWx0aSAqIDEwMCkpKTtcbn07XG5cblNwZWNpYWxPZmZlckNvbnRyb2xsZXIucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoY2xvc2VDYWxsYmFjaykge1xuICAgIHRoaXMuY2xvc2VDYWxsYmFjayA9IGNsb3NlQ2FsbGJhY2s7XG59O1xuXG5TcGVjaWFsT2ZmZXJDb250cm9sbGVyLnByb3RvdHlwZS5jbG9zZUNsaWNrZWQgPSBmdW5jdGlvbiAoc2VuZGVyKSB7XG4gICAgQXVkaW9IZWxwZXIucGxheUJ0blNvdW5kKCk7XG4gICAgdGhpcy5jbG9zZSgpO1xufTtcblxuU3BlY2lhbE9mZmVyQ29udHJvbGxlci5wcm90b3R5cGUub25QdXJjaGFzZUVuZCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHZhciBzdWNjZXNzID0gZXZlbnQuZ2V0VXNlckRhdGEoKTtcbiAgICBpZiAoc3VjY2Vzcykge1xuICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5idG5QdXJjaGFzZS5lbmFibGVkID0gdHJ1ZTtcbiAgICB9XG59O1xuXG5TcGVjaWFsT2ZmZXJDb250cm9sbGVyLnByb3RvdHlwZS5vblB1cmNoYXNlID0gZnVuY3Rpb24gKHNlbmRlcikge1xuICAgIEF1ZGlvSGVscGVyLnBsYXlCdG5Tb3VuZCgpO1xuICAgIHRoaXMuYnRuUHVyY2hhc2UuZW5hYmxlZCA9IGZhbHNlO1xuICAgIFN0b3JlSGVscGVyLmdldEluc3RhbmNlKCkuYnV5UHJvZHVjdCh0aGlzLnNwZWNpYWxPZmZlckNmZyk7XG59O1xuXG5TcGVjaWFsT2ZmZXJDb250cm9sbGVyLnByb3RvdHlwZS5wb3B1cCA9IGZ1bmN0aW9uICgpIHtcbiAgICBnYW1lLmRpYWxvZ01hbmFnZXIucG9wdXAodGhpcy5yb290Tm9kZSwge3BvcHVwQW5pbTogdHJ1ZX0pO1xufTtcblxuU3BlY2lhbE9mZmVyQ29udHJvbGxlci5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgZ2FtZS5kaWFsb2dNYW5hZ2VyLmNsb3NlKHRoaXMucm9vdE5vZGUpO1xuICAgIGlmICh0aGlzLmNsb3NlQ2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5jbG9zZUNhbGxiYWNrKCk7XG4gICAgICAgIHRoaXMuY2xvc2VDYWxsYmFjayA9IG51bGw7XG4gICAgfVxufTtcblxuU3BlY2lhbE9mZmVyQ29udHJvbGxlci5jcmVhdGVGcm9tQ0NCID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG5vZGUgPSBnYW1lLnV0aWxzLmxvYWROb2RlRnJvbUNDQihcInJlcy9zdG9yZS9zcGVjaWFsX29mZmVyX3ZpZXcuY2NiaVwiLCBudWxsLCBcIlNwZWNpYWxPZmZlckNvbnRyb2xsZXJcIiwgbmV3IFNwZWNpYWxPZmZlckNvbnRyb2xsZXIoKSk7XG4gICAgcmV0dXJuIG5vZGU7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNwZWNpYWxPZmZlckNvbnRyb2xsZXI7IiwidmFyIE11bHRpQ29sVGFibGVWaWV3ID0gcmVxdWlyZShcIi4uLy4uL2NvbW1vbi9leHQvTXVsdGlDb2xUYWJsZVZpZXdcIik7XG52YXIgU3RvcmVJdGVtQ29udHJvbGxlciA9IHJlcXVpcmUoXCIuL1N0b3JlSXRlbUNvbnRyb2xsZXJcIik7XG52YXIgU3RvcmVIZWxwZXIgPSByZXF1aXJlKFwiLi4vbW9kZWwvU3RvcmVIZWxwZXJcIik7XG52YXIgU2tpbkl0ZW1Db250cm9sbGVyID0gcmVxdWlyZShcIi4vU2tpbkl0ZW1Db250cm9sbGVyXCIpO1xudmFyIFNraW5JdGVtVGl0bGVDb250cm9sbGVyID0gcmVxdWlyZShcIi4vU2tpbkl0ZW1UaXRsZUNvbnRyb2xsZXJcIik7XG52YXIgQ29uZmlnTWFuID0gcmVxdWlyZShcIi4uL2NvbmZpZy9Db25maWdNYW5cIik7XG52YXIgU3RvcmVUeXBlID0gcmVxdWlyZShcIi4uL2VudW0vU3RvcmVUeXBlXCIpO1xudmFyIEV2ZW50c05hbWUgPSByZXF1aXJlKFwiLi4vZXZlbnRzL0V2ZW50c05hbWVcIik7XG5cbnZhciBTdG9yZVRhYiA9IHtcbiAgICBESUFNT05EUzogMCxcbiAgICBTS0lOUzogMVxufTtcblxudmFyIFRhYlZpc3VhbENvbmZpZyA9IHt9O1xuVGFiVmlzdWFsQ29uZmlnW1N0b3JlVGFiLkRJQU1PTkRTXSA9IHtcbiAgICB0YWJOb2RlOiBcInRhYkRpYW1vbmRzTGlnaHRcIixcbiAgICB1bnNlbGVjdE5vZGU6IFwidGFiRGlhbW9uZHNEYXJrXCIsXG4gICAgY29udGVudE5vZGU6XCJkaWFtb25kc0NvbnRlbnROb2RlXCJcbn07XG5UYWJWaXN1YWxDb25maWdbU3RvcmVUYWIuU0tJTlNdID0ge1xuICAgIHRhYk5vZGU6XCJ0YWJTa2luTGlnaHRcIixcbiAgICB1bnNlbGVjdE5vZGU6XCJ0YWJTa2luRGFya1wiLFxuICAgIGNvbnRlbnROb2RlOlwic2tpbkNvbnRlbnROb2RlXCJcbn07XG5cbnZhciBTdG9yZVNpemUgPSBjYy5zaXplKDU3MSwgMTEwKTtcbnZhciBTa2luU2l6ZSA9IGNjLnNpemUoMjg1LCAyMDApO1xudmFyIFNraW5UaXRsZVNpemUgPSBjYy5zaXplKDU3MSwgNTgpO1xuXG52YXIgU3RvcmVJdGVtQ2VsbFZpZXcgPSBjYy5UYWJsZVZpZXdDZWxsLmV4dGVuZCh7XG4gICAgZW50aXR5OiBudWxsLFxuICAgIGl0ZW1Ob2RlOiBudWxsLFxuICAgIGN0b3I6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fc3VwZXIoKTtcbiAgICAgICAgdGhpcy5pdGVtTm9kZSA9IFN0b3JlSXRlbUNvbnRyb2xsZXIuY3JlYXRlRnJvbUNDQigpO1xuICAgICAgICB0aGlzLmFkZENoaWxkKHRoaXMuaXRlbU5vZGUpO1xuICAgICAgICB0aGlzLml0ZW1Ob2RlLnNldFBvc2l0aW9uKGNjLnAoU3RvcmVTaXplLndpZHRoICogMC41LCBTdG9yZVNpemUuaGVpZ2h0ICogMC41KSk7XG4gICAgfSxcblxuICAgIGluaXRXaXRoOiBmdW5jdGlvbiAoZW50aXR5LCBpZHgpIHtcbiAgICAgICAgdGhpcy5lbnRpdHkgPSBlbnRpdHk7XG4gICAgICAgIHRoaXMuaXRlbU5vZGUuY29udHJvbGxlci5pbml0V2l0aChlbnRpdHksIGlkeCk7XG4gICAgfVxufSk7XG5cbnZhciBTa2luSXRlbUNlbGxWaWV3ID0gY2MuVGFibGVWaWV3Q2VsbC5leHRlbmQoe1xuICAgIGVudGl0eTogbnVsbCxcbiAgICBpdGVtTm9kZTogbnVsbCxcbiAgICBjdG9yOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX3N1cGVyKCk7XG4gICAgICAgIHRoaXMuaXRlbU5vZGUgPSBTa2luSXRlbUNvbnRyb2xsZXIuY3JlYXRlRnJvbUNDQigpO1xuICAgICAgICB0aGlzLmFkZENoaWxkKHRoaXMuaXRlbU5vZGUpO1xuICAgICAgICB0aGlzLml0ZW1Ob2RlLnNldFBvc2l0aW9uKGNjLnAoU2tpblNpemUud2lkdGggKiAwLjUsIFNraW5TaXplLmhlaWdodCAqIDAuNSkpO1xuICAgIH0sXG5cbiAgICBpbml0V2l0aDogZnVuY3Rpb24gKGVudGl0eSwgaWR4KSB7XG4gICAgICAgIHRoaXMuZW50aXR5ID0gZW50aXR5O1xuICAgICAgICB0aGlzLml0ZW1Ob2RlLmNvbnRyb2xsZXIuaW5pdFdpdGgoZW50aXR5LCBpZHgpO1xuICAgIH1cbn0pO1xuXG52YXIgU2tpbkl0ZW1UaXRsZUNlbGxWaWV3ID0gY2MuVGFibGVWaWV3Q2VsbC5leHRlbmQoe1xuICAgIC8vZW50aXR5OiBudWxsLFxuICAgIGl0ZW1Ob2RlOiBudWxsLFxuICAgIGN0b3I6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fc3VwZXIoKTtcbiAgICAgICAgdGhpcy5pdGVtTm9kZSA9IFNraW5JdGVtVGl0bGVDb250cm9sbGVyLmNyZWF0ZUZyb21DQ0IoKTtcbiAgICAgICAgdGhpcy5hZGRDaGlsZCh0aGlzLml0ZW1Ob2RlKTtcbiAgICAgICAgdGhpcy5pdGVtTm9kZS5zZXRQb3NpdGlvbihjYy5wKFNraW5UaXRsZVNpemUud2lkdGggKiAwLjUsIFNraW5UaXRsZVNpemUuaGVpZ2h0ICogMC41KSk7XG4gICAgfSxcblxuICAgIGluaXRXaXRoOiBmdW5jdGlvbiAoY29udGVudCkge1xuICAgICAgICAvL3RoaXMuZW50aXR5ID0gZW50aXR5O1xuICAgICAgICB0aGlzLml0ZW1Ob2RlLmNvbnRyb2xsZXIuaW5pdFdpdGgoY29udGVudCk7XG4gICAgfVxufSk7XG5cbnZhciBTS0lOX1RJVExFX0NPTF9JTkRFWCA9IDEyO1xuXG52YXIgU3RvcmVDb250cm9sbGVyID0gZnVuY3Rpb24gKCkge1xuICAgIEJhc2VDQ0JDb250cm9sbGVyLmNhbGwodGhpcyk7XG4gICAgLy90aGlzLmxiQ2hhcHRlck5hbWUgPSBudWxsO1xuICAgIHRoaXMubmRDb250YWluZXIgPSBudWxsO1xuXG4gICAgdGhpcy5uZFRpdGxlID0gbnVsbDtcbiAgICB0aGlzLmxiU3RvcmVOYW1lID0gbnVsbDtcblxuICAgIHRoaXMubGJEaWFtb25kcyA9IG51bGw7XG5cbiAgICAvL3VzZXIgZGF0YS5cbiAgICB0aGlzLmNvbmZpZ3MgPSBudWxsO1xuICAgIHRoaXMuY2xvc2VDYWxsYmFjayA9IG51bGw7XG59O1xuXG5nYW1lLnV0aWxzLmluaGVyaXRzKFN0b3JlQ29udHJvbGxlciwgQmFzZUNDQkNvbnRyb2xsZXIpO1xuXG5TdG9yZUNvbnRyb2xsZXIucHJvdG90eXBlLm9uRXhpdCA9IGZ1bmN0aW9uICgpIHtcbiAgICBnYW1lLmV2ZW50RGlzcGF0Y2hlci5yZW1vdmVFdmVudExpc3RlbmVyKEV2ZW50c05hbWUuRElBTU9ORFNfVVBEQVRFLCB0aGlzLm9uVXBkYXRlRGlhbW9uZHMsIHRoaXMpO1xuICAgIGdhbWUuZXZlbnREaXNwYXRjaGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoRXZlbnRzTmFtZS5VUERBVEVfQUlNX0lURU0sIHRoaXMub25VcGRhdGVBaW1JdGVtLCB0aGlzKTtcbiAgICBpZiAodGhpcy5jbG9zZUNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuY2xvc2VDYWxsYmFjaygpO1xuICAgICAgICB0aGlzLmNsb3NlQ2FsbGJhY2sgPSBudWxsO1xuICAgIH1cbn07XG5cblN0b3JlQ29udHJvbGxlci5wcm90b3R5cGUub25FbnRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICBnYW1lLmV2ZW50RGlzcGF0Y2hlci5hZGRFdmVudExpc3RlbmVyKEV2ZW50c05hbWUuVVBEQVRFX0FJTV9JVEVNLCB0aGlzLm9uVXBkYXRlQWltSXRlbSwgdGhpcyk7XG4gICAgZ2FtZS5ldmVudERpc3BhdGNoZXIuYWRkRXZlbnRMaXN0ZW5lcihFdmVudHNOYW1lLkRJQU1PTkRTX1VQREFURSwgdGhpcy5vblVwZGF0ZURpYW1vbmRzLCB0aGlzKTtcbiAgICAvL3RoaXMucmVmcmVzaFVJKCk7XG4gICAgdGhpcy5vblVwZGF0ZURpYW1vbmRzKCk7XG59O1xuXG5TdG9yZUNvbnRyb2xsZXIucHJvdG90eXBlLm9uVXBkYXRlRGlhbW9uZHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5sYkRpYW1vbmRzLnNldFN0cmluZyhnYW1lLnBsYXllck1hbi5nZXREaWFtb25kcygpKTtcbn07XG5cblN0b3JlQ29udHJvbGxlci5wcm90b3R5cGUub25VcGRhdGVBaW1JdGVtID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBkaWFtb25kc1RhYmxlVmlldyA9IHRoaXNbVGFiVmlzdWFsQ29uZmlnW1N0b3JlVGFiLkRJQU1PTkRTXS5jb250ZW50Tm9kZV07XG4gICAgaWYgKGRpYW1vbmRzVGFibGVWaWV3KSB7XG4gICAgICAgIGRpYW1vbmRzVGFibGVWaWV3LnJlbG9hZERhdGEoKTtcbiAgICB9XG59O1xuXG5TdG9yZUNvbnRyb2xsZXIucHJvdG90eXBlLm9uRGlkTG9hZEZyb21DQ0IgID0gZnVuY3Rpb24oKSB7XG4gICAgQmFzZUNDQkNvbnRyb2xsZXIucHJvdG90eXBlLm9uRGlkTG9hZEZyb21DQ0IuY2FsbCh0aGlzKTtcbiAgICB0aGlzLmxiU3RvcmVOYW1lLnNldFN0cmluZyhnYW1lLmxvY2FsLmdldFZhbHVlKFwic3RvcmVfdGl0bGVcIikpO1xuICAgIHRoaXMuaW5pdFN0b3JlVUkoKTtcbn07XG5cblN0b3JlQ29udHJvbGxlci5wcm90b3R5cGUuaW5pdFN0b3JlVUkgPSBmdW5jdGlvbiAoKSB7XG4gICAgLy92YXIgb3JpZ2luYWxUYWIgPSB0aGlzLmN1cnJlbnRUYWI7XG4gICAgdmFyIHNraW5Db25maWdzID0gQ29uZmlnTWFuLmdldEluc3RhbmNlKCkuZ2V0U2tpbkxpc3QoKTtcbiAgICBjYy5sb2coXCJza2luQ29uZmlncyBsZW5ndGg6XCIgKyBza2luQ29uZmlncy5sZW5ndGgpO1xuICAgIC8vdGhpcy5jdXJyZW50VGFiID0gU3RvcmVUYWIuU0tJTlM7XG4gICAgdGhpc1tUYWJWaXN1YWxDb25maWdbU3RvcmVUYWIuU0tJTlNdLmNvbnRlbnROb2RlXSA9IHRoaXMuZ2V0VGFibGVWaWV3KHtcbiAgICAgICAgZ3JpZEF0SW5kZXg6IGZ1bmN0aW9uIChtdWx0aVRhYmxlLCBpZHgpIHtcbiAgICAgICAgICAgIC8vdmFyIGNlbGwgPSBtdWx0aVRhYmxlLmRlcXVldWVHcmlkKCk7XG4gICAgICAgICAgICAvL2lmICghY2VsbCkge1xuICAgICAgICAgICAgLy8gICAgY2VsbCA9IG5ldyBTa2luSXRlbUNlbGxWaWV3KCk7XG4gICAgICAgICAgICAvL31cbiAgICAgICAgICAgIHZhciBza2luQ2VsbDtcbiAgICAgICAgICAgIHZhciBza2luVGl0bGVDZWxsO1xuICAgICAgICAgICAgaWYgKGlkeCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHNraW5UaXRsZUNlbGwgPSBuZXcgU2tpbkl0ZW1UaXRsZUNlbGxWaWV3KCk7XG4gICAgICAgICAgICAgICAgc2tpblRpdGxlQ2VsbC5pbml0V2l0aChfKFwid2F0Y2hfYWRzX2dldF9za2luX3RpdGxlXCIpKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaWR4ID09PSAxKSB7XG4gICAgICAgICAgICAgICAgc2tpblRpdGxlQ2VsbCA9IG5ldyBTa2luSXRlbVRpdGxlQ2VsbFZpZXcoKTtcbiAgICAgICAgICAgICAgICBza2luVGl0bGVDZWxsLnZpc2libGUgPSBmYWxzZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaWR4ID09PSBTS0lOX1RJVExFX0NPTF9JTkRFWCAqIDIpIHtcbiAgICAgICAgICAgICAgICBza2luVGl0bGVDZWxsID0gbmV3IFNraW5JdGVtVGl0bGVDZWxsVmlldygpO1xuICAgICAgICAgICAgICAgIHNraW5UaXRsZUNlbGwuaW5pdFdpdGgoXyhcImNvc3RfZGlhbW9uZHNfZ2V0X3NraW5fdGl0bGVcIikpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpZHggPT09IFNLSU5fVElUTEVfQ09MX0lOREVYICogMiArIDEpIHtcbiAgICAgICAgICAgICAgICBza2luVGl0bGVDZWxsID0gbmV3IFNraW5JdGVtVGl0bGVDZWxsVmlldygpO1xuICAgICAgICAgICAgICAgIHNraW5UaXRsZUNlbGwudmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBza2luQ2VsbCA9IG5ldyBTa2luSXRlbUNlbGxWaWV3KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChza2luQ2VsbCkge1xuICAgICAgICAgICAgICAgIHZhciBjb25maWc7XG4gICAgICAgICAgICAgICAgaWYgKGlkeCA+IDEgJiYgaWR4IDwgU0tJTl9USVRMRV9DT0xfSU5ERVggKiAyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZyA9IHNraW5Db25maWdzW2lkeCAtIDJdO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZyA9IHNraW5Db25maWdzW2lkeCAtIDRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoY29uZmlnKSB7XG4gICAgICAgICAgICAgICAgICAgIHNraW5DZWxsLmluaXRXaXRoKGNvbmZpZywgaWR4KTtcbiAgICAgICAgICAgICAgICAgICAgc2tpbkNlbGwudmlzaWJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc2tpbkNlbGwudmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHNraW5DZWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNraW5DZWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHNraW5UaXRsZUNlbGw7XG4gICAgICAgIH0sXG5cbiAgICAgICAgbnVtYmVyT2ZDZWxsc0luVGFibGVWaWV3OiBmdW5jdGlvbiAobXVsdGlUYWJsZSkge1xuICAgICAgICAgICAgdmFyIGdyaWRzSW5DZWxsID0gdGhpcy5udW1iZXJPZkdyaWRzSW5DZWxsKG11bHRpVGFibGUpO1xuICAgICAgICAgICAgcmV0dXJuIE1hdGguY2VpbChza2luQ29uZmlncy5sZW5ndGggLyBncmlkc0luQ2VsbCkgKyAyO1xuICAgICAgICB9LFxuXG4gICAgICAgIG51bWJlck9mR3JpZHNJbkNlbGw6IGZ1bmN0aW9uIChtdWx0aVRhYmxlLCBjb2xJZHgpIHtcbiAgICAgICAgICAgIHJldHVybiAyO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdyaWRTaXplRm9yVGFibGU6IGZ1bmN0aW9uICh0YWJsZSwgY29sSWR4KSB7XG4gICAgICAgICAgICAvL3JldHVybiBjYy5zaXplKDIwMCwgMjAwKTtcbiAgICAgICAgICAgIGlmIChjb2xJZHggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2Muc2l6ZShTa2luVGl0bGVTaXplLndpZHRoLCBTa2luVGl0bGVTaXplLmhlaWdodCArIDE1KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29sSWR4ID09PSBTS0lOX1RJVExFX0NPTF9JTkRFWCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYy5zaXplKFNraW5UaXRsZVNpemUud2lkdGgsIFNraW5UaXRsZVNpemUuaGVpZ2h0KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNjLnNpemUoU2tpblNpemUud2lkdGgsIFNraW5TaXplLmhlaWdodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGdyaWRUb3VjaGVkOiBmdW5jdGlvbiAodGFibGUsIGdyaWQpIHtcbiAgICAgICAgICAgIC8vY2MubG9nKFwiZ3JpZCB0b3VjaGVkIGF0IGluZGV4OiBcIiArIGdyaWQuZ2V0SWR4KCkpO1xuICAgICAgICAgICAgLy92YXIgZW50aXR5ID0gZ3JpZC5lbnRpdHk7XG4gICAgICAgICAgICAvL0F1ZGlvSGVscGVyLnBsYXlCdG5Tb3VuZCgpO1xuICAgICAgICAgICAgLy9TdG9yZUhlbHBlci5nZXRJbnN0YW5jZSgpLmJ1eVNraW4oZW50aXR5KTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIGRpYW1vbmRDb25maWdzID0gQ29uZmlnTWFuLmdldEluc3RhbmNlKCkuZ2V0U3RvcmVMaXN0V2l0aG91dEZpcnN0UHVyY2hhc2UoKTtcbiAgICAvL3RoaXMuY3VycmVudFRhYiA9IFN0b3JlVGFiLkRJQU1PTkRTO1xuICAgIHRoaXNbVGFiVmlzdWFsQ29uZmlnW1N0b3JlVGFiLkRJQU1PTkRTXS5jb250ZW50Tm9kZV0gPSB0aGlzLmdldFRhYmxlVmlldyh7XG4gICAgICAgIGdyaWRBdEluZGV4OiBmdW5jdGlvbiAobXVsdGlUYWJsZSwgaWR4KSB7XG4gICAgICAgICAgICB2YXIgY2VsbCA9IG11bHRpVGFibGUuZGVxdWV1ZUdyaWQoKTtcbiAgICAgICAgICAgIGlmICghY2VsbCkge1xuICAgICAgICAgICAgICAgIGNlbGwgPSBuZXcgU3RvcmVJdGVtQ2VsbFZpZXcoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGlkeCA8IGRpYW1vbmRDb25maWdzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHZhciBjb25maWcgPSBkaWFtb25kQ29uZmlnc1tpZHhdO1xuICAgICAgICAgICAgICAgIGNlbGwuaW5pdFdpdGgoY29uZmlnLCBpZHgpO1xuICAgICAgICAgICAgICAgIGNlbGwudmlzaWJsZSA9IHRydWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNlbGwudmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gY2VsbDtcbiAgICAgICAgfSxcblxuICAgICAgICBudW1iZXJPZkNlbGxzSW5UYWJsZVZpZXc6IGZ1bmN0aW9uIChtdWx0aVRhYmxlKSB7XG4gICAgICAgICAgICByZXR1cm4gZGlhbW9uZENvbmZpZ3MubGVuZ3RoO1xuICAgICAgICB9LFxuXG4gICAgICAgIG51bWJlck9mR3JpZHNJbkNlbGw6IGZ1bmN0aW9uIChtdWx0aVRhYmxlLCBjb2xJZHgpIHtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdyaWRTaXplRm9yVGFibGU6IGZ1bmN0aW9uICh0YWJsZSwgY29sSWR4KSB7XG4gICAgICAgICAgICByZXR1cm4gU3RvcmVTaXplO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBncmlkVG91Y2hlZDogZnVuY3Rpb24gKHRhYmxlLCBncmlkKSB7XG4gICAgICAgICAgICAvL2NjLmxvZyhcImdyaWQgdG91Y2hlZCBhdCBpbmRleDogXCIgKyBncmlkLmdldElkeCgpKTtcbiAgICAgICAgICAgIC8vdmFyIGVudGl0eSA9IGdyaWQuZW50aXR5O1xuICAgICAgICAgICAgLy9BdWRpb0hlbHBlci5wbGF5QnRuU291bmQoKTtcbiAgICAgICAgICAgIC8vU3RvcmVIZWxwZXIuZ2V0SW5zdGFuY2UoKS5idXlQcm9kdWN0KGVudGl0eSk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vdGhpcy5jdXJyZW50VGFiID0gb3JpZ2luYWxUYWI7XG59O1xuXG5TdG9yZUNvbnRyb2xsZXIucHJvdG90eXBlLnJlZnJlc2hVSSA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuY3VycmVudFRhYiA9IHRoaXMuY3VycmVudFRhYiB8fCBTdG9yZVRhYi5ESUFNT05EUztcbiAgICBjYy5sb2coXCJTdG9yZUNvbnRyb2xsZXIucHJvdG90eXBlLnJlZnJlc2hVSTpcIiArIHRoaXMuY3VycmVudFRhYik7XG4gICAgLy90aGlzLmN1cnJlbnRUYWIgPSBTdG9yZVRhYi5TS0lOUztcbiAgICBmb3IodmFyIGkgaW4gVGFiVmlzdWFsQ29uZmlnKSB7XG4gICAgICAgIC8vdmFyIHRhYk5vZGUgPSB0aGlzW1RhYlZpc3VhbENvbmZpZ1tpXS50YWJOb2RlXTtcbiAgICAgICAgdmFyIHVuU2VsZWN0Tm9kZSA9IHRoaXNbVGFiVmlzdWFsQ29uZmlnW2ldLnVuc2VsZWN0Tm9kZV07XG4gICAgICAgIHZhciBjb250ZW50Tm9kZSA9IHRoaXNbVGFiVmlzdWFsQ29uZmlnW2ldLmNvbnRlbnROb2RlXTtcbiAgICAgICAgLy90YWJOb2RlICYmIHRhYk5vZGUuc2V0VmlzaWJsZShOdW1iZXIoaSkgPT09IHRoaXMuY3VycmVudFRhYik7XG4gICAgICAgIGNvbnRlbnROb2RlICYmIGNvbnRlbnROb2RlLnNldFZpc2libGUoTnVtYmVyKGkpID09PSB0aGlzLmN1cnJlbnRUYWIpO1xuICAgICAgICB1blNlbGVjdE5vZGUgJiYgdW5TZWxlY3ROb2RlLnNldFZpc2libGUoTnVtYmVyKGkpICE9PSB0aGlzLmN1cnJlbnRUYWIpO1xuICAgIH1cbn07XG5cblN0b3JlQ29udHJvbGxlci5wcm90b3R5cGUuaW5pdFdpdGggPSBmdW5jdGlvbiAodHlwZSwgY2FsbGJhY2spIHtcbiAgICBjYy5sb2coXCJTdG9yZUNvbnRyb2xsZXIucHJvdG90eXBlLmluaXRXaXRoOlwiICsgdHlwZSk7XG4gICAgaWYgKHR5cGUgPT09IFN0b3JlVHlwZS5TS0lOKSB7XG4gICAgICAgIHRoaXMuY3VycmVudFRhYiA9IFN0b3JlVGFiLlNLSU5TO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gU3RvcmVUeXBlLkRJQU1PTkQpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50VGFiID0gU3RvcmVUYWIuRElBTU9ORFM7XG4gICAgfVxuICAgIHRoaXMucmVmcmVzaFVJKCk7XG4gICAgdGhpcy5jbG9zZUNhbGxiYWNrID0gY2FsbGJhY2s7XG59O1xuXG5TdG9yZUNvbnRyb2xsZXIucHJvdG90eXBlLmdldFRhYmxlVmlldyA9IGZ1bmN0aW9uIChkYXRhU291cmNlLCBkZWxlZ2F0ZSkge1xuICAgIHZhciB0YWJsZVZpZXcgPSBuZXcgTXVsdGlDb2xUYWJsZVZpZXcoZGF0YVNvdXJjZSwgdGhpcy5uZENvbnRhaW5lci5nZXRDb250ZW50U2l6ZSgpLCBudWxsKTtcbiAgICB0YWJsZVZpZXcuc2V0RGlyZWN0aW9uKGNjLlNDUk9MTFZJRVdfRElSRUNUSU9OX1ZFUlRJQ0FMKTtcbiAgICB0YWJsZVZpZXcuc2V0VmVydGljYWxGaWxsT3JkZXIoY2MuVEFCTEVWSUVXX0ZJTExfVE9QRE9XTik7XG4gICAgdGFibGVWaWV3LnNldE11bHRpVGFibGVWaWV3RGVsZWdhdGUoZGVsZWdhdGUpO1xuICAgIHRhYmxlVmlldy5pZ25vcmVBbmNob3JQb2ludEZvclBvc2l0aW9uKGZhbHNlKTtcbiAgICB0YWJsZVZpZXcuc2V0QW5jaG9yUG9pbnQoY2MucCgwLCAwKSk7XG4gICAgdGFibGVWaWV3LnJlbG9hZERhdGEoKTtcbiAgICB0aGlzLm5kQ29udGFpbmVyLmFkZENoaWxkKHRhYmxlVmlldyk7XG4gICAgcmV0dXJuIHRhYmxlVmlldztcbn07XG5cblN0b3JlQ29udHJvbGxlci5wcm90b3R5cGUub25DbGlja1NraW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgQXVkaW9IZWxwZXIucGxheUJ0blNvdW5kKCk7XG4gICAgdGhpcy5jdXJyZW50VGFiID0gU3RvcmVUYWIuU0tJTlM7XG4gICAgdGhpcy5yZWZyZXNoVUkoKTtcbn07XG5cblN0b3JlQ29udHJvbGxlci5wcm90b3R5cGUub25DbGlja0RpYW1vbmRzID0gZnVuY3Rpb24gKCkge1xuICAgIEF1ZGlvSGVscGVyLnBsYXlCdG5Tb3VuZCgpO1xuICAgIHRoaXMuY3VycmVudFRhYiA9IFN0b3JlVGFiLkRJQU1PTkRTO1xuICAgIHRoaXMucmVmcmVzaFVJKCk7XG59O1xuXG5TdG9yZUNvbnRyb2xsZXIucHJvdG90eXBlLmJhY2tDbGlja2VkID0gZnVuY3Rpb24gKHNlbmRlcikge1xuICAgIEF1ZGlvSGVscGVyLnBsYXlCdG5Tb3VuZCgpO1xuXG4gICAgdGhpcy5jbG9zZSgpO1xufTtcblxuU3RvcmVDb250cm9sbGVyLnByb3RvdHlwZS5wb3B1cCA9IGZ1bmN0aW9uICgpIHtcbiAgICBnYW1lLmRpYWxvZ01hbmFnZXIucG9wdXAodGhpcy5yb290Tm9kZSwge3BvcHVwQW5pbTogdHJ1ZX0pO1xufTtcblxuU3RvcmVDb250cm9sbGVyLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBnYW1lLmRpYWxvZ01hbmFnZXIuY2xvc2UodGhpcy5yb290Tm9kZSk7XG59O1xuXG5TdG9yZUNvbnRyb2xsZXIuY3JlYXRlRnJvbUNDQiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBub2RlID0gZ2FtZS51dGlscy5sb2FkTm9kZUZyb21DQ0IoXCJyZXMvc3RvcmUvc3RvcmVfdmlldy5jY2JpXCIsIG51bGwsIFwiU3RvcmVDb250cm9sbGVyXCIsIG5ldyBTdG9yZUNvbnRyb2xsZXIoKSk7XG4gICAgcmV0dXJuIG5vZGU7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN0b3JlQ29udHJvbGxlcjsiLCJ2YXIgU3RvcmVUeXBlID0gcmVxdWlyZShcIi4uL2VudW0vU3RvcmVUeXBlXCIpO1xudmFyIEV2ZW50c05hbWUgPSByZXF1aXJlKFwiLi4vZXZlbnRzL0V2ZW50c05hbWVcIik7XG5cbnZhciBTdG9yZUl0ZW1Db250cm9sbGVyID0gZnVuY3Rpb24gKCkge1xuICAgIEJhc2VDQ0JDb250cm9sbGVyLmNhbGwodGhpcyk7XG5cbiAgICAvL3ByaWNlXG4gICAgdGhpcy5sYlByaWNlID0gbnVsbDtcbiAgICB0aGlzLnNwUmV3YXJkZWRWaWRlbyA9IG51bGw7XG4gICAgdGhpcy5uZERpYW1vbmRQcmljZSA9IG51bGw7XG4gICAgdGhpcy5sYkRpYW1vbmRQcmljZSA9IG51bGw7XG5cbiAgICAvL25vZGVcbiAgICB0aGlzLm5kUmVzdG9yZSA9IG51bGw7XG4gICAgdGhpcy5uZEJvb3N0cyA9IG51bGw7XG4gICAgdGhpcy5uZERpYW1vbmQgPSBudWxsO1xuICAgIHRoaXMubmRQdXJjaGFzZSA9IG51bGw7XG4gICAgdGhpcy5uZE93bmVkID0gbnVsbDtcblxuICAgIC8vXG4gICAgdGhpcy5sYlNwbGl0ID0gbnVsbDtcbiAgICB0aGlzLmxiTmV3VGhyZWUgPSBudWxsO1xuICAgIHRoaXMubGJEaWFtb25kID0gbnVsbDtcbiAgICB0aGlzLnNwRGlhbW9uZCA9IG51bGw7XG5cbiAgICAvL3RhZ1xuICAgIHRoaXMuc3BIb3RUYWcgPSBudWxsO1xuICAgIHRoaXMuc3BGcmVlVGFnID0gbnVsbDtcbiAgICB0aGlzLnNwUGVyY2VudFRhZyA9IG51bGw7XG5cbiAgICB0aGlzLnNwUmVkQmcgPSBudWxsO1xuXG4gICAgdGhpcy5sYlRhZyA9IG51bGw7XG5cbiAgICB0aGlzLmJ0bkNsYWltID0gbnVsbDtcblxuICAgIHRoaXMubmRSZW1pbmRlciA9IG51bGw7XG5cbiAgICB0aGlzLmlkeCA9IDA7XG59O1xuXG5nYW1lLnV0aWxzLmluaGVyaXRzKFN0b3JlSXRlbUNvbnRyb2xsZXIsIEJhc2VDQ0JDb250cm9sbGVyKTtcblxuU3RvcmVJdGVtQ29udHJvbGxlci5wcm90b3R5cGUub25EaWRMb2FkRnJvbUNDQiAgPSBmdW5jdGlvbigpIHtcbiAgICBCYXNlQ0NCQ29udHJvbGxlci5wcm90b3R5cGUub25EaWRMb2FkRnJvbUNDQi5jYWxsKHRoaXMpO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge1N0b3JlQ29uZmlnfSBkYXRhXG4gKiBAcGFyYW0ge251bWJlcn0gaWR4XG4gKi9cblN0b3JlSXRlbUNvbnRyb2xsZXIucHJvdG90eXBlLmluaXRXaXRoID0gZnVuY3Rpb24gKGRhdGEsIGlkeCkge1xuICAgIHRoaXMuc3RvcmVFbnRpdHkgPSBkYXRhO1xuICAgIHRoaXMuaWR4ID0gaWR4O1xuICAgIHRoaXMubGJQcmljZS5zZXRTdHJpbmcoZGF0YS5wcmljZSk7XG5cbiAgICB0cnkge1xuXG4gICAgICAgIHRoaXMubmRSZXN0b3JlLnZpc2libGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5uZEJvb3N0cy52aXNpYmxlID0gZmFsc2U7XG4gICAgICAgIHRoaXMubmREaWFtb25kLnZpc2libGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5uZFB1cmNoYXNlLnZpc2libGUgPSB0cnVlO1xuICAgICAgICB0aGlzLm5kT3duZWQudmlzaWJsZSA9IGZhbHNlO1xuXG4gICAgICAgIHRoaXMubGJQcmljZS52aXNpYmxlID0gZmFsc2U7XG4gICAgICAgIHRoaXMubmREaWFtb25kUHJpY2UudmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnNwUmV3YXJkZWRWaWRlby52aXNpYmxlID0gZmFsc2U7XG5cbiAgICAgICAgdGhpcy5zcEhvdFRhZy52aXNpYmxlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc3BGcmVlVGFnLnZpc2libGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zcFBlcmNlbnRUYWcudmlzaWJsZSA9IGZhbHNlO1xuXG4gICAgICAgIHRoaXMubGJUYWcudmlzaWJsZSA9IGZhbHNlO1xuXG4gICAgICAgIHRoaXMuc3BSZWRCZy52aXNpYmxlID0gZmFsc2U7XG5cbiAgICAgICAgdGhpcy5idG5DbGFpbS5lbmFibGVkID0gdHJ1ZTtcblxuICAgICAgICB0aGlzLm5kUmVtaW5kZXIudmlzaWJsZSA9IGZhbHNlO1xuXG4gICAgICAgIHZhciBzcHJpdGVGcmFtZTtcbiAgICAgICAgc3dpdGNoIChkYXRhLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgU3RvcmVUeXBlLkZSRUU6XG4gICAgICAgICAgICAgICAgdGhpcy5uZERpYW1vbmQudmlzaWJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5sYkRpYW1vbmQuc2V0U3RyaW5nKGRhdGEuY291bnQpO1xuICAgICAgICAgICAgICAgIHRoaXMuc3BSZXdhcmRlZFZpZGVvLnZpc2libGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHNwcml0ZUZyYW1lID0gY2Muc3ByaXRlRnJhbWVDYWNoZS5nZXRTcHJpdGVGcmFtZShkYXRhLmltYWdlKTtcbiAgICAgICAgICAgICAgICBpZiAoc3ByaXRlRnJhbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zcERpYW1vbmQuc2V0U3ByaXRlRnJhbWUoc3ByaXRlRnJhbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvL3RhZ1xuICAgICAgICAgICAgICAgIHRoaXMuc3BGcmVlVGFnLnZpc2libGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMubGJUYWcudmlzaWJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5sYlRhZy5zZXRTdHJpbmcoXyhcImZyZWVfY29pbnNfdGl0bGVcIikpO1xuICAgICAgICAgICAgICAgIHRoaXMubmRSZW1pbmRlci52aXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgU3RvcmVUeXBlLlJFTU9WRV9BRFM6XG4gICAgICAgICAgICAgICAgdGhpcy5uZERpYW1vbmQudmlzaWJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5sYkRpYW1vbmQuc2V0U3RyaW5nKGdhbWUubG9jYWwuZ2V0VmFsdWUoXCJyZW1vdmVfYWRzX3RpdGxlXCIpKTtcbiAgICAgICAgICAgICAgICBzcHJpdGVGcmFtZSA9IGNjLnNwcml0ZUZyYW1lQ2FjaGUuZ2V0U3ByaXRlRnJhbWUoZGF0YS5pbWFnZSk7XG4gICAgICAgICAgICAgICAgaWYgKHNwcml0ZUZyYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3BEaWFtb25kLnNldFNwcml0ZUZyYW1lKHNwcml0ZUZyYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5sYlByaWNlLnZpc2libGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuc3BIb3RUYWcudmlzaWJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5sYlRhZy52aXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmxiVGFnLnNldFN0cmluZyhfKFwiaG90X3RpdGxlXCIpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgU3RvcmVUeXBlLkFJTV9JVEVNOlxuICAgICAgICAgICAgICAgIHRoaXMubmREaWFtb25kLnZpc2libGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMubGJEaWFtb25kLnNldFN0cmluZyhnYW1lLmxvY2FsLmdldFZhbHVlKFwiYWltX2l0ZW1fdGl0bGVcIikpO1xuICAgICAgICAgICAgICAgIHNwcml0ZUZyYW1lID0gY2Muc3ByaXRlRnJhbWVDYWNoZS5nZXRTcHJpdGVGcmFtZShkYXRhLmltYWdlKTtcbiAgICAgICAgICAgICAgICBpZiAoc3ByaXRlRnJhbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zcERpYW1vbmQuc2V0U3ByaXRlRnJhbWUoc3ByaXRlRnJhbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvL3RoaXMubGJQcmljZS52aXNpYmxlID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgIGlmIChnYW1lLnBsYXllck1hbi5wbGF5ZXIuaGFzQWltSXRlbSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm5kT3duZWQudmlzaWJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubmRQdXJjaGFzZS52aXNpYmxlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5uZFB1cmNoYXNlLnZpc2libGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxiUHJpY2UudmlzaWJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIHRoaXMuc3BIb3RUYWcudmlzaWJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgLy8gdGhpcy5sYlRhZy52aXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAvLyB0aGlzLmxiVGFnLnNldFN0cmluZyhfKFwiaG90X3RpdGxlXCIpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgU3RvcmVUeXBlLlJFU1RPUkU6XG4gICAgICAgICAgICAgICAgdGhpcy5uZFJlc3RvcmUudmlzaWJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5uZFB1cmNoYXNlLnZpc2libGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLnNwUmVkQmcudmlzaWJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFN0b3JlVHlwZS5ORVdfQU5EX1NQTElUOlxuICAgICAgICAgICAgICAgIHRoaXMubmRCb29zdHMudmlzaWJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5sYlNwbGl0LnNldFN0cmluZyhcInhcIiArIGRhdGEuZGF0YS5tdWx0aXBsZV8zKTtcbiAgICAgICAgICAgICAgICB0aGlzLmxiTmV3VGhyZWUuc2V0U3RyaW5nKFwieFwiICsgZGF0YS5kYXRhLm11bHRpcGxlXzMpO1xuICAgICAgICAgICAgICAgIHRoaXMubmREaWFtb25kUHJpY2UudmlzaWJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5sYkRpYW1vbmRQcmljZS5zZXRTdHJpbmcoZGF0YS5jb3VudCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFN0b3JlVHlwZS5ESUFNT05EOlxuICAgICAgICAgICAgICAgIHRoaXMubmREaWFtb25kLnZpc2libGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMubGJEaWFtb25kLnNldFN0cmluZyhkYXRhLmNvdW50KTtcbiAgICAgICAgICAgICAgICB0aGlzLmxiUHJpY2UudmlzaWJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgc3ByaXRlRnJhbWUgPSBjYy5zcHJpdGVGcmFtZUNhY2hlLmdldFNwcml0ZUZyYW1lKGRhdGEuaW1hZ2UpO1xuICAgICAgICAgICAgICAgIGlmIChzcHJpdGVGcmFtZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNwRGlhbW9uZC5zZXRTcHJpdGVGcmFtZShzcHJpdGVGcmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vdGFnXG4gICAgICAgICAgICAgICAgaWYgKGRhdGEuZXh0cmEgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3BQZXJjZW50VGFnLnZpc2libGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxiVGFnLnZpc2libGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxiVGFnLnNldFN0cmluZyhcIitcIiArIChkYXRhLmV4dHJhICogMTAwKSArIFwiJVwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChleCkge1xuICAgICAgICBjYy5lcnJvcihleCk7XG4gICAgfVxufTtcblxuU3RvcmVJdGVtQ29udHJvbGxlci5wcm90b3R5cGUuZ2V0Q29udGVudFNpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3BCZy5nZXRDb250ZW50U2l6ZSgpO1xufTtcblxuU3RvcmVJdGVtQ29udHJvbGxlci5wcm90b3R5cGUucHVyY2hhc2VDbGlja2VkID0gZnVuY3Rpb24gKCkge1xuICAgIEF1ZGlvSGVscGVyLnBsYXlCdG5Tb3VuZCgpO1xuICAgIHZhciBTdG9yZUhlbHBlciA9IHJlcXVpcmUoXCIuLi9tb2RlbC9TdG9yZUhlbHBlclwiKTtcbiAgICBTdG9yZUhlbHBlci5nZXRJbnN0YW5jZSgpLmJ1eVByb2R1Y3QodGhpcy5zdG9yZUVudGl0eSk7XG59O1xuXG5TdG9yZUl0ZW1Db250cm9sbGVyLmNyZWF0ZUZyb21DQ0IgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbm9kZSA9IGdhbWUudXRpbHMubG9hZE5vZGVGcm9tQ0NCKFwicmVzL3N0b3JlL3N0b3JlX2l0ZW1fdmlldy5jY2JpXCIsIG51bGwsIFwiU3RvcmVJdGVtQ29udHJvbGxlclwiLCBuZXcgU3RvcmVJdGVtQ29udHJvbGxlcigpKTtcbiAgICByZXR1cm4gbm9kZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU3RvcmVJdGVtQ29udHJvbGxlcjsiLCJ2YXIgVGFza0l0ZW1Db250cm9sbGVyID0gcmVxdWlyZShcIi4vVGFza0l0ZW1Db250cm9sbGVyXCIpO1xudmFyIENvbmZpZ01hbiA9IHJlcXVpcmUoXCIuLi9jb25maWcvQ29uZmlnTWFuXCIpO1xudmFyIEV2ZW50c05hbWUgPSByZXF1aXJlKFwiLi4vZXZlbnRzL0V2ZW50c05hbWVcIik7XG52YXIgTXVsdGlDb2xUYWJsZVZpZXcgPSByZXF1aXJlKFwiLi4vLi4vY29tbW9uL2V4dC9NdWx0aUNvbFRhYmxlVmlld1wiKTtcblxudmFyIEdSSURfU0laRSA9IGNjLnNpemUoMjcwLCAyMDApO1xuXG52YXIgU3RvcmVJdGVtQ2VsbFZpZXcgPSBjYy5UYWJsZVZpZXdDZWxsLmV4dGVuZCh7XG4gICAgZW50aXR5OiBudWxsLFxuICAgIGl0ZW1Ob2RlOiBudWxsLFxuICAgIGN0b3I6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fc3VwZXIoKTtcbiAgICAgICAgdGhpcy5pdGVtTm9kZSA9IFRhc2tJdGVtQ29udHJvbGxlci5jcmVhdGVGcm9tQ0NCKCk7XG4gICAgICAgIHRoaXMuYWRkQ2hpbGQodGhpcy5pdGVtTm9kZSk7XG4gICAgICAgIHRoaXMuaXRlbU5vZGUuc2V0UG9zaXRpb24oY2MucChHUklEX1NJWkUud2lkdGggKiAwLjUsIEdSSURfU0laRS5oZWlnaHQgKiAwLjUpKTtcbiAgICB9LFxuXG4gICAgaW5pdFdpdGg6IGZ1bmN0aW9uIChlbnRpdHksIGlkeCkge1xuICAgICAgICB0aGlzLmVudGl0eSA9IGVudGl0eTtcbiAgICAgICAgdGhpcy5pdGVtTm9kZS5jb250cm9sbGVyLmluaXRXaXRoKGVudGl0eSwgaWR4KTtcbiAgICB9XG59KTtcblxudmFyIFRhc2tDb250cm9sbGVyID0gZnVuY3Rpb24gKCkge1xuICAgIEJhc2VDQ0JDb250cm9sbGVyLmNhbGwodGhpcyk7XG4gICAgdGhpcy5uZENvbnRhaW5lciA9IG51bGw7XG5cbiAgICB0aGlzLmxibFRpdGxlID0gbnVsbDtcblxuICAgIHRoaXMuX3RhYmxlVmlldyA9IG51bGw7XG5cbiAgICAvL3VzZXIgZGF0YS5cbiAgICB0aGlzLmNvbmZpZ3MgPSBudWxsO1xufTtcblxuZ2FtZS51dGlscy5pbmhlcml0cyhUYXNrQ29udHJvbGxlciwgQmFzZUNDQkNvbnRyb2xsZXIpO1xuXG5UYXNrQ29udHJvbGxlci5wcm90b3R5cGUub25FbnRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICBCYXNlQ0NCQ29udHJvbGxlci5wcm90b3R5cGUub25FbnRlci5jYWxsKHRoaXMpO1xuICAgIC8vZ2FtZS5ldmVudERpc3BhdGNoZXIuYWRkRXZlbnRMaXN0ZW5lcihFdmVudHNOYW1lLlVQREFURV9TS0lOLCB0aGlzLm9uVXBkYXRlU2tpbiwgdGhpcyk7XG59O1xuXG5UYXNrQ29udHJvbGxlci5wcm90b3R5cGUub25FeGl0ID0gZnVuY3Rpb24gKCkge1xuICAgIC8vZ2FtZS5ldmVudERpc3BhdGNoZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihFdmVudHNOYW1lLlVQREFURV9TS0lOLCB0aGlzLm9uVXBkYXRlU2tpbiwgdGhpcyk7XG4gICAgQmFzZUNDQkNvbnRyb2xsZXIucHJvdG90eXBlLm9uRXhpdC5jYWxsKHRoaXMpO1xufTtcblxuVGFza0NvbnRyb2xsZXIucHJvdG90eXBlLm9uRGlkTG9hZEZyb21DQ0IgID0gZnVuY3Rpb24oKSB7XG4gICAgQmFzZUNDQkNvbnRyb2xsZXIucHJvdG90eXBlLm9uRGlkTG9hZEZyb21DQ0IuY2FsbCh0aGlzKTtcbiAgICB0aGlzLmxibFRpdGxlLnNldFN0cmluZyhfKFwidGFza190aXRsZVwiKSk7XG5cbiAgICB0aGlzLmNvbmZpZ3MgPSBDb25maWdNYW4uZ2V0SW5zdGFuY2UoKS5nZXRUYXNrTGlzdCgpO1xuICAgIHRoaXMuc2hvd1RhYmxlVmlldygpO1xufTtcblxuVGFza0NvbnRyb2xsZXIucHJvdG90eXBlLm9uVXBkYXRlU2tpbiA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHRoaXMuc2hvd1RhYmxlVmlldygpO1xufTtcblxuVGFza0NvbnRyb2xsZXIucHJvdG90eXBlLnNob3dUYWJsZVZpZXcgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLl90YWJsZVZpZXcpIHtcbiAgICAgICAgdmFyIHNpemUgPSB0aGlzLm5kQ29udGFpbmVyLmdldENvbnRlbnRTaXplKCk7XG4gICAgICAgIHRoaXMuX3RhYmxlVmlldyA9IG5ldyBNdWx0aUNvbFRhYmxlVmlldyh0aGlzLCBzaXplLCBudWxsKTtcbiAgICAgICAgdGhpcy5fdGFibGVWaWV3LnNldERpcmVjdGlvbihjYy5TQ1JPTExWSUVXX0RJUkVDVElPTl9WRVJUSUNBTCk7XG4gICAgICAgIHRoaXMuX3RhYmxlVmlldy5zZXRWZXJ0aWNhbEZpbGxPcmRlcihjYy5UQUJMRVZJRVdfRklMTF9UT1BET1dOKTtcbiAgICAgICAgdGhpcy5fdGFibGVWaWV3LnNldE11bHRpVGFibGVWaWV3RGVsZWdhdGUodGhpcyk7XG4gICAgICAgIHRoaXMuX3RhYmxlVmlldy5pZ25vcmVBbmNob3JQb2ludEZvclBvc2l0aW9uKGZhbHNlKTtcbiAgICAgICAgdGhpcy5fdGFibGVWaWV3LnNldEFuY2hvclBvaW50KGNjLnAoMCwgMCkpO1xuICAgICAgICB0aGlzLm5kQ29udGFpbmVyLmFkZENoaWxkKHRoaXMuX3RhYmxlVmlldyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fb2Zmc2V0ID0gdGhpcy5fdGFibGVWaWV3LmdldENvbnRlbnRPZmZzZXQoKTtcbiAgICB9XG4gICAgdGhpcy5fdGFibGVWaWV3LnJlbG9hZERhdGEoKTtcbiAgICBpZiAodGhpcy5fb2Zmc2V0KSB7XG4gICAgICAgIHRoaXMuX3RhYmxlVmlldy5zZXRDb250ZW50T2Zmc2V0KHRoaXMuX29mZnNldCk7XG4gICAgICAgIHRoaXMuX29mZnNldCA9IG51bGw7XG4gICAgfVxufTtcblxuVGFza0NvbnRyb2xsZXIucHJvdG90eXBlLnNjcm9sbFZpZXdEaWRTY3JvbGwgPSBmdW5jdGlvbiAodmlldykge1xufTtcblxuVGFza0NvbnRyb2xsZXIucHJvdG90eXBlLnNjcm9sbFZpZXdEaWRab29tID0gZnVuY3Rpb24gKHZpZXcpIHtcbn07XG5cblRhc2tDb250cm9sbGVyLnByb3RvdHlwZS5ncmlkQXRJbmRleCA9IGZ1bmN0aW9uKG11bHRpVGFibGUsICBpZHgpIHtcbiAgICB2YXIgY2VsbCA9IG11bHRpVGFibGUuZGVxdWV1ZUdyaWQoKTtcbiAgICBpZiAoIWNlbGwpIHtcbiAgICAgICAgY2VsbCA9IG5ldyBTdG9yZUl0ZW1DZWxsVmlldygpO1xuICAgIH1cblxuICAgIGlmIChpZHggPCB0aGlzLmNvbmZpZ3MubGVuZ3RoKSB7XG4gICAgICAgIHZhciBza2luQ2ZnID0gdGhpcy5jb25maWdzW2lkeF07XG4gICAgICAgIGNlbGwuaW5pdFdpdGgoc2tpbkNmZywgaWR4KTtcbiAgICAgICAgY2VsbC52aXNpYmxlID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjZWxsLnZpc2libGUgPSBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2VsbDtcbn07XG5cblRhc2tDb250cm9sbGVyLnByb3RvdHlwZS5udW1iZXJPZkNlbGxzSW5UYWJsZVZpZXcgPSBmdW5jdGlvbihtdWx0aVRhYmxlKSB7XG4gICAgdmFyIGdyaWRzSW5DZWxsID0gdGhpcy5udW1iZXJPZkdyaWRzSW5DZWxsKG11bHRpVGFibGUpO1xuICAgIHJldHVybiBNYXRoLmNlaWwodGhpcy5jb25maWdzLmxlbmd0aCAvIGdyaWRzSW5DZWxsKTtcbn07XG5cblRhc2tDb250cm9sbGVyLnByb3RvdHlwZS5udW1iZXJPZkdyaWRzSW5DZWxsID0gZnVuY3Rpb24obXVsdGlUYWJsZSwgY29sSWR4KSB7XG4gICAgcmV0dXJuIDI7XG59O1xuXG5UYXNrQ29udHJvbGxlci5wcm90b3R5cGUuZ3JpZFNpemVGb3JUYWJsZSA9IGZ1bmN0aW9uKHRhYmxlLCBjb2xJZHgpIHtcbiAgICByZXR1cm4gY2Muc2l6ZSgyNzAsIDIyMCk7XG59O1xuXG5UYXNrQ29udHJvbGxlci5wcm90b3R5cGUuZ3JpZFRvdWNoZWQgPSBmdW5jdGlvbih0YWJsZSwgZ3JpZCkge1xufTtcblxuVGFza0NvbnRyb2xsZXIucHJvdG90eXBlLmJhY2tDbGlja2VkID0gZnVuY3Rpb24gKHNlbmRlcikge1xuICAgIEF1ZGlvSGVscGVyLnBsYXlCdG5Tb3VuZCgpO1xuXG4gICAgdGhpcy5jbG9zZSgpO1xufTtcblxuVGFza0NvbnRyb2xsZXIucHJvdG90eXBlLnBvcHVwID0gZnVuY3Rpb24gKCkge1xuICAgIGdhbWUuZGlhbG9nTWFuYWdlci5wb3B1cCh0aGlzLnJvb3ROb2RlLCB7cG9wdXBBbmltOiB0cnVlfSk7XG59O1xuXG5UYXNrQ29udHJvbGxlci5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgZ2FtZS5kaWFsb2dNYW5hZ2VyLmNsb3NlKHRoaXMucm9vdE5vZGUpO1xufTtcblxuVGFza0NvbnRyb2xsZXIucHJvdG90eXBlLm9uRXhpdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAvL2lmICh0aGlzLmNsb3NlQ2FsbGJhY2spIHtcbiAgICAvLyAgICB0aGlzLmNsb3NlQ2FsbGJhY2soKTtcbiAgICAvLyAgICB0aGlzLmNsb3NlQ2FsbGJhY2sgPSBudWxsO1xuICAgIC8vfVxufTtcblxuVGFza0NvbnRyb2xsZXIuY3JlYXRlRnJvbUNDQiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBub2RlID0gZ2FtZS51dGlscy5sb2FkTm9kZUZyb21DQ0IoXCJyZXMvbWVudS90YXNrX3ZpZXcuY2NiaVwiLCBudWxsLCBcIlRhc2tDb250cm9sbGVyXCIsIG5ldyBUYXNrQ29udHJvbGxlcigpKTtcbiAgICByZXR1cm4gbm9kZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gVGFza0NvbnRyb2xsZXI7IiwidmFyIFNraW5SZXdhcmRUeXBlID0gcmVxdWlyZShcIi4uL2VudW0vU2tpblJld2FyZFR5cGVcIik7XG52YXIgRXZlbnRzTmFtZSA9IHJlcXVpcmUoXCIuLi9ldmVudHMvRXZlbnRzTmFtZVwiKTtcbnZhciBCb29zdFR5cGUgPSByZXF1aXJlKFwiLi4vZW51bS9Cb29zdFR5cGVcIik7XG52YXIgU3RvcmVIZWxwZXIgPSByZXF1aXJlKFwiLi4vbW9kZWwvU3RvcmVIZWxwZXJcIik7XG5cbnZhciBUYXNrSXRlbUNvbnRyb2xsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgQmFzZUNDQkNvbnRyb2xsZXIuY2FsbCh0aGlzKTtcblxuICAgIHRoaXMubGJsR29hbCA9IG51bGw7XG4gICAgdGhpcy5sYmxHb2FsSW5mbyA9IG51bGw7XG4gICAgLy90aGlzLnNwU2tpbiA9IG51bGw7XG4gICAgdGhpcy5zcEJnU2VsZWN0ZWQgPSBudWxsO1xuXG4gICAgdGhpcy5sYmxTZWxlY3QgPSBudWxsO1xuICAgIHRoaXMuYnRuU2VsZWN0ID0gbnVsbDtcbiAgICB0aGlzLm5kU2VsZWN0ID0gbnVsbDtcblxuICAgIHRoaXMubGJsRGlhbW9uZHMgPSBudWxsO1xuXG4gICAgLy90aGlzLmxibFVzaW5nID0gbnVsbDtcblxuICAgIHRoaXMuaWR4ID0gMDtcbiAgICB0aGlzLnRhc2tDZmcgPSBudWxsO1xufTtcblxuZ2FtZS51dGlscy5pbmhlcml0cyhUYXNrSXRlbUNvbnRyb2xsZXIsIEJhc2VDQ0JDb250cm9sbGVyKTtcblxuVGFza0l0ZW1Db250cm9sbGVyLnByb3RvdHlwZS5vbkRpZExvYWRGcm9tQ0NCICA9IGZ1bmN0aW9uKCkge1xuICAgIEJhc2VDQ0JDb250cm9sbGVyLnByb3RvdHlwZS5vbkRpZExvYWRGcm9tQ0NCLmNhbGwodGhpcyk7XG59O1xuLyoqXG4gKiBAcGFyYW0ge1Rhc2tDb25maWd9IGRhdGFcbiAqIEBwYXJhbSB7bnVtYmVyfSBpZHhcbiAqL1xuVGFza0l0ZW1Db250cm9sbGVyLnByb3RvdHlwZS5pbml0V2l0aCA9IGZ1bmN0aW9uIChkYXRhLCBpZHgpIHtcbiAgICB0aGlzLmlkeCA9IGlkeDtcbiAgICB0aGlzLnRhc2tDZmcgPSBkYXRhO1xuICAgIHRoaXMucmVmcmVzaCgpO1xufTtcblxuVGFza0l0ZW1Db250cm9sbGVyLnByb3RvdHlwZS5yZWZyZXNoID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBkYXRhID0gdGhpcy50YXNrQ2ZnO1xuICAgIHZhciBjb21wbGV0ZWQgPSBmYWxzZTtcbiAgICBzd2l0Y2ggKGRhdGEudHlwZSkge1xuICAgICAgICBjYXNlIFNraW5SZXdhcmRUeXBlLk5vbmU6XG4gICAgICAgICAgICB0aGlzLmxibEdvYWwudmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5sYmxHb2FsSW5mby52aXNpYmxlID0gZmFsc2U7XG4gICAgICAgICAgICBjb21wbGV0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgU2tpblJld2FyZFR5cGUuTGV2ZWxDb3VudDpcbiAgICAgICAgICAgIHRoaXMubGJsR29hbC52aXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMubGJsR29hbEluZm8udmlzaWJsZSA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmxibEdvYWwuc2V0U3RyaW5nKGdhbWUudXRpbHMuc3ByaW50ZihnYW1lLmxvY2FsLmdldFZhbHVlKFwibGV2ZWxfY291bnRfdGl0bGVcIiksIGRhdGEuY291bnQpKTtcbiAgICAgICAgICAgIGlmIChnYW1lLnBsYXllck1hbi5nZXRMZXZlbCgpID49IGRhdGEuY291bnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxibEdvYWxJbmZvLnNldFN0cmluZyhnYW1lLmxvY2FsLmdldFZhbHVlKFwiY29tcGxldGVkX3RpdGxlXCIpKTtcbiAgICAgICAgICAgICAgICBjb21wbGV0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxibEdvYWxJbmZvLnNldFN0cmluZyhnYW1lLnV0aWxzLnNwcmludGYoXCIlZC8lZFwiLCBnYW1lLnBsYXllck1hbi5nZXRMZXZlbCgpLCBkYXRhLmNvdW50KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBTa2luUmV3YXJkVHlwZS5XYXRjaEFkQ291bnQ6XG4gICAgICAgICAgICB0aGlzLmxibEdvYWwudmlzaWJsZSA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmxibEdvYWxJbmZvLnZpc2libGUgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5sYmxHb2FsLnNldFN0cmluZyhnYW1lLnV0aWxzLnNwcmludGYoZ2FtZS5sb2NhbC5nZXRWYWx1ZShcIndhdGNoX2FkX2NvdW50X3RpdGxlXCIpLCBkYXRhLmNvdW50KSk7XG4gICAgICAgICAgICBpZiAoZ2FtZS5wbGF5ZXJNYW4ucGxheWVyLmludGVyc3RpdGlhbEFkQ291bnQgPj0gZGF0YS5jb3VudCkge1xuICAgICAgICAgICAgICAgIHRoaXMubGJsR29hbEluZm8uc2V0U3RyaW5nKGdhbWUubG9jYWwuZ2V0VmFsdWUoXCJjb21wbGV0ZWRfdGl0bGVcIikpO1xuICAgICAgICAgICAgICAgIGNvbXBsZXRlZCA9IHRydWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMubGJsR29hbEluZm8uc2V0U3RyaW5nKGdhbWUudXRpbHMuc3ByaW50ZihcIiVkLyVkXCIsIGdhbWUucGxheWVyTWFuLnBsYXllci5pbnRlcnN0aXRpYWxBZENvdW50LCBkYXRhLmNvdW50KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBTa2luUmV3YXJkVHlwZS5XYXRjaFJld2FyZEFkQ291bnQ6XG4gICAgICAgICAgICB0aGlzLmxibEdvYWwudmlzaWJsZSA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmxibEdvYWxJbmZvLnZpc2libGUgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5sYmxHb2FsLnNldFN0cmluZyhnYW1lLnV0aWxzLnNwcmludGYoZ2FtZS5sb2NhbC5nZXRWYWx1ZShcIndhdGNoX3Jld2FyZF9hZF9jb3VudF90aXRsZVwiKSwgZGF0YS5jb3VudCkpO1xuICAgICAgICAgICAgaWYgKGdhbWUucGxheWVyTWFuLnBsYXllci5yZXdhcmRlZEFkQ291bnQgPj0gZGF0YS5jb3VudCkge1xuICAgICAgICAgICAgICAgIHRoaXMubGJsR29hbEluZm8uc2V0U3RyaW5nKGdhbWUubG9jYWwuZ2V0VmFsdWUoXCJjb21wbGV0ZWRfdGl0bGVcIikpO1xuICAgICAgICAgICAgICAgIGNvbXBsZXRlZCA9IHRydWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMubGJsR29hbEluZm8uc2V0U3RyaW5nKGdhbWUudXRpbHMuc3ByaW50ZihcIiVkLyVkXCIsIGdhbWUucGxheWVyTWFuLnBsYXllci5yZXdhcmRlZEFkQ291bnQsIGRhdGEuY291bnQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFNraW5SZXdhcmRUeXBlLkNsYWltZWQ6XG4gICAgICAgICAgICBpZiAoZ2FtZS5wbGF5ZXJNYW4uaGFzU2tpbihkYXRhLmlkKSkge1xuICAgICAgICAgICAgICAgIHRoaXMubGJsR29hbC52aXNpYmxlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5sYmxHb2FsSW5mby52aXNpYmxlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgY29tcGxldGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sYmxHb2FsLnNldFN0cmluZyhfKFwic2tpbl9naWZ0X3RpdGxlXCIpKTtcbiAgICAgICAgICAgICAgICB0aGlzLmxibEdvYWxJbmZvLnNldFN0cmluZyhcIi0tXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgU2tpblJld2FyZFR5cGUuUHVyY2hhc2U6XG4gICAgICAgICAgICBpZiAoZ2FtZS5wbGF5ZXJNYW4uaGFzU2tpbihkYXRhLmlkKSkge1xuICAgICAgICAgICAgICAgIHRoaXMubGJsR29hbC52aXNpYmxlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5sYmxHb2FsSW5mby52aXNpYmxlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgY29tcGxldGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sYmxHb2FsLnNldFN0cmluZyhfKFwic2tpbl9wdXJjaGFzZV90aXRsZVwiKSk7XG4gICAgICAgICAgICAgICAgdGhpcy5sYmxHb2FsSW5mby5zZXRTdHJpbmcoXCItLVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHRoaXMubGJsRGlhbW9uZHMuc2V0U3RyaW5nKFwieFwiICsgZGF0YS5yZXdhcmRDb3VudCk7XG5cbiAgICAvL3ZhciBzcHJpdGVGcmFtZSA9IGNjLnNwcml0ZUZyYW1lQ2FjaGUuZ2V0U3ByaXRlRnJhbWUoZGF0YS5pbWFnZSArIFwiLnBuZ1wiKTtcbiAgICAvL3RoaXMuc3BTa2luLnNldFNwcml0ZUZyYW1lKHNwcml0ZUZyYW1lKTtcbiAgICAvL3RoaXMubGJsVXNpbmcuc2V0U3RyaW5nKF8oXCJzZWxlY3RlZF90aXRsZVwiKSk7XG5cbiAgICAvL3RoaXMubGJsVXNpbmcudmlzaWJsZSA9IGZhbHNlO1xuICAgIC8vdGhpcy5uZFNlbGVjdC52aXNpYmxlID0gZmFsc2U7XG4gICAgdGhpcy5idG5TZWxlY3QuZW5hYmxlZCA9IGZhbHNlO1xuXG4gICAgdmFyIGNsYWltZWQgPSBnYW1lLnBsYXllck1hbi5pc1Rhc2tDbGFpbWVkKHRoaXMudGFza0NmZy5pZCk7XG4gICAgdGhpcy5uZFNlbGVjdC52aXNpYmxlID0gdHJ1ZTtcblxuICAgIGlmIChjb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKCFjbGFpbWVkKSB7XG4gICAgICAgICAgICB0aGlzLmJ0blNlbGVjdC5lbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMubGJsU2VsZWN0LnNldFN0cmluZyhnYW1lLmxvY2FsLmdldFZhbHVlKFwiY2xhaW1fdGl0bGVcIikpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5sYmxTZWxlY3Quc2V0U3RyaW5nKGdhbWUubG9jYWwuZ2V0VmFsdWUoXCJjbGFpbWVkX3RpdGxlXCIpKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubGJsU2VsZWN0LnNldFN0cmluZyhfKFwidW5jb21wbGV0ZWRfdGl0bGVcIikpO1xuICAgIH1cbn07XG5cblRhc2tJdGVtQ29udHJvbGxlci5wcm90b3R5cGUuZ2V0Q29udGVudFNpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3BCZ1NlbGVjdGVkLmdldENvbnRlbnRTaXplKCk7XG59O1xuXG5UYXNrSXRlbUNvbnRyb2xsZXIucHJvdG90eXBlLnNlbGVjdENsaWNrZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgQXVkaW9IZWxwZXIucGxheUJ0blNvdW5kKCk7XG4gICAgY2MubG9nKFwidGFzayBjbGFpbWVkOlwiICsgZ2FtZS5wbGF5ZXJNYW4uaXNUYXNrQ2xhaW1lZCh0aGlzLnRhc2tDZmcuaWQpKTtcbiAgICBpZiAoIWdhbWUucGxheWVyTWFuLmlzVGFza0NsYWltZWQodGhpcy50YXNrQ2ZnLmlkKSkge1xuICAgICAgICBjYy5sb2coXCJ0YXNrIHNldCBjbGFpbWVkOlwiICsgdGhpcy50YXNrQ2ZnLmlkKTtcbiAgICAgICAgZ2FtZS5wbGF5ZXJNYW4uc2V0VGFza0NsYWltZWQodGhpcy50YXNrQ2ZnLmlkKTtcbiAgICAgICAgdmFyIHJld2FyZENvdW50ID0gdGhpcy50YXNrQ2ZnLnJld2FyZENvdW50O1xuICAgICAgICBTdG9yZUhlbHBlci5nZXRJbnN0YW5jZSgpLnBvcHVwUmV3YXJkRG91YmxlRGxnKHJld2FyZENvdW50LCBCb29zdFR5cGUuRElBTU9ORCwgIGdhbWUudXRpbHMuaXNJT1MoKSA/IFwidGFza3NcIiA6IFwidGFza3NcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICB9LmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLnJlZnJlc2goKTtcbiAgICAgICAgZ2FtZS5ldmVudERpc3BhdGNoZXIuZGlzcGF0Y2hFdmVudChFdmVudHNOYW1lLlRBU0tfVVBEQVRFKTtcbiAgICB9XG59O1xuXG5UYXNrSXRlbUNvbnRyb2xsZXIuY3JlYXRlRnJvbUNDQiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBnYW1lLnV0aWxzLmxvYWROb2RlRnJvbUNDQihcInJlcy9tZW51L3Rhc2tfaXRlbV92aWV3LmNjYmlcIiwgbnVsbCwgXCJUYXNrSXRlbUNvbnRyb2xsZXJcIiwgbmV3IFRhc2tJdGVtQ29udHJvbGxlcigpKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gVGFza0l0ZW1Db250cm9sbGVyOyIsIi8qKlxuICogQ3JlYXRlZCBieSBxaW5uaW5nIG9uIDIwMTcvMTIvMTUuXG4gKi9cbnZhciBFdmVudHNOYW1lID0gcmVxdWlyZShcIi4uL2V2ZW50cy9FdmVudHNOYW1lXCIpO1xuXG52YXIgQ29sb3JMaXN0ID0gW1xuICAgIGNjLmNvbG9yKDI1NSwgMTA2LCAxMDcpLFxuICAgIGNjLmNvbG9yKDkwLCAxODEsIDExMCksXG4gICAgY2MuY29sb3IoODMsIDE4MywgMjA5KSxcbiAgICBjYy5jb2xvcigyNDMsIDc3LCAxNTEpLFxuICAgIGNjLmNvbG9yKDE1MywgOTUsIDIwNiksXG4gICAgY2MuY29sb3IoNTcsIDEwMywgMjQ5KSxcbiAgICBjYy5jb2xvcigyNDksIDExMiwgNDkpLFxuICAgIGNjLmNvbG9yKDIzMiwgNTksIDIwKSxcbiAgICBjYy5jb2xvcig4NCwgMjM1LCA0MyksXG4gICAgY2MuY29sb3IoNTAsIDg0LCAxMTcpLFxuICAgIGNjLmNvbG9yKDEyNywgMTI3LCAxMjcpXG5dO1xuXG5cbnZhciBUaXRsZUNvbnRyb2xsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgQmFzZUNDQkNvbnRyb2xsZXIuY2FsbCh0aGlzKTtcbiAgICB0aGlzLmxiQ29pbnMgPSBudWxsO1xuXG4gICAgdGhpcy5zcENvaW5zQWRkID0gbnVsbDtcbiAgICB0aGlzLmJ0bkFkZCA9IG51bGw7XG5cbiAgICB0aGlzLmJnTm9kZSA9IG51bGw7XG59O1xuXG5nYW1lLnV0aWxzLmluaGVyaXRzKFRpdGxlQ29udHJvbGxlciwgQmFzZUNDQkNvbnRyb2xsZXIpO1xuXG5UaXRsZUNvbnRyb2xsZXIucHJvdG90eXBlLm9uRW50ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgZ2FtZS5ldmVudERpc3BhdGNoZXIuYWRkRXZlbnRMaXN0ZW5lcihFdmVudHNOYW1lLkNPSU5TX1VQREFURSwgdGhpcy5yZWZyZXNoLCB0aGlzKTtcbn07XG5cblRpdGxlQ29udHJvbGxlci5wcm90b3R5cGUub25FeGl0ID0gZnVuY3Rpb24gKCkge1xuICAgIGdhbWUuZXZlbnREaXNwYXRjaGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoRXZlbnRzTmFtZS5DT0lOU19VUERBVEUsIHRoaXMucmVmcmVzaCwgdGhpcyk7XG59O1xuXG5UaXRsZUNvbnRyb2xsZXIucHJvdG90eXBlLm9uRGlkTG9hZEZyb21DQ0IgID0gZnVuY3Rpb24oKSB7XG4gICAgQmFzZUNDQkNvbnRyb2xsZXIucHJvdG90eXBlLm9uRGlkTG9hZEZyb21DQ0IuY2FsbCh0aGlzKTtcbiAgICB0aGlzLnJlZnJlc2goKTtcbiAgICB0aGlzLnJhbmRvbVNxdWFyZXMoKTtcblxuICAgIGlmIChUaXRsZUNvbnRyb2xsZXIudGltZSA+IDApIHtcbiAgICAgICAgZ2FtZS51dGlscy5wbGF5Q0NCQW5pbWF0aW9uKHRoaXMucm9vdE5vZGUsIFwiRGVmYXVsdCBUaW1lbGluZVwiKTtcbiAgICB9XG4gICAgVGl0bGVDb250cm9sbGVyLnRpbWUgKys7XG59O1xuXG5UaXRsZUNvbnRyb2xsZXIucHJvdG90eXBlLnJhbmRvbVNxdWFyZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAyMDsgKytpKSB7XG4gICAgICAgIHZhciBzcXVhcmUgPSBuZXcgY2MuU3ByaXRlKFwiI3NxdWFyZV9jaXJjbGUucG5nXCIpO1xuXG4gICAgICAgIHNxdWFyZS5zZXRQb3NpdGlvbih0aGlzLmdldFJhbmRvbVBvcygpKTtcbiAgICAgICAgc3F1YXJlLnNldENvbG9yKENvbG9yTGlzdFtnYW1lLnV0aWxzLnJhbmRvbU5leHRJbnQoQ29sb3JMaXN0Lmxlbmd0aCAtIDEpXSk7XG4gICAgICAgIHNxdWFyZS5zZXRPcGFjaXR5KDE1KTtcbiAgICAgICAgc3F1YXJlLnNldFNjYWxlKDEuNCk7XG5cbiAgICAgICAgdmFyIHBvczEgPSB0aGlzLmdldFJhbmRvbVBvcygpO1xuICAgICAgICBzcXVhcmUuc2V0UG9zaXRpb24ocG9zMSk7XG4gICAgICAgIHZhciBwb3MyID0gdGhpcy5nZXRSYW5kb21Qb3MoKTtcbiAgICAgICAgdmFyIHQgPSB0aGlzLmdldFRpbWUocG9zMSwgcG9zMik7XG4gICAgICAgIHZhciBtb3ZlVG8xID0gY2MubW92ZVRvKHQsIHBvczIpO1xuICAgICAgICB2YXIgbW92ZVRvMiA9IGNjLm1vdmVUbyh0LCBwb3MxKTtcbiAgICAgICAgdmFyIGFjdGlvbiA9IGNjLnNlcXVlbmNlKG1vdmVUbzEsIG1vdmVUbzIpLnJlcGVhdEZvcmV2ZXIoKTtcbiAgICAgICAgc3F1YXJlLnJ1bkFjdGlvbihhY3Rpb24pO1xuICAgICAgICBzcXVhcmUucnVuQWN0aW9uKGNjLnJvdGF0ZUJ5KDIwLCAzNjApLnJlcGVhdEZvcmV2ZXIoKSk7XG4gICAgICAgIHRoaXMuYmdOb2RlLmFkZENoaWxkKHNxdWFyZSk7XG4gICAgfVxufTtcblxuVGl0bGVDb250cm9sbGVyLnByb3RvdHlwZS5nZXRUaW1lID0gZnVuY3Rpb24gKHBvczEsIHBvczIpIHtcbiAgICByZXR1cm4gY2MucERpc3RhbmNlKHBvczEsIHBvczIpIC8gMjA7XG59O1xuXG5UaXRsZUNvbnRyb2xsZXIucHJvdG90eXBlLmdldFJhbmRvbVBvcyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY2MucChnYW1lLnV0aWxzLnJhbmRvbU5leHRJbnQoY2Mud2luU2l6ZS53aWR0aCAqIDEuNSkgLSBjYy53aW5TaXplLndpZHRoICogMC4yNSxcbiAgICAgICAgZ2FtZS51dGlscy5yYW5kb21OZXh0SW50KGNjLndpblNpemUuaGVpZ2h0ICogMS41KSAtIGNjLndpblNpemUuaGVpZ2h0ICogMC4yNSk7XG59O1xuXG5UaXRsZUNvbnRyb2xsZXIucHJvdG90eXBlLmluaXRXaXRoID0gZnVuY3Rpb24gKHJlcGxheUNhbGxiYWNrLCBuZXh0Q2FsbGJhY2spIHtcbiAgICB0aGlzLl9yZXBsYXlDYWxsYmFjayA9IHJlcGxheUNhbGxiYWNrO1xuICAgIHRoaXMuX25leHRDYWxsYmFjayA9IG5leHRDYWxsYmFjaztcbn07XG5cblRpdGxlQ29udHJvbGxlci5wcm90b3R5cGUucmVmcmVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmxiQ29pbnMuc2V0U3RyaW5nKGdhbWUucGxheWVyTWFuLnBsYXllci5jb2lucyk7XG59O1xuXG5UaXRsZUNvbnRyb2xsZXIucHJvdG90eXBlLmRpc2FibGVBZGRDb2lucyA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnNwQ29pbnNBZGQudmlzaWJsZSA9IGZhbHNlO1xuICAgIHRoaXMuYnRuQWRkLmVuYWJsZWQgPSBmYWxzZTtcbiAgICBnYW1lLnV0aWxzLnBsYXlDQ0JBbmltYXRpb24odGhpcy5yb290Tm9kZSwgXCJub25lXCIpO1xufTtcblxuVGl0bGVDb250cm9sbGVyLnByb3RvdHlwZS5zdG9yZUNsaWNrZWQgPSBmdW5jdGlvbiAoc2VuZGVyKSB7XG4gICAgQXVkaW9IZWxwZXIucGxheUJ0blNvdW5kKCk7XG4gICAgZ2FtZS5wb3B1cE1hbi5wb3B1cFN0b3JlRGxnKCk7XG59O1xuXG5UaXRsZUNvbnRyb2xsZXIuY3JlYXRlRnJvbUNDQiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBub2RlID0gZ2FtZS51dGlscy5sb2FkTm9kZUZyb21DQ0IoXCJyZXMvbWVudS90aXRsZV92aWV3LmNjYmlcIiwgbnVsbCwgXCJUaXRsZUNvbnRyb2xsZXJcIiwgbmV3IFRpdGxlQ29udHJvbGxlcigpKTtcbiAgICByZXR1cm4gbm9kZTtcbn07XG5cblRpdGxlQ29udHJvbGxlci50aW1lID0gMDtcblxubW9kdWxlLmV4cG9ydHMgPSBUaXRsZUNvbnRyb2xsZXI7IiwidmFyIFN0b3JlSGVscGVyID0gcmVxdWlyZShcIi4uL21vZGVsL1N0b3JlSGVscGVyXCIpO1xuXG52YXIgV2F0Y2hBZHNHZXQzU3RhckNvbnRyb2xsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgQmFzZUNDQkNvbnRyb2xsZXIuY2FsbCh0aGlzKTtcblxuICAgIC8vdGhpcy5idG5DbG9zZUNuID0gbnVsbDtcbiAgICAvL3RoaXMuYnRuQ2xvc2VFbiA9IG51bGw7XG5cbiAgICB0aGlzLnNwWWVsbG93MSA9IG51bGw7XG4gICAgdGhpcy5zcFllbGxvdzIgPSBudWxsO1xuICAgIHRoaXMuc3BZZWxsb3czID0gbnVsbDtcblxuICAgIHRoaXMuc3BCbGFjazEgPSBudWxsO1xuICAgIHRoaXMuc3BCbGFjazIgPSBudWxsO1xuICAgIHRoaXMuc3BCbGFjazMgPSBudWxsO1xuXG4gICAgdGhpcy5sYkNvbGxlY3RUaXBzID0gbnVsbDtcblxuICAgIHRoaXMuY2xvc2VDYWxsYmFjayA9IG51bGw7XG4gICAgdGhpcy5yZXdhcmROYW1lID0gbnVsbDtcbiAgICB0aGlzLndhdGNoZWQgPSBmYWxzZTtcbn07XG5cbmdhbWUudXRpbHMuaW5oZXJpdHMoV2F0Y2hBZHNHZXQzU3RhckNvbnRyb2xsZXIsIEJhc2VDQ0JDb250cm9sbGVyKTtcblxuV2F0Y2hBZHNHZXQzU3RhckNvbnRyb2xsZXIucHJvdG90eXBlLm9uRGlkTG9hZEZyb21DQ0IgID0gZnVuY3Rpb24oKSB7XG4gICAgQmFzZUNDQkNvbnRyb2xsZXIucHJvdG90eXBlLm9uRGlkTG9hZEZyb21DQ0IuY2FsbCh0aGlzKTtcbiAgICAvL3RoaXMuYnRuQ2xvc2VDbi52aXNpYmxlID0gZmFsc2U7XG4gICAgLy90aGlzLmJ0bkNsb3NlRW4udmlzaWJsZSA9IGZhbHNlO1xuICAgIC8vaWYgKGdhbWUubG9jYWwuaXNDaGluZXNlKCkpIHtcbiAgICAvLyAgICB0aGlzLmJ0bkNsb3NlQ24udmlzaWJsZSA9IHRydWU7XG4gICAgLy99IGVsc2Uge1xuICAgIC8vICAgIHRoaXMuYnRuQ2xvc2VFbi52aXNpYmxlID0gdHJ1ZTtcbiAgICAvL31cbiAgICAvL2dhbWUuYXVkaW9QbGF5ZXIucGxheUVmZmVjdEJ5S2V5KFwib3Blbl9ib3hcIik7XG5cbiAgICB0aGlzLmxiQ29sbGVjdFRpcHMuc2V0QWxpZ25tZW50KGNjLlRFWFRfQUxJR05NRU5UX0NFTlRFUik7XG5cbiAgICB0aGlzLnNwWWVsbG93cyA9IFt0aGlzLnNwWWVsbG93MSwgdGhpcy5zcFllbGxvdzIsIHRoaXMuc3BZZWxsb3czXTtcblxuICAgIHZhciBzdGFyID0gZ2FtZS5nYW1lTWFuLmN1cnJlbnRTdGFyO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMzsgKytpKSB7XG4gICAgICAgIHRoaXMuc3BZZWxsb3dzW2ldLnZpc2libGUgPSAoc3RhciA+PSBpICsgMSk7XG4gICAgfVxufTtcblxuV2F0Y2hBZHNHZXQzU3RhckNvbnRyb2xsZXIucHJvdG90eXBlLmluaXRXaXRoID0gZnVuY3Rpb24gKHJld2FyZE5hbWUsIGNsb3NlQ2FsbGJhY2spIHtcbiAgICB0aGlzLmNsb3NlQ2FsbGJhY2sgPSBjbG9zZUNhbGxiYWNrO1xuICAgIHRoaXMucmV3YXJkTmFtZSA9IHJld2FyZE5hbWU7XG59O1xuXG5XYXRjaEFkc0dldDNTdGFyQ29udHJvbGxlci5wcm90b3R5cGUuY2xvc2VDbGlja2VkID0gZnVuY3Rpb24gKHNlbmRlcikge1xuICAgIEF1ZGlvSGVscGVyLnBsYXlCdG5Tb3VuZCgpO1xuICAgIHRoaXMuY2xvc2UoKTtcbn07XG5cbldhdGNoQWRzR2V0M1N0YXJDb250cm9sbGVyLnByb3RvdHlwZS53YXRjaEFkc0NsaWNrZWQgPSBmdW5jdGlvbiAoc2VuZGVyKSB7XG4gICAgQXVkaW9IZWxwZXIucGxheUJ0blNvdW5kKCk7XG4gICAgU3RvcmVIZWxwZXIuZ2V0SW5zdGFuY2UoKS5jaGVja0FuZFNob3dSZXdhcmRWaWRlbyh0aGlzLnJld2FyZE5hbWUsIGZ1bmN0aW9uICh3YXRjaGVkKSB7XG4gICAgICAgIGlmICh3YXRjaGVkKSB7XG4gICAgICAgICAgICB0aGlzLndhdGNoZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICB9XG4gICAgfS5iaW5kKHRoaXMpKTtcbn07XG5cbldhdGNoQWRzR2V0M1N0YXJDb250cm9sbGVyLnByb3RvdHlwZS5wb3B1cCA9IGZ1bmN0aW9uICgpIHtcbiAgICBnYW1lLmRpYWxvZ01hbmFnZXIucG9wdXAodGhpcy5yb290Tm9kZSwge3BvcHVwQW5pbTogdHJ1ZX0pO1xufTtcblxuV2F0Y2hBZHNHZXQzU3RhckNvbnRyb2xsZXIucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKCkge1xuICAgIGdhbWUuZGlhbG9nTWFuYWdlci5jbG9zZSh0aGlzLnJvb3ROb2RlKTtcbiAgICBpZiAodGhpcy5jbG9zZUNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuY2xvc2VDYWxsYmFjayh0aGlzLndhdGNoZWQpO1xuICAgICAgICB0aGlzLmNsb3NlQ2FsbGJhY2sgPSBudWxsO1xuICAgIH1cbn07XG5cbldhdGNoQWRzR2V0M1N0YXJDb250cm9sbGVyLmNyZWF0ZUZyb21DQ0IgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbm9kZSA9IGdhbWUudXRpbHMubG9hZE5vZGVGcm9tQ0NCKFwicmVzL25vdGljZS93YXRjaF9hZHNfZ2V0XzNzdGFyX3ZpZXcuY2NiaVwiLCBudWxsLCBcIldhdGNoQWRzR2V0M1N0YXJDb250cm9sbGVyXCIsIG5ldyBXYXRjaEFkc0dldDNTdGFyQ29udHJvbGxlcigpKTtcbiAgICByZXR1cm4gbm9kZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gV2F0Y2hBZHNHZXQzU3RhckNvbnRyb2xsZXI7IiwidmFyIFN0b3JlSGVscGVyID0gcmVxdWlyZShcIi4uL21vZGVsL1N0b3JlSGVscGVyXCIpO1xuXG52YXIgV2F0Y2hBZHNHZXREaWFtb25kc0NvbnRyb2xsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgQmFzZUNDQkNvbnRyb2xsZXIuY2FsbCh0aGlzKTtcblxuICAgIC8vdGhpcy5idG5DbG9zZUNuID0gbnVsbDtcbiAgICAvL3RoaXMuYnRuQ2xvc2VFbiA9IG51bGw7XG5cbiAgICAvL3RoaXMuc3BJdGVtID0gbnVsbDtcbiAgICAvL3RoaXMubGJCdG5UaXRsZSA9IG51bGw7XG4gICAgdGhpcy5zcERpYW1vbmRCZyA9IG51bGw7XG5cbiAgICB0aGlzLmxiRGlhbW9uZHNDb3VudCA9IG51bGw7XG5cbiAgICB0aGlzLmNsb3NlQ2FsbGJhY2sgPSBudWxsO1xuICAgIHRoaXMucmV3YXJkTmFtZSA9IG51bGw7XG4gICAgdGhpcy53YXRjaGVkID0gZmFsc2U7XG59O1xuXG5nYW1lLnV0aWxzLmluaGVyaXRzKFdhdGNoQWRzR2V0RGlhbW9uZHNDb250cm9sbGVyLCBCYXNlQ0NCQ29udHJvbGxlcik7XG5cbldhdGNoQWRzR2V0RGlhbW9uZHNDb250cm9sbGVyLnByb3RvdHlwZS5vbkRpZExvYWRGcm9tQ0NCICA9IGZ1bmN0aW9uKCkge1xuICAgIEJhc2VDQ0JDb250cm9sbGVyLnByb3RvdHlwZS5vbkRpZExvYWRGcm9tQ0NCLmNhbGwodGhpcyk7XG4gICAgLy90aGlzLmJ0bkNsb3NlQ24udmlzaWJsZSA9IGZhbHNlO1xuICAgIC8vdGhpcy5idG5DbG9zZUVuLnZpc2libGUgPSBmYWxzZTtcbiAgICAvL2lmIChnYW1lLmxvY2FsLmlzQ2hpbmVzZSgpKSB7XG4gICAgLy8gICAgdGhpcy5idG5DbG9zZUNuLnZpc2libGUgPSB0cnVlO1xuICAgIC8vfSBlbHNlIHtcbiAgICAvLyAgICB0aGlzLmJ0bkNsb3NlRW4udmlzaWJsZSA9IHRydWU7XG4gICAgLy99XG4gICAgdGhpcy5zcERpYW1vbmRCZy5ydW5BY3Rpb24oY2Mucm90YXRlQnkoMywgMzYwKS5yZXBlYXRGb3JldmVyKCkpO1xuICAgIGdhbWUuYXVkaW9QbGF5ZXIucGxheUVmZmVjdEJ5S2V5KFwib3Blbl9ib3hcIik7XG59O1xuXG5XYXRjaEFkc0dldERpYW1vbmRzQ29udHJvbGxlci5wcm90b3R5cGUuaW5pdFdpdGggPSBmdW5jdGlvbiAocmV3YXJkTmFtZSwgY2xvc2VDYWxsYmFjaykge1xuICAgIHRoaXMuY2xvc2VDYWxsYmFjayA9IGNsb3NlQ2FsbGJhY2s7XG4gICAgdGhpcy5yZXdhcmROYW1lID0gcmV3YXJkTmFtZTtcbiAgICB0aGlzLmxiRGlhbW9uZHNDb3VudC5zZXRTdHJpbmcoXCJ4XCIgKyBnYW1lLmNvbmZpZy5kYWlseURpYW1vbmRzKTtcbn07XG5cbldhdGNoQWRzR2V0RGlhbW9uZHNDb250cm9sbGVyLnByb3RvdHlwZS5jbG9zZUNsaWNrZWQgPSBmdW5jdGlvbiAoc2VuZGVyKSB7XG4gICAgQXVkaW9IZWxwZXIucGxheUJ0blNvdW5kKCk7XG4gICAgdGhpcy5jbG9zZSgpO1xufTtcblxuV2F0Y2hBZHNHZXREaWFtb25kc0NvbnRyb2xsZXIucHJvdG90eXBlLndhdGNoQWRzQ2xpY2tlZCA9IGZ1bmN0aW9uIChzZW5kZXIpIHtcbiAgICBBdWRpb0hlbHBlci5wbGF5QnRuU291bmQoKTtcbiAgICBTdG9yZUhlbHBlci5nZXRJbnN0YW5jZSgpLmNoZWNrQW5kU2hvd1Jld2FyZFZpZGVvKHRoaXMucmV3YXJkTmFtZSwgZnVuY3Rpb24gKHdhdGNoZWQpIHtcbiAgICAgICAgaWYgKHdhdGNoZWQpIHtcbiAgICAgICAgICAgIHRoaXMud2F0Y2hlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgIH1cbiAgICB9LmJpbmQodGhpcykpO1xufTtcblxuV2F0Y2hBZHNHZXREaWFtb25kc0NvbnRyb2xsZXIucHJvdG90eXBlLnBvcHVwID0gZnVuY3Rpb24gKCkge1xuICAgIGdhbWUuZGlhbG9nTWFuYWdlci5wb3B1cCh0aGlzLnJvb3ROb2RlLCB7b3ZlcmxheU9wYWNpdHk6IDIyNSwgcG9wdXBBbmltOiB0cnVlfSk7XG59O1xuXG5XYXRjaEFkc0dldERpYW1vbmRzQ29udHJvbGxlci5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgZ2FtZS5kaWFsb2dNYW5hZ2VyLmNsb3NlKHRoaXMucm9vdE5vZGUpO1xuICAgIGlmICh0aGlzLmNsb3NlQ2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5jbG9zZUNhbGxiYWNrKHRoaXMud2F0Y2hlZCk7XG4gICAgICAgIHRoaXMuY2xvc2VDYWxsYmFjayA9IG51bGw7XG4gICAgfVxufTtcblxuV2F0Y2hBZHNHZXREaWFtb25kc0NvbnRyb2xsZXIuY3JlYXRlRnJvbUNDQiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBub2RlID0gZ2FtZS51dGlscy5sb2FkTm9kZUZyb21DQ0IoXCJyZXMvbm90aWNlL3dhdGNoX2Fkc19nZXRfZGlhbW9uZHNfdmlldy5jY2JpXCIsIG51bGwsIFwiV2F0Y2hBZHNHZXREaWFtb25kc0NvbnRyb2xsZXJcIiwgbmV3IFdhdGNoQWRzR2V0RGlhbW9uZHNDb250cm9sbGVyKCkpO1xuICAgIHJldHVybiBub2RlO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBXYXRjaEFkc0dldERpYW1vbmRzQ29udHJvbGxlcjsiLCJ2YXIgU3RvcmVIZWxwZXIgPSByZXF1aXJlKFwiLi4vbW9kZWwvU3RvcmVIZWxwZXJcIik7XG5cbnZhciBXYXRjaEFkc0dldEl0ZW1Db250cm9sbGVyID0gZnVuY3Rpb24gKCkge1xuICAgIEJhc2VDQ0JDb250cm9sbGVyLmNhbGwodGhpcyk7XG5cbiAgICAvL3RoaXMuYnRuQ2xvc2VDbiA9IG51bGw7XG4gICAgLy90aGlzLmJ0bkNsb3NlRW4gPSBudWxsO1xuXG4gICAgdGhpcy5zcEl0ZW0gPSBudWxsO1xuICAgIHRoaXMubGJCdG5UaXRsZSA9IG51bGw7XG5cbiAgICB0aGlzLmNsb3NlQ2FsbGJhY2sgPSBudWxsO1xuICAgIHRoaXMucmV3YXJkTmFtZSA9IG51bGw7XG4gICAgdGhpcy53YXRjaGVkID0gZmFsc2U7XG59O1xuXG5nYW1lLnV0aWxzLmluaGVyaXRzKFdhdGNoQWRzR2V0SXRlbUNvbnRyb2xsZXIsIEJhc2VDQ0JDb250cm9sbGVyKTtcblxuV2F0Y2hBZHNHZXRJdGVtQ29udHJvbGxlci5wcm90b3R5cGUub25EaWRMb2FkRnJvbUNDQiAgPSBmdW5jdGlvbigpIHtcbiAgICBCYXNlQ0NCQ29udHJvbGxlci5wcm90b3R5cGUub25EaWRMb2FkRnJvbUNDQi5jYWxsKHRoaXMpO1xuICAgIC8vdGhpcy5idG5DbG9zZUNuLnZpc2libGUgPSBmYWxzZTtcbiAgICAvL3RoaXMuYnRuQ2xvc2VFbi52aXNpYmxlID0gZmFsc2U7XG4gICAgLy9pZiAoZ2FtZS5sb2NhbC5pc0NoaW5lc2UoKSkge1xuICAgIC8vICAgIHRoaXMuYnRuQ2xvc2VDbi52aXNpYmxlID0gdHJ1ZTtcbiAgICAvL30gZWxzZSB7XG4gICAgLy8gICAgdGhpcy5idG5DbG9zZUVuLnZpc2libGUgPSB0cnVlO1xuICAgIC8vfVxuICAgIGdhbWUuYXVkaW9QbGF5ZXIucGxheUVmZmVjdEJ5S2V5KFwib3Blbl9ib3hcIik7XG59O1xuXG5XYXRjaEFkc0dldEl0ZW1Db250cm9sbGVyLnByb3RvdHlwZS5pbml0V2l0aCA9IGZ1bmN0aW9uICh0aXRsZSwgc3ByaXRlTmFtZSwgcmV3YXJkTmFtZSwgY2xvc2VDYWxsYmFjaykge1xuICAgIHRoaXMuY2xvc2VDYWxsYmFjayA9IGNsb3NlQ2FsbGJhY2s7XG4gICAgdGhpcy5yZXdhcmROYW1lID0gcmV3YXJkTmFtZTtcbiAgICB0aGlzLmxiQnRuVGl0bGUuc2V0U3RyaW5nKHRpdGxlKTtcbiAgICB2YXIgc3ByaXRlRnJhbWUgPSBjYy5zcHJpdGVGcmFtZUNhY2hlLmdldFNwcml0ZUZyYW1lKHNwcml0ZU5hbWUpO1xuICAgIGlmIChzcHJpdGVGcmFtZSkge1xuICAgICAgICB0aGlzLnNwSXRlbS5zZXRTcHJpdGVGcmFtZShzcHJpdGVGcmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY2MuZXJyb3IoXCJzcHJpdGUgZnJhbWUgaXMgbnVsbDpcIiArIHNwcml0ZU5hbWUpO1xuICAgIH1cbn07XG5cbldhdGNoQWRzR2V0SXRlbUNvbnRyb2xsZXIucHJvdG90eXBlLmNsb3NlQ2xpY2tlZCA9IGZ1bmN0aW9uIChzZW5kZXIpIHtcbiAgICBBdWRpb0hlbHBlci5wbGF5QnRuU291bmQoKTtcbiAgICB0aGlzLmNsb3NlKCk7XG59O1xuXG5XYXRjaEFkc0dldEl0ZW1Db250cm9sbGVyLnByb3RvdHlwZS53YXRjaEFkc0l0ZW1DbGlja2VkID0gZnVuY3Rpb24gKHNlbmRlcikge1xuICAgIHRoaXMud2F0Y2hBZHNDbGlja2VkKHNlbmRlcik7XG59O1xuXG5XYXRjaEFkc0dldEl0ZW1Db250cm9sbGVyLnByb3RvdHlwZS53YXRjaEFkc0NsaWNrZWQgPSBmdW5jdGlvbiAoc2VuZGVyKSB7XG4gICAgQXVkaW9IZWxwZXIucGxheUJ0blNvdW5kKCk7XG4gICAgU3RvcmVIZWxwZXIuZ2V0SW5zdGFuY2UoKS5jaGVja0FuZFNob3dSZXdhcmRWaWRlbyh0aGlzLnJld2FyZE5hbWUsIGZ1bmN0aW9uICh3YXRjaGVkKSB7XG4gICAgICAgIGlmICh3YXRjaGVkKSB7XG4gICAgICAgICAgICB0aGlzLndhdGNoZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICB9XG4gICAgfS5iaW5kKHRoaXMpKTtcbn07XG5cbldhdGNoQWRzR2V0SXRlbUNvbnRyb2xsZXIucHJvdG90eXBlLnBvcHVwID0gZnVuY3Rpb24gKCkge1xuICAgIGdhbWUuZGlhbG9nTWFuYWdlci5wb3B1cCh0aGlzLnJvb3ROb2RlLCB7b3ZlcmxheU9wYWNpdHk6IDIyNSwgcG9wdXBBbmltOiB0cnVlfSk7XG59O1xuXG5XYXRjaEFkc0dldEl0ZW1Db250cm9sbGVyLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBnYW1lLmRpYWxvZ01hbmFnZXIuY2xvc2UodGhpcy5yb290Tm9kZSk7XG4gICAgaWYgKHRoaXMuY2xvc2VDYWxsYmFjaykge1xuICAgICAgICB0aGlzLmNsb3NlQ2FsbGJhY2sodGhpcy53YXRjaGVkKTtcbiAgICAgICAgdGhpcy5jbG9zZUNhbGxiYWNrID0gbnVsbDtcbiAgICB9XG59O1xuXG5XYXRjaEFkc0dldEl0ZW1Db250cm9sbGVyLmNyZWF0ZUZyb21DQ0IgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbm9kZSA9IGdhbWUudXRpbHMubG9hZE5vZGVGcm9tQ0NCKFwicmVzL25vdGljZS93YXRjaF9hZHNfZ2V0X2l0ZW1fdmlldy5jY2JpXCIsIG51bGwsIFwiV2F0Y2hBZHNHZXRJdGVtQ29udHJvbGxlclwiLCBuZXcgV2F0Y2hBZHNHZXRJdGVtQ29udHJvbGxlcigpKTtcbiAgICByZXR1cm4gbm9kZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gV2F0Y2hBZHNHZXRJdGVtQ29udHJvbGxlcjsiLCJ2YXIgU3RvcmVIZWxwZXIgPSByZXF1aXJlKFwiLi4vbW9kZWwvU3RvcmVIZWxwZXJcIik7XG5cbnZhciBXYXRjaEFkc0dldFNraW5Db250cm9sbGVyID0gZnVuY3Rpb24gKCkge1xuICAgIEJhc2VDQ0JDb250cm9sbGVyLmNhbGwodGhpcyk7XG5cbiAgICAvL3RoaXMuYnRuQ2xvc2VDbiA9IG51bGw7XG4gICAgLy90aGlzLmJ0bkNsb3NlRW4gPSBudWxsO1xuXG4gICAgdGhpcy5zcFNraW4gPSBudWxsO1xuICAgIHRoaXMubGJHZXRTa2luID0gbnVsbDtcblxuICAgIHRoaXMuY2xvc2VDYWxsYmFjayA9IG51bGw7XG4gICAgdGhpcy5za2luQ2ZnID0gbnVsbDtcbn07XG5cbmdhbWUudXRpbHMuaW5oZXJpdHMoV2F0Y2hBZHNHZXRTa2luQ29udHJvbGxlciwgQmFzZUNDQkNvbnRyb2xsZXIpO1xuXG5XYXRjaEFkc0dldFNraW5Db250cm9sbGVyLnByb3RvdHlwZS5vbkRpZExvYWRGcm9tQ0NCICA9IGZ1bmN0aW9uKCkge1xuICAgIEJhc2VDQ0JDb250cm9sbGVyLnByb3RvdHlwZS5vbkRpZExvYWRGcm9tQ0NCLmNhbGwodGhpcyk7XG4gICAgLy90aGlzLmJ0bkNsb3NlQ24udmlzaWJsZSA9IGZhbHNlO1xuICAgIC8vdGhpcy5idG5DbG9zZUVuLnZpc2libGUgPSBmYWxzZTtcbiAgICAvL2lmIChnYW1lLmxvY2FsLmlzQ2hpbmVzZSgpKSB7LmJ0bkNsb3NlQ25cbiAgICAvLyAgICB0aGlzLmJ0bkNsb3NlQ24udmlzaWJsZSA9IHRydWU7XG4gICAgLy99IGVsc2Uge1xuICAgIC8vICAgIHRoaXMuYnRuQ2xvc2VFbi52aXNpYmxlID0gdHJ1ZTtcbiAgICAvL31cbiAgICB0aGlzLmxiR2V0U2tpbi5zZXRTdHJpbmcoXyhcInJld2FyZF92aWRlb19za2luXCIpKTtcblxuICAgIGdhbWUuYXVkaW9QbGF5ZXIucGxheUVmZmVjdEJ5S2V5KFwib3Blbl9ib3hcIik7XG59O1xuXG5XYXRjaEFkc0dldFNraW5Db250cm9sbGVyLnByb3RvdHlwZS5pbml0V2l0aCA9IGZ1bmN0aW9uIChza2luQ2ZnKSB7XG4gICAgdGhpcy5za2luQ2ZnID0gc2tpbkNmZztcbiAgICB2YXIgc3ByaXRlRnJhbWUgPSBjYy5zcHJpdGVGcmFtZUNhY2hlLmdldFNwcml0ZUZyYW1lKHNraW5DZmcuaW1hZ2UgKyBcIl9sLnBuZ1wiKTtcbiAgICB0aGlzLnNwU2tpbi5zZXRTcHJpdGVGcmFtZShzcHJpdGVGcmFtZSk7XG59O1xuXG5XYXRjaEFkc0dldFNraW5Db250cm9sbGVyLnByb3RvdHlwZS5jbG9zZUNsaWNrZWQgPSBmdW5jdGlvbiAoc2VuZGVyKSB7XG4gICAgQXVkaW9IZWxwZXIucGxheUJ0blNvdW5kKCk7XG4gICAgdGhpcy5jbG9zZSgpO1xufTtcblxuV2F0Y2hBZHNHZXRTa2luQ29udHJvbGxlci5wcm90b3R5cGUud2F0Y2hBZHNDbGlja2VkID0gZnVuY3Rpb24gKHNlbmRlcikge1xuICAgIEF1ZGlvSGVscGVyLnBsYXlCdG5Tb3VuZCgpO1xuICAgIFN0b3JlSGVscGVyLmdldEluc3RhbmNlKCkuYnV5U2tpbih0aGlzLnNraW5DZmcsIFwiYnV5X3NraW5faW5fcGFzc1wiLCBmdW5jdGlvbiAocHVyY2hhc2VkKSB7XG4gICAgICAgIGlmIChwdXJjaGFzZWQpIHtcbiAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgfVxuICAgIH0uYmluZCh0aGlzKSk7XG59O1xuXG5XYXRjaEFkc0dldFNraW5Db250cm9sbGVyLnByb3RvdHlwZS5wb3B1cCA9IGZ1bmN0aW9uICgpIHtcbiAgICBnYW1lLmRpYWxvZ01hbmFnZXIucG9wdXAodGhpcy5yb290Tm9kZSwge292ZXJsYXlPcGFjaXR5OiAyMjUsIHBvcHVwQW5pbTogdHJ1ZX0pO1xufTtcblxuV2F0Y2hBZHNHZXRTa2luQ29udHJvbGxlci5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgZ2FtZS5kaWFsb2dNYW5hZ2VyLmNsb3NlKHRoaXMucm9vdE5vZGUpO1xuICAgIGlmICh0aGlzLmNsb3NlQ2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5jbG9zZUNhbGxiYWNrKCk7XG4gICAgICAgIHRoaXMuY2xvc2VDYWxsYmFjayA9IG51bGw7XG4gICAgfVxufTtcblxuV2F0Y2hBZHNHZXRTa2luQ29udHJvbGxlci5jcmVhdGVGcm9tQ0NCID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG5vZGUgPSBnYW1lLnV0aWxzLmxvYWROb2RlRnJvbUNDQihcInJlcy9ub3RpY2Uvd2F0Y2hfYWRzX2dldF9za2luX3ZpZXcuY2NiaVwiLCBudWxsLCBcIldhdGNoQWRzR2V0U2tpbkNvbnRyb2xsZXJcIiwgbmV3IFdhdGNoQWRzR2V0U2tpbkNvbnRyb2xsZXIoKSk7XG4gICAgcmV0dXJuIG5vZGU7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFdhdGNoQWRzR2V0U2tpbkNvbnRyb2xsZXI7IiwidmFyIFdoZWVsID0gcmVxdWlyZShcIi4uLy4uL2NvbW1vbi93aGVlbC9XaGVlbFwiKTtcbnZhciBDb25maWdNYW4gPSByZXF1aXJlKFwiLi4vY29uZmlnL0NvbmZpZ01hblwiKTtcbnZhciBCb29zdFR5cGUgPSByZXF1aXJlKFwiLi4vZW51bS9Cb29zdFR5cGVcIik7XG52YXIgU3RvcmVIZWxwZXIgPSByZXF1aXJlKFwiLi4vbW9kZWwvU3RvcmVIZWxwZXJcIik7XG52YXIgR2FtZU1hbiA9IHJlcXVpcmUoXCIuLi9tb2RlbC9HYW1lTWFuXCIpO1xudmFyIFdoZWVsVHlwZSA9IHJlcXVpcmUoXCIuLi9lbnVtL1doZWVsVHlwZVwiKTtcblxudmFyIFdoZWVsQ29udHJvbGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICBCYXNlQ0NCQ29udHJvbGxlci5jYWxsKHRoaXMpO1xuICAgIHRoaXMuV0hFRUxfVElNRSA9IDU7XG4gICAgLy90aGlzLldIRUVMX0lURU1fQU5HTEUgPSA5MDtcblxuICAgIHRoaXMuV0hFRUxfSUNPTl9UQUcgPSAxMDA7XG4gICAgdGhpcy5XSEVFTF9OVU1fVEFHID0gMjAwO1xuXG4gICAgdGhpcy5XSEVFTF9DT1VOVCA9IDY7XG5cbiAgICB0aGlzLldIRUVMX0lURU1fQU5HTEUgPSAzNjAgLyB0aGlzLldIRUVMX0NPVU5UO1xuXG4gICAgdGhpcy5uZFdoZWVsID0gbnVsbDtcbiAgICAvL3RoaXMubGJsTGVmdCA9IG51bGw7XG4gICAgLy90aGlzLmxibFJpZ2h0ID0gbnVsbDtcbiAgICB0aGlzLmJ0bkxlZnQgPSBudWxsO1xuICAgIHRoaXMuYnRuUmlnaHQgPSBudWxsO1xuXG4gICAgdGhpcy5uZERhaWx5V2hlZWwgPSBudWxsO1xuICAgIHRoaXMubmRCb3ggPSBudWxsO1xuXG4gICAgdGhpcy5idG5TcGluQWdhaW4gPSBudWxsO1xuXG4gICAgdGhpcy5idG5DbG9zZSA9IG51bGw7XG5cbiAgICAvL3RoaXMubGJsTGVmdFRpcHMgPSBudWxsO1xuICAgIHRoaXMubGJsUmlnaHRUaXBzID0gbnVsbDtcblxuICAgIHRoaXMuc3BUaXRsZUNuID0gbnVsbDtcbiAgICB0aGlzLnNwVGl0bGVFbiA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7V2hlZWx9XG4gICAgICovXG4gICAgdGhpcy53aGVlbCA9IG51bGw7XG5cbiAgICB0aGlzLndoZWVsSWNvbnMgPSBudWxsO1xuICAgIHRoaXMud2hlZWxOdW1zID0gbnVsbDtcblxuICAgIHRoaXMud2hlZWxMaXN0ID0gbnVsbDtcbn07XG5cbmdhbWUudXRpbHMuaW5oZXJpdHMoV2hlZWxDb250cm9sbGVyLCBCYXNlQ0NCQ29udHJvbGxlcik7XG5cbldoZWVsQ29udHJvbGxlci5wcm90b3R5cGUub25FbnRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICBCYXNlQ0NCQ29udHJvbGxlci5wcm90b3R5cGUub25FbnRlci5jYWxsKHRoaXMpO1xuICAgIHRoaXMuaW50ZXJ2YWxLZXkgPSBzZXRJbnRlcnZhbCh0aGlzLm9uVXBkYXRlLmJpbmQodGhpcyksIDEwMDApO1xufTtcblxuV2hlZWxDb250cm9sbGVyLnByb3RvdHlwZS5vbkV4aXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgY2xlYXJJbnRlcnZhbCh0aGlzLmludGVydmFsS2V5KTtcbiAgICBCYXNlQ0NCQ29udHJvbGxlci5wcm90b3R5cGUub25FeGl0LmNhbGwodGhpcyk7XG59O1xuXG5XaGVlbENvbnRyb2xsZXIucHJvdG90eXBlLm9uRGlkTG9hZEZyb21DQ0IgPSBmdW5jdGlvbigpIHtcbiAgICBCYXNlQ0NCQ29udHJvbGxlci5wcm90b3R5cGUub25EaWRMb2FkRnJvbUNDQi5jYWxsKHRoaXMpO1xuXG4gICAgLy90aGlzLmJ0bkNsb3NlQ24udmlzaWJsZSA9IGZhbHNlO1xuICAgIC8vdGhpcy5idG5DbG9zZUVuLnZpc2libGUgPSBmYWxzZTtcbiAgICB0aGlzLnNwVGl0bGVDbi52aXNpYmxlID0gZmFsc2U7XG4gICAgdGhpcy5zcFRpdGxlRW4udmlzaWJsZSA9IGZhbHNlO1xuICAgIGlmIChnYW1lLmxvY2FsLmlzQ2hpbmVzZSgpKSB7XG4gICAgICAgIC8vdGhpcy5idG5DbG9zZUNuLnZpc2libGUgPSB0cnVlO1xuICAgICAgICB0aGlzLnNwVGl0bGVDbi52aXNpYmxlID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvL3RoaXMuYnRuQ2xvc2VFbi52aXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zcFRpdGxlRW4udmlzaWJsZSA9IHRydWU7XG4gICAgfVxuXG4gICAgdGhpcy53aGVlbEljb25zID0gW107XG4gICAgdGhpcy53aGVlbE51bXMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuV0hFRUxfQ09VTlQ7ICsraSkge1xuICAgICAgICB2YXIgd2hlZWxJY29uID0gZ2FtZS51dGlscy5zZWVrTm9kZUJ5VGFnKHRoaXMubmRXaGVlbCwgdGhpcy5XSEVFTF9JQ09OX1RBRyArIGkpO1xuICAgICAgICB2YXIgd2hlZWxOdW0gPSBnYW1lLnV0aWxzLnNlZWtOb2RlQnlUYWcodGhpcy5uZFdoZWVsLCB0aGlzLldIRUVMX05VTV9UQUcgKyBpKTtcbiAgICAgICAgdGhpcy53aGVlbEljb25zLnB1c2god2hlZWxJY29uKTtcbiAgICAgICAgdGhpcy53aGVlbE51bXMucHVzaCh3aGVlbE51bSk7XG4gICAgfVxuXG59O1xuXG5XaGVlbENvbnRyb2xsZXIucHJvdG90eXBlLmluaXRXaXRoID0gZnVuY3Rpb24gKHdoZWVsVHlwZSkge1xuICAgIHRoaXMud2hlZWxUeXBlID0gd2hlZWxUeXBlO1xuICAgIHRoaXMubmRCb3gudmlzaWJsZSA9IGZhbHNlO1xuICAgIHRoaXMubmREYWlseVdoZWVsLnZpc2libGUgPSBmYWxzZTtcbiAgICBzd2l0Y2ggKHdoZWVsVHlwZSkge1xuICAgICAgICBjYXNlIFdoZWVsVHlwZS5EYWlseUJvbnVzOlxuICAgICAgICAgICAgdGhpcy5uZERhaWx5V2hlZWwudmlzaWJsZSA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLndoZWVsTGlzdCA9IENvbmZpZ01hbi5nZXRJbnN0YW5jZSgpLmdldFdoZWVsTGlzdCgpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgV2hlZWxUeXBlLkJveDpcbiAgICAgICAgICAgIHRoaXMubmRCb3gudmlzaWJsZSA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLndoZWVsTGlzdCA9IENvbmZpZ01hbi5nZXRJbnN0YW5jZSgpLmdldEJveFdoZWVsTGlzdCgpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgdGhpcy5pbml0V2hlZWxVSSgpO1xuICAgIHRoaXMudXBkYXRlV2hlZWxJdGVtcygpO1xuICAgIHRoaXMud2hlZWwgPSBuZXcgV2hlZWwodGhpcy5uZFdoZWVsLCBnYW1lLnV0aWxzLmdldEN1cnJlbnRGUFMoKSk7XG4gICAgaWYgKHdoZWVsVHlwZSA9PT0gV2hlZWxUeXBlLkJveCkge1xuICAgICAgICB0aGlzLnN0YXJ0V2hlZWwoKTtcbiAgICB9XG59O1xuXG5XaGVlbENvbnRyb2xsZXIucHJvdG90eXBlLmluaXRXaGVlbFVJID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB3aGVlbHMgPSB0aGlzLndoZWVsTGlzdDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHdoZWVscy5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIgd2hlZWxJY29uID0gdGhpcy53aGVlbEljb25zW2ldO1xuICAgICAgICB2YXIgd2hlZWxOdW0gPSB0aGlzLndoZWVsTnVtc1tpXTtcbiAgICAgICAgd2hlZWxJY29uLnNldFNwcml0ZUZyYW1lKHdoZWVsc1tpXS5pbWFnZSk7XG4gICAgICAgIHdoZWVsTnVtLnNldFN0cmluZyhcInhcIiArIHdoZWVsc1tpXS5jb3VudCk7XG4gICAgICAgIHdoZWVsSWNvbi5zY2FsZSAqPSB3aGVlbHNbaV0uc2NhbGU7XG4gICAgfVxufTtcblxuV2hlZWxDb250cm9sbGVyLnByb3RvdHlwZS5pc1Nob3dSZXdhcmRlZFZpZGVvID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBnYW1lLmFkc01hbmFnZXIuaXNSZXdhcmRWaWRlb1JlYWR5KCk7XG59O1xuXG5XaGVlbENvbnRyb2xsZXIucHJvdG90eXBlLm9uVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMudXBkYXRlV2hlZWxJdGVtcygpO1xufTtcblxuV2hlZWxDb250cm9sbGVyLnByb3RvdHlwZS5pc0ZyZWVXaGVlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbGVmdFRpbWUgPSBHYW1lTWFuLmdldEluc3RhbmNlKCkuZ2V0V2hlZWxMZWZ0VGltZSgpO1xuICAgIGlmIChsZWZ0VGltZSA8PSAwKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59O1xuXG5XaGVlbENvbnRyb2xsZXIucHJvdG90eXBlLmdldExlZnRIb3VyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBsZWZ0VGltZSA9IEdhbWVNYW4uZ2V0SW5zdGFuY2UoKS5nZXRXaGVlbExlZnRUaW1lKCk7XG4gICAgcmV0dXJuIE1hdGguY2VpbChsZWZ0VGltZSAvICg2MCAqIDYwICogMTAwMCkpO1xufTtcblxuV2hlZWxDb250cm9sbGVyLnByb3RvdHlwZS51cGRhdGVXaGVlbEl0ZW1zID0gZnVuY3Rpb24gKCkge1xuICAgIC8vdGhpcy5sYmxMZWZ0LnNldFN0cmluZyhfKFwid2hlZWxfcmV3YXJkX3ZpZGVvX2J0blwiKSk7XG4gICAgLy90aGlzLmxibExlZnRUaXBzLnNldFN0cmluZyhfKFwid2hlZWxfcmV3YXJkX3ZpZGVvX3RpcHNcIikpO1xuXG4gICAgLy90aGlzLmxibFJpZ2h0LnNldFN0cmluZyhfKFwid2hlZWxfZnJlZV9idG5cIikpO1xuICAgIHZhciBmcmVlV2hlZWwgPSB0aGlzLmlzRnJlZVdoZWVsKCk7XG4gICAgdGhpcy5idG5SaWdodC5lbmFibGVkID0gZnJlZVdoZWVsO1xuICAgIGlmIChmcmVlV2hlZWwpIHtcbiAgICAgICAgdGhpcy5sYmxSaWdodFRpcHMuc2V0U3RyaW5nKFwiXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubGJsUmlnaHRUaXBzLnNldFN0cmluZyhnYW1lLnV0aWxzLnNwcmludGYoXyhcIndoZWVsX2ZyZWVfdGlwc1wiKSwgdGhpcy5nZXRMZWZ0SG91cigpKSk7XG4gICAgfVxufTtcblxuV2hlZWxDb250cm9sbGVyLnByb3RvdHlwZS5nZXRSYW5kb21XaGVlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgd2hlZWxzID0gdGhpcy53aGVlbExpc3Q7XG4gICAgdmFyIHJhbmRvbU51bSA9IGdhbWUudXRpbHMucmFuZG9tTmV4dEludCgxMDApO1xuICAgIGNvbnNvbGUubG9nKFwicmFuZG9tTnVtOlwiICsgcmFuZG9tTnVtKTtcbiAgICB2YXIgc3VtUHJvYmFiaWxpdHkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgd2hlZWxzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGlmIChzdW1Qcm9iYWJpbGl0eSArIHdoZWVsc1tpXS5wcm9iYWJpbGl0eSA+IHJhbmRvbU51bSkge1xuICAgICAgICAgICAgcmV0dXJuIHdoZWVsc1tpXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN1bVByb2JhYmlsaXR5ICs9IHdoZWVsc1tpXS5wcm9iYWJpbGl0eTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn07XG5cbldoZWVsQ29udHJvbGxlci5wcm90b3R5cGUuc3RhcnRXaGVlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLndoZWVsQ29uZmlnID0gdGhpcy5nZXRSYW5kb21XaGVlbCgpO1xuICAgIHZhciB3aGVlbElkID0gdGhpcy53aGVlbENvbmZpZy5pZDtcbiAgICBjb25zb2xlLmxvZyhcInJhbmRvbSB3aGVlbCBpZDpcIiArIHdoZWVsSWQpO1xuICAgIHRoaXMud2hlZWwucm90YXRlKHRoaXMuV0hFRUxfVElNRSwgMzYwICogMyArICh3aGVlbElkIC0gMSkgKiB0aGlzLldIRUVMX0lURU1fQU5HTEUsIHRoaXMuV0hFRUxfSVRFTV9BTkdMRSwgdGhpcy5vblJvdGF0ZUVuZC5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLmJ0bkNsb3NlLmVuYWJsZWQgPSBmYWxzZTtcbiAgICB0aGlzLndoZWVsSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGdhbWUuYXVkaW9QbGF5ZXIucGxheUVmZmVjdEJ5S2V5KFwid2hlZWxfcGluXCIpO1xuICAgIH0sIDEwMCk7XG4gICAgZ2FtZS5hdWRpb1BsYXllci5wbGF5TXVzaWNCeUtleShcIndoZWVsX2JnXCIpO1xufTtcblxuV2hlZWxDb250cm9sbGVyLnByb3RvdHlwZS5vblJvdGF0ZUVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBjbGVhckludGVydmFsKHRoaXMud2hlZWxJbnRlcnZhbCk7XG4gICAgZ2FtZS5hdWRpb1BsYXllci5zdG9wTXVzaWMoKTtcbiAgICBnYW1lLmF1ZGlvUGxheWVyLnBsYXlFZmZlY3RCeUtleShcIndoZWVsX3N0b3BcIik7XG4gICAgc2V0VGltZW91dCh0aGlzLm9uU2hvd1Jld2FyZC5iaW5kKHRoaXMpLCAxMDAwKTtcbn07XG5cbldoZWVsQ29udHJvbGxlci5wcm90b3R5cGUub25TaG93UmV3YXJkID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB3aGVlbCA9IHRoaXMud2hlZWxDb25maWc7XG4gICAgU3RvcmVIZWxwZXIuZ2V0SW5zdGFuY2UoKS5wb3B1cFJld2FyZERvdWJsZURsZyh3aGVlbC5jb3VudCwgd2hlZWwudHlwZSwgZ2FtZS51dGlscy5pc0lPUygpID8gXCJ6aHVhbnBhbjAyXCIgOiBcImppbGkwMlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuYnRuQ2xvc2UuZW5hYmxlZCA9IHRydWU7XG4gICAgICAgIHRoaXMudXBkYXRlV2hlZWxJdGVtcygpO1xuICAgIH0uYmluZCh0aGlzKSk7XG59O1xuXG5XaGVlbENvbnRyb2xsZXIucHJvdG90eXBlLmxlZnRDbGlja2VkID0gZnVuY3Rpb24gKCkge1xuICAgIEF1ZGlvSGVscGVyLnBsYXlCdG5Tb3VuZCgpO1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBpZiAodGhpcy5pc1Nob3dSZXdhcmRlZFZpZGVvKCkpIHtcbiAgICAgICAgU3RvcmVIZWxwZXIuZ2V0SW5zdGFuY2UoKS5jaGVja0FuZFNob3dSZXdhcmRWaWRlbyhnYW1lLnV0aWxzLmlzSU9TKCkgPyBcInpodWFucGFuMDFcIiA6IFwiamlsaTAxXCIsIGZ1bmN0aW9uIChyZXdhcmRlZCkge1xuICAgICAgICAgICAgaWYgKHJld2FyZGVkKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5zdGFydFdoZWVsKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWxmLnVwZGF0ZVdoZWVsSXRlbXMoKTtcbiAgICAgICAgfSk7XG4gICAgfVxufTtcblxuV2hlZWxDb250cm9sbGVyLnByb3RvdHlwZS5zcGluQWdhaW5DbGlja2VkID0gZnVuY3Rpb24gKCkge1xuICAgIEF1ZGlvSGVscGVyLnBsYXlCdG5Tb3VuZCgpO1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBpZiAodGhpcy5pc1Nob3dSZXdhcmRlZFZpZGVvKCkpIHtcbiAgICAgICAgU3RvcmVIZWxwZXIuZ2V0SW5zdGFuY2UoKS5jaGVja0FuZFNob3dSZXdhcmRWaWRlbyhcInNwaW5fYWdhaW5cIiwgZnVuY3Rpb24gKHJld2FyZGVkKSB7XG4gICAgICAgICAgICBpZiAocmV3YXJkZWQpIHtcbiAgICAgICAgICAgICAgICBzZWxmLnN0YXJ0V2hlZWwoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlbGYudXBkYXRlV2hlZWxJdGVtcygpO1xuICAgICAgICB9KTtcbiAgICB9XG59O1xuXG5XaGVlbENvbnRyb2xsZXIucHJvdG90eXBlLnJpZ2h0Q2xpY2tlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBBdWRpb0hlbHBlci5wbGF5QnRuU291bmQoKTtcbiAgICBnYW1lLnBsYXllck1hbi5zZXRMYXN0V2hlZWxUaW1lKERhdGUubm93KCkpO1xuICAgIHRoaXMudXBkYXRlV2hlZWxJdGVtcygpO1xuICAgIHRoaXMuYnRuUmlnaHQuZW5hYmxlZCA9IGZhbHNlO1xuICAgIHRoaXMuc3RhcnRXaGVlbCgpO1xufTtcblxuV2hlZWxDb250cm9sbGVyLnByb3RvdHlwZS5jbG9zZUNsaWNrZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgQXVkaW9IZWxwZXIucGxheUJ0blNvdW5kKCk7XG4gICAgdGhpcy5jbG9zZSgpO1xufTtcblxuV2hlZWxDb250cm9sbGVyLnByb3RvdHlwZS5wb3B1cCA9IGZ1bmN0aW9uICgpIHtcbiAgICBnYW1lLmRpYWxvZ01hbmFnZXIucG9wdXAodGhpcy5yb290Tm9kZSwge3BvcHVwQW5pbTogdHJ1ZX0pO1xufTtcblxuV2hlZWxDb250cm9sbGVyLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBnYW1lLmRpYWxvZ01hbmFnZXIuY2xvc2UodGhpcy5yb290Tm9kZSk7XG59O1xuXG5XaGVlbENvbnRyb2xsZXIuY3JlYXRlRnJvbUNDQiA9IGZ1bmN0aW9uKCkge1xuICAgIC8vdmFyIGNjYmlOYW1lID0gZ2FtZS51dGlscy5pc1NlbGZHYW1lKCkgPyBcInJlcy93aGVlbC93aGVlbF92aWV3LmNjYmlcIiA6IFwicmVzL3doZWVsL3doZWVsX3ZpZXdfbmV3LmNjYmlcIjtcbiAgICB2YXIgY2NiaU5hbWUgPSBcInJlcy93aGVlbC93aGVlbF92aWV3LmNjYmlcIjtcbiAgICB2YXIgbm9kZSA9IGdhbWUudXRpbHMubG9hZE5vZGVGcm9tQ0NCKGNjYmlOYW1lLCBudWxsLCBcIldoZWVsQ29udHJvbGxlclwiLCBuZXcgV2hlZWxDb250cm9sbGVyKCkpO1xuICAgIHJldHVybiBub2RlO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBXaGVlbENvbnRyb2xsZXI7IiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHFpbm5pbmcgb24gMjAxNy8xMi8yLlxuICovXG5cbnZhciBHcmlkID0gY2MuTGF5ZXJDb2xvci5leHRlbmQoe1xuXG4gICAgY29sOiAwLFxuICAgIHJvdzogMCxcblxuICAgIGVkaXRpbmc6IGZhbHNlLFxuICAgIHVzZWQ6IGZhbHNlLFxuXG4gICAgY3RvcjogZnVuY3Rpb24gKGNvbG9yLCB3aWR0aCwgaGVpZ2h0LCBjb2wsIHJvdykge1xuICAgICAgICB0aGlzLl9zdXBlcihjb2xvciwgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgIHRoaXMuaWdub3JlQW5jaG9yID0gZmFsc2U7XG4gICAgICAgIC8vdGhpcy50eXBlID0gdHlwZTtcbiAgICAgICAgdGhpcy5jb2wgPSBjb2w7XG4gICAgICAgIHRoaXMucm93ID0gcm93O1xuICAgIH0sXG5cbiAgICBzZXRDb2xvcjogZnVuY3Rpb24gKGNvbG9yKSB7XG4gICAgICAgIHRoaXMuX3N1cGVyKGNvbG9yKTtcbiAgICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBHcmlkOyIsInZhciBDb25maWdNYW4gPSByZXF1aXJlKFwiLi4vLi4vY29uZmlnL0NvbmZpZ01hblwiKTtcbnZhciBQbGF5ZXJNYW4gPSByZXF1aXJlKFwiLi4vLi4vbW9kZWwvUGxheWVyTWFuXCIpO1xudmFyIExldmVsQ29uZmlnID0gcmVxdWlyZShcIi4uLy4uL2NvbmZpZy9MZXZlbENvbmZpZ1wiKTtcbi8vdmFyIEFkc1JlbWluZGVyQ29udHJvbGxlciA9IHJlcXVpcmUoXCIuLi8uLi9jb250cm9sbGVyL0Fkc1JlbWluZGVyQ29udHJvbGxlclwiKTtcblxudmFyIENvbG9yQ29uZmlncyA9IFtcbiAgICBjYy5jb2xvcigyNTIsIDE3OCwgMCksXG4gICAgY2MuY29sb3IoODEsIDIyOSwgMTIpLFxuICAgIGNjLmNvbG9yKDI3LCAyMjYsIDI1NSksXG4gICAgY2MuY29sb3IoMjU1LCAyNTIsIDI5KSxcbiAgICBjYy5jb2xvcigyNTUsIDU2LCA1NiksXG4gICAgY2MuY29sb3IoMjQ4LCA3MCwgMjU1KSxcbiAgICBjYy5jb2xvcigyNTUsIDEyOSwgMTcpLFxuICAgIGNjLmNvbG9yKDU3LCAxMDMsIDI0OSksXG4gICAgY2MuY29sb3IoOTAsIDE4MSwgMTEwKSxcblxuICAgIGNjLmNvbG9yKDI1NSwgOTAsIDE0MSksXG4gICAgY2MuY29sb3IoMjQyLCA4NiwgOSksXG4gICAgY2MuY29sb3IoNjYsIDQ2LCAxNzYpLFxuICAgIGNjLmNvbG9yKDE0NCwgODUsIDIyMiksXG4gICAgY2MuY29sb3IoMjMsIDE2NywgMTA0KSxcbiAgICBjYy5jb2xvcigxNzYsIDcyLCAyMDYpLFxuICAgIGNjLmNvbG9yKDE0NywgMTkyLCAyNiksXG4gICAgY2MuY29sb3IoNTUsIDcwLCAyMTkpXG5dO1xuXG52YXIgR3JpZFR5cGUgPSB7XG4gICAgTm9uZTogMCxcbiAgICBHcmlkOiAxLFxuICAgIFdhbGw6IDJcbn1cblxudmFyIEdyYXlDb2xvciA9IGNjLmNvbG9yLkdSQVk7XG52YXIgTGlnaHRHcmF5Q29sb3IgPSBjYy5jb2xvcigxMzAsIDEzMCwgMTMwKTtcbnZhciBTdGF0dXNMaXN0ID0gW1wiYnJpY2tcIiwgXCJvYnN0YWNsZVwiLCBcImRlbGV0ZVwiXTtcblxudmFyIEVkaXRvclNjZW5lID0gY2MuU2NlbmUuZXh0ZW5kKHtcblxuICAgIENPTlRFTlRfV0lEVEg6IDYwMCxcbiAgICBDT05URU5UX0hFSUdIVDogNjAwLFxuXG4gICAgQ09MOiA1MCxcbiAgICBST1c6IDUwLFxuXG4gICAgR1JJRF9XSURUSDogOSxcbiAgICBHUklEX0hFSUdIVDogOSxcblxuICAgIEdBUF9XSURUSDogMyxcbiAgICBHQVBfSEVJR0hUOiAzLFxuXG4gICAgYnJpY2tSZWN0czogbnVsbCxcblxuICAgIG9ic3RhY2xlUmVjdHM6IG51bGwsXG5cbiAgICAvL19pc0JyaWNrOiB0cnVlLFxuICAgIF9zdGF0dXM6IFwiYnJpY2tcIixcblxuICAgIF9icmlja0l0ZW06IG51bGwsXG5cbiAgICBfbGV2ZWxFZGl0Qm94OiBudWxsLFxuXG4gICAgY3RvcjogZnVuY3Rpb24gKCkge1xuICAgICAgICBnYW1lLnBsYXllck1hbiA9IFBsYXllck1hbi5nZXRJbnN0YW5jZSgpO1xuICAgICAgICBnYW1lLnBsYXllck1hbi5pbml0RGF0YSgpO1xuXG4gICAgICAgIGdhbWUucGxheWVyTWFuLnNldEJvb3N0KDIsIDQwMCk7XG4gICAgICAgIGdhbWUucGxheWVyTWFuLnNldEJvb3N0KDMsIDQwMCk7XG5cbiAgICAgICAgLy92YXIgTG9naWNNYW4gPSByZXF1aXJlKFwiLi4vLi4vLi4vY29tbW9uL21vZGVsL0xvZ2ljTWFuXCIpO1xuICAgICAgICAvL0xvZ2ljTWFuLmdldEluc3RhbmNlKCkuc3RhcnRHYW1lKHRydWUpO1xuICAgICAgICAvL2NjLkJ1aWxkZXJSZWFkZXIucmVnaXN0ZXJDb250cm9sbGVyKFwiQWRzUmVtaW5kZXJDb250cm9sbGVyXCIsIG5ldyBBZHNSZW1pbmRlckNvbnRyb2xsZXIoKSk7XG5cbiAgICAgICAgdGhpcy5fc3VwZXIoKTtcblxuICAgICAgICB2YXIgc2NhbGUgPSAxLjU7XG4gICAgICAgIHRoaXMueE9mZnNldCA9IChjYy53aW5TaXplLndpZHRoIC0gdGhpcy5DT05URU5UX1dJRFRIICogc2NhbGUpICogMC41O1xuICAgICAgICB0aGlzLnlPZmZzZXQgPSAoY2Mud2luU2l6ZS5oZWlnaHQgLSB0aGlzLkNPTlRFTlRfSEVJR0hUICogc2NhbGUpICogMC41O1xuXG4gICAgICAgIHRoaXMuYnJpY2tSZWN0cyA9IFtdO1xuICAgICAgICB0aGlzLm9ic3RhY2xlUmVjdHMgPSBbXTtcblxuICAgICAgICB0aGlzLmN1cnJlbnRSZWN0cyA9IHRoaXMuYnJpY2tSZWN0cztcbiAgICAgICAgdGhpcy5zZWxlY3RDb2xvciA9IENvbG9yQ29uZmlnc1swXTtcbiAgICAgICAgdGhpcy5zZWxlY3RDb2xvckluZGV4ID0gMDtcblxuICAgICAgICB0aGlzLmdyaWROb2RlID0gbmV3IGNjLk5vZGUoKTtcbiAgICAgICAgdGhpcy5hZGRDaGlsZCh0aGlzLmdyaWROb2RlKTtcbiAgICAgICAgdGhpcy5ncmlkTm9kZS54ID0gdGhpcy54T2Zmc2V0O1xuICAgICAgICB0aGlzLmdyaWROb2RlLnkgPSB0aGlzLnlPZmZzZXQ7XG4gICAgICAgIHRoaXMuZ3JpZE5vZGUuc2NhbGUgPSBzY2FsZTtcblxuICAgICAgICB0aGlzLmluaXRHcmlkcygpO1xuICAgICAgICB0aGlzLmluaXRCdXR0b25zKCk7XG4gICAgICAgIHRoaXMuaW5pdENvbG9yQnV0dG9ucygpO1xuICAgICAgICB0aGlzLmluaXRFZGl0Qm94KCk7XG5cbiAgICAgICAgaWYgKGdhbWUuZ2FtZU1hbi5sZXZlbENmZykge1xuICAgICAgICAgICAgdGhpcy5sb2FkQ29uZmlnKGdhbWUuZ2FtZU1hbi5sZXZlbENmZy5vcmlnaW5hbENvbmZpZyk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgaW5pdEVkaXRCb3g6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHhPZmZzZXQgPSAyMDA7XG4gICAgICAgIHRoaXMuX2xldmVsRWRpdEJveCA9IHRoaXMuY3JlYXRlRWRpdEJveChcIlwiLCBcIklucHV0IExldmVsSWRcIiwgY2MucChjYy53aW5TaXplLndpZHRoICogMC41IC0geE9mZnNldCwgMTAwKSk7XG4gICAgICAgIHRoaXMuX2Jvb3N0RWRpdEJveCA9IHRoaXMuY3JlYXRlRWRpdEJveChcIjFcIiwgXCJJbnB1dCBCb29zdCBQcm9iYWJpbGl0eVwiLCBjYy5wKGNjLndpblNpemUud2lkdGggKiAwLjUsIDEwMCkpO1xuICAgICAgICB0aGlzLl9zdGFyM0VkaXRCb3ggPSB0aGlzLmNyZWF0ZUVkaXRCb3goXCI5MFwiLCBcIklucHV0IDNTdGFyIFRpbWVcIiwgY2MucChjYy53aW5TaXplLndpZHRoICogMC41ICsgeE9mZnNldCwgMTAwKSk7XG4gICAgfSxcblxuICAgIGNyZWF0ZUVkaXRCb3g6IGZ1bmN0aW9uIChjb250ZW50LCBwbGFjZUhvbGRlciwgcG9zaXRpb24pIHtcbiAgICAgICAgdmFyIGVkaXRCb3ggPSBuZXcgY2MuRWRpdEJveChjYy5zaXplKDI3MCwgMTAwKSwgbmV3IGNjLlNjYWxlOVNwcml0ZShcInJlcy9jb21tb24vYmxhbmsucG5nXCIpLFxuICAgICAgICAgICAgbmV3IGNjLlNjYWxlOVNwcml0ZShcInJlcy9jb21tb24vYmxhbmsucG5nXCIpKTtcbiAgICAgICAgZWRpdEJveC5zZXRTdHJpbmcoY29udGVudCk7XG4gICAgICAgIGVkaXRCb3guc2V0UG9zaXRpb24ocG9zaXRpb24pO1xuICAgICAgICBlZGl0Qm94LnNldEZvbnRDb2xvcihjYy5jb2xvcigyNTUsIDI1NSwgMjU1KSk7XG4gICAgICAgIC8vZWRpdEJveC5zZXRIaW50Q29cbiAgICAgICAgZWRpdEJveC5zZXRQbGFjZWhvbGRlckZvbnRDb2xvcihjYy5jb2xvcigyNTUsIDAsIDApKTtcbiAgICAgICAgZWRpdEJveC5zZXRQbGFjZUhvbGRlcihwbGFjZUhvbGRlcik7XG4gICAgICAgIGVkaXRCb3guc2V0RGVsZWdhdGUodGhpcyk7XG4gICAgICAgIHRoaXMuYWRkQ2hpbGQoZWRpdEJveCk7XG4gICAgICAgIHJldHVybiBlZGl0Qm94O1xuICAgIH0sXG5cbiAgICBpbml0QnV0dG9uczogZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBCdWdzIEl0ZW1cbiAgICAgICAgdmFyIGJyaWNrSXRlbSA9IG5ldyBjYy5NZW51SXRlbUZvbnQoXCJCcmlja1wiLCB0aGlzLm9uQnJpY2tUeXBlQ2hhbmdlLCB0aGlzKTtcbiAgICAgICAgdmFyIHNhdmVJdGVtID0gbmV3IGNjLk1lbnVJdGVtRm9udChcIlNhdmVcIiwgdGhpcy5vblNhdmUsIHRoaXMpO1xuICAgICAgICB2YXIgZGVsZXRlSXRlbSA9IG5ldyBjYy5NZW51SXRlbUZvbnQoXCJCYWNrXCIsIHRoaXMub25EZWxldGUsIHRoaXMpO1xuICAgICAgICAvL3ZhciByZWZyZXNoSXRlbSA9IG5ldyBjYy5NZW51SXRlbUZvbnQoXCJSZWZyZXNoXCIsIHRoaXMub25SZWZyZXNoLCB0aGlzKTtcbiAgICAgICAgdmFyIGFkZEl0ZW0gPSBuZXcgY2MuTWVudUl0ZW1Gb250KFwiQWRkXCIsIHRoaXMub25BZGQsIHRoaXMpO1xuICAgICAgICB2YXIgcmVkdWNlSXRlbSA9IG5ldyBjYy5NZW51SXRlbUZvbnQoXCJSZWR1Y2VcIiwgdGhpcy5vblJlZHVjZSwgdGhpcyk7XG4gICAgICAgIHZhciBsb2FkSXRlbSA9IG5ldyBjYy5NZW51SXRlbUZvbnQoXCJMb2FkXCIsIHRoaXMub25Mb2FkLCB0aGlzKTtcbiAgICAgICAgdmFyIHByZXZpZXdJdGVtID0gbmV3IGNjLk1lbnVJdGVtRm9udChcIlByZXZpZXdcIiwgdGhpcy5vblByZXZpZXcsIHRoaXMpO1xuICAgICAgICB2YXIgZHVwbGljYXRlSXRlbSA9IG5ldyBjYy5NZW51SXRlbUZvbnQoXCJEdXBsaWNhdGVcIiwgdGhpcy5vbkR1cGxpY2F0ZUNoZWNrLCB0aGlzKTtcbiAgICAgICAgdmFyIHJlYWNoSXRlbSA9IG5ldyBjYy5NZW51SXRlbUZvbnQoXCJSZWFjaFwiLCB0aGlzLm9uUmVhY2hUZXN0LCB0aGlzKTtcbiAgICAgICAgdmFyIG1lbnUgPSBuZXcgY2MuTWVudShicmlja0l0ZW0sIHNhdmVJdGVtLCBkZWxldGVJdGVtLCBhZGRJdGVtLCByZWR1Y2VJdGVtLCBsb2FkSXRlbSwgcHJldmlld0l0ZW0sIGR1cGxpY2F0ZUl0ZW0sIHJlYWNoSXRlbSk7XG5cblxuICAgICAgICBtZW51LmFsaWduSXRlbXNIb3Jpem9udGFsbHkoKTtcbiAgICAgICAgdGhpcy5hZGRDaGlsZChtZW51KTtcbiAgICAgICAgbWVudS5zZXRQb3NpdGlvbihjYy5wKGNjLndpblNpemUud2lkdGggKiAwLjUsIGNjLndpblNpemUuaGVpZ2h0IC0gMjApKTtcbiAgICAgICAgdGhpcy5fYnJpY2tJdGVtID0gYnJpY2tJdGVtO1xuXG4gICAgICAgIHRoaXMuX2dyaWRMYWJlbCA9IG5ldyBjYy5MYWJlbFRURihcIlwiLCBcIkFyaWFsXCIsIDQwKTtcbiAgICAgICAgdGhpcy5hZGRDaGlsZCh0aGlzLl9ncmlkTGFiZWwpO1xuXG4gICAgICAgIHRoaXMuX2dyaWRMYWJlbC5zZXRBbmNob3JQb2ludChjYy5wKDAsIDAuNSkpO1xuXG4gICAgICAgIHRoaXMuX2dyaWRMYWJlbC5zZXRQb3NpdGlvbihjYy5wKDEwMCwgY2Mud2luU2l6ZS5oZWlnaHQgLSA4MCkpO1xuXG4gICAgICAgIHRoaXMuX2dyaWRMYWJlbC5zZXRTdHJpbmcodGhpcy5DT0wgKyBcInhcIiArIHRoaXMuUk9XKTtcbiAgICB9LFxuXG4gICAgaW5pdENvbG9yQnV0dG9uczogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIHZhciBpdGVtcyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IENvbG9yQ29uZmlncy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdmFyIGNvbG9ySXRlbSA9IG5ldyBjYy5NZW51SXRlbUZvbnQoXCIgTyBcIiwgdGhpcy5vblNlbGVjdENvbG9yLCB0aGlzKTtcbiAgICAgICAgICAgIGNvbG9ySXRlbS5zZXRDb2xvcihDb2xvckNvbmZpZ3NbaV0pO1xuICAgICAgICAgICAgY29sb3JJdGVtLnNldFRhZyhpKTtcbiAgICAgICAgICAgIGl0ZW1zLnB1c2goY29sb3JJdGVtKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbWVudSA9IG5ldyBjYy5NZW51KGl0ZW1zLnNsaWNlKDAsIGl0ZW1zLmxlbmd0aCAvIDIgKyAxKSk7XG4gICAgICAgIG1lbnUuYWxpZ25JdGVtc0hvcml6b250YWxseSgpO1xuICAgICAgICBtZW51LnNldFBvc2l0aW9uKGNjLnAoY2Mud2luU2l6ZS53aWR0aCAqIDAuNSwgY2Mud2luU2l6ZS5oZWlnaHQgLSA1NSkpO1xuICAgICAgICB0aGlzLmFkZENoaWxkKG1lbnUpO1xuXG4gICAgICAgIHZhciBib3R0b21NZW51ID0gbmV3IGNjLk1lbnUoaXRlbXMuc2xpY2UoaXRlbXMubGVuZ3RoIC8gMiArIDEpKTtcbiAgICAgICAgYm90dG9tTWVudS5hbGlnbkl0ZW1zSG9yaXpvbnRhbGx5KCk7XG4gICAgICAgIGJvdHRvbU1lbnUuc2V0UG9zaXRpb24oY2MucChjYy53aW5TaXplLndpZHRoICogMC41LCBjYy53aW5TaXplLmhlaWdodCAtIDkwKSk7XG4gICAgICAgIHRoaXMuYWRkQ2hpbGQoYm90dG9tTWVudSk7XG4gICAgfSxcblxuICAgIG9uTG9hZDogZnVuY3Rpb24gKHNlbmRlcikge1xuICAgICAgICB2YXIgbGV2ZWxTdHJpbmcgPSB0aGlzLl9sZXZlbEVkaXRCb3guZ2V0U3RyaW5nKCk7XG4gICAgICAgIHZhciBsZXZlbElkID0gcGFyc2VJbnQobGV2ZWxTdHJpbmcpO1xuICAgICAgICBpZiAoaXNOYU4obGV2ZWxJZCkpIHtcbiAgICAgICAgICAgIGFsZXJ0KFwibGV2ZWwgaWQgbm90IGZvdW5kOlwiICsgbGV2ZWxTdHJpbmcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGxldmVsQ29uZmlnID0gQ29uZmlnTWFuLmdldEluc3RhbmNlKCkuZ2V0T3JpZ2luYWxMZXZlbENvbmZpZyhsZXZlbElkKTtcbiAgICAgICAgICAgIGlmICghbGV2ZWxDb25maWcpIHtcbiAgICAgICAgICAgICAgICBhbGVydChcImxldmVsIGlkIG5vdCBmb3VuZDpcIiArIGxldmVsU3RyaW5nKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2FkQ29uZmlnKGxldmVsQ29uZmlnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBvblByZXZpZXc6IGZ1bmN0aW9uIChzZW5kZXIpIHtcbiAgICAgICAgdmFyIG9iaiA9IHRoaXMuZ2VuZXJhdGVMZXZlbE9iaigpO1xuICAgICAgICB2YXIgbGV2ZWxDb25maWcgPSBuZXcgTGV2ZWxDb25maWcoKTtcbiAgICAgICAgbGV2ZWxDb25maWcudW5tYXJzaGFsKG9iaik7XG4gICAgICAgIGxldmVsQ29uZmlnLm9yaWdpbmFsQ29uZmlnID0gb2JqO1xuICAgICAgICBnYW1lLmdhbWVNYW4ubGV2ZWxDZmcgPSBsZXZlbENvbmZpZztcbiAgICAgICAgZ2FtZS5nYW1lTWFuLnN0YXR1cyA9IHRoaXMuX3N0YXR1cztcbiAgICAgICAgLy92YXIgc2NlbmUgPSBuZXcgR2FtZVNjZW5lKCk7XG4gICAgICAgIHZhciBHYW1lU2NlbmUgPSByZXF1aXJlKFwiLi9HYW1lU2NlbmVcIik7XG4gICAgICAgIC8vY2Mud2luU2l6ZS53aWR0aCA9IGNjLndpblNpemUuaGVpZ2h0ICogMC41O1xuICAgICAgICBjYy5kaXJlY3Rvci5ydW5TY2VuZShuZXcgR2FtZVNjZW5lKCkpO1xuICAgIH0sXG5cbiAgICBvbkR1cGxpY2F0ZUNoZWNrOiBmdW5jdGlvbiAoc2VuZGVyKSB7XG4gICAgICAgIHZhciBvcmlnaW5hbExldmVsTGlzdCA9IENvbmZpZ01hbi5nZXRJbnN0YW5jZSgpLm9yaWdpbmFsTGV2ZWxMaXN0O1xuICAgICAgICB2YXIgZm91bmREdXBsaWNhdGUgPSBmYWxzZTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvcmlnaW5hbExldmVsTGlzdC5sZW5ndGggLSAxOyArK2kpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSBpICsgMTsgaiA8IG9yaWdpbmFsTGV2ZWxMaXN0Lmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxldmVsQ2ZnMSA9IG9yaWdpbmFsTGV2ZWxMaXN0W2ldO1xuICAgICAgICAgICAgICAgIHZhciBsZXZlbENmZzIgPSBvcmlnaW5hbExldmVsTGlzdFtqXTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc0VxdWFsTGV2ZWxDZmdzKGxldmVsQ2ZnMSwgbGV2ZWxDZmcyKSkge1xuICAgICAgICAgICAgICAgICAgICBhbGVydChcImZvdW5kIGR1cGxpY2F0ZSBsZXZlbDpcIiArIChpICsgMSkgKyBcIiBhbmQgXCIgKyAoaiArIDEpKTtcbiAgICAgICAgICAgICAgICAgICAgZm91bmREdXBsaWNhdGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZm91bmREdXBsaWNhdGUpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWZvdW5kRHVwbGljYXRlKSB7XG4gICAgICAgICAgICBhbGVydChcImFsbCBpcyBva1wiKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBvblJlYWNoVGVzdDogZnVuY3Rpb24gKHNlbmRlcikge1xuICAgICAgICB2YXIgbGV2ZWxMaXN0ID0gQ29uZmlnTWFuLmdldEluc3RhbmNlKCkubGV2ZWxMaXN0O1xuICAgICAgICAvL2lmICh0aGlzLmlzTGV2ZWxSZWFjaGFibGUobGV2ZWxMaXN0WzIzXSkpIHtcbiAgICAgICAgLy8gICAgYWxlcnQoXCJhbGwgaXMgb2tcIik7XG4gICAgICAgIC8vfSBlbHNlIHtcbiAgICAgICAgLy8gICAgYWxlcnQoXCJ1bnJlYWNoYWJsZSBsZXZlbFwiKTtcbiAgICAgICAgLy99XG4gICAgICAgIHZhciBmaW5kVW5SZWFjaGFibGUgPSBmYWxzZTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZXZlbExpc3QubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5pc0xldmVsUmVhY2hhYmxlKGxldmVsTGlzdFtpXSkpIHtcbiAgICAgICAgICAgICAgICBmaW5kVW5SZWFjaGFibGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGFsZXJ0KFwiZmluZCB1bnJlYWNoYWJsZSBsZXZlbDpcIiArIChpICsgMSkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghZmluZFVuUmVhY2hhYmxlKSB7XG4gICAgICAgICAgICBhbGVydChcImFsbCBpcyBva1wiKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBpc0xldmVsUmVhY2hhYmxlOiBmdW5jdGlvbiAobGV2ZWxDZmcpIHtcbiAgICAgICAgdmFyIGdyaWRzID0gW107XG4gICAgICAgIHZhciBpLCBqLCBicmlja0NmZywgeCwgeTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxldmVsQ2ZnLndpZHRoOyArK2kpIHtcbiAgICAgICAgICAgIGdyaWRzW2ldID0gW107XG4gICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgbGV2ZWxDZmcuaGVpZ2h0OyArK2opIHtcbiAgICAgICAgICAgICAgICBncmlkc1tpXVtqXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogR3JpZFR5cGUuTm9uZSxcbiAgICAgICAgICAgICAgICAgICAgZmluZDogZmFsc2VcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZXZlbENmZy5icmlja3MubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGJyaWNrQ2ZnID0gbGV2ZWxDZmcuYnJpY2tzW2ldO1xuICAgICAgICAgICAgZm9yICh4ID0gMDsgeCA8IGJyaWNrQ2ZnLndpZHRoOyArK3gpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHkgPSAwOyB5IDwgYnJpY2tDZmcuaGVpZ2h0OyArK3kpIHtcbiAgICAgICAgICAgICAgICAgICAgZ3JpZHNbYnJpY2tDZmcueCArIHhdW2JyaWNrQ2ZnLnkgKyB5XSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IEdyaWRUeXBlLkdyaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBmaW5kOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGV2ZWxDZmcub2JzdGFjbGVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBicmlja0NmZyA9IGxldmVsQ2ZnLm9ic3RhY2xlc1tpXTtcbiAgICAgICAgICAgIGZvciAoeCA9IDA7IHggPCBicmlja0NmZy53aWR0aDsgKyt4KSB7XG4gICAgICAgICAgICAgICAgZm9yICh5ID0gMDsgeSA8IGJyaWNrQ2ZnLmhlaWdodDsgKyt5KSB7XG4gICAgICAgICAgICAgICAgICAgIGdyaWRzW2JyaWNrQ2ZnLnggKyB4XVticmlja0NmZy55ICsgeV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBHcmlkVHlwZS5XYWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmluZDogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZmluZEZpcnN0R3JpZFBvc3MgPSB0aGlzLmZpbmRGaXJzdEdyaWRzKGxldmVsQ2ZnLCBncmlkcyk7XG4gICAgICAgIGlmIChmaW5kRmlyc3RHcmlkUG9zcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHggPSAwOyB4IDwgZmluZEZpcnN0R3JpZFBvc3MubGVuZ3RoOyArK3gpIHtcbiAgICAgICAgICAgIHZhciBmaXJzdEdyaWRQb3MgPSBmaW5kRmlyc3RHcmlkUG9zc1t4XTtcbiAgICAgICAgICAgIHRoaXMuc2VhcmNoR3JpZChncmlkcywgbGV2ZWxDZmcsIGZpcnN0R3JpZFBvcy54LCBmaXJzdEdyaWRQb3MueSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGZpbmRHcmlkID0gZmFsc2U7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBncmlkcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IGdyaWRzW2ldLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICAgICAgaWYgKGdyaWRzW2ldW2pdLnR5cGUgPT09IEdyaWRUeXBlLkdyaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZmluZEdyaWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZmluZEdyaWQpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZmluZEdyaWQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuXG4gICAgZmluZEZpcnN0R3JpZHM6IGZ1bmN0aW9uIChsZXZlbENmZywgZ3JpZHMpIHtcbiAgICAgICAgdmFyIGk7XG4gICAgICAgIHZhciByZXN1bHRzID0gW107XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZXZlbENmZy53aWR0aDsgKytpKSB7XG4gICAgICAgICAgICBpZiAoZ3JpZHNbaV1bMF0udHlwZSAhPT0gR3JpZFR5cGUuV2FsbCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaChjYy5wKGksIDApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICB9LFxuXG4gICAgc2VhcmNoR3JpZDogZnVuY3Rpb24gKGdyaWRzLCBsZXZlbENmZywgeCwgeSkge1xuICAgICAgICBpZiAoeCA+PSAwICYmIHggPCBsZXZlbENmZy53aWR0aCAmJiB5ID49IDAgJiYgeSA8IGxldmVsQ2ZnLmhlaWdodCkge1xuICAgICAgICAgICAgdmFyIGdyaWQgPSBncmlkc1t4XVt5XTtcbiAgICAgICAgICAgIGlmIChncmlkLnR5cGUgPT09IEdyaWRUeXBlLldhbGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZ3JpZC5maW5kKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZ3JpZC5maW5kID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChncmlkLnR5cGUgPT09IEdyaWRUeXBlLkdyaWQpIHtcbiAgICAgICAgICAgICAgICBncmlkLnR5cGUgPSBHcmlkVHlwZS5Ob25lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zZWFyY2hHcmlkKGdyaWRzLCBsZXZlbENmZywgeCAtIDEsIHkpO1xuICAgICAgICAgICAgdGhpcy5zZWFyY2hHcmlkKGdyaWRzLCBsZXZlbENmZywgeCArIDEsIHkpO1xuICAgICAgICAgICAgdGhpcy5zZWFyY2hHcmlkKGdyaWRzLCBsZXZlbENmZywgeCwgeSArIDEpO1xuICAgICAgICAgICAgdGhpcy5zZWFyY2hHcmlkKGdyaWRzLCBsZXZlbENmZywgeCwgeSAtIDEpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIGlzRXF1YWxMZXZlbENmZ3M6IGZ1bmN0aW9uIChsZXZlbENmZzEsIGxldmVsQ2ZnMikge1xuICAgICAgICBpZiAoSlNPTi5zdHJpbmdpZnkobGV2ZWxDZmcxLmJyaWNrcykgPT09IEpTT04uc3RyaW5naWZ5KGxldmVsQ2ZnMi5icmlja3MpICYmXG4gICAgICAgICAgICBKU09OLnN0cmluZ2lmeShsZXZlbENmZzEub2JzdGFjbGVzKSA9PT0gSlNPTi5zdHJpbmdpZnkobGV2ZWxDZmcyLm9ic3RhY2xlcykpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgZ2VuZXJhdGVMZXZlbE9iajogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYm9vc3RQcm9iYWJpbGl0eSA9IE51bWJlcih0aGlzLl9ib29zdEVkaXRCb3guZ2V0U3RyaW5nKCkpO1xuICAgICAgICBpZiAoaXNOYU4oYm9vc3RQcm9iYWJpbGl0eSkpIHtcbiAgICAgICAgICAgIGJvb3N0UHJvYmFiaWxpdHkgPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHN0YXJUaW1lID0gTnVtYmVyKHRoaXMuX3N0YXIzRWRpdEJveC5nZXRTdHJpbmcoKSk7XG4gICAgICAgIGlmIChpc05hTihzdGFyVGltZSkpIHtcbiAgICAgICAgICAgIHN0YXJUaW1lID0gOTA7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaWQgPSBwYXJzZUludCh0aGlzLl9sZXZlbEVkaXRCb3guZ2V0U3RyaW5nKCkpO1xuICAgICAgICBpZiAoaXNOYU4oaWQpKSB7XG4gICAgICAgICAgICBpZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvYmogPSB7XG4gICAgICAgICAgICBpZDogaWQsXG4gICAgICAgICAgICBiOiBib29zdFByb2JhYmlsaXR5LFxuICAgICAgICAgICAgc3RhclRpbWU6IHN0YXJUaW1lLFxuICAgICAgICAgICAgcGl4ZWxXaWR0aDogdGhpcy5DT05URU5UX1dJRFRILFxuICAgICAgICAgICAgcGl4ZWxIZWlnaHQ6IHRoaXMuQ09OVEVOVF9IRUlHSFQsXG4gICAgICAgICAgICB3aWR0aDogdGhpcy5DT0wsXG4gICAgICAgICAgICBoZWlnaHQ6IHRoaXMuUk9XLFxuICAgICAgICAgICAgYnJpY2tzOiB0aGlzLmJyaWNrUmVjdHMsXG4gICAgICAgICAgICBvYnN0YWNsZXM6IHRoaXMub2JzdGFjbGVSZWN0c1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG5cbiAgICBsb2FkQ29uZmlnOiBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgICAgIHRoaXMucmVzZXRPbGRWaWV3KCk7XG5cbiAgICAgICAgdGhpcy5DT05URU5UX1dJRFRIID0gY29uZmlnLnBpeGVsV2lkdGg7XG4gICAgICAgIHRoaXMuQ09OVEVOVF9IRUlHSFQgPSBjb25maWcucGl4ZWxIZWlnaHQ7XG4gICAgICAgIHRoaXMuQ09MID0gY29uZmlnLndpZHRoO1xuICAgICAgICB0aGlzLlJPVyA9IGNvbmZpZy5oZWlnaHQ7XG4gICAgICAgIHRoaXMuYnJpY2tSZWN0cyA9IGNvbmZpZy5icmlja3M7XG4gICAgICAgIHRoaXMub2JzdGFjbGVSZWN0cyA9IGNvbmZpZy5vYnN0YWNsZXM7XG5cbiAgICAgICAgLy90aGlzLnVwZGF0ZVZpZXcoKTtcbiAgICAgICAgdmFyIHdpZHRoID0gdGhpcy5DT05URU5UX1dJRFRIIC8gdGhpcy5DT0w7XG4gICAgICAgIHZhciBoZWlnaHQgPSB0aGlzLkNPTlRFTlRfSEVJR0hUIC8gdGhpcy5ST1c7XG4gICAgICAgIHRoaXMuR1JJRF9XSURUSCA9IHdpZHRoICogMC43NTtcbiAgICAgICAgdGhpcy5HUklEX0hFSUdIVCA9IGhlaWdodCAqIDAuNzU7XG4gICAgICAgIHRoaXMuR0FQX1dJRFRIID0gd2lkdGggLSB0aGlzLkdSSURfV0lEVEg7XG4gICAgICAgIHRoaXMuR0FQX0hFSUdIVCA9IGhlaWdodCAtIHRoaXMuR1JJRF9IRUlHSFQ7XG5cbiAgICAgICAgdGhpcy5pbml0R3JpZHMoKTtcblxuICAgICAgICAvL3RoaXMuYnJpY2tSZWN0cyA9IFtdO1xuICAgICAgICAvL3RoaXMub2JzdGFjbGVSZWN0cyA9IFtdO1xuICAgICAgICAvL3RoaXMuY3VycmVudFJlY3RzID0gdGhpcy5icmlja1JlY3RzO1xuICAgICAgICAvL3RoaXMuX2lzQnJpY2sgPSB0cnVlO1xuICAgICAgICAvL3RoaXMuX3N0YXR1cyA9IFwiYnJpY2tcIjtcbiAgICAgICAgLy90aGlzLl9icmlja0l0ZW0uc2V0U3RyaW5nKFwiQnJpY2tcIik7XG4gICAgICAgIGlmIChnYW1lLmdhbWVNYW4uc3RhdHVzKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0dXMgPSBnYW1lLmdhbWVNYW4uc3RhdHVzO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudXBkYXRlQnJpY2tUeXBlKCk7XG4gICAgICAgIHRoaXMuX2dyaWRMYWJlbC5zZXRTdHJpbmcodGhpcy5DT0wgKyBcInhcIiArIHRoaXMuUk9XKTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuYnJpY2tSZWN0cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdmFyIGJyaWNrUmVjdCA9IHRoaXMuYnJpY2tSZWN0c1tpXTtcbiAgICAgICAgICAgIHRoaXMubWFya09jY3VwaWVkV2l0aFJlY3QoYnJpY2tSZWN0LCBDb2xvckNvbmZpZ3NbYnJpY2tSZWN0WzRdIC0gMV0pO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5vYnN0YWNsZVJlY3RzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB2YXIgYnJpY2tSZWN0ID0gdGhpcy5vYnN0YWNsZVJlY3RzW2ldO1xuICAgICAgICAgICAgdGhpcy5tYXJrT2NjdXBpZWRXaXRoUmVjdChicmlja1JlY3QsICBjYy5jb2xvci5XSElURSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbGV2ZWxFZGl0Qm94LnNldFN0cmluZyhjb25maWcuaWQpO1xuICAgICAgICB0aGlzLl9ib29zdEVkaXRCb3guc2V0U3RyaW5nKGNvbmZpZy5iKTtcbiAgICAgICAgdGhpcy5fc3RhcjNFZGl0Qm94LnNldFN0cmluZyhjb25maWcuc3RhclRpbWUpO1xuICAgICAgICAvL3RoaXMuY3VycmVudFJlY3RzID1cbiAgICB9LFxuXG4gICAgb25TZWxlY3RDb2xvcjogZnVuY3Rpb24gKHNlbmRlcikge1xuICAgICAgICB0aGlzLnNlbGVjdENvbG9yID0gQ29sb3JDb25maWdzW3NlbmRlci5nZXRUYWcoKV07XG4gICAgICAgIHRoaXMuc2VsZWN0Q29sb3JJbmRleCA9IHNlbmRlci5nZXRUYWcoKTtcbiAgICB9LFxuXG4gICAgcmVzZXRPbGRWaWV3OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZm9yRWFjaEdyaWRzKGZ1bmN0aW9uIChncmlkKSB7XG4gICAgICAgICAgICBncmlkLnJlbW92ZUZyb21QYXJlbnQoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZ3JpZHMgPSBbXTtcbiAgICB9LFxuXG4gICAgdXBkYXRlVmlldzogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgd2lkdGggPSB0aGlzLkNPTlRFTlRfV0lEVEggLyB0aGlzLkNPTDtcbiAgICAgICAgdmFyIGhlaWdodCA9IHRoaXMuQ09OVEVOVF9IRUlHSFQgLyB0aGlzLlJPVztcbiAgICAgICAgdGhpcy5HUklEX1dJRFRIID0gd2lkdGggKiAwLjc1O1xuICAgICAgICB0aGlzLkdSSURfSEVJR0hUID0gaGVpZ2h0ICogMC43NTtcbiAgICAgICAgdGhpcy5HQVBfV0lEVEggPSB3aWR0aCAtIHRoaXMuR1JJRF9XSURUSDtcbiAgICAgICAgdGhpcy5HQVBfSEVJR0hUID0gaGVpZ2h0IC0gdGhpcy5HUklEX0hFSUdIVDtcblxuICAgICAgICB0aGlzLmluaXRHcmlkcygpO1xuXG4gICAgICAgIHRoaXMuYnJpY2tSZWN0cyA9IFtdO1xuICAgICAgICB0aGlzLm9ic3RhY2xlUmVjdHMgPSBbXTtcbiAgICAgICAgdGhpcy5jdXJyZW50UmVjdHMgPSB0aGlzLmJyaWNrUmVjdHM7XG4gICAgICAgIC8vdGhpcy5faXNCcmljayA9IHRydWU7XG4gICAgICAgIHRoaXMuX3N0YXR1cyA9IFwiYnJpY2tcIjtcbiAgICAgICAgdGhpcy5fYnJpY2tJdGVtLnNldFN0cmluZyhcIkJyaWNrXCIpO1xuXG4gICAgICAgIHRoaXMuX2dyaWRMYWJlbC5zZXRTdHJpbmcodGhpcy5DT0wgKyBcInhcIiArIHRoaXMuUk9XKTtcbiAgICB9LFxuXG4gICAgb25BZGQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5yZXNldE9sZFZpZXcoKTtcbiAgICAgICAgdGhpcy5DT0wgKz0gNDtcbiAgICAgICAgdGhpcy5ST1cgKz0gNDtcbiAgICAgICAgdGhpcy51cGRhdGVWaWV3KCk7XG4gICAgfSxcblxuICAgIG9uUmVkdWNlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMucmVzZXRPbGRWaWV3KCk7XG4gICAgICAgIHRoaXMuQ09MIC09IDQ7XG4gICAgICAgIHRoaXMuUk9XIC09IDQ7XG4gICAgICAgIHRoaXMudXBkYXRlVmlldygpO1xuICAgIH0sXG5cblxuICAgIG9uU2F2ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb2JqID0gdGhpcy5nZW5lcmF0ZUxldmVsT2JqKCk7XG5cbiAgICAgICAgY2MubG9nKFwicmVzdWx0czpcIiArIEpTT04uc3RyaW5naWZ5KG9iaikpO1xuXG4gICAgICAgIC8vYWxlcnQoSlNPTi5zdHJpbmdpZnkob2JqKSk7XG4gICAgICAgIHZhciBibG9iID0gbmV3IEJsb2IoW0pTT04uc3RyaW5naWZ5KG9iaildKTtcbiAgICAgICAgdmFyIHRhZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO1xuICAgICAgICB0YWcuZG93bmxvYWQgPSBcImxldmVsLmpzb25cIjtcbiAgICAgICAgdGFnLmhyZWYgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xuICAgICAgICB0YWcuY2xpY2soKTtcbiAgICAgICAgVVJMLnJldm9rZU9iamVjdFVSTChibG9iKTtcbiAgICB9LFxuXG4gICAgb25EZWxldGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3N0YXR1cyAhPT0gXCJkZWxldGVcIikge1xuICAgICAgICAgICAgdGhpcy5kZWxldGVMYXRlc3RSZWN0KCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgb25SZWZyZXNoOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICB9LFxuXG4gICAgb25Ccmlja1R5cGVDaGFuZ2U6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fc3RhdHVzID0gU3RhdHVzTGlzdFsoU3RhdHVzTGlzdC5pbmRleE9mKHRoaXMuX3N0YXR1cykgKyAxKSAlIFN0YXR1c0xpc3QubGVuZ3RoXTtcbiAgICAgICAgLy90aGlzLl9pc0JyaWNrID0gIXRoaXMuX2lzQnJpY2s7XG4gICAgICAgIHRoaXMudXBkYXRlQnJpY2tUeXBlKCk7XG4gICAgfSxcblxuICAgIHVwZGF0ZUJyaWNrVHlwZTogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9icmlja0l0ZW0uc2V0U3RyaW5nKHRoaXMuX3N0YXR1cyk7XG4gICAgICAgIGlmICh0aGlzLl9zdGF0dXMgPT09IFwib2JzdGFjbGVcIikge1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50UmVjdHMgPSB0aGlzLm9ic3RhY2xlUmVjdHM7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdHVzID09PSBcImJyaWNrXCIpIHtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFJlY3RzID0gdGhpcy5icmlja1JlY3RzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50UmVjdHMgPSBudWxsO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIGluaXRHcmlkczogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmdyaWRzID0gW107XG4gICAgICAgIHZhciBHcmlkID0gcmVxdWlyZShcIi4uL2VudGl0eS9HcmlkXCIpO1xuICAgICAgICBmb3IgKHZhciBsb2NhbENvbCA9IDA7IGxvY2FsQ29sIDwgdGhpcy5DT0w7ICsrbG9jYWxDb2wpIHtcbiAgICAgICAgICAgIHRoaXMuZ3JpZHMucHVzaChbXSk7XG4gICAgICAgICAgICBmb3IgKHZhciBsb2NhbFJvdyA9IDA7IGxvY2FsUm93IDwgdGhpcy5ST1c7ICsrbG9jYWxSb3cpIHtcbiAgICAgICAgICAgICAgICB2YXIgZ3JpZCA9IG5ldyBHcmlkKExpZ2h0R3JheUNvbG9yLCB0aGlzLkdSSURfV0lEVEgsIHRoaXMuR1JJRF9IRUlHSFQsIGxvY2FsQ29sLCBsb2NhbFJvdyk7XG4gICAgICAgICAgICAgICAgdGhpcy5ncmlkTm9kZS5hZGRDaGlsZChncmlkKTtcbiAgICAgICAgICAgICAgICBncmlkLnNldFBvc2l0aW9uKHRoaXMuZ2V0R3JpZFBvcyhsb2NhbENvbCwgbG9jYWxSb3cpKTtcbiAgICAgICAgICAgICAgICB0aGlzLmdyaWRzW2xvY2FsQ29sXS5wdXNoKGdyaWQpO1xuICAgICAgICAgICAgICAgIHRoaXMubWFya0dyYXlIaW50KGdyaWQsIGxvY2FsQ29sLCBsb2NhbFJvdyk7XG4gICAgICAgICAgICAgICAgZ3JpZC5fY29sb3IgPSBncmlkLmNvbG9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIG1hcmtHcmF5SGludDogZnVuY3Rpb24gKGdyaWQsIGxvY2FsQ29sLCBsb2NhbFJvdykge1xuICAgICAgICB2YXIgZ3JheUNvbG9yID0gR3JheUNvbG9yO1xuICAgICAgICB2YXIgaXNMZWZ0ID0gKHRoaXMuQ09MIC8gbG9jYWxDb2wpID4gMjtcbiAgICAgICAgdmFyIGlzQm90dG9tID0gKHRoaXMuUk9XIC8gbG9jYWxSb3cpID4gMjtcbiAgICAgICAgaWYgKGxvY2FsQ29sID09PSBNYXRoLmZsb29yKHRoaXMuQ09MIC8gMikgfHxcbiAgICAgICAgICAgIGxvY2FsQ29sID09PSBNYXRoLmZsb29yKHRoaXMuQ09MIC8gMikgLSAxIHx8XG4gICAgICAgICAgICBsb2NhbFJvdyA9PT0gTWF0aC5mbG9vcih0aGlzLlJPVyAvIDIpIHx8XG4gICAgICAgICAgICBsb2NhbFJvdyA9PT0gTWF0aC5mbG9vcih0aGlzLlJPVyAvIDIpIC0gMVxuICAgICAgICApIHtcbiAgICAgICAgICAgIGdyaWQuc2V0Q29sb3IoZ3JheUNvbG9yKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpaWkgPSBpc0xlZnQgPyA0IDogMDtcblxuICAgICAgICBpZiAobG9jYWxDb2wgJSA1ID09PSBpaWkpIHtcbiAgICAgICAgICAgIGdyaWQuc2V0Q29sb3IoZ3JheUNvbG9yKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBqamogPSBpc0JvdHRvbSA/IDQgOiAwO1xuXG4gICAgICAgIGlmIChsb2NhbFJvdyAlIDUgPT09IGpqaikge1xuICAgICAgICAgICAgZ3JpZC5zZXRDb2xvcihncmF5Q29sb3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9paWkgPSBpc0xlZnQgPyA5IDogMDtcbiAgICAgICAgLy9qamogPSBpc0JvdHRvbSA/IDkgOiAwO1xuICAgICAgICAvL1xuICAgICAgICAvL2lmIChsb2NhbENvbCAlIDEwID09PSBpaWkgJiYgbG9jYWxSb3cgJSAxMCA9PT0gampqKSB7XG4gICAgICAgIC8vICAgIGdyaWQuc2V0Q29sb3IoY2MuY29sb3IuWUVMTE9XKTtcbiAgICAgICAgLy99XG4gICAgfSxcblxuICAgIHJlc2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAodmFyIGxvY2FsQ29sID0gMDsgbG9jYWxDb2wgPCB0aGlzLkNPTDsgKytsb2NhbENvbCkge1xuICAgICAgICAgICAgZm9yICh2YXIgbG9jYWxSb3cgPSAwOyBsb2NhbFJvdyA8IHRoaXMuUk9XOyArK2xvY2FsUm93KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ncmlkc1tsb2NhbENvbF1bbG9jYWxSb3ddLmVkaXRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLmdyaWRzW2xvY2FsQ29sXVtsb2NhbFJvd10uc2V0Q29sb3IoTGlnaHRHcmF5Q29sb3IpO1xuICAgICAgICAgICAgICAgIHRoaXMuZ3JpZHNbbG9jYWxDb2xdW2xvY2FsUm93XS51c2VkID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICB0aGlzLm1hcmtHcmF5SGludCh0aGlzLmdyaWRzW2xvY2FsQ29sXVtsb2NhbFJvd10sIGxvY2FsQ29sLCBsb2NhbFJvdyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5icmlja1JlY3RzID0gW107XG4gICAgICAgIHRoaXMub2JzdGFjbGVSZWN0cyA9IFtdO1xuICAgICAgICB0aGlzLmN1cnJlbnRSZWN0cyA9IHRoaXMuYnJpY2tSZWN0cztcbiAgICAgICAgLy90aGlzLl9pc0JyaWNrID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fc3RhdHVzID0gXCJicmlja1wiO1xuICAgICAgICB0aGlzLl9icmlja0l0ZW0uc2V0U3RyaW5nKFwiQnJpY2tcIik7XG4gICAgfSxcblxuICAgIG9uRW50ZXI6ZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9zdXBlcigpO1xuICAgICAgICBjYy5ldmVudE1hbmFnZXIuYWRkTGlzdGVuZXIoe1xuICAgICAgICAgICAgZXZlbnQ6IGNjLkV2ZW50TGlzdGVuZXIuVE9VQ0hfT05FX0JZX09ORSxcbiAgICAgICAgICAgIHN3YWxsb3dUb3VjaGVzOiB0cnVlLFxuICAgICAgICAgICAgb25Ub3VjaEJlZ2FuOiB0aGlzLm9uVG91Y2hCZWdhbi5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgb25Ub3VjaE1vdmVkOiB0aGlzLm9uVG91Y2hNb3ZlZC5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgb25Ub3VjaEVuZGVkOiB0aGlzLm9uVG91Y2hFbmRlZC5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgb25Ub3VjaENhbmNlbGxlZDogdGhpcy5vblRvdWNoQ2FuY2VsbGVkLmJpbmQodGhpcylcbiAgICAgICAgfSwgdGhpcy5ncmlkTm9kZSk7XG5cbiAgICAgICAgLy9jYy5ldmVudE1hbmFnZXIuYWRkTGlzdGVuZXIoe1xuICAgICAgICAvLyAgICBldmVudDogY2MuRXZlbnRMaXN0ZW5lci5LRVlCT0FSRCxcbiAgICAgICAgLy8gICAgb25LZXlSZWxlYXNlZDogZnVuY3Rpb24gKGtleUNvZGUsIGV2ZW50KSB7XG4gICAgICAgIC8vICAgICAgICBpZiAoa2V5Q29kZSA9PT0gY2MuS0VZLmJhY2tzcGFjZSkge1xuICAgICAgICAvLyAgICAgICAgICAgIC8vY2MuZGlyZWN0b3IuZW5kKCk7XG4gICAgICAgIC8vICAgICAgICAgICAgdGhpcy5kZWxldGVMYXRlc3RSZWN0KCk7XG4gICAgICAgIC8vICAgICAgICB9XG4gICAgICAgIC8vICAgIH0uYmluZCh0aGlzKVxuICAgICAgICAvL30sIHRoaXMpO1xuICAgIH0sXG5cbiAgICBvbkV4aXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fc3VwZXIoKTtcbiAgICB9LFxuXG4gICAgZ2V0R3JpZFBvczogZnVuY3Rpb24gKGxvY2FsQ29sLCBsb2NhbFJvdykge1xuICAgICAgICB2YXIgZ3JpZFNpemUgPSB0aGlzLmdldEdyaWRTaXplKCk7XG4gICAgICAgIHJldHVybiBjYy5wKChncmlkU2l6ZS53aWR0aCArIHRoaXMuR0FQX1dJRFRIKSAqIChsb2NhbENvbCArIDAuNSksXG4gICAgICAgICAgICAoZ3JpZFNpemUuaGVpZ2h0ICsgdGhpcy5HQVBfSEVJR0hUKSAqIChsb2NhbFJvdyArIDAuNSkpO1xuICAgIH0sXG5cbiAgICBnZXRHcmlkU2l6ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gY2Muc2l6ZSh0aGlzLkdSSURfV0lEVEgsIHRoaXMuR1JJRF9IRUlHSFQpO1xuICAgIH0sXG5cbiAgICBnZXRGdWxsR3JpZFNpemU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGNjLnNpemUodGhpcy5HUklEX1dJRFRIICsgdGhpcy5HQVBfV0lEVEgsIHRoaXMuR1JJRF9IRUlHSFQgKyB0aGlzLkdBUF9IRUlHSFQpO1xuICAgIH0sXG5cbiAgICBvblRvdWNoQmVnYW46ZnVuY3Rpb24odG91Y2gsIGV2ZW50KSB7XG4gICAgICAgIHZhciBncmlkID0gdGhpcy5nZXRDbG9zZXN0R3JpZCh0b3VjaCk7XG4gICAgICAgIGlmICghZ3JpZCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9zdGF0dXMgPT09IFwiZGVsZXRlXCIpIHtcbiAgICAgICAgICAgIHRoaXMuZmlyc3RHcmlkID0gZ3JpZDtcbiAgICAgICAgICAgIC8vIGdyaWQuc2V0Q29sb3IoZ3JpZC5fY29sb3IpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGdyaWQudXNlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZmlyc3RHcmlkID0gZ3JpZDtcbiAgICAgICAgICAgIGdyaWQuc2V0Q29sb3IodGhpcy5nZXRDdXJyZW50Q29sb3IoKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcblxuICAgIG9uVG91Y2hNb3ZlZDpmdW5jdGlvbih0b3VjaCwgZXZlbnQpIHtcbiAgICAgICAgaWYgKHRoaXMuX3N0YXR1cyA9PT0gXCJkZWxldGVcIikge1xuICAgICAgICAgICAgdGhpcy50b3VjaERlbGV0ZSh0b3VjaCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnRvdWNoRHJhdyh0b3VjaCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcblxuICAgIG9uVG91Y2hFbmRlZDpmdW5jdGlvbih0b3VjaCwgZXZlbnQpIHtcbiAgICAgICAgaWYgKHRoaXMuX3N0YXR1cyA9PT0gXCJkZWxldGVcIikge1xuICAgICAgICAgICAgdGhpcy50b3VjaERlbGV0ZSh0b3VjaCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnRvdWNoRHJhdyh0b3VjaCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5maXJzdEdyaWQgJiYgdGhpcy5sYXN0R3JpZCkge1xuICAgICAgICAgICAgdmFyIHJlZ2lvbiA9IHRoaXMuZ2V0UmVnaW9uKHRoaXMuZmlyc3RHcmlkLCB0aGlzLmxhc3RHcmlkKTtcbiAgICAgICAgICAgIHZhciBpbmRleCA9IHRoaXMuc2VsZWN0Q29sb3JJbmRleCArIDE7XG4gICAgICAgICAgICBpZiAodGhpcy5fc3RhdHVzICE9PSBcImJyaWNrXCIpIHtcbiAgICAgICAgICAgICAgICBpbmRleCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcmVjdCA9IFtyZWdpb24ubWluQ29sLCByZWdpb24ubWluUm93LFxuICAgICAgICAgICAgICAgIHJlZ2lvbi5tYXhDb2wgLSByZWdpb24ubWluQ29sICsgMSwgcmVnaW9uLm1heFJvdyAtIHJlZ2lvbi5taW5Sb3cgKyAxLCBpbmRleF07XG4gICAgICAgICAgICB2YXIgY2NSZWN0ID0gY2MucmVjdChyZWN0WzBdLCByZWN0WzFdLCByZWN0WzJdLCByZWN0WzNdKTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9zdGF0dXMgPT09IFwiZGVsZXRlXCIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRlbGV0ZVJlY3RGcm9tUmVjdHMoY2NSZWN0LCB0aGlzLmJyaWNrUmVjdHMpO1xuICAgICAgICAgICAgICAgIHRoaXMuZGVsZXRlUmVjdEZyb21SZWN0cyhjY1JlY3QsIHRoaXMub2JzdGFjbGVSZWN0cyk7XG4gICAgICAgICAgICAgICAgdGhpcy5mb3JFYWNoR3JpZHMoZnVuY3Rpb24gKGdyaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZ3JpZC5kZWxldGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFJlY3RzLnB1c2gocmVjdCk7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXJrT2NjdXBpZWRXaXRoUmVjdChyZWN0LCBudWxsKTtcbiAgICAgICAgICAgICAgICB0aGlzLmZvckVhY2hHcmlkcyhmdW5jdGlvbiAoZ3JpZCkge1xuICAgICAgICAgICAgICAgICAgICBncmlkLmVkaXRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZmlyc3RHcmlkID0gbnVsbDtcbiAgICAgICAgdGhpcy5sYXN0R3JpZCA9IG51bGw7XG4gICAgfSxcblxuICAgIGRlbGV0ZVJlY3RGcm9tUmVjdHM6IGZ1bmN0aW9uIChjY1JlY3QsIHJlY3RzKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSByZWN0cy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICAgICAgdmFyIGJyaWNrUmVjdCA9IHJlY3RzW2ldO1xuICAgICAgICAgICAgdmFyIGNjQnJpY2tSZWN0ID0gY2MucmVjdChicmlja1JlY3RbMF0sIGJyaWNrUmVjdFsxXSwgYnJpY2tSZWN0WzJdLCBicmlja1JlY3RbM10pO1xuICAgICAgICAgICAgdmFyIG92ZXJsYXBzUmVjdCA9IGNjLnJlY3RJbnRlcnNlY3Rpb24oY2NSZWN0LCBjY0JyaWNrUmVjdCk7XG4gICAgICAgICAgICBpZiAob3ZlcmxhcHNSZWN0LndpZHRoIDw9IDAgfHwgb3ZlcmxhcHNSZWN0LmhlaWdodCA8PSAwKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcmVzdWx0UmVjdHMgPSB0aGlzLmdldE92ZXJsYXBzUmVjdHMob3ZlcmxhcHNSZWN0LCBjY0JyaWNrUmVjdCk7XG4gICAgICAgICAgICByZWN0cy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHJlc3VsdFJlY3RzLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICAgICAgcmVjdHMucHVzaCh0aGlzLmNvbnZlcnRUb0pzb25MaXN0KHJlc3VsdFJlY3RzW2pdLCBicmlja1JlY3RbNF0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBjb252ZXJ0VG9Kc29uTGlzdDogZnVuY3Rpb24gKHJlY3QsIGNvbG9yKSB7XG4gICAgICAgIHJldHVybiBbcmVjdC54LCByZWN0LnksIHJlY3Qud2lkdGgsIHJlY3QuaGVpZ2h0LCBjb2xvcl07XG4gICAgfSxcblxuICAgIGdldE92ZXJsYXBzUmVjdHM6IGZ1bmN0aW9uIChvdmVybGFwc1JlY3QsIGJyaWNrUmVjdCkge1xuICAgICAgICB2YXIgcmVzdWx0cyA9IFtcbiAgICAgICAgICAgIGNjLnJlY3QoYnJpY2tSZWN0LngsIGJyaWNrUmVjdC55LCBicmlja1JlY3Qud2lkdGgsIG92ZXJsYXBzUmVjdC55IC0gYnJpY2tSZWN0LnkpLFxuICAgICAgICAgICAgY2MucmVjdChicmlja1JlY3QueCwgY2MucmVjdEdldE1heFkob3ZlcmxhcHNSZWN0KSwgYnJpY2tSZWN0LndpZHRoLCBjYy5yZWN0R2V0TWF4WShicmlja1JlY3QpIC0gY2MucmVjdEdldE1heFkob3ZlcmxhcHNSZWN0KSksXG4gICAgICAgICAgICBjYy5yZWN0KGJyaWNrUmVjdC54LCBvdmVybGFwc1JlY3QueSwgb3ZlcmxhcHNSZWN0LnggLSBicmlja1JlY3QueCwgb3ZlcmxhcHNSZWN0LmhlaWdodCksXG4gICAgICAgICAgICBjYy5yZWN0KGNjLnJlY3RHZXRNYXhYKG92ZXJsYXBzUmVjdCksIG92ZXJsYXBzUmVjdC55LCBjYy5yZWN0R2V0TWF4WChicmlja1JlY3QpIC0gY2MucmVjdEdldE1heFgob3ZlcmxhcHNSZWN0KSwgb3ZlcmxhcHNSZWN0LmhlaWdodClcbiAgICAgICAgXTtcbiAgICAgICAgY29uc29sZS5sb2coXCJyZXN1bHRzOlwiICsgSlNPTi5zdHJpbmdpZnkocmVzdWx0cykpO1xuICAgICAgICB2YXIgcmVjdHMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IHJlc3VsdHMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgICAgIHZhciByZWN0ID0gcmVzdWx0c1tpXTtcbiAgICAgICAgICAgIGlmIChyZWN0LndpZHRoIDw9IDAgfHwgcmVjdC5oZWlnaHQgPD0gMCkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVjdHMucHVzaChyZWN0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVjdHM7XG4gICAgfSxcblxuICAgIC8vbWFya09jY3VwaWVkOiBmdW5jdGlvbiAoKSB7XG4gICAgLy8gICAgdmFyIHJlZ2lvbiA9IHRoaXMuZ2V0UmVnaW9uKHRoaXMuZmlyc3RHcmlkLCB0aGlzLmxhc3RHcmlkKTtcbiAgICAvL1xuICAgIC8vICAgIGZvciAodmFyIGxvY2FsQ29sID0gcmVnaW9uLm1pbkNvbDsgbG9jYWxDb2wgPD0gcmVnaW9uLm1heENvbDsgKytsb2NhbENvbCkge1xuICAgIC8vICAgICAgICBmb3IgKHZhciBsb2NhbFJvdyA9IHJlZ2lvbi5taW5Sb3c7IGxvY2FsUm93IDw9IHJlZ2lvbi5tYXhSb3c7ICsrbG9jYWxSb3cpIHtcbiAgICAvLyAgICAgICAgICAgIHRoaXMuZ3JpZHNbbG9jYWxDb2xdW2xvY2FsUm93XS51c2VkID0gdHJ1ZTtcbiAgICAvLyAgICAgICAgfVxuICAgIC8vICAgIH1cbiAgICAvL30sXG5cbiAgICBtYXJrT2NjdXBpZWRXaXRoUmVjdDogZnVuY3Rpb24gKHJlY3QsIGNvbG9yKSB7XG4gICAgICAgIGZvciAodmFyIGxvY2FsQ29sID0gcmVjdFswXTsgbG9jYWxDb2wgPCByZWN0WzBdICsgcmVjdFsyXTsgKytsb2NhbENvbCkge1xuICAgICAgICAgICAgZm9yICh2YXIgbG9jYWxSb3cgPSByZWN0WzFdOyBsb2NhbFJvdyA8IHJlY3RbMV0gKyByZWN0WzNdOyArK2xvY2FsUm93KSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZ3JpZHNbbG9jYWxDb2xdKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ3JpZHNbbG9jYWxDb2xdW2xvY2FsUm93XS5lZGl0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ3JpZHNbbG9jYWxDb2xdW2xvY2FsUm93XS51c2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbG9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdyaWRzW2xvY2FsQ29sXVtsb2NhbFJvd10uc2V0Q29sb3IoY29sb3IpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJlcnJvclwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgaXNPY2N1cGllZDogZnVuY3Rpb24gKGdyaWQpIHtcbiAgICAgICAgdmFyIHJlZ2lvbiA9IHRoaXMuZ2V0UmVnaW9uKHRoaXMuZmlyc3RHcmlkLCBncmlkKTtcbiAgICAgICAgZm9yICh2YXIgbG9jYWxDb2wgPSByZWdpb24ubWluQ29sOyBsb2NhbENvbCA8PSByZWdpb24ubWF4Q29sOyArK2xvY2FsQ29sKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBsb2NhbFJvdyA9IHJlZ2lvbi5taW5Sb3c7IGxvY2FsUm93IDw9IHJlZ2lvbi5tYXhSb3c7ICsrbG9jYWxSb3cpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5ncmlkc1tsb2NhbENvbF1bbG9jYWxSb3ddLnVzZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgdG91Y2hEcmF3OiBmdW5jdGlvbiAodG91Y2gpIHtcbiAgICAgICAgaWYgKCF0aGlzLmZpcnN0R3JpZCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBncmlkID0gdGhpcy5nZXRDbG9zZXN0R3JpZCh0b3VjaCk7XG5cbiAgICAgICAgaWYgKCFncmlkKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZ3JpZCA9PT0gdGhpcy5sYXN0R3JpZCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuaXNPY2N1cGllZChncmlkKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubGFzdEdyaWQgPSBncmlkO1xuICAgICAgICB0aGlzLmNsZWFyUmVjdCgpO1xuICAgICAgICB0aGlzLmRyYXdSZWN0KGdyaWQpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuXG4gICAgdG91Y2hEZWxldGU6IGZ1bmN0aW9uICh0b3VjaCkge1xuICAgICAgIGlmICghdGhpcy5maXJzdEdyaWQpIHtcbiAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgIH1cbiAgICAgICB2YXIgZ3JpZCA9IHRoaXMuZ2V0Q2xvc2VzdEdyaWQodG91Y2gpO1xuXG4gICAgICAgaWYgKCFncmlkKSB7XG4gICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICB9XG5cbiAgICAgICBpZiAoZ3JpZCA9PT0gdGhpcy5sYXN0R3JpZCkge1xuICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgfVxuXG4gICAgICAgLy8gaWYgKHRoaXMuaXNPY2N1cGllZChncmlkKSkge1xuICAgICAgIC8vICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgLy8gfVxuICAgICAgIHRoaXMubGFzdEdyaWQgPSBncmlkO1xuICAgICAgIC8vIHRoaXMuY2xlYXJSZWN0KCk7XG4gICAgICAgLy8gdGhpcy5kcmF3UmVjdChncmlkKTtcbiAgICAgICAgdGhpcy5kcmF3RGVsZXRlUmVjdChncmlkKTtcbiAgICB9LFxuXG4gICAgZGVsZXRlTGF0ZXN0UmVjdDogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcmVjdCA9IHRoaXMuY3VycmVudFJlY3RzLnBvcCgpO1xuICAgICAgICBpZiAocmVjdCkge1xuICAgICAgICAgICAgZm9yICh2YXIgbG9jYWxDb2wgPSByZWN0WzBdOyBsb2NhbENvbCA8IHJlY3RbMF0gKyByZWN0WzJdOyArK2xvY2FsQ29sKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgbG9jYWxSb3cgPSByZWN0WzFdOyBsb2NhbFJvdyA8IHJlY3RbMV0gKyByZWN0WzNdOyArK2xvY2FsUm93KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBncmlkID0gdGhpcy5ncmlkc1tsb2NhbENvbF1bbG9jYWxSb3ddO1xuICAgICAgICAgICAgICAgICAgICBncmlkLnNldENvbG9yKGdyaWQuX2NvbG9yKTtcbiAgICAgICAgICAgICAgICAgICAgZ3JpZC51c2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIGNsZWFyUmVjdDogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmZvckVhY2hHcmlkcyhmdW5jdGlvbiAoZ3JpZCkge1xuICAgICAgICAgICAgaWYgKGdyaWQuZWRpdGluZyAmJiAhZ3JpZC51c2VkKSB7XG4gICAgICAgICAgICAgICAgZ3JpZC5zZXRDb2xvcihncmlkLl9jb2xvcik7XG4gICAgICAgICAgICAgICAgZ3JpZC5lZGl0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBkcmF3UmVjdDogZnVuY3Rpb24gKGdyaWQpIHtcbiAgICAgICAgdmFyIHJlZ2lvbiA9IHRoaXMuZ2V0UmVnaW9uKHRoaXMuZmlyc3RHcmlkLCBncmlkKTtcblxuICAgICAgICBmb3IgKHZhciBsb2NhbENvbCA9IHJlZ2lvbi5taW5Db2w7IGxvY2FsQ29sIDw9IHJlZ2lvbi5tYXhDb2w7ICsrbG9jYWxDb2wpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGxvY2FsUm93ID0gcmVnaW9uLm1pblJvdzsgbG9jYWxSb3cgPD0gcmVnaW9uLm1heFJvdzsgKytsb2NhbFJvdykge1xuICAgICAgICAgICAgICAgIHRoaXMuZ3JpZHNbbG9jYWxDb2xdW2xvY2FsUm93XS5lZGl0aW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmdyaWRzW2xvY2FsQ29sXVtsb2NhbFJvd10uc2V0Q29sb3IodGhpcy5nZXRDdXJyZW50Q29sb3IoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgZm9yRWFjaEdyaWRzOiBmdW5jdGlvbiAoY2IpIHtcbiAgICAgICAgZm9yICh2YXIgbG9jYWxDb2wgPSAwOyBsb2NhbENvbCA8IHRoaXMuQ09MOyArK2xvY2FsQ29sKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBsb2NhbFJvdyA9IDA7IGxvY2FsUm93IDwgdGhpcy5ST1c7ICsrbG9jYWxSb3cpIHtcbiAgICAgICAgICAgICAgICB2YXIgZ3JpZCA9IHRoaXMuZ3JpZHNbbG9jYWxDb2xdW2xvY2FsUm93XTtcbiAgICAgICAgICAgICAgICBjYihncmlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBkcmF3RGVsZXRlUmVjdDogZnVuY3Rpb24gKGdyaWQpIHtcbiAgICAgICAgdmFyIHJlZ2lvbiA9IHRoaXMuZ2V0UmVnaW9uKHRoaXMuZmlyc3RHcmlkLCBncmlkKTtcblxuICAgICAgICB0aGlzLmZvckVhY2hHcmlkcyhmdW5jdGlvbiAoZ3JpZCkge1xuICAgICAgICAgICAgaWYgKGdyaWQuZGVsZXRlZCkge1xuICAgICAgICAgICAgICAgIGdyaWQuc2V0Q29sb3IoZ3JpZC5fc2hvd0NvbG9yKTtcbiAgICAgICAgICAgICAgICBncmlkLmRlbGV0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgZm9yICh2YXIgbG9jYWxDb2wgPSByZWdpb24ubWluQ29sOyBsb2NhbENvbCA8PSByZWdpb24ubWF4Q29sOyArK2xvY2FsQ29sKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBsb2NhbFJvdyA9IHJlZ2lvbi5taW5Sb3c7IGxvY2FsUm93IDw9IHJlZ2lvbi5tYXhSb3c7ICsrbG9jYWxSb3cpIHtcbiAgICAgICAgICAgICAgICB2YXIgZ3JpZCA9IHRoaXMuZ3JpZHNbbG9jYWxDb2xdW2xvY2FsUm93XTtcbiAgICAgICAgICAgICAgICAvLyBncmlkLmVkaXRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBncmlkLnVzZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBncmlkLmRlbGV0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGdyaWQuX3Nob3dDb2xvciA9IGdyaWQuZ2V0Q29sb3IoKTtcbiAgICAgICAgICAgICAgICBncmlkLnNldENvbG9yKGdyaWQuX2NvbG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBnZXRSZWdpb246IGZ1bmN0aW9uIChncmlkMSwgZ3JpZDIpIHtcbiAgICAgICAgdmFyIG1pblJvdyA9IE1hdGgubWluKGdyaWQxLnJvdywgZ3JpZDIucm93KTtcbiAgICAgICAgdmFyIG1heFJvdyA9IE1hdGgubWF4KGdyaWQxLnJvdywgZ3JpZDIucm93KTtcbiAgICAgICAgdmFyIG1pbkNvbCA9IE1hdGgubWluKGdyaWQxLmNvbCwgZ3JpZDIuY29sKTtcbiAgICAgICAgdmFyIG1heENvbCA9IE1hdGgubWF4KGdyaWQxLmNvbCwgZ3JpZDIuY29sKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1pblJvdzogbWluUm93LFxuICAgICAgICAgICAgbWF4Um93OiBtYXhSb3csXG4gICAgICAgICAgICBtaW5Db2w6IG1pbkNvbCxcbiAgICAgICAgICAgIG1heENvbDogbWF4Q29sXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIG9uVG91Y2hDYW5jZWxsZWQ6ZnVuY3Rpb24odG91Y2gsIGV2ZW50KSB7XG4gICAgfSxcblxuICAgIGdldENsb3Nlc3RHcmlkOiBmdW5jdGlvbiAodG91Y2gpIHtcbiAgICAgICAgdmFyIGxvY2FsUG9zID0gdGhpcy5ncmlkTm9kZS5jb252ZXJ0VG9Ob2RlU3BhY2UodG91Y2guZ2V0TG9jYXRpb24oKSk7XG4gICAgICAgIHZhciBncmlkU2l6ZSA9IHRoaXMuZ2V0RnVsbEdyaWRTaXplKCk7XG5cbiAgICAgICAgY2MubG9nKFwibG9jYWxQb3M6XCIgKyBKU09OLnN0cmluZ2lmeShsb2NhbFBvcykpO1xuXG4gICAgICAgIHZhciByb3cgPSBNYXRoLmZsb29yKGxvY2FsUG9zLnggLyBncmlkU2l6ZS53aWR0aCk7XG4gICAgICAgIHZhciBjb2wgPSBNYXRoLmZsb29yKGxvY2FsUG9zLnkgLyBncmlkU2l6ZS5oZWlnaHQpO1xuXG4gICAgICAgIGNjLmxvZyhcInJvdzpcIiArIHJvdyArIFwiLGNvbDpcIiArIGNvbCk7XG5cbiAgICAgICAgaWYgKHRoaXMuZ3JpZHNbcm93XSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ3JpZHNbcm93XVtjb2xdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0sXG5cbiAgICBnZXRDdXJyZW50Q29sb3I6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3N0YXR1cyA9PT0gXCJicmlja1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZWxlY3RDb2xvcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBjYy5jb2xvci5XSElURTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvL1xuICAgIC8vZHJhd1JlY3Q6IGZ1bmN0aW9uKHJlZ2lvbiwgY29sb3IsIGNsZWFyKSB7XG4gICAgLy8gICAgaWYgKGNsZWFyKXtcbiAgICAvLyAgICAgICAgdGhpcy5fZHJhd05vZGUuY2xlYXIoKTtcbiAgICAvLyAgICB9XG4gICAgLy8gICAgaWYgKHJlZ2lvbiA9PSBudWxsKSB7XG4gICAgLy8gICAgICAgIHJldHVybjtcbiAgICAvLyAgICB9XG4gICAgLy8gICAgdmFyIG1pbiA9IHJlZ2lvbi5nZXRNaW4oKTtcbiAgICAvLyAgICB2YXIgbWF4ID0gcmVnaW9uLmdldE1heCgpO1xuICAgIC8vICAgIG1heC54ICs9IDE7XG4gICAgLy8gICAgbWF4LnkgKz0gMTtcbiAgICAvLyAgICB0aGlzLl9kcmF3Tm9kZS5kcmF3U2VnbWVudChjYy5wKG1pbi54LCBtaW4ueSksXG4gICAgLy8gICAgICAgIGNjLnAobWluLngsIG1heC55KSwgMSwgY29sb3IpO1xuICAgIC8vICAgIHRoaXMuX2RyYXdOb2RlLmRyYXdTZWdtZW50KGNjLnAobWluLngsIG1heC55KSxcbiAgICAvLyAgICAgICAgY2MucChtYXgueCwgbWF4LnkpLCAxLCBjb2xvcik7XG4gICAgLy8gICAgdGhpcy5fZHJhd05vZGUuZHJhd1NlZ21lbnQoY2MucChtYXgueCwgbWF4LnkpLFxuICAgIC8vICAgICAgICBjYy5wKG1heC54LCBtaW4ueSksIDEsIGNvbG9yKTtcbiAgICAvLyAgICB0aGlzLl9kcmF3Tm9kZS5kcmF3U2VnbWVudChjYy5wKG1heC54LCBtaW4ueSksXG4gICAgLy8gICAgICAgIGNjLnAobWluLngsIG1pbi55KSwgMSwgY29sb3IpO1xuICAgIC8vfSxcbiAgICAvL1xuICAgIC8vZHJhd1JlY3RGaWxsOiBmdW5jdGlvbiAocmVnaW9uLCBjb2xvcikge1xuICAgIC8vICAgIGlmIChyZWdpb24gPT0gbnVsbCkge1xuICAgIC8vICAgICAgICByZXR1cm47XG4gICAgLy8gICAgfVxuICAgIC8vICAgIHRoaXMuX2RyYXdOb2RlLmRyYXdSZWN0KHJlZ2lvbi5nZXRNaW4oKSwgcmVnaW9uLmdldE1heCgpLCBjb2xvciwgMSwgY29sb3IpO1xuICAgIC8vfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gRWRpdG9yU2NlbmU7IiwidmFyIEdhbWVDb250cm9sbGVyID0gcmVxdWlyZShcIi4uLy4uL2NvbnRyb2xsZXIvR2FtZUNvbnRyb2xsZXJcIik7XG5cbnZhciBHYW1lU2NlbmUgPSBjYy5TY2VuZS5leHRlbmQoe1xuXG4gICAgY3RvcjogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9zdXBlcigpO1xuICAgICAgICB2YXIgZ2FtZU5vZGUgPSBHYW1lQ29udHJvbGxlci5jcmVhdGVGcm9tQ0NCKCk7XG4gICAgICAgIHRoaXMuYWRkQ2hpbGQoZ2FtZU5vZGUpO1xuICAgIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEdhbWVTY2VuZTtcbiIsInZhciBHcmlkVHlwZSA9IHJlcXVpcmUoXCIuLi9lbnVtL0dyaWRUeXBlXCIpO1xudmFyIFNoYXBlVHlwZSA9IHJlcXVpcmUoXCIuLi9lbnVtL1NoYXBlVHlwZVwiKTtcbnZhciBHYW1lTWFuID0gcmVxdWlyZShcIi4uL21vZGVsL0dhbWVNYW5cIik7XG52YXIgSXRlbUNhdGVnb3J5ID0gcmVxdWlyZShcIi4uL2VudW0vSXRlbUNhdGVnb3J5XCIpO1xuXG52YXIgQmFsbCA9IGNjLk5vZGUuZXh0ZW5kKHtcblxuICAgIHR5cGU6IEdyaWRUeXBlLkJBTEwsXG4gICAgYm9keTogbnVsbCxcbiAgICBzcHJpdGU6IG51bGwsXG4gICAgYWRkU2NhbGU6IDEsXG4gICAgY3RvcjogZnVuY3Rpb24gKHdpZHRoKSB7XG4gICAgICAgIHRoaXMuX3N1cGVyKCk7XG4gICAgICAgIHRoaXMuYm9keVdpZHRoID0gd2lkdGg7XG4gICAgICAgIHZhciBza2luQ2ZnID0gR2FtZU1hbi5nZXRJbnN0YW5jZSgpLmdldEN1cnJlbnRTa2luQ2ZnKCk7XG4gICAgICAgIHZhciBpbWFnZSA9IHNraW5DZmcuaW1hZ2UgKyBcIi5wbmdcIjtcbiAgICAgICAgdmFyIHNwcml0ZSA9IG5ldyBjYy5QaHlzaWNzU3ByaXRlKFwiI1wiICsgaW1hZ2UpO1xuICAgICAgICB0aGlzLmFkZFNjYWxlID0gc2tpbkNmZy5zY2FsZTtcbiAgICAgICAgdGhpcy5hZGRDaGlsZChzcHJpdGUpO1xuICAgICAgICB0aGlzLnNwcml0ZSA9IHNwcml0ZTtcbiAgICAgICAgdGhpcy5yZXNldCh3aWR0aCk7XG4gICAgfSxcblxuICAgIHJlc2V0OiBmdW5jdGlvbiAod2lkdGgpIHtcbiAgICAgICAgdGhpcy5zcHJpdGUuc2NhbGVYID0gd2lkdGggLyB0aGlzLnNwcml0ZS53aWR0aCAqIHRoaXMuYWRkU2NhbGU7XG4gICAgICAgIHRoaXMuc3ByaXRlLnNjYWxlWSA9IHdpZHRoIC8gdGhpcy5zcHJpdGUud2lkdGggKiB0aGlzLmFkZFNjYWxlO1xuICAgIH0sXG5cbiAgICB1cGRhdGVTa2luOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBza2luQ2ZnID0gR2FtZU1hbi5nZXRJbnN0YW5jZSgpLmdldEN1cnJlbnRTa2luQ2ZnKCk7XG4gICAgICAgIHZhciBpbWFnZSA9IHNraW5DZmcuaW1hZ2UgKyBcIi5wbmdcIjtcbiAgICAgICAgdGhpcy5zcHJpdGUuc2V0U3ByaXRlRnJhbWUoY2Muc3ByaXRlRnJhbWVDYWNoZS5nZXRTcHJpdGVGcmFtZShpbWFnZSkpO1xuICAgICAgICB0aGlzLmFkZFNjYWxlID0gc2tpbkNmZy5zY2FsZTtcbiAgICAgICAgdGhpcy5yZXNldCh0aGlzLmJvZHlXaWR0aCk7XG4gICAgfSxcblxuICAgIG9uRXhpdDogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9zdXBlcigpO1xuICAgICAgICB0aGlzLnJlbW92ZUJvZHkoKTtcbiAgICB9LFxuXG4gICAgdXBkYXRlOiBmdW5jdGlvbiAoZHQpIHtcbiAgICB9LFxuXG4gICAgc2V0QW5nbGVWZWw6IGZ1bmN0aW9uICh3KSB7XG4gICAgICAgIHRoaXMuYm9keS5zZXRBbmdWZWwoLWNjLnJhZGlhbnNUb0RlZ3JlZXModykpO1xuICAgIH0sXG5cbiAgICBnZXRCb2R5QW5nbGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIC1jYy5yYWRpYW5zVG9EZWdyZWVzKHRoaXMuYm9keS5hKTtcbiAgICB9LFxuXG4gICAgaW5pdEJvZHk6IGZ1bmN0aW9uIChzcGFjZSwgcG9zKSB7XG4gICAgICAgIHRoaXMuc3BhY2UgPSBzcGFjZTtcbiAgICAgICAgdmFyIGJvZHlXaWR0aCA9IHRoaXMuYm9keVdpZHRoIC0gMjtcbiAgICAgICAgdmFyIGJvZHkgPSBuZXcgY3AuQm9keSgxLCBjcC5tb21lbnRGb3JDaXJjbGUoMSwgMCwgYm9keVdpZHRoLCBjcC52KDAsIDApKSk7XG4gICAgICAgIHZhciBzaGFwZSA9IG5ldyBjcC5DaXJjbGVTaGFwZShib2R5LCBib2R5V2lkdGggLyAyLCBjcC52KDAsIDApKTtcbiAgICAgICAgc2hhcGUuc2V0RWxhc3RpY2l0eSgxKTtcbiAgICAgICAgc2hhcGUuc2V0RnJpY3Rpb24oMCk7XG4gICAgICAgIHRoaXMuc3BhY2UuYWRkU2hhcGUoc2hhcGUpO1xuICAgICAgICB0aGlzLnNwYWNlLmFkZEJvZHkoYm9keSk7XG4gICAgICAgIHNoYXBlLnNldENvbGxpc2lvblR5cGUoU2hhcGVUeXBlLkJBTEwpO1xuICAgICAgICBib2R5LnVzZXJEYXRhID0gdGhpcztcbiAgICAgICAgdGhpcy5ib2R5ID0gYm9keTtcbiAgICAgICAgdGhpcy5zaGFwZSA9IHNoYXBlO1xuICAgICAgICB0aGlzLmJvZHkuc2V0UG9zKHBvcyk7XG4gICAgICAgIGJvZHkuc2V0QW5nVmVsKDMpO1xuXG4gICAgICAgIC8vdGhpcy51cGRhdGUoMCk7XG4gICAgICAgIGlmIChjYy5zeXMuaXNOYXRpdmUpIHtcbiAgICAgICAgICAgIHNoYXBlLnNldEZpbHRlcih7XG4gICAgICAgICAgICAgICAgZ3JvdXA6IGNwLk5PX0dST1VQLFxuICAgICAgICAgICAgICAgIGNhdGVnb3JpZXM6IEl0ZW1DYXRlZ29yeS5CYWxsLFxuICAgICAgICAgICAgICAgIG1hc2s6IEl0ZW1DYXRlZ29yeS5PYnN0YWNsZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzaGFwZS5ncm91cCA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zcHJpdGUuc2V0Qm9keShib2R5KTtcbiAgICB9LFxuXG4gICAgZ2V0UG9zaXRpb246IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3ByaXRlLmdldFBvc2l0aW9uKCk7XG4gICAgfSxcblxuICAgIHJlbW92ZUJvZHk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy9jb25zb2xlLmxvZyhcIkJhbGwgcmVtb3ZlQm9keVwiKTtcbiAgICAgICAgaWYgKHRoaXMuYm9keSkge1xuICAgICAgICAgICAgdGhpcy5zcGFjZS5yZW1vdmVCb2R5KHRoaXMuYm9keSk7XG4gICAgICAgICAgICB0aGlzLnNwYWNlLnJlbW92ZVNoYXBlKHRoaXMuc2hhcGUpO1xuICAgICAgICAgICAgLy90aGlzLnNwcml0ZS5zZXRCb2R5KG51bGwpO1xuICAgICAgICAgICAgdGhpcy5ib2R5ID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuc2hhcGUgPSBudWxsO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHNldFZlbDogZnVuY3Rpb24gKGRpcmVjdGlvblBvcykge1xuICAgICAgICB0aGlzLmJvZHkuc2V0VmVsKGRpcmVjdGlvblBvcyk7XG4gICAgfSxcblxuICAgIGdldFZlbDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ib2R5LmdldFZlbCgpO1xuICAgIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJhbGw7IiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHFpbm5pbmcgb24gMjAxNy8xMS84LlxuICovXG52YXIgVXRpbHMgPSByZXF1aXJlKFwiLi4vLi4vY29tbW9uL3V0aWwvVXRpbHNcIik7XG5cbnZhciBCYWxsUG9vbCA9IHtcbiAgICBNQVhfUE9PTF9TSVpFOiAzMDAsXG4gICAgX3Bvb2xTaXplOiB7fSxcbiAgICBfcG9vbDoge30sXG5cbiAgICBzZXRNYXhQb29sU2l6ZTogZnVuY3Rpb24gKG5hbWUsIGNvdW50KSB7XG4gICAgICAgIHRoaXMuX3Bvb2xTaXplW25hbWVdID0gY291bnQ7XG4gICAgfSxcblxuICAgIGdldE1heFBvb2xTaXplOiBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcG9vbFNpemVbbmFtZV0gfHwgdGhpcy5NQVhfUE9PTF9TSVpFO1xuICAgIH0sXG5cbiAgICBwdXRJblBvb2w6IGZ1bmN0aW9uIChuYW1lLCBvYmopIHtcbiAgICAgICAgaWYgKCF0aGlzLl9wb29sW25hbWVdKSB7XG4gICAgICAgICAgICB0aGlzLl9wb29sW25hbWVdID0gW107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3Bvb2xbbmFtZV0ubGVuZ3RoIDwgdGhpcy5nZXRNYXhQb29sU2l6ZShuYW1lKSkge1xuICAgICAgICAgICAgb2JqLnJldGFpbiAmJiBvYmoucmV0YWluKCk7XG4gICAgICAgICAgICB0aGlzLl9wb29sW25hbWVdLnB1c2gob2JqKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNjLmxvZyhcIlN5bWJvbCBwb29sIGlzIGZ1bGwsIHRocm93IGF3YXkgdGhpcyBzeW1ib2w6XCIgKyBuYW1lICsgXCIsbWF4IHBvb2wgc2l6ZTpcIiArIHRoaXMuZ2V0TWF4UG9vbFNpemUobmFtZSkpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIGhhc09iamVjdDogZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLl9wb29sW25hbWVdICYmIHRoaXMuX3Bvb2xbbmFtZV0ubGVuZ3RoID4gMCk7XG4gICAgfSxcblxuICAgIHJlbW92ZU9iamVjdDogZnVuY3Rpb24gKG5hbWUsIG9iaikge1xuICAgICAgICB2YXIgbGlzdCA9IHRoaXMuX3Bvb2xbbmFtZV07XG4gICAgICAgIGlmIChsaXN0KSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAob2JqID09PSBsaXN0W2ldKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEpTQiByZWxlYXNlIHRvIGF2b2lkIG1lbW9yeSBsZWFrXG4gICAgICAgICAgICAgICAgICAgIG9iai5yZWxlYXNlICYmIG9iai5yZWxlYXNlKCk7XG4gICAgICAgICAgICAgICAgICAgIGxpc3Quc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBnZXRGcm9tUG9vbDogZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgaWYgKHRoaXMuaGFzT2JqZWN0KG5hbWUpKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gdGhpcy5fcG9vbFtuYW1lXS5wb3AoKTtcbiAgICAgICAgICAgIGNjLnN5cy5pc05hdGl2ZSAmJiBvYmoucmVsZWFzZSAmJiBVdGlscy5hdXRvUmVsZWFzZShvYmopO1xuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBkcmFpbkFsbFBvb2xzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAodmFyIGkgaW4gdGhpcy5fcG9vbCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX3Bvb2wuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHRoaXMuX3Bvb2xbaV0ubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9iaiA9IHRoaXMuX3Bvb2xbaV1bal07XG4gICAgICAgICAgICAgICAgICAgIC8vIEpTQiByZWxlYXNlIHRvIGF2b2lkIG1lbW9yeSBsZWFrXG4gICAgICAgICAgICAgICAgICAgIG9iai5yZWxlYXNlICYmIG9iai5yZWxlYXNlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3Bvb2wgPSB7fTtcbiAgICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJhbGxQb29sOyIsIi8qKlxuICogQ3JlYXRlZCBieSBxaW5uaW5nIG9uIDIwMTcvMTIvMi5cbiAqL1xuXG52YXIgR3JpZFR5cGUgPSByZXF1aXJlKFwiLi4vZW51bS9HcmlkVHlwZVwiKTtcbnZhciBCb2FyZENvbnRyb2xsZXIgPSByZXF1aXJlKFwiLi4vY29udHJvbGxlci9Cb2FyZENvbnRyb2xsZXJcIik7XG52YXIgU2hhcGVUeXBlID0gcmVxdWlyZShcIi4uL2VudW0vU2hhcGVUeXBlXCIpO1xudmFyIEl0ZW1DYXRlZ29yeSA9IHJlcXVpcmUoXCIuLi9lbnVtL0l0ZW1DYXRlZ29yeVwiKTtcblxudmFyIEJvYXJkID0gY2MuTm9kZS5leHRlbmQoe1xuXG4gICAgdHlwZTogR3JpZFR5cGUuQk9BUkQsXG5cbiAgICBub2RlOiBudWxsLFxuXG4gICAgc2hhcGU6IG51bGwsXG5cbiAgICBjdG9yOiBmdW5jdGlvbiAod2lkdGgpIHtcbiAgICAgICAgdGhpcy5fc3VwZXIoKTtcbiAgICAgICAgdGhpcy5ub2RlID0gQm9hcmRDb250cm9sbGVyLmNyZWF0ZUZyb21DQ0Iod2lkdGgpO1xuICAgICAgICB0aGlzLmFkZENoaWxkKHRoaXMubm9kZSk7XG5cbiAgICAgICAgdGhpcy53aWR0aCA9IHRoaXMubm9kZS5jb250cm9sbGVyLm5kQm9hcmQud2lkdGggKyAxNjtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSB0aGlzLm5vZGUuY29udHJvbGxlci5uZEJvYXJkLmhlaWdodDtcbiAgICB9LFxuXG4gICAgb25FeGl0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX3N1cGVyKCk7XG4gICAgICAgIHRoaXMucmVtb3ZlQm9keSgpO1xuICAgIH0sXG5cbiAgICByZW1vdmVCb2R5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vY29uc29sZS5sb2coXCJCb2FyZCByZW1vdmVCb2R5XCIpO1xuICAgICAgICBpZiAodGhpcy5ib2R5KSB7XG4gICAgICAgICAgICAvL3RoaXMuc3BhY2UucmVtb3ZlQm9keSh0aGlzLmJvZHkpO1xuICAgICAgICAgICAgaWYgKGNjLnN5cy5pc05hdGl2ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3BhY2UucmVtb3ZlU2hhcGUodGhpcy5zaGFwZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuc3BhY2UucmVtb3ZlU3RhdGljU2hhcGUodGhpcy5zaGFwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmJvZHkgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5zaGFwZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgaW5pdEJvZHk6IGZ1bmN0aW9uIChzcGFjZSwgcG9zKSB7XG4gICAgICAgIHRoaXMuc2V0UG9zaXRpb24ocG9zKTtcbiAgICAgICAgdGhpcy5zcGFjZSA9IHNwYWNlO1xuXG4gICAgICAgIHZhciBib2R5O1xuICAgICAgICBpZiAoY2Muc3lzLmlzTmF0aXZlKSB7XG4gICAgICAgICAgICBib2R5ID0gbmV3IGNwLkJvZHkoMCwgSW5maW5pdHkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYm9keSA9IG5ldyBjcC5Cb2R5KEluZmluaXR5LCBJbmZpbml0eSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHNoYXBlID0gbmV3IGNwLkJveFNoYXBlKGJvZHksIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcbiAgICAgICAgc2hhcGUuc2V0RWxhc3RpY2l0eSgxKTtcbiAgICAgICAgc2hhcGUuc2V0RnJpY3Rpb24oMCk7XG4gICAgICAgIHNoYXBlLnNldENvbGxpc2lvblR5cGUoU2hhcGVUeXBlLkJPQVJEKTtcbiAgICAgICAgLy9zaGFwZS5sYXllcnMgPSAxO1xuICAgICAgICB0aGlzLnNwYWNlLmFkZFN0YXRpY1NoYXBlKHNoYXBlKTtcbiAgICAgICAgYm9keS5zZXRQb3MocG9zKTtcbiAgICAgICAgYm9keS51c2VyRGF0YSA9IHRoaXM7XG4gICAgICAgIHRoaXMuYm9keSA9IGJvZHk7XG4gICAgICAgIHRoaXMuc2hhcGUgPSBzaGFwZTtcbiAgICAgICAgaWYgKGNjLnN5cy5pc05hdGl2ZSkge1xuICAgICAgICAgICAgc2hhcGUuc2V0RmlsdGVyKHtcbiAgICAgICAgICAgICAgICBncm91cDogY3AuTk9fR1JPVVAsXG4gICAgICAgICAgICAgICAgY2F0ZWdvcmllczogSXRlbUNhdGVnb3J5Lk9ic3RhY2xlLFxuICAgICAgICAgICAgICAgIG1hc2s6IEl0ZW1DYXRlZ29yeS5CYWxsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc3BhY2UucmVpbmRleFNoYXBlKHRoaXMuc2hhcGUpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHNldFBvc1g6IGZ1bmN0aW9uIChwb3NYKSB7XG4gICAgICAgIHRoaXMueCA9IHBvc1g7XG4gICAgICAgIHRoaXMuYm9keS5zZXRQb3MoY2MucCh0aGlzLngsIHRoaXMueSkpO1xuICAgICAgICBpZiAoIWNjLnN5cy5pc05hdGl2ZSkge1xuICAgICAgICAgICAgdGhpcy5zcGFjZS5yZWluZGV4U2hhcGUodGhpcy5zaGFwZSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgZ2V0Qm91bmRpbmdCb3g6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubm9kZS5jb250cm9sbGVyLm5kQm9hcmQuZ2V0Qm91bmRpbmdCb3hUb1dvcmxkKCk7XG4gICAgfSxcblxuICAgIGhpZGVCYWxsOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMubm9kZS5jb250cm9sbGVyLmhpZGVCYWxsKCk7XG4gICAgfSxcblxuICAgIHNob3dCYWxsOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMubm9kZS5jb250cm9sbGVyLnNob3dCYWxsKCk7XG4gICAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQm9hcmQ7IiwidmFyIEJvb3N0VHlwZSA9IHJlcXVpcmUoXCIuLi9lbnVtL0Jvb3N0VHlwZVwiKTtcblxudmFyIEJvb3N0ID0gY2MuU3ByaXRlLmV4dGVuZCh7XG5cbiAgICB0eXBlOiAwLFxuICAgIGN0b3I6IGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgY2FzZSBCb29zdFR5cGUuTElGRTpcbiAgICAgICAgICAgICAgICB0aGlzLl9zdXBlcihcIiNpY29uX25ld19saWZlLnBuZ1wiKTtcbiAgICAgICAgICAgICAgICAvL3RoaXMuc2V0Q29sb3IoY2MuY29sb3IuUkVEKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgQm9vc3RUeXBlLlNQTElUOlxuICAgICAgICAgICAgICAgIHRoaXMuX3N1cGVyKFwiI2ljb25fM19tdWx0aXBsZS5wbmdcIik7XG4gICAgICAgICAgICAgICAgLy90aGlzLnNldENvbG9yKGNjLmNvbG9yLkJMVUUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBCb29zdFR5cGUuVEhSRUVfQkFMTDpcbiAgICAgICAgICAgICAgICB0aGlzLl9zdXBlcihcIiNpY29uXzNfbmV3LnBuZ1wiKTtcbiAgICAgICAgICAgICAgICAvL3RoaXMuc2V0Q29sb3IoY2MuY29sb3IuR1JFRU4pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBCb29zdFR5cGUuQk9NQjpcbiAgICAgICAgICAgICAgICB0aGlzLl9zdXBlcihcIiNpY29uX2JvbWIucG5nXCIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQm9vc3Q7IiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHFpbm5pbmcgb24gMjAxNy8xMi8yLlxuICovXG5cbnZhciBTaGFwZVR5cGUgPSByZXF1aXJlKFwiLi4vZW51bS9TaGFwZVR5cGVcIik7XG52YXIgSXRlbUNhdGVnb3J5ID0gcmVxdWlyZShcIi4uL2VudW0vSXRlbUNhdGVnb3J5XCIpO1xuXG52YXIgR3JpZCA9IGNjLk5vZGUuZXh0ZW5kKHtcblxuICAgIGlzR2lmdDogZmFsc2UsXG4gICAgdHlwZTogMCxcbiAgICByZW1vdmVhYmxlOiBmYWxzZSxcblxuICAgIHNwcml0ZTogbnVsbCxcbiAgICBjdG9yOiBmdW5jdGlvbiAoY29sb3IsIHdpZHRoLCBoZWlnaHQsIHR5cGUpIHtcbiAgICAgICAgdGhpcy5fc3VwZXIoKTtcbiAgICAgICAgdGhpcy5pZ25vcmVBbmNob3IgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zcHJpdGUgPSBuZXcgY2MuU3ByaXRlKFwiI2dyaWQucG5nXCIpO1xuICAgICAgICB0aGlzLmFkZENoaWxkKHRoaXMuc3ByaXRlKTtcbiAgICAgICAgdGhpcy5yZXNldChjb2xvciwgd2lkdGgsIGhlaWdodCwgdHlwZSk7XG4gICAgfSxcblxuICAgIHJlc2V0OiBmdW5jdGlvbiAoY29sb3IsIHdpZHRoLCBoZWlnaHQsIHR5cGUpIHtcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICAgICAgdGhpcy5zcHJpdGUuc2NhbGVYID0gd2lkdGggLyB0aGlzLnNwcml0ZS53aWR0aDtcbiAgICAgICAgdGhpcy5zcHJpdGUuc2NhbGVZID0gaGVpZ2h0IC8gdGhpcy5zcHJpdGUuaGVpZ2h0O1xuICAgICAgICB0aGlzLnNwcml0ZS5zZXRDb2xvcihjb2xvcik7XG4gICAgICAgIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgfSxcblxuICAgIG9uRXhpdDogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9zdXBlcigpO1xuICAgICAgICB0aGlzLnJlbW92ZUJvZHkoKTtcbiAgICB9LFxuXG4gICAgc2V0R2lmdDogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmlzR2lmdCA9IHRydWU7XG4gICAgICAgIHZhciBzcHJpdGVGcmFtZSA9IGNjLnNwcml0ZUZyYW1lQ2FjaGUuZ2V0U3ByaXRlRnJhbWUoXCJncmlkX2dpZnQucG5nXCIpO1xuICAgICAgICB0aGlzLnNwcml0ZS5zZXRTcHJpdGVGcmFtZShzcHJpdGVGcmFtZSk7XG4gICAgICAgIHRoaXMuc3ByaXRlLnNldENvbG9yKGNjLmNvbG9yLldISVRFKTtcbiAgICAgICAgdGhpcy5zcHJpdGUuc2NhbGVYID0gKHRoaXMud2lkdGggKyA0KSAvIHRoaXMuc3ByaXRlLndpZHRoO1xuICAgICAgICB0aGlzLnNwcml0ZS5zY2FsZVkgPSAodGhpcy5oZWlnaHQgKyA0KSAvIHRoaXMuc3ByaXRlLmhlaWdodDtcbiAgICB9LFxuXG4gICAgc2V0Q29sb3I6IGZ1bmN0aW9uIChjb2xvcikge1xuICAgICAgICB0aGlzLl9zdXBlcigpO1xuICAgICAgICBpZiAoIXRoaXMuaXNHaWZ0KSB7XG4gICAgICAgICAgICB0aGlzLnNwcml0ZS5zZXRDb2xvcihjb2xvcik7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgaW5pdEJvZHk6IGZ1bmN0aW9uIChzcGFjZSwgcG9zKSB7XG4gICAgICAgIHRoaXMuc2V0UG9zaXRpb24ocG9zKTtcbiAgICAgICAgdGhpcy5zcGFjZSA9IHNwYWNlO1xuXG4gICAgICAgIHZhciBib2R5ID0gbmV3IGNwLkJvZHkoSW5maW5pdHksIEluZmluaXR5KTtcbiAgICAgICAgdmFyIHNoYXBlID0gbmV3IGNwLkJveFNoYXBlKGJvZHksIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcbiAgICAgICAgc2hhcGUuc2V0RWxhc3RpY2l0eSgxKTtcbiAgICAgICAgc2hhcGUuc2V0RnJpY3Rpb24oMCk7XG4gICAgICAgIC8vc2hhcGUubGF5ZXJzID0gMTtcbiAgICAgICAgdGhpcy5zcGFjZS5hZGRTdGF0aWNTaGFwZShzaGFwZSk7XG4gICAgICAgIHNoYXBlLnNldENvbGxpc2lvblR5cGUoU2hhcGVUeXBlLkJSSUNLKTtcbiAgICAgICAgYm9keS5zZXRQb3MocG9zKTtcbiAgICAgICAgdGhpcy5ib2R5ID0gYm9keTtcbiAgICAgICAgYm9keS51c2VyRGF0YSA9IHRoaXM7XG4gICAgICAgIHRoaXMuc2hhcGUgPSBzaGFwZTtcbiAgICAgICAgdGhpcy5zcGFjZS5yZWluZGV4U2hhcGUoc2hhcGUpO1xuICAgICAgICBpZiAoY2Muc3lzLmlzTmF0aXZlKSB7XG4gICAgICAgICAgICBzaGFwZS5zZXRGaWx0ZXIoe1xuICAgICAgICAgICAgICAgIGdyb3VwOiBjcC5OT19HUk9VUCxcbiAgICAgICAgICAgICAgICBjYXRlZ29yaWVzOiBJdGVtQ2F0ZWdvcnkuT2JzdGFjbGUsXG4gICAgICAgICAgICAgICAgbWFzazogSXRlbUNhdGVnb3J5LkJhbGxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHJlbW92ZUJvZHk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy9jb25zb2xlLmxvZyhcIkdyaWQgcmVtb3ZlQm9keVwiKTtcbiAgICAgICAgaWYgKHRoaXMuc2hhcGUpIHtcbiAgICAgICAgICAgIGlmIChjYy5zeXMuaXNOYXRpdmUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNwYWNlLnJlbW92ZVNoYXBlKHRoaXMuc2hhcGUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNwYWNlLnJlbW92ZVN0YXRpY1NoYXBlKHRoaXMuc2hhcGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zaGFwZSA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmJvZHkgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVhYmxlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBHcmlkOyIsIi8qKlxuICogQ3JlYXRlZCBieSBxaW5uaW5nIG9uIDIwMTcvMTIvMi5cbiAqL1xuXG52YXIgT2JzdGFjbGUgPSBjYy5Ob2RlLmV4dGVuZCh7XG5cbiAgICBjdG9yOiBmdW5jdGlvbiAoY29sb3IsIHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgdGhpcy5fc3VwZXIoY29sb3IsIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICB0aGlzLmlnbm9yZUFuY2hvciA9IGZhbHNlO1xuICAgICAgICB0aGlzLnNwcml0ZSA9IG5ldyBjYy5TcHJpdGUoXCIjZ3JpZC5wbmdcIik7XG4gICAgICAgIHRoaXMuYWRkQ2hpbGQodGhpcy5zcHJpdGUpO1xuICAgICAgICB0aGlzLnJlc2V0KGNvbG9yLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICB9LFxuXG4gICAgcmVzZXQ6IGZ1bmN0aW9uIChjb2xvciwgd2lkdGgsIGhlaWdodCkge1xuICAgICAgICB0aGlzLnNwcml0ZS5zY2FsZVggPSB3aWR0aCAvIHRoaXMuc3ByaXRlLndpZHRoO1xuICAgICAgICB0aGlzLnNwcml0ZS5zY2FsZVkgPSBoZWlnaHQgLyB0aGlzLnNwcml0ZS5oZWlnaHQ7XG4gICAgICAgIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgIHRoaXMuc3ByaXRlLnNldENvbG9yKGNvbG9yKTtcbiAgICB9LFxuXG4gICAgc2V0Q29sb3I6IGZ1bmN0aW9uIChjb2xvcikge1xuICAgICAgICB0aGlzLl9zdXBlcigpO1xuICAgICAgICB0aGlzLnNwcml0ZS5zZXRDb2xvcihjb2xvcik7XG4gICAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JzdGFjbGU7IiwiLyoqXG4gKiBDcmVhdGVkIGJ5IG95ZSBvbiAxNS01LTE3LlxuICovXG52YXIgQm9vc3RUeXBlID0gcmVxdWlyZShcIi4uL2VudW0vQm9vc3RUeXBlXCIpO1xuXG52YXIgUGxheWVySW5mbyA9IGZ1bmN0aW9uKCl7XG4gICAgdGhpcy5wbGF5ZXJJZCA9IFwiXCI7XG4gICAgdGhpcy5iZXN0U2NvcmUgPSAwO1xuICAgIHRoaXMucmVtb3ZlZEFkcyA9IGZhbHNlO1xuICAgIHRoaXMubGV2ZWwgPSAwO1xuICAgIHRoaXMucHJvZ3Jlc3MgPSAwO1xuICAgIHRoaXMubGV2ZWxNYXAgPSBudWxsO1xuICAgIHRoaXMucmF0ZWQgPSBmYWxzZTtcblxuICAgIHRoaXMuYm9vc3RNYXAgPSBudWxsO1xuICAgIHRoaXMuY29pbnMgPSAwO1xuICAgIHRoaXMuZ3VpZGVkID0gZmFsc2U7XG5cbiAgICB0aGlzLmhhcmRMZXZlbCA9IDA7XG4gICAgdGhpcy5sYXN0V2hlZWxUaW1lID0gMDtcbiAgICB0aGlzLmN1cnJlbnRTa2luSWQgPSAwO1xuICAgIHRoaXMuaW50ZXJzdGl0aWFsQWRDb3VudCA9IDA7XG4gICAgdGhpcy5yZXdhcmRlZEFkQ291bnQgPSAwO1xuXG4gICAgdGhpcy5jcmVhdGVEdCA9IDA7XG5cbiAgICB0aGlzLmxldmVsc01hcCA9IHt9O1xuXG4gICAgdGhpcy5sYXN0TG9naW5EYXkgPSAwO1xuICAgIHRoaXMuY29uc2VjdXRpdmVMb2dpbkRheXMgPSAxO1xuICAgIHRoaXMubGFzdENsYWltRGFpbHlCb251c0RheSA9IDA7XG4gICAgdGhpcy5uZXh0RGF5VGlwcyA9IGZhbHNlO1xuXG4gICAgdGhpcy5za2luTWFwID0ge307XG4gICAgdGhpcy5za2luQWRzQ291bnRNYXAgPSB7fTtcbiAgICB0aGlzLnNwZWNpYWxPZmZlck1hcCA9IHt9O1xuXG4gICAgdGhpcy5kaWFtb25kcyA9IDA7XG5cbiAgICB0aGlzLnRhc2tNYXAgPSB7fTtcbiAgICB0aGlzLnNraW5BZGp1c3RlZCA9IGZhbHNlO1xuICAgIHRoaXMubGFzdFNob3dSYXRlVGltZSA9IDA7XG5cbiAgICB0aGlzLnJld2FyZEFkQ291bnRQZXJEYXkgPSB7fTtcbiAgICB0aGlzLnJld2FyZEFkUmVjb3JkRGF5ID0gMDtcbiAgICB0aGlzLmlhcENvdW50ID0gMDtcbiAgICB0aGlzLmZhaWxDb3VudE1hcCA9IHt9O1xuICAgIHRoaXMubGFzdExvZ2luVGltZSA9IDA7XG4gICAgdGhpcy5oYXNBaW1JdGVtID0gZmFsc2U7XG4gICAgdGhpcy5sYXN0RGFpbHlEaWFtb25kVGltZSA9IDA7XG59O1xuXG5QbGF5ZXJJbmZvLnByb3RvdHlwZS51bm1hcnNoYWxsID0gZnVuY3Rpb24gKGpzb24pIHtcbiAgICB0aGlzLnBsYXllcklkID0ganNvbltcInBsYXllcklkXCJdO1xuICAgIHRoaXMuYmVzdFNjb3JlID0ganNvbltcImJlc3RTY29yZVwiXSB8fCAwO1xuICAgIHRoaXMucmVtb3ZlZEFkcyA9IGpzb25bXCJyZW1vdmVkQWRzXCJdIHx8IGZhbHNlO1xuICAgIHRoaXMubGV2ZWwgPSBqc29uW1wibGV2ZWxcIl0gfHwgMTtcbiAgICB0aGlzLnByb2dyZXNzID0ganNvbltcInByb2dyZXNzXCJdIHx8IDA7XG4gICAgdGhpcy5sZXZlbE1hcCA9IGpzb25bXCJsZXZlbE1hcFwiXSB8fCB7fTtcbiAgICB0aGlzLnJhdGVkID0ganNvbltcInJhdGVkXCJdIHx8IGZhbHNlO1xuICAgIHRoaXMuY29pbnMgPSBqc29uW1wiY29pbnNcIl0gfHwgMDtcbiAgICB0aGlzLmd1aWRlZCA9IGpzb25bXCJndWlkZWRcIl0gfHwgZmFsc2U7XG4gICAgdGhpcy5ib29zdE1hcCA9IGpzb25bXCJib29zdE1hcFwiXSB8fCB7fTtcbiAgICB0aGlzLmhhcmRMZXZlbCA9IGpzb25bXCJoYXJkTGV2ZWxcIl0gfHwgMTtcbiAgICB0aGlzLmxhc3RXaGVlbFRpbWUgPSBqc29uW1wibGFzdFdoZWVsVGltZVwiXSB8fCAwO1xuICAgIHRoaXMuY3VycmVudFNraW5JZCA9IGpzb25bXCJjdXJyZW50U2tpbklkXCJdIHx8IDA7XG4gICAgdGhpcy5pbnRlcnN0aXRpYWxBZENvdW50ID0ganNvbltcImludGVyc3RpdGlhbEFkQ291bnRcIl0gfHwgMDtcbiAgICB0aGlzLnJld2FyZGVkQWRDb3VudCA9IGpzb25bXCJyZXdhcmRlZEFkQ291bnRcIl0gfHwgMDtcbiAgICB0aGlzLmNyZWF0ZUR0ID0ganNvbltcImNyZWF0ZUR0XCJdIHx8IERhdGUubm93KCk7XG4gICAgdGhpcy5sZXZlbHNNYXAgPSBqc29uW1wibGV2ZWxzTWFwXCJdIHx8IHt9O1xuICAgIHRoaXMubGFzdExvZ2luRGF5ID0ganNvbltcImxhc3RMb2dpbkRheVwiXSB8fCAwO1xuICAgIHRoaXMuY29uc2VjdXRpdmVMb2dpbkRheXMgPSBqc29uW1wiY29uc2VjdXRpdmVMb2dpbkRheXNcIl0gfHwgMTtcbiAgICB0aGlzLmxhc3RDbGFpbURhaWx5Qm9udXNEYXkgPSBqc29uW1wibGFzdENsYWltRGFpbHlCb251c0RheVwiXSB8fCAwO1xuICAgIHRoaXMubmV4dERheVRpcHMgPSBqc29uW1wibmV4dERheVRpcHNcIl0gfHwgZmFsc2U7XG4gICAgdGhpcy5za2luTWFwID0ganNvbltcInNraW5NYXBcIl0gfHwge1xuICAgICAgICBcIjBcIjogdHJ1ZVxuICAgIH07XG4gICAgdGhpcy5za2luQWRzQ291bnRNYXAgPSBqc29uW1wic2tpbkFkc0NvdW50TWFwXCJdIHx8IHt9O1xuICAgIHRoaXMuc3BlY2lhbE9mZmVyTWFwID0ganNvbltcInNwZWNpYWxPZmZlck1hcFwiXSB8fCB7fTtcbiAgICB0aGlzLmRpYW1vbmRzID0ganNvbltcImRpYW1vbmRzXCJdIHx8IDUwO1xuICAgIHRoaXMudGFza01hcCA9IGpzb25bXCJ0YXNrTWFwXCJdIHx8IHt9O1xuICAgIHRoaXMuc2tpbkFkanVzdGVkID0ganNvbltcInNraW5BZGp1c3RlZFwiXSB8fCBmYWxzZTtcbiAgICB0aGlzLmxhc3RTaG93UmF0ZVRpbWUgPSBqc29uW1wibGFzdFNob3dSYXRlVGltZVwiXSB8fCAwO1xuICAgIHRoaXMucmV3YXJkQWRDb3VudFBlckRheSA9IGpzb25bXCJyZXdhcmRBZENvdW50UGVyRGF5XCJdIHx8IDA7XG4gICAgdGhpcy5yZXdhcmRBZFJlY29yZERheSA9IGpzb25bXCJyZXdhcmRBZFJlY29yZERheVwiXSB8fCAwO1xuICAgIHRoaXMuaWFwQ291bnQgPSBqc29uW1wiaWFwQ291bnRcIl0gfHwgMDtcbiAgICB0aGlzLmZhaWxDb3VudE1hcCA9IGpzb25bXCJmYWlsQ291bnRNYXBcIl0gfHwge307XG4gICAgdGhpcy5sYXN0TG9naW5UaW1lID0ganNvbltcImxhc3RMb2dpblRpbWVcIl0gfHwgRGF0ZS5ub3coKTtcbiAgICB0aGlzLmhhc0FpbUl0ZW0gPSBqc29uW1wiaGFzQWltSXRlbVwiXSB8fCBmYWxzZTtcbiAgICB0aGlzLmxhc3REYWlseURpYW1vbmRUaW1lID0ganNvbltcImxhc3REYWlseURpYW1vbmRUaW1lXCJdIHx8IDA7XG59O1xuXG5QbGF5ZXJJbmZvLmNyZWF0ZURlZmF1bHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBsYXllckluZm8gPSBuZXcgUGxheWVySW5mbygpO1xuICAgIHBsYXllckluZm8uaGludHNDb3VudCA9IDU7XG4gICAgcGxheWVySW5mby5iZXN0U2NvcmUgPSAwO1xuICAgIHBsYXllckluZm8ucmVtb3ZlZEFkcyA9IGZhbHNlO1xuICAgIHBsYXllckluZm8ubGV2ZWwgPSAxO1xuICAgIHBsYXllckluZm8ucHJvZ3Jlc3MgPSAwO1xuICAgIHBsYXllckluZm8ubGV2ZWxNYXAgPSB7fTtcbiAgICBwbGF5ZXJJbmZvLnJhdGVkID0gZmFsc2U7XG4gICAgcGxheWVySW5mby5jb2lucyA9IDA7XG4gICAgcGxheWVySW5mby5ndWlkZWQgPSBmYWxzZTtcbiAgICBwbGF5ZXJJbmZvLmJvb3N0TWFwID0ge307XG4gICAgcGxheWVySW5mby5ib29zdE1hcFtCb29zdFR5cGUuU1BMSVRdID0gNTtcbiAgICBwbGF5ZXJJbmZvLmJvb3N0TWFwW0Jvb3N0VHlwZS5USFJFRV9CQUxMXSA9IDU7XG4gICAgcGxheWVySW5mby5oYXJkTGV2ZWwgPSAxO1xuICAgIHBsYXllckluZm8ubGFzdFdoZWVsVGltZSA9IDA7XG4gICAgcGxheWVySW5mby5jdXJyZW50U2tpbklkID0gMDtcbiAgICBwbGF5ZXJJbmZvLmludGVyc3RpdGlhbEFkQ291bnQgPSAwO1xuICAgIHBsYXllckluZm8ucmV3YXJkZWRBZENvdW50ID0gMDtcbiAgICBwbGF5ZXJJbmZvLmNyZWF0ZUR0ID0gRGF0ZS5ub3coKTtcbiAgICBwbGF5ZXJJbmZvLmxldmVsc01hcCA9IHt9O1xuICAgIHBsYXllckluZm8uZGFpbHlCb251c0R0ID0gRGF0ZS5ub3coKTtcbiAgICBwbGF5ZXJJbmZvLmxhc3RMb2dpbkRheSA9IDA7XG4gICAgcGxheWVySW5mby5jb25zZWN1dGl2ZUxvZ2luRGF5cyA9IDE7XG4gICAgcGxheWVySW5mby5sYXN0Q2xhaW1EYWlseUJvbnVzRGF5ID0gMDtcbiAgICBwbGF5ZXJJbmZvLm5leHREYXlUaXBzID0gZmFsc2U7XG4gICAgcGxheWVySW5mby5za2luTWFwID0ge1xuICAgICAgICBcIjBcIjogdHJ1ZVxuICAgIH07XG4gICAgcGxheWVySW5mby5za2luQWRzQ291bnRNYXAgPSB7fTtcbiAgICBwbGF5ZXJJbmZvLnNwZWNpYWxPZmZlck1hcCA9IHt9O1xuICAgIHBsYXllckluZm8uZGlhbW9uZHMgPSA1MDtcbiAgICBwbGF5ZXJJbmZvLnRhc2tNYXAgPSB7fTtcbiAgICBwbGF5ZXJJbmZvLnNraW5BZGp1c3RlZCA9IGZhbHNlO1xuICAgIHBsYXllckluZm8ubGFzdFNob3dSYXRlVGltZSA9IDA7XG4gICAgcGxheWVySW5mby5yZXdhcmRBZENvdW50UGVyRGF5ID0gMDtcbiAgICBwbGF5ZXJJbmZvLnJld2FyZEFkUmVjb3JkRGF5ID0gMDtcbiAgICBwbGF5ZXJJbmZvLmlhcENvdW50ID0gMDtcbiAgICBwbGF5ZXJJbmZvLmZhaWxDb3VudE1hcCA9IHt9O1xuICAgIHBsYXllckluZm8ubGFzdExvZ2luVGltZSA9IERhdGUubm93KCk7XG4gICAgcGxheWVySW5mby5oYXNBaW1JdGVtID0gZmFsc2U7XG4gICAgcGxheWVySW5mby5sYXN0RGFpbHlEaWFtb25kVGltZSA9IDA7XG4gICAgcmV0dXJuIHBsYXllckluZm87XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBsYXllckluZm87XG4iLCIvKipcbiAqIENyZWF0ZWQgYnkgcWlubmluZyBvbiAyMDE3LzEyLzIuXG4gKi9cblxudmFyIFNoYXBlVHlwZSA9IHJlcXVpcmUoXCIuLi9lbnVtL1NoYXBlVHlwZVwiKTtcbnZhciBJdGVtQ2F0ZWdvcnkgPSByZXF1aXJlKFwiLi4vZW51bS9JdGVtQ2F0ZWdvcnlcIik7XG5cbnZhciBXYWxsID0gY2MuTm9kZS5leHRlbmQoe1xuXG4gICAgaW5pdEJvZHk6IGZ1bmN0aW9uIChzcGFjZSwgcG9zKSB7XG4gICAgICAgIHRoaXMuc2V0UG9zaXRpb24ocG9zKTtcbiAgICAgICAgdGhpcy5zcGFjZSA9IHNwYWNlO1xuXG4gICAgICAgIHZhciBib2R5ID0gbmV3IGNwLkJvZHkoSW5maW5pdHksIEluZmluaXR5KTtcbiAgICAgICAgdmFyIHNoYXBlID0gbmV3IGNwLkJveFNoYXBlKGJvZHksIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcbiAgICAgICAgc2hhcGUuc2V0RWxhc3RpY2l0eSgxKTtcbiAgICAgICAgc2hhcGUuc2V0RnJpY3Rpb24oMCk7XG4gICAgICAgIC8vc2hhcGUubGF5ZXJzID0gMTtcbiAgICAgICAgdGhpcy5zcGFjZS5hZGRTdGF0aWNTaGFwZShzaGFwZSk7XG4gICAgICAgIHNoYXBlLnNldENvbGxpc2lvblR5cGUoU2hhcGVUeXBlLldBTEwpO1xuICAgICAgICBib2R5LnNldFBvcyhjYy5wQWRkKHBvcywgY2MucCh0aGlzLndpZHRoICogMC41LCB0aGlzLmhlaWdodCAqIDAuNSkpKTtcbiAgICAgICAgYm9keS51c2VyRGF0YSA9IHRoaXM7XG4gICAgICAgIHRoaXMuc3BhY2UucmVpbmRleFNoYXBlKHNoYXBlKTtcbiAgICAgICAgaWYgKGNjLnN5cy5pc05hdGl2ZSkge1xuICAgICAgICAgICAgc2hhcGUuc2V0RmlsdGVyKHtcbiAgICAgICAgICAgICAgICBncm91cDogY3AuTk9fR1JPVVAsXG4gICAgICAgICAgICAgICAgY2F0ZWdvcmllczogSXRlbUNhdGVnb3J5Lk9ic3RhY2xlLFxuICAgICAgICAgICAgICAgIG1hc2s6IEl0ZW1DYXRlZ29yeS5CYWxsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFdhbGw7IiwiXG52YXIgQm9vc3RUeXBlID0ge1xuICAgIExJRkU6IDEsXG4gICAgVEhSRUVfQkFMTDogMixcbiAgICBTUExJVDogMyxcbiAgICBHSUZUOiA0LFxuICAgIFNLSU46IDUsXG4gICAgRElBTU9ORDogNixcbiAgICBCT01COiA3LFxuICAgIEFJTV9JVEVNOiA4LFxuICAgIE5VTTogOFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBCb29zdFR5cGU7IiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHFpbm5pbmcgb24gMjAxNy81LzcuXG4gKi9cblxudmFyIEdhbWVNb2RlID0ge1xuICAgIEdBTUVfTU9ERV9FTkRMRVNTOiAwLFxuICAgIEdBTUVfTU9ERV9MRVZFTDogMVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBHYW1lTW9kZTsiLCJcbnZhciBHcmlkVHlwZSA9IHtcbiAgICBPQlNUQUNMRTogMCxcbiAgICBCUklDSzogMSxcbiAgICBCQUxMOiAyLFxuICAgIEJPQVJEOiAzXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEdyaWRUeXBlOyIsIi8qKlxuICogQ3JlYXRlZCBieSBxaW5uaW5nIG9uIDIwMTkvMi8yNVxuICoqL1xuXG52YXIgSXRlbUNhdGVnb3J5ID0ge1xuICAgIEJhbGw6IDEgPDwgMCxcbiAgICBPYnN0YWNsZTogMSA8PCAxLFxuICAgIFdhbGw6IDEgPDwgMlxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBJdGVtQ2F0ZWdvcnk7IiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHFpbm5pbmcgb24gMjAxNy8zLzI1LlxuICovXG5cbnZhciBMb2NrU3RhdHVzID0ge1xuICAgIExPQ0tfU1RBVFVTX0xPQ0s6IDAsXG4gICAgTE9DS19TVEFUVVNfVU5MT0NLOiAxLFxuICAgIExPQ0tfU1RBVFVTX0RPSU5HOiAyXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IExvY2tTdGF0dXM7IiwiXG52YXIgUmFua1R5cGUgPSB7XG4gICAgRnJpZW5kczogMCxcbiAgICBHcm91cDogMSxcbiAgICBHbG9iYWw6MlxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSYW5rVHlwZTsiLCIvKipcbiAqIENyZWF0ZWQgYnkgcWlubmluZyBvbiAyMDE4LzEvMS5cbiAqL1xuXG5cbnZhciBTY2VuZVR5cGUgPSB7XG4gICAgTk9ORTogLTEsXG4gICAgTE9BRElORzogMCxcbiAgICBNRU5VOiAxLFxuICAgIFBBQ0tBR0U6IDIsXG4gICAgTEVWRUw6IDMsXG4gICAgR0FNRTogNFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTY2VuZVR5cGU7IiwiXG52YXIgU2hhcGVUeXBlID0ge1xuICAgIEJBTEw6IDEsXG4gICAgQlJJQ0s6IDIsXG4gICAgQk9BUkQ6IDMsXG4gICAgV0FMTDogNFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTaGFwZVR5cGU7IiwiXG52YXIgU2tpblJld2FyZFR5cGUgPSB7XG4gICAgTm9uZTogMCxcbiAgICBMZXZlbENvdW50OiAxLFxuICAgIFdhdGNoQWRDb3VudDogMixcbiAgICBXYXRjaFJld2FyZEFkQ291bnQ6IDMsXG4gICAgQ2xhaW1lZDogNCxcbiAgICBQdXJjaGFzZTogNVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTa2luUmV3YXJkVHlwZTsiLCIvKipcbiAqIENyZWF0ZWQgYnkgcWlubmluZyBvbiAyMDE5LzIvMjFcbiAqKi9cblxudmFyIFNraW5UeXBlID0ge1xuICAgIFdhdGNoQWRzOiAxLFxuICAgIERpYW1vbmRzOiAyXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNraW5UeXBlOyIsIi8qKlxuICogQ3JlYXRlZCBieSBxaW5uaW5nIG9uIDIwMTcvMTIvMTYuXG4gKi9cblxudmFyIFN0b3JlVHlwZSA9IHtcbiAgICBGUkVFOiAxLFxuICAgIE5FV18zOiAyLFxuICAgIFNQTElUOiAzLFxuICAgIFJFTU9WRV9BRFM6IDQsXG4gICAgUkVTVE9SRTogNSxcbiAgICBGSVJTVF9QVVJDSEFTRTogNixcbiAgICBORVdfQU5EX1NQTElUOiA3LFxuICAgIERJQU1PTkQ6IDgsXG4gICAgU0tJTjogOSxcbiAgICBBSU1fSVRFTTogMTBcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU3RvcmVUeXBlOyIsIlxudmFyIFdoZWVsVHlwZSA9IHtcbiAgICBEYWlseUJvbnVzOiAwLFxuICAgIEJveDogMVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBXaGVlbFR5cGU7IiwiLyoqXG4gKiBDcmVhdGVkIGJ5IG95ZSBvbiAxNS8xMS8yMS5cbiAqL1xuXG52YXIgRXZlbnRzTmFtZSA9IHtcbiAgICBFVkVOVF9OQU1FX0dBTUVfU1RBUlQ6IFwiZXZlbnRfbmFtZV9zdGFydFwiLFxuICAgIEVWRU5UX05BTUVfR0FNRV9PVkVSOiBcImV2ZW50X25hbWVfZ2FtZV9vdmVyXCIsXG4gICAgRVZFTlRfTkFNRV9VUERBVEVfU0NPUkU6IFwiZXZlbnRfbmFtZV91cGRhdGVfc2NvcmVcIixcbiAgICBFVkVOVF9OQU1FX1VQREFURV9MRUZUX0JVTExFVDogXCJldmVudF9uYW1lX3VwZGF0ZV9sZWZ0X2J1bGxldFwiLFxuICAgIEVWRU5UX05BTUVfVVBEQVRFX0JFU1RfU0NPUkU6IFwiZXZlbnRfbmFtZV91cGRhdGVfYmVzdF9zY29yZVwiLFxuICAgIEVWRU5UX05BTUVfVVBEQVRFX0FVRElPOiBcImV2ZW50X25hbWVfdXBkYXRlX2F1ZGlvXCIsXG4gICAgVVBEQVRFX0xFVkVMOiBcInVwZGF0ZV9sZXZlbFwiLFxuICAgIENPSU5TX1VQREFURTogXCJjb2luc191cGRhdGVcIixcbiAgICBSRUZSRVNIX0JPT1NUOiBcInJlZnJlc2hfYm9vc3RcIixcbiAgICBVUERBVEVfU0tJTjogXCJ1cGRhdGVfc2tpblwiLFxuICAgIFVQREFURV9TUEVDSUFMX09GRkVSOiBcInVwZGF0ZV9zcGVjaWFsX29mZmVyXCIsXG4gICAgUFVSQ0hBU0VfRU5EOiBcInB1cmNoYXNlX2VuZFwiLFxuICAgIERJQUxPR19QT1BFRDogXCJkaWFsb2dfcG9wZWRcIixcbiAgICBESUFMT0dfQ0xPU0VEOiBcImRpYWxvZ19jbG9zZWRcIixcbiAgICBESUFNT05EU19VUERBVEU6IFwiZGlhbW9uZHNfdXBkYXRlXCIsXG4gICAgVEFTS19VUERBVEU6IFwidGFza191cGRhdGVcIixcbiAgICBSRVdBUkRFRF9WSURFT19DT1VOVDogXCJyZXdhcmRlZF92aWRlb19jb3VudFwiLFxuICAgIFVQREFURV9BSU1fSVRFTTogXCJ1cGRhdGVfYWltX2l0ZW1cIixcbiAgICBTSE9XX0FJTV9HVUlERTogXCJzaG93X2FpbV9ndWlkZVwiXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50c05hbWU7IiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHFpbm5pbmcgb24gMTUvNS8xMi5cbiAqL1xudmFyIEV2ZW50c05hbWUgPSByZXF1aXJlKFwiLi4vZXZlbnRzL0V2ZW50c05hbWVcIik7XG52YXIgQ29uZmlnTWFuID0gcmVxdWlyZShcIi4uL2NvbmZpZy9Db25maWdNYW5cIik7XG52YXIgQWRzUGxhY2UgPSByZXF1aXJlKFwiLi4vLi4vY29tbW9uL2VudW0vQWRzUGxhY2VcIik7XG52YXIgU3RvcmVIZWxwZXIgPSByZXF1aXJlKFwiLi4vbW9kZWwvU3RvcmVIZWxwZXJcIik7XG4vL3ZhciBTaGFyZUNvbmZpZyA9IHJlcXVpcmUoXCIuLi9jb25maWcvU2hhcmVDb25maWdcIik7XG4vL3ZhciBDb25maWdNYW4gPSByZXF1aXJlKFwiLi4vY29uZmlnL0NvbmZpZ01hblwiKTtcblxuLy92YXIgQm9vc3RQcm9iYWJpbGl0eU1hcCA9IHtcbi8vXG4vL307XG5cbnZhciBHYW1lTWFuID0gY2MuQ2xhc3MuZXh0ZW5kKHtcbiAgICBGUkVFX1dIRUVMX0hPVVJTOiAxMixcblxuICAgIE9ORV9IT1VSX1NFQ09ORFM6IDYwICogNjAgKiAxMDAwLFxuICAgIHN0YXJ0VGltZTogMCxcbiAgICByZXN1bHRDb3VudDogMCxcbiAgICByYXRlZDogZmFsc2UsXG4gICAgZW5kVGltZTogMCxcbiAgICBjYW5SZUxpZmU6IHRydWUsXG4gICAgZGlzdGFuY2U6IDAsXG4gICAgbGV2ZWxJZDogMSxcbiAgICBoYXJkTW9kZTogZmFsc2UsXG4gICAgZ2lmdENvdW50OiAwLFxuICAgIGxhc3RTaG93TGV2ZWw6IDAsXG5cbiAgICB0b3RhbEZhaWxDb3VudDogMCxcbiAgICBwb3BlZDNTdGFyVGlwczogZmFsc2UsXG4gICAgZmlyc3RFbnRlckFkU2hvd2VkOiBmYWxzZSxcblxuICAgIGlzVHJ5QWltSXRlbTogZmFsc2UsXG4gICAgc2hvd2VkV2F0Y2hBZHNHZXRTa2luQ291bnQ6IDAsXG4gICAgc2hvd2VkV2F0Y2hBZHNPcGVuQm94Q291bnQ6IDAsXG5cbiAgICBjYW5Vc2VBaW1JdGVtOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBwdXJjaGFzZWRBaW1JdGVtID0gZ2FtZS5wbGF5ZXJNYW4ucGxheWVyLmhhc0FpbUl0ZW07XG4gICAgICAgIHZhciB0cnlBaW1JdGVtID0gdGhpcy5pc1RyeUFpbUl0ZW07XG4gICAgICAgIHJldHVybiBwdXJjaGFzZWRBaW1JdGVtIHx8IHRyeUFpbUl0ZW07XG4gICAgfSxcblxuICAgIGNhblRyeUFpbUl0ZW06IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGlzTGV2ZWxPSyA9IGdhbWUucGxheWVyTWFuLmdldExldmVsKCkgPj0gMTA7XG4gICAgICAgIHZhciBwdXJjaGFzZWRBaW1JdGVtID0gZ2FtZS5wbGF5ZXJNYW4ucGxheWVyLmhhc0FpbUl0ZW07XG4gICAgICAgIHJldHVybiBpc0xldmVsT0sgJiYgIXB1cmNoYXNlZEFpbUl0ZW07XG4gICAgfSxcblxuICAgIHRyeUFpbUl0ZW06IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5pc1RyeUFpbUl0ZW0gPSB0cnVlO1xuICAgICAgICBnYW1lLmV2ZW50RGlzcGF0Y2hlci5kaXNwYXRjaEV2ZW50KEV2ZW50c05hbWUuU0hPV19BSU1fR1VJREUpO1xuICAgIH0sXG5cbiAgICByZXNldFRyeUFuaW1JdGVtOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaXNUcnlBaW1JdGVtID0gZmFsc2U7XG4gICAgfSxcblxuICAgIGdldEJvb3N0UHJvYmFiaWxpdHk6IGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICAgICAgdmFyIGZhaWxDb3VudCA9IGdhbWUucGxheWVyTWFuLmdldEZhaWxDb3VudChjb25maWcubGV2ZWxJZCk7XG4gICAgICAgIHZhciBib29zdFByb2JhYmlsaXR5ID0gY29uZmlnLmJvb3N0UHJvYmFiaWxpdHk7XG4gICAgICAgIGlmIChmYWlsQ291bnQgPT09IDQpIHtcbiAgICAgICAgICAgIHJldHVybiBib29zdFByb2JhYmlsaXR5ICsgMC4yO1xuICAgICAgICB9IGVsc2UgaWYgKGZhaWxDb3VudCA9PT0gNSkge1xuICAgICAgICAgICAgcmV0dXJuIGJvb3N0UHJvYmFiaWxpdHkgKyAwLjQ7XG4gICAgICAgIH0gZWxzZSBpZiAoZmFpbENvdW50ID4gNSkge1xuICAgICAgICAgICAgcmV0dXJuIGJvb3N0UHJvYmFiaWxpdHkgKyAwLjU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJvb3N0UHJvYmFiaWxpdHk7XG4gICAgfSxcblxuICAgIHNldEhhcmRNb2RlOiBmdW5jdGlvbiAoaGFyZE1vZGUpIHtcbiAgICAgICAgdGhpcy5oYXJkTW9kZSA9IGhhcmRNb2RlO1xuICAgIH0sXG5cbiAgICBjYW5Qb3AzU3RhclRpcHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLnBvcGVkM1N0YXJUaXBzO1xuICAgIH0sXG5cbiAgICBzZXRQb3AzU3RhclRpcHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5wb3BlZDNTdGFyVGlwcyA9IHRydWU7XG4gICAgfSxcblxuICAgIGlzSGFyZE1vZGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFyZE1vZGU7XG4gICAgfSxcblxuICAgIGdldFBsYXllckxldmVsOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmlzSGFyZE1vZGUoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGdhbWUucGxheWVyTWFuLmdldEhhcmRMZXZlbCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGdhbWUucGxheWVyTWFuLmdldExldmVsKCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgY3RvcjogZnVuY3Rpb24gKCkge1xuICAgIH0sXG5cbiAgICBpbml0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMucmF0ZWQgPSBnYW1lLnBsYXllck1hbi5wbGF5ZXIucmF0ZWQ7XG4gICAgICAgIHRoaXMuY2hvb3NlTGF0ZXN0TGV2ZWwoKTtcbiAgICB9LFxuXG4gICAgY2hvb3NlTGF0ZXN0TGV2ZWw6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNIYXJkTW9kZSgpKSB7XG4gICAgICAgICAgICB0aGlzLmxldmVsSWQgPSBnYW1lLnBsYXllck1hbi5nZXRIYXJkTGV2ZWwoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChnYW1lLnBsYXllck1hbi5nZXRMZXZlbCgpIDw9IHRoaXMuZ2V0TGV2ZWxMaXN0KCkubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sZXZlbElkID0gZ2FtZS5wbGF5ZXJNYW4uZ2V0TGV2ZWwoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRIYXJkTW9kZSh0cnVlKTtcbiAgICAgICAgICAgICAgICB0aGlzLmxldmVsSWQgPSBnYW1lLnBsYXllck1hbi5nZXRIYXJkTGV2ZWwoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBnZXRMZXZlbExpc3Q6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIENvbmZpZ01hbi5nZXRJbnN0YW5jZSgpLmdldExldmVsTGlzdCgpO1xuICAgIH0sXG5cbiAgICB1cGRhdGVTY29yZTogZnVuY3Rpb24gKCkge1xuICAgICAgICBnYW1lLmV2ZW50RGlzcGF0Y2hlci5kaXNwYXRjaEV2ZW50KEV2ZW50c05hbWUuRVZFTlRfTkFNRV9VUERBVEVfU0NPUkUpO1xuICAgIH0sXG5cbiAgICAvL2dhbWVPdmVyOiBmdW5jdGlvbiAoKSB7XG4gICAgLy8gICAgLy9nYW1lLmFuYWx5c2VNYW5hZ2VyLnRyYWNrRmFpbGVkUHJvZ3Jlc3Npb25FdmVudChcImxldmVsXCIsIGdhbWUucGxheWVyTWFuLmdldExldmVsKCkpO1xuICAgIC8vICAgIHRoaXMucmVzdWx0Q291bnQrKztcbiAgICAvL30sXG5cbiAgICBnZXRNaXNzaW9uS2V5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5pc0hhcmRNb2RlKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBcIm5vcm1hbF9sZXZlbF9cIiArIHRoaXMubGV2ZWxJZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBcImhhcmRfbGV2ZWxfXCIgKyB0aGlzLmxldmVsSWQ7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgb25HYW1lU3RhcnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZ2FtZS5hbmFseXNlTWFuYWdlci5taXNzaW9uQmVnYW4odGhpcy5nZXRNaXNzaW9uS2V5KCkpO1xuICAgIH0sXG5cbiAgICBnZXRDdXJyZW50U3RhcjogZnVuY3Rpb24gKGNvc3RUaW1lKSB7XG4gICAgICAgIC8vY2MubG9nKFwiY29zdFRpbWU6XCIgKyBjb3N0VGltZSk7XG4gICAgICAgIHZhciBsZXZlbENmZyA9IHRoaXMuZ2V0Q3VyQ29uZmlnKCk7XG4gICAgICAgIHZhciBzdGFyID0gMTtcbiAgICAgICAgaWYgKGNvc3RUaW1lIDw9IGxldmVsQ2ZnLnN0YXJUaW1lKSB7XG4gICAgICAgICAgICBzdGFyID0gMztcbiAgICAgICAgfSBlbHNlIGlmIChjb3N0VGltZSA8PSBsZXZlbENmZy5zdGFyVGltZSAqIDIpIHtcbiAgICAgICAgICAgIHN0YXIgPSAyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdGFyO1xuICAgIH0sXG5cbiAgICBnZXRQcm9ncmVzc1BlcmNlbnQ6IGZ1bmN0aW9uIChjb3N0VGltZSkge1xuICAgICAgICB2YXIgbGV2ZWxDZmcgPSB0aGlzLmdldEN1ckNvbmZpZygpO1xuICAgICAgICByZXR1cm4gTWF0aC5tYXgoMCwgMSAtIChjb3N0VGltZSAvIGxldmVsQ2ZnLnN0YXJUaW1lIC8gMykpICogMTAwO1xuICAgIH0sXG5cbiAgICBnZXRDdXJyZW50UmV3YXJkRGlhbW9uZHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNOZXdTdGFyRGF0YSB8fCB0aGlzLmxhc3RTdGFyID09PSAwKSB7XG4gICAgICAgICAgICB2YXIgbGFzdFJld2FyZERpYW1vbmRzID0gZ2FtZS5jb25maWcucmV3YXJkRGlhbW9uZE1hcFt0aGlzLmxhc3RTdGFyXSB8fCAwO1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRSZXdhcmREaWFtb25kcyA9IGdhbWUuY29uZmlnLnJld2FyZERpYW1vbmRNYXBbdGhpcy5jdXJyZW50U3Rhcl0gfHwgMDtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLm1heChjdXJyZW50UmV3YXJkRGlhbW9uZHMgLSBsYXN0UmV3YXJkRGlhbW9uZHMsIDApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwO1xuICAgIH0sXG5cbiAgICBoYXNTdGFyVGFnOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBoYXNTdGFyVGFnID0gZmFsc2U7XG4gICAgICAgIGlmICghdGhpcy5pc0hhcmRNb2RlKCkpIHtcbiAgICAgICAgICAgIGhhc1N0YXJUYWcgPSBnYW1lLnBsYXllck1hbi5nZXRMZXZlbERhdGEodGhpcy5sZXZlbElkLCBcInN0YXJUYWdcIikgfHwgZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBoYXNTdGFyVGFnID0gZ2FtZS5wbGF5ZXJNYW4uZ2V0TGV2ZWxEYXRhKHRoaXMubGV2ZWxJZCwgXCJoYXJkU3RhclRhZ1wiKSB8fCBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGFzU3RhclRhZztcbiAgICB9LFxuXG4gICAgb25XYXRjaEFkc0dldDNTdGFyOiBmdW5jdGlvbiAobGV2ZWxJZCkge1xuICAgICAgICB2YXIgc3RhciA9IDM7XG4gICAgICAgIGlmICghdGhpcy5pc0hhcmRNb2RlKCkpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlTGV2ZWxTdGFyKGxldmVsSWQsIHN0YXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVIYXJkTGV2ZWxTdGFyKGxldmVsSWQsIHN0YXIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY3VycmVudFN0YXIgPSAzO1xuICAgIH0sXG5cbiAgICBnYW1lV2luOiBmdW5jdGlvbiAoY29zdFRpbWUpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzSGFyZE1vZGUoKSkge1xuICAgICAgICAgICAgdGhpcy5sYXN0U3RhciA9IGdhbWUucGxheWVyTWFuLmdldExldmVsU3Rhcih0aGlzLmxldmVsSWQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5sYXN0U3RhciA9IGdhbWUucGxheWVyTWFuLmdldEhhcmRMZXZlbFN0YXIodGhpcy5sZXZlbElkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGdhbWUuYW5hbHlzZU1hbmFnZXIubWlzc2lvbkNvbXBsZXRlZCh0aGlzLmdldE1pc3Npb25LZXkoKSk7XG5cbiAgICAgICAgdGhpcy5pc05ld1N0YXJEYXRhID0gdGhpcy5oYXNTdGFyVGFnKCk7XG5cbiAgICAgICAgdmFyIHN0YXIgPSB0aGlzLmdldEN1cnJlbnRTdGFyKGNvc3RUaW1lKTtcblxuICAgICAgICAvL3RoaXMub25HYW1lV2luKHN0YXIpO1xuICAgICAgICB0aGlzLmN1cnJlbnRTdGFyID0gc3RhcjtcbiAgICAgICAgdmFyIGhhc1Bzc2VkID0gZmFsc2U7XG4gICAgICAgIHZhciBsZXZlbElkQW5kU3RhciA9IHRoaXMubGV2ZWxJZCArIFwiLVwiICsgc3RhcjtcbiAgICAgICAgaWYgKCF0aGlzLmlzSGFyZE1vZGUoKSkge1xuICAgICAgICAgICAgaWYgKGdhbWUucGxheWVyTWFuLmdldExldmVsU3Rhcih0aGlzLmxldmVsSWQpID4gMCkge1xuICAgICAgICAgICAgICAgIGhhc1Bzc2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMudXBkYXRlTGV2ZWxTdGFyKHRoaXMubGV2ZWxJZCwgc3Rhcik7XG4gICAgICAgICAgICBpZiAoIWhhc1Bzc2VkKSB7XG4gICAgICAgICAgICAgICAgZ2FtZS5hbmFseXNlTWFuYWdlci50cmFja0V2ZW50KFwibGV2ZWxfcGFzc1wiLCB7XG4gICAgICAgICAgICAgICAgICAgIFwibGV2ZWxcIjogdGhpcy5sZXZlbElkXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZ2FtZS5hbmFseXNlTWFuYWdlci50cmFja0V2ZW50KFwibGV2ZWxfcGFzc19zdGFyXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgXCJsZXZlbFwiOiBsZXZlbElkQW5kU3RhclxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNjLmxvZyhcInRyYWNrIGV2ZW50IGxldmVsX3Bhc3M6XCIgKyB0aGlzLmxldmVsSWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5yZXN1bHRDb3VudCsrO1xuICAgICAgICAgICAgdGhpcy5sZXZlbElkKys7XG4gICAgICAgICAgICBpZiAodGhpcy5sZXZlbElkIDw9IHRoaXMuZ2V0TGV2ZWxMaXN0KCkubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgZ2FtZS5nY01hbmFnZXIucmVwb3J0U2NvcmUodGhpcy5sZXZlbElkLCBnYW1lLmNvbmZpZy5nZXRMZWFkZXJCb2FyZEtleSgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGdhbWUucGxheWVyTWFuLnNldExldmVsKHRoaXMubGV2ZWxJZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoZ2FtZS5wbGF5ZXJNYW4uZ2V0SGFyZExldmVsU3Rhcih0aGlzLmxldmVsSWQpID4gMCkge1xuICAgICAgICAgICAgICAgIGhhc1Bzc2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMudXBkYXRlSGFyZExldmVsU3Rhcih0aGlzLmxldmVsSWQsIHN0YXIpO1xuICAgICAgICAgICAgaWYgKCFoYXNQc3NlZCkge1xuICAgICAgICAgICAgICAgIGdhbWUuYW5hbHlzZU1hbmFnZXIudHJhY2tFdmVudChcImxldmVsX3Bhc3NfaGFyZFwiLCB7XG4gICAgICAgICAgICAgICAgICAgIFwibGV2ZWxcIjogdGhpcy5sZXZlbElkXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZ2FtZS5hbmFseXNlTWFuYWdlci50cmFja0V2ZW50KFwibGV2ZWxfcGFzc19oYXJkX3N0YXJcIiwge1xuICAgICAgICAgICAgICAgICAgICBsZXZlbFN0YXJLZXk6IGxldmVsSWRBbmRTdGFyXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY2MubG9nKFwidHJhY2sgZXZlbnQgbGV2ZWxfcGFzc19oYXJkOlwiICsgdGhpcy5sZXZlbElkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucmVzdWx0Q291bnQrKztcbiAgICAgICAgICAgIHRoaXMubGV2ZWxJZCsrO1xuICAgICAgICAgICAgaWYgKHRoaXMubGV2ZWxJZCA8PSB0aGlzLmdldExldmVsTGlzdCgpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGdhbWUuZ2NNYW5hZ2VyLnJlcG9ydFNjb3JlKHRoaXMubGV2ZWxJZCwgZ2FtZS5jb25maWcuZ2V0SGFyZEJvYXJkS2V5KCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZ2FtZS5wbGF5ZXJNYW4uc2V0SGFyZExldmVsKHRoaXMubGV2ZWxJZCk7XG4gICAgICAgIH1cbiAgICAgICAgZ2FtZS5nY01hbmFnZXIucmVwb3J0U2NvcmUodGhpcy5nZXRUb3RhbFN0YXJDb3VudCgpLCBnYW1lLmNvbmZpZy5nZXRTdGFyTGVhZGVyQm9hcmRLZXkoKSk7XG4gICAgICAgIHRoaXMuaGFzUGFzc2VkID0gaGFzUHNzZWQ7XG4gICAgfSxcblxuICAgIHNraXBMZXZlbDogZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNIYXJkTW9kZSgpKSB7XG4gICAgICAgICAgICB0aGlzLmxldmVsSWQrKztcbiAgICAgICAgICAgIGlmICh0aGlzLmxldmVsSWQgPD0gdGhpcy5nZXRMZXZlbExpc3QoKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBnYW1lLnBsYXllck1hbi5zZXRMZXZlbCh0aGlzLmxldmVsSWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5sZXZlbElkKys7XG4gICAgICAgICAgICBpZiAodGhpcy5sZXZlbElkIDw9IHRoaXMuZ2V0TGV2ZWxMaXN0KCkubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgZ2FtZS5wbGF5ZXJNYW4uc2V0SGFyZExldmVsKHRoaXMubGV2ZWxJZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgdXBkYXRlTGV2ZWxTdGFyOiBmdW5jdGlvbiAobGV2ZWwsIHN0YXIpIHtcbiAgICAgICAgdmFyIG9sZFN0YXIgPSBnYW1lLnBsYXllck1hbi5nZXRMZXZlbERhdGEodGhpcy5sZXZlbElkLCBcInN0YXJcIikgfHwgMDtcbiAgICAgICAgaWYgKHN0YXIgPiBvbGRTdGFyKSB7XG4gICAgICAgICAgICBjYy5sb2coXCJ1cGRhdGVMZXZlbFN0YXI6b2xkU3RhcjpcIiArIG9sZFN0YXIgKyBcIixzdGFyOlwiICsgc3Rhcik7XG4gICAgICAgICAgICBnYW1lLnBsYXllck1hbi51cGRhdGVMZXZlbERhdGEobGV2ZWwsIFwic3RhclwiLCBzdGFyKTtcbiAgICAgICAgICAgIGdhbWUucGxheWVyTWFuLnVwZGF0ZUxldmVsRGF0YShsZXZlbCwgXCJzdGFyVGFnXCIsIHRydWUpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHVwZGF0ZUhhcmRMZXZlbFN0YXI6IGZ1bmN0aW9uIChsZXZlbCwgc3Rhcikge1xuICAgICAgICB2YXIgb2xkU3RhciA9IGdhbWUucGxheWVyTWFuLmdldExldmVsRGF0YSh0aGlzLmxldmVsSWQsIFwiaGFyZFN0YXJcIikgfHwgMDtcbiAgICAgICAgaWYgKHN0YXIgPiBvbGRTdGFyKSB7XG4gICAgICAgICAgICBjYy5sb2coXCJ1cGRhdGVIYXJkTGV2ZWxTdGFyOm9sZFN0YXI6XCIgKyBvbGRTdGFyICsgXCIsc3RhcjpcIiArIHN0YXIpO1xuICAgICAgICAgICAgZ2FtZS5wbGF5ZXJNYW4udXBkYXRlTGV2ZWxEYXRhKGxldmVsLCBcImhhcmRTdGFyXCIsIHN0YXIpO1xuICAgICAgICAgICAgZ2FtZS5wbGF5ZXJNYW4udXBkYXRlTGV2ZWxEYXRhKGxldmVsLCBcImhhcmRTdGFyVGFnXCIsIHRydWUpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHJlc3VtZUdhbWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5sZXZlbElkLS07XG4gICAgfSxcblxuICAgIGNob29zZUxldmVsOiBmdW5jdGlvbiAobGV2ZWxJZCkge1xuICAgICAgICB0aGlzLmxldmVsSWQgPSBsZXZlbElkO1xuICAgIH0sXG5cbiAgICBnZXREaXNwbGF5TGV2ZWw6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGV2ZWxJZDtcbiAgICB9LFxuXG4gICAgZ2V0Q3VyQ29uZmlnOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBsZXZlbExpc3QgPSB0aGlzLmdldExldmVsTGlzdCgpO1xuICAgICAgICBpZiAobGV2ZWxMaXN0KSB7XG4gICAgICAgICAgICByZXR1cm4gbGV2ZWxMaXN0W3RoaXMubGV2ZWxJZCAtIDFdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0sXG5cbiAgICBoYXNOZXh0TGV2ZWw6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGxldmVsTGlzdCA9IHRoaXMuZ2V0TGV2ZWxMaXN0KCk7XG4gICAgICAgIGlmICh0aGlzLmxldmVsSWQgPiBsZXZlbExpc3QubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcblxuICAgIG9uR2FtZUZhaWw6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy50b3RhbEZhaWxDb3VudCsrO1xuICAgICAgICB0aGlzLmFkZEZhaWxDb3VudCgpO1xuICAgICAgICBnYW1lLmFuYWx5c2VNYW5hZ2VyLm1pc3Npb25GYWlsZWQodGhpcy5nZXRNaXNzaW9uS2V5KCksIFwibm9ybWFsX2ZhaWxcIik7XG4gICAgfSxcblxuICAgIGFkZEZhaWxDb3VudDogZnVuY3Rpb24gKCkge1xuICAgICAgICBnYW1lLnBsYXllck1hbi5hZGRGYWlsQ291bnQodGhpcy5sZXZlbElkKTtcbiAgICB9LFxuXG4gICAgc2hvd0FkczogZnVuY3Rpb24gKHN1Y2Nlc3MpIHtcbiAgICAgICAgY2MubG9nKFwiR2FtZU1hbiBzaG93QWRzOlwiICsgc3VjY2VzcyArIFwiLGlzTmV3UGxheWVyOlwiICsgZ2FtZS5wbGF5ZXJNYW4uaXNOZXdQbGF5ZXIoKSk7XG4gICAgICAgIGlmIChnYW1lLnBsYXllck1hbi5pc05ld1BsYXllcigpKSB7XG4gICAgICAgICAgICBpZiAoc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmxldmVsSWQgPiA0KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Nob3dJbnRlcnN0aXRpYWxBZHMoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnRvdGFsRmFpbENvdW50ICUgMiA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zaG93SW50ZXJzdGl0aWFsQWRzKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fc2hvd0ludGVyc3RpdGlhbEFkcygpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIF9zaG93SW50ZXJzdGl0aWFsQWRzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChnYW1lLnBsYXllck1hbi5nZXRMZXZlbCgpID49IDMpIHtcbiAgICAgICAgICAgIHZhciBBZHNQbGFjZSA9IHJlcXVpcmUoXCIuLi8uLi9jb21tb24vZW51bS9BZHNQbGFjZVwiKTtcbiAgICAgICAgICAgIGdhbWUuYWRzTWFuYWdlci5zaG93SW50ZXJzdGl0aWFsKEFkc1BsYWNlLlBhc3MpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHNob3dSZWdpc3Rlck5vdGlmaWNhdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5yZXN1bHRDb3VudCA+IDAgJiYgdGhpcy5yZXN1bHRDb3VudCAlIDMgPT09IDApIHtcbiAgICAgICAgICAgIGdhbWUubG9naWNNYW4ucmVnaXN0ZXJOb3RpZmljYXRpb24oKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBzaG93UmF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY291bnQgPSA0O1xuICAgICAgICB2YXIgY2FuU2hvd1JhdGUgPSBmYWxzZTtcbiAgICAgICAgdmFyIGxhc3RTaG93ZWRSYXRlRGF5O1xuICAgICAgICBpZiAoY2Muc3lzLm9zID09PSBjYy5zeXMuT1NfQU5EUk9JRCkge1xuICAgICAgICAgICAgLy9BbmRyb2lkIDLlpKnmmL7npLrkuIDmrKFyYXRlXG4gICAgICAgICAgICBjb3VudCA9IDU7XG4gICAgICAgICAgICBsYXN0U2hvd2VkUmF0ZURheSA9IE1hdGguZmxvb3IoKERhdGUubm93KCkgLSBnYW1lLnBsYXllck1hbi5wbGF5ZXIubGFzdFNob3dSYXRlVGltZSkgLyAoMjQgKiAzNjAwICogMTAwMCkpO1xuICAgICAgICAgICAgY2FuU2hvd1JhdGUgPSBsYXN0U2hvd2VkUmF0ZURheSA+PSAyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy9pT1MgNuS4quWwj+aXtuaYvuekuuS4gOasoXJhdGVcbiAgICAgICAgICAgIGxhc3RTaG93ZWRSYXRlRGF5ID0gTWF0aC5mbG9vcigoRGF0ZS5ub3coKSAtIGdhbWUucGxheWVyTWFuLnBsYXllci5sYXN0U2hvd1JhdGVUaW1lKSAvICgzNjAwICogMTAwMCkpO1xuICAgICAgICAgICAgY2FuU2hvd1JhdGUgPSBsYXN0U2hvd2VkUmF0ZURheSA+PSA2O1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5yYXRlZCAmJiAodGhpcy5yZXN1bHRDb3VudCA+IDAgJiYgdGhpcy5yZXN1bHRDb3VudCAlIGNvdW50ID09PSAwKSAmJiBjYW5TaG93UmF0ZSkge1xuICAgICAgICAgICAgaWYgKCFnYW1lLnJhdGVNYW5hZ2VyLmxhdW5jaEFwcFJldmlldygpKSB7XG4gICAgICAgICAgICAgICAgZ2FtZS5wb3B1cE1hbi5wb3B1cFJhdGVEbGcoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJhdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgZ2FtZS5wbGF5ZXJNYW4uc2V0UmF0ZWQodHJ1ZSk7XG4gICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmF0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAvL3RoaXMuc2hvd0FkcyhzdWNjZXNzKTtcbiAgICAgICAgICAgICAgICB9LmJpbmQodGhpcykpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJhdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGdhbWUucGxheWVyTWFuLnNldExhc3RTaG93UmF0ZVRpbWUoKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy90aGlzLnNob3dBZHMoc3VjY2Vzcyk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgcmVzdGFydEdhbWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZ2FtZS5sb2dpY01hbi5yZWdpc3Rlck5vdGlmaWNhdGlvbigpO1xuICAgICAgICB0aGlzLnN0YXJ0R2FtZSgpO1xuICAgICAgICBnYW1lLmV2ZW50RGlzcGF0Y2hlci5kaXNwYXRjaEV2ZW50KEV2ZW50c05hbWUuRVZFTlRfTkFNRV9VUERBVEVfU0NPUkUpO1xuICAgICAgICBnYW1lLmV2ZW50RGlzcGF0Y2hlci5kaXNwYXRjaEV2ZW50KEV2ZW50c05hbWUuRVZFTlRfTkFNRV9VUERBVEVfQkdfU1BSSVRFKTtcbiAgICB9LFxuXG4gICAgc3RhcnRHYW1lOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vZ2FtZS5hbmFseXNlTWFuYWdlci50cmFja1N0YXJ0UHJvZ3Jlc3Npb25FdmVudChcImxldmVsXCIsIGdhbWUucGxheWVyTWFuLmdldExldmVsKCkpO1xuICAgIH0sXG5cbiAgICBlbnRlckdhbWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy9nYW1lLmFuYWx5c2VNYW5hZ2VyLnRyYWNrU3RhcnRQcm9ncmVzc2lvbkV2ZW50KFwibGV2ZWxcIiwgZ2FtZS5wbGF5ZXJNYW4uZ2V0TGV2ZWwoKSk7XG4gICAgfSxcblxuICAgIGxlYXZlR2FtZTogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnN0YXJ0VGltZSA9IDA7XG4gICAgICAgIHRoaXMuZGlzdGFuY2UgPSAwO1xuICAgIH0sXG5cbiAgICBjYW5TaG93UmV3YXJkZWRWaWRlbzogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKHRoaXMuY2FuUmVMaWZlICYmIGdhbWUuYWRzTWFuYWdlci5pc1Jld2FyZFZpZGVvUmVhZHkoKSk7XG4gICAgfSxcblxuICAgIGdldFNoYXJlQ29uZmlnOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzaGFyZUxpc3QgPSBDb25maWdNYW4uZ2V0SW5zdGFuY2UoKS5nZXRTaGFyZUxpc3QoKTtcbiAgICAgICAgdmFyIHJhbmRvbU51bSA9IGdhbWUudXRpbHMucmFuZG9tTmV4dEludChzaGFyZUxpc3QubGVuZ3RoKTtcbiAgICAgICAgcmV0dXJuIHNoYXJlTGlzdFtyYW5kb21OdW1dO1xuICAgIH0sXG5cbiAgICBnZXRGcmllbmRIZWxwU2hhcmU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRlc2MgPSBnYW1lLnV0aWxzLnNwcmludGYoXCLnoJblnZfnoLTlnY/ogIXmiJHlt7Lnu48lZOWFs+S6hu+8jOW4ruaIkee7p+e7reeOqe+8jOiuqeaIkeWGsuS4iuamnOmmluOAglwiLCBnYW1lLnBsYXllck1hbi5nZXRMZXZlbCgpKTtcbiAgICAgICAgdmFyIHNoYXJlQ29uZmlnID0gdGhpcy5nZXRTaGFyZUNvbmZpZygpO1xuICAgICAgICB2YXIgc2hhcmUgPSBzaGFyZUNvbmZpZy5jb3B5KCk7XG4gICAgICAgIHNoYXJlLmRlc2MgPSBkZXNjO1xuICAgICAgICByZXR1cm4gc2hhcmU7XG4gICAgfSxcblxuICAgIGdldEZyaWVuZENoYWxsZW5nZVNoYXJlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkZXNjID0gZ2FtZS51dGlscy5zcHJpbnRmKFwi56CW5Z2X56C05Z2P6ICF5oiR5bey57uPJWTlhbPkuobvvIzkvaDog73otoXotormiJHlkJfvvJ9cIiwgZ2FtZS5wbGF5ZXJNYW4uZ2V0TGV2ZWwoKSk7XG4gICAgICAgIHZhciBzaGFyZUNvbmZpZyA9IHRoaXMuZ2V0U2hhcmVDb25maWcoKTtcbiAgICAgICAgdmFyIHNoYXJlID0gc2hhcmVDb25maWcuY29weSgpO1xuICAgICAgICBzaGFyZS5kZXNjID0gZGVzYztcbiAgICAgICAgcmV0dXJuIHNoYXJlO1xuICAgIH0sXG5cbiAgICBnZXRXaGVlbExlZnRUaW1lOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBsYXN0V2hlZWxUaW1lID0gZ2FtZS5wbGF5ZXJNYW4uZ2V0TGFzdFdoZWVsVGltZSgpO1xuICAgICAgICByZXR1cm4gKGxhc3RXaGVlbFRpbWUgKyB0aGlzLkZSRUVfV0hFRUxfSE9VUlMgKiB0aGlzLk9ORV9IT1VSX1NFQ09ORFMgLSBEYXRlLm5vdygpKTtcbiAgICB9LFxuXG4gICAgaXNGcmVlV2hlZWw6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGxlZnRUaW1lID0gdGhpcy5nZXRXaGVlbExlZnRUaW1lKCk7XG4gICAgICAgIGlmIChsZWZ0VGltZSA8PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuICAgIGFkZEdpZnRDb3VudDogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmdpZnRDb3VudCsrO1xuICAgIH0sXG5cbiAgICBjYW5TaG93R2lmdDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmICh0aGlzLmxldmVsSWQgPj0gOSkge1xuICAgICAgICAgICAgaWYgKHRoaXMubGV2ZWxJZCAlIDMgPT09IDApIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5naWZ0Q291bnQgPCAzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGFzdFNob3dMZXZlbCA9IHRoaXMubGV2ZWxJZDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgZ2V0Q3VycmVudFNraW5DZmc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGN1cnJlbnRTa2luSWQgPSBnYW1lLnBsYXllck1hbi5nZXRDdXJyZW50U2tpbklkKCk7XG4gICAgICAgIHZhciBza2luQ2ZnID0gQ29uZmlnTWFuLmdldEluc3RhbmNlKCkuZ2V0U2tpbkNmZyhjdXJyZW50U2tpbklkKTtcbiAgICAgICAgcmV0dXJuIHNraW5DZmc7XG4gICAgfSxcblxuICAgIHVwZGF0ZVNraW46IGZ1bmN0aW9uIChzcHJpdGUpIHtcbiAgICAgICAgdmFyIHNraW5DZmcgPSB0aGlzLmdldEN1cnJlbnRTa2luQ2ZnKCk7XG4gICAgICAgIHZhciBzcHJpdGVGcmFtZSA9IGNjLnNwcml0ZUZyYW1lQ2FjaGUuZ2V0U3ByaXRlRnJhbWUoc2tpbkNmZy5pbWFnZSArIFwiLnBuZ1wiKTtcbiAgICAgICAgaWYgKHNwcml0ZUZyYW1lKSB7XG4gICAgICAgICAgICBzcHJpdGUuc2V0U3ByaXRlRnJhbWUoc3ByaXRlRnJhbWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGRlZmF1bHRTcHJpdGVGcmFtZSA9IGNjLnNwcml0ZUZyYW1lQ2FjaGUuZ2V0U3ByaXRlRnJhbWUoXCJza2luXzAucG5nXCIpO1xuICAgICAgICAgICAgc3ByaXRlLnNldFNwcml0ZUZyYW1lKGRlZmF1bHRTcHJpdGVGcmFtZSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgY2hlY2tBdXRvUG9wdXA6IGZ1bmN0aW9uIChmaXJzdEVudGVyKSB7XG4gICAgICAgIGlmICghdGhpcy5jaGVja0RhaWx5Qm9udXMoKSkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmNoZWNrV2hlZWwoKSkge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5jaGVja1NwZWNpYWxPZmZlcigpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZmlyc3RFbnRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy/nrKzkuozlpKnlpZblirF0aXBzXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuY2hlY2tOZXh0RGF5VGlwKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+eci+W5v+WRiuiOt+W+l+mSu+efs1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5jaGVja1dhdGNoQWRzR2V0RGlhbW9uZHMoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+eci+W5v+WRiuiOt+W+l+earuiCpFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuY2hlY2tXYXRjaEFkc0dldFNraW4oKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/nnIvlub/lkYrmiZPlvIDlrp3nrrFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tXYXRjaEFkc09wZW5Cb3goKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBjaGVja05leHREYXlUaXA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMucmVzdWx0Q291bnQgPj0gMykge1xuICAgICAgICAgICAgaWYgKCFnYW1lLnBsYXllck1hbi5wbGF5ZXIubmV4dERheVRpcHMpIHtcbiAgICAgICAgICAgICAgICAvL2dhbWUucG9wdXBNYW4ucG9wdXBDb21tb25EbGcoXyhcIm5leHRfZGF5X3RpcHNcIikpO1xuICAgICAgICAgICAgICAgIGdhbWUucG9wdXBNYW4ucG9wdXBSZXdhcmREbGcoXyhcIm5leHRfZGF5X3RpcHNcIiksXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgfSwgXCJpY29uX2dpZnRzLnBuZ1wiLCAxKTtcbiAgICAgICAgICAgICAgICBnYW1lLnBsYXllck1hbi5zZXROZXh0RGF5VGlwcygpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgY2hlY2tEYWlseUJvbnVzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBsYXN0Q2xhaW1EYXkgPSBnYW1lLnBsYXllck1hbi5wbGF5ZXIubGFzdENsYWltRGFpbHlCb251c0RheTtcbiAgICAgICAgdmFyIGN1cnJlbnREYXlDbGFpbWVkID0gbGFzdENsYWltRGF5ID49IGdhbWUudXRpbHMuZ2V0RGF5QnlUcyhEYXRlLm5vdygpKTtcbiAgICAgICAgaWYgKCFjdXJyZW50RGF5Q2xhaW1lZCkge1xuICAgICAgICAgICAgY2MubG9nKFwiZ2FtZS5wb3B1cE1hbi5wb3B1cERhaWx5Qm9udXNcIik7XG4gICAgICAgICAgICBnYW1lLnBvcHVwTWFuLnBvcHVwRGFpbHlCb251cygpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICBjaGVja1NwZWNpYWxPZmZlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5pc1NwZWNpYWxPZmZlclB1cmNoYXNlZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLnNob3dlZFNwZWNpYWxPZmZlcikge1xuICAgICAgICAgICAgdGhpcy5zaG93ZWRTcGVjaWFsT2ZmZXIgPSB0cnVlO1xuICAgICAgICAgICAgZ2FtZS5wb3B1cE1hbi5wb3B1cFNwZWljaWFsT2ZmZXIoKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgY2hlY2tXaGVlbDogZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuc2hvd2VkV2hlZWwpIHtcbiAgICAgICAgICAgIHRoaXMuc2hvd2VkV2hlZWwgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIGxlZnRUaW1lID0gR2FtZU1hbi5nZXRJbnN0YW5jZSgpLmdldFdoZWVsTGVmdFRpbWUoKTtcbiAgICAgICAgICAgIGlmIChsZWZ0VGltZSA8PSAwKSB7XG4gICAgICAgICAgICAgICAgdmFyIFdoZWVsVHlwZSA9IHJlcXVpcmUoXCIuLi9lbnVtL1doZWVsVHlwZVwiKTtcbiAgICAgICAgICAgICAgICBnYW1lLnBvcHVwTWFuLnBvcHVwV2hlZWxEbGcoV2hlZWxUeXBlLkRhaWx5Qm9udXMpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgaXNTcGVjaWFsT2ZmZXJQdXJjaGFzZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHNwZWNpYWxPZmZlciA9IENvbmZpZ01hbi5nZXRJbnN0YW5jZSgpLmdldFNwZWNpYWxPZmZlckNmZygpO1xuICAgICAgICB2YXIgcHVyY2hhc2VkID0gZ2FtZS5wbGF5ZXJNYW4uaXNTcGVjaWFsT2ZmZXJQdXJjaGFzZWQoc3BlY2lhbE9mZmVyLnBpZCk7XG4gICAgICAgIGNjLmxvZyhcImlzU3BlY2lhbE9mZmVyUHVyY2hhc2VkOlwiICsgcHVyY2hhc2VkKTtcbiAgICAgICAgcmV0dXJuIHB1cmNoYXNlZDtcbiAgICB9LFxuXG4gICAgY2hlY2tSZW1vdGVDb25maWc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZ2FtZS5yZW1vdGVDb25maWcuc2V0UmVtb3RlQ29uZmlnUmVjZWl2ZWRDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvL3JlbG9hZCBjb25maWcuXG4gICAgICAgICAgICBjYy5sb2coXCJjb25maWcgbWFuIG9uUmVtb3RlQ29uZmlnUmVjZWl2ZWRcIik7XG4gICAgICAgICAgICBDb25maWdNYW4uZ2V0SW5zdGFuY2UoKS5vblJlbW90ZUNvbmZpZ1JlY2VpdmVkKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBnYW1lLnJlbW90ZUNvbmZpZy5mZXRjaFJlbW90ZUNvbmZpZygpO1xuICAgIH0sXG5cbiAgICBhZGp1c3RTa2luQ29uZmlnczogZnVuY3Rpb24gKCkge1xuICAgICAgICAvL2lmIChnYW1lLnBsYXllck1hbi5wbGF5ZXIuc2tpbkFkanVzdGVkKSB7XG4gICAgICAgIC8vICAgIHJldHVybjtcbiAgICAgICAgLy99XG4gICAgICAgIC8vZ2FtZS5wbGF5ZXJNYW4uc2V0U2tpbkFkanVzdGVkKCk7XG4gICAgICAgIC8vdmFyIG9sZFRhc2tDb25maWdzID0gQ29uZmlnTWFuLmdldEluc3RhbmNlKCkuZ2V0T2xkVGFza0xpc3QoKTtcbiAgICAgICAgLy9mb3IgKHZhciBpID0gMDsgaSA8IG9sZFRhc2tDb25maWdzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIC8vICAgIHZhciBvbGRUYXNrQ29uZmlnID0gb2xkVGFza0NvbmZpZ3NbaV07XG4gICAgICAgIC8vICAgIHRoaXMuYWRqdXN0T2xkVGFza0NvbmZpZyhvbGRUYXNrQ29uZmlnKTtcbiAgICAgICAgLy99XG4gICAgfSxcblxuICAgIGFkanVzdE9sZFRhc2tDb25maWc6IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHZhciBTa2luUmV3YXJkVHlwZSA9IHJlcXVpcmUoXCIuLi9lbnVtL1NraW5SZXdhcmRUeXBlXCIpO1xuICAgICAgICB2YXIgY29tcGxldGVkID0gZmFsc2U7XG4gICAgICAgIHN3aXRjaCAoZGF0YS50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIFNraW5SZXdhcmRUeXBlLk5vbmU6XG4gICAgICAgICAgICAgICAgY29tcGxldGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgU2tpblJld2FyZFR5cGUuTGV2ZWxDb3VudDpcbiAgICAgICAgICAgICAgICBpZiAoZ2FtZS5wbGF5ZXJNYW4uZ2V0TGV2ZWwoKSA+PSBkYXRhLmNvdW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTa2luUmV3YXJkVHlwZS5XYXRjaEFkQ291bnQ6XG4gICAgICAgICAgICAgICAgaWYgKGdhbWUucGxheWVyTWFuLnBsYXllci5pbnRlcnN0aXRpYWxBZENvdW50ID49IGRhdGEuY291bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFNraW5SZXdhcmRUeXBlLldhdGNoUmV3YXJkQWRDb3VudDpcbiAgICAgICAgICAgICAgICBpZiAoZ2FtZS5wbGF5ZXJNYW4ucGxheWVyLnJld2FyZGVkQWRDb3VudCA+PSBkYXRhLmNvdW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTa2luUmV3YXJkVHlwZS5DbGFpbWVkOlxuICAgICAgICAgICAgICAgIGlmIChnYW1lLnBsYXllck1hbi5oYXNTa2luKGRhdGEuaWQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTa2luUmV3YXJkVHlwZS5QdXJjaGFzZTpcbiAgICAgICAgICAgICAgICBpZiAoZ2FtZS5wbGF5ZXJNYW4uaGFzU2tpbihkYXRhLmlkKSkge1xuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb21wbGV0ZWQpIHtcbiAgICAgICAgICAgIGdhbWUucGxheWVyTWFuLnNldENsYWltZWRTa2luKGRhdGEuaWQpO1xuICAgICAgICAgICAgZ2FtZS5wbGF5ZXJNYW4uc2V0VGFza0NsYWltZWQoZGF0YS5pZCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgaGFzQ29tcGxldGVkVGFzazogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdGFza0NvbmZpZ3MgPSBDb25maWdNYW4uZ2V0SW5zdGFuY2UoKS5nZXRUYXNrTGlzdCgpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRhc2tDb25maWdzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB2YXIgdGFza0NvbmZpZyA9IHRhc2tDb25maWdzW2ldO1xuICAgICAgICAgICAgaWYgKGdhbWUucGxheWVyTWFuLmlzVGFza0NsYWltZWQodGFza0NvbmZpZy5pZCkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmlzVGFza0NvbXBsZXRlZCh0YXNrQ29uZmlnKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgaXNUYXNrQ29tcGxldGVkOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICB2YXIgU2tpblJld2FyZFR5cGUgPSByZXF1aXJlKFwiLi4vZW51bS9Ta2luUmV3YXJkVHlwZVwiKTtcbiAgICAgICAgdmFyIGNvbXBsZXRlZCA9IGZhbHNlO1xuICAgICAgICBzd2l0Y2ggKGRhdGEudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBTa2luUmV3YXJkVHlwZS5Ob25lOlxuICAgICAgICAgICAgICAgIGNvbXBsZXRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFNraW5SZXdhcmRUeXBlLkxldmVsQ291bnQ6XG4gICAgICAgICAgICAgICAgaWYgKGdhbWUucGxheWVyTWFuLmdldExldmVsKCkgPj0gZGF0YS5jb3VudCkge1xuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgU2tpblJld2FyZFR5cGUuV2F0Y2hBZENvdW50OlxuICAgICAgICAgICAgICAgIGlmIChnYW1lLnBsYXllck1hbi5wbGF5ZXIuaW50ZXJzdGl0aWFsQWRDb3VudCA+PSBkYXRhLmNvdW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTa2luUmV3YXJkVHlwZS5XYXRjaFJld2FyZEFkQ291bnQ6XG4gICAgICAgICAgICAgICAgaWYgKGdhbWUucGxheWVyTWFuLnBsYXllci5yZXdhcmRlZEFkQ291bnQgPj0gZGF0YS5jb3VudCkge1xuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgU2tpblJld2FyZFR5cGUuQ2xhaW1lZDpcbiAgICAgICAgICAgICAgICBpZiAoZ2FtZS5wbGF5ZXJNYW4uaGFzU2tpbihkYXRhLmlkKSkge1xuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgU2tpblJld2FyZFR5cGUuUHVyY2hhc2U6XG4gICAgICAgICAgICAgICAgaWYgKGdhbWUucGxheWVyTWFuLmhhc1NraW4oZGF0YS5pZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbXBsZXRlZDtcbiAgICB9LFxuXG4gICAgY2FuU2tpcDogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZmFpbENvdW50ID0gZ2FtZS5wbGF5ZXJNYW4uZ2V0RmFpbENvdW50KHRoaXMubGV2ZWxJZCk7XG4gICAgICAgIGNjLmxvZyhcInNraXAgZmFpbCBjb3VudDpcIiArIGZhaWxDb3VudCk7XG4gICAgICAgIGlmIChmYWlsQ291bnQgPD0gMykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgc2hvd0ZpcnN0RW50ZXJIb21lQWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuZmlyc3RFbnRlckFkU2hvd2VkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5maXJzdEVudGVyQWRTaG93ZWQgPSB0cnVlO1xuICAgICAgICAvL2NjLmxvZyhcImZpcnN0IGVudGVyIGFkcyAxXCIpO1xuICAgICAgICBpZiAoZ2FtZS5wbGF5ZXJNYW4uZ2V0TGV2ZWwoKSA+PSA0KSB7XG4gICAgICAgICAgICAvL2NjLmxvZyhcImZpcnN0IGVudGVyIGFkcyAyXCIpO1xuICAgICAgICAgICAgaWYgKGdhbWUuYWRzTWFuYWdlci5zaG93Rmlyc3RFbnRlckFkKSB7XG4gICAgICAgICAgICAgICAgLy9jYy5sb2coXCJmaXJzdCBlbnRlciBhZHMgMzogcmVnaXN0ZXIgZGF5OlwiICsgZ2FtZS5hZHNNYW5hZ2VyLmdldFJlZ2lzdGVyRGF5KCkpO1xuICAgICAgICAgICAgICAgIGlmIChnYW1lLmFkc01hbmFnZXIuZ2V0UmVnaXN0ZXJEYXkoKSA+PSBnYW1lLmFkc01hbmFnZXIuZmlyc3RFbnRlclNob3dBZERheSkge1xuICAgICAgICAgICAgICAgICAgICAvL2NjLmxvZyhcImZpcnN0IGVudGVyIGFkcyA0XCIpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbGFzdExvZ2luRGF5ID0gZ2FtZS51dGlscy5nZXREYXlCeVRzKGdhbWUucGxheWVyTWFuLnBsYXllci5sYXN0TG9naW5UaW1lKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnREYXkgPSBnYW1lLnV0aWxzLmdldERheUJ5VHMoRGF0ZS5ub3coKSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsYXN0TG9naW5EYXkgPT09IGN1cnJlbnREYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vY2MubG9nKFwiZmlyc3QgZW50ZXIgYWRzIDVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudERheSAtIGxhc3RMb2dpbkRheSA+PSA1ICogMTAwMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY2MubG9nKFwiZmlyc3QgZW50ZXIgYWRzIDZcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZS5hZHNNYW5hZ2VyLnNob3dJbnRlcnN0aXRpYWwoQWRzUGxhY2UuRmlyc3RFbnRlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZ2FtZS5wbGF5ZXJNYW4uc2V0TGFzdExvZ2luVGltZSgpO1xuICAgIH0sXG5cbiAgICBjaGVja1dhdGNoQWRzR2V0U2tpbjogZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5zaG93ZWRXYXRjaEFkc0dldFNraW5Db3VudCA+PSAyKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIFNraW5UeXBlID0gcmVxdWlyZShcIi4uL2VudW0vU2tpblR5cGVcIik7XG4gICAgICAgIHZhciBza2luTGlzdCA9IENvbmZpZ01hbi5nZXRJbnN0YW5jZSgpLmdldFNraW5MaXN0QnlUeXBlKFNraW5UeXBlLldhdGNoQWRzKTtcbiAgICAgICAgdmFyIHN1aXRhYmxlU2tpbkxpc3QgPSBbXTtcbiAgICAgICAgdmFyIHNraW5DZmc7XG4gICAgICAgIHZhciBsZWZ0V2F0Y2hBZHNDb3VudEVxdWFsMTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBza2luTGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgc2tpbkNmZyA9IHNraW5MaXN0W2ldO1xuICAgICAgICAgICAgdmFyIG93bmVkID0gZ2FtZS5wbGF5ZXJNYW4uaGFzU2tpbihza2luQ2ZnLmlkKTtcbiAgICAgICAgICAgIHZhciBpc1dhdGNoQWRzVHlwZSA9IChza2luQ2ZnLnR5cGUgPT09IFNraW5UeXBlLldhdGNoQWRzKTtcbiAgICAgICAgICAgIGlmIChpc1dhdGNoQWRzVHlwZSkge1xuICAgICAgICAgICAgICAgIGxlZnRXYXRjaEFkc0NvdW50RXF1YWwxID0gKHNraW5DZmcuY291bnQgLSBnYW1lLnBsYXllck1hbi5nZXRTa2luQWRzQ291bnQoc2tpbkNmZy5pZCkpID09PSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFvd25lZCAmJiBpc1dhdGNoQWRzVHlwZSAmJiBsZWZ0V2F0Y2hBZHNDb3VudEVxdWFsMSkge1xuICAgICAgICAgICAgICAgIHN1aXRhYmxlU2tpbkxpc3QucHVzaChza2luQ2ZnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoc3VpdGFibGVTa2luTGlzdC5sZW5ndGggPD0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHZhciByYW5kb21JbmRleCA9IGdhbWUudXRpbHMucmFuZG9tTmV4dEludChzdWl0YWJsZVNraW5MaXN0Lmxlbmd0aCk7XG4gICAgICAgIHNraW5DZmcgPSBzdWl0YWJsZVNraW5MaXN0W3JhbmRvbUluZGV4XTtcbiAgICAgICAgaWYgKHNraW5DZmcpIHtcbiAgICAgICAgICAgIGdhbWUucG9wdXBNYW4ucG9wdXBXYXRjaEFkc0dldFNraW4oc2tpbkNmZyk7XG4gICAgICAgICAgICB0aGlzLnNob3dlZFdhdGNoQWRzR2V0U2tpbkNvdW50Kys7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuICAgIGxhc3RQb3BDb3VudDogMCxcbiAgICBjdXJyZW50U3RlcDogMyxcblxuICAgIHRyeVNob3dQYXNzUG9wdXA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMubGV2ZWxJZCA+IDYgJiYgdGhpcy5yZXN1bHRDb3VudCA+IDApIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnJlc3VsdENvdW50IC0gdGhpcy5sYXN0UG9wQ291bnQgPj0gdGhpcy5jdXJyZW50U3RlcCkge1xuICAgICAgICAgICAgICAgIHRoaXMubGFzdFBvcENvdW50ID0gdGhpcy5yZXN1bHRDb3VudDtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50U3RlcCA9PT0gMykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRTdGVwID0gMjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRTdGVwID0gMztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zaG93ZWRXYXRjaEFkc0dldFNraW5Db3VudCA8PSB0aGlzLnNob3dlZFdhdGNoQWRzT3BlbkJveENvdW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5jaGVja1dhdGNoQWRzR2V0U2tpbigpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuY2hlY2tXYXRjaEFkc09wZW5Cb3goKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vdGhpcy5jaGVja1dhdGNoQWRzR2V0RGlhbW9uZHMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5jaGVja1dhdGNoQWRzT3BlbkJveCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuY2hlY2tXYXRjaEFkc0dldFNraW4oKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vdGhpcy5jaGVja1dhdGNoQWRzR2V0RGlhbW9uZHMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICB0cnlTaG93RmFpbFBvcHVwOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmxldmVsSWQgPiA2ICYmIHRoaXMudG90YWxGYWlsQ291bnQgPiAwICYmIHRoaXMudG90YWxGYWlsQ291bnQgJSAyID09PSAwKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuY2hlY2tXYXRjaEFkc0dldERpYW1vbmRzKCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jaGVja1dhdGNoQWRzT3BlbkJveCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgY2hlY2tXYXRjaEFkc09wZW5Cb3g6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuc2hvd2VkV2F0Y2hBZHNPcGVuQm94Q291bnQgPj0gMikge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGdhbWUucG9wdXBNYW4ucG9wdXBXYXRjaEFkc0dldEl0ZW0oXyhcInJld2FyZF92aWRlb19vcGVuX2JveFwiKSwgXCJpY29uX2dpZnRfYm94LnBuZ1wiLCBcIm9wZW5fYm94XCIsIGZ1bmN0aW9uICh3YXRjaGVkKSB7XG4gICAgICAgICAgICBpZiAod2F0Y2hlZCkge1xuICAgICAgICAgICAgICAgIFN0b3JlSGVscGVyLmdldEluc3RhbmNlKCkub25PcGVuQm94KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnNob3dlZFdhdGNoQWRzT3BlbkJveENvdW50Kys7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG5cbiAgICBjaGVja1dhdGNoQWRzR2V0RGlhbW9uZHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGxhc3REYWlseURpYW1vbmRUaW1lID0gZ2FtZS5wbGF5ZXJNYW4ucGxheWVyLmxhc3REYWlseURpYW1vbmRUaW1lO1xuICAgICAgICB2YXIgbGFzdFBvcERheSA9IGdhbWUudXRpbHMuZ2V0RGF5QnlUcyhsYXN0RGFpbHlEaWFtb25kVGltZSk7XG4gICAgICAgIHZhciBjdXJyZW50RGF5ID0gZ2FtZS51dGlscy5nZXREYXlCeVRzKERhdGUubm93KCkpO1xuICAgICAgICBpZiAoY3VycmVudERheSA8PSBsYXN0UG9wRGF5KSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZ2FtZS5wbGF5ZXJNYW4uc2V0TGFzdERhaWx5RGlhbW9uZHNUaW1lKCk7XG4gICAgICAgIGdhbWUucG9wdXBNYW4ucG9wdXBXYXRjaEFkc0dldERpYW1vbmRzKFwiZGFpbHlfZGlhbW9uZHNcIiwgZnVuY3Rpb24gKHdhdGNoZWQpIHtcbiAgICAgICAgICAgIGlmICh3YXRjaGVkKSB7XG4gICAgICAgICAgICAgICAgU3RvcmVIZWxwZXIuZ2V0SW5zdGFuY2UoKS5wb3B1cEFkZERpYW1vbmRzRGxnKGdhbWUuY29uZmlnLmRhaWx5RGlhbW9uZHMsIFwiZGFpbHlfZGlhbW9uZHNcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuXG4gICAgZ2V0VG90YWxTdGFyQ291bnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGxldmVsTGlzdCA9IENvbmZpZ01hbi5nZXRJbnN0YW5jZSgpLmdldExldmVsTGlzdCgpO1xuICAgICAgICB2YXIgc3RhckNvdW50ID0gMDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZXZlbExpc3QubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBsZXZlbFN0YXJDb3VudCA9IGdhbWUucGxheWVyTWFuLmdldExldmVsU3RhcihpICsgMSk7XG4gICAgICAgICAgICB2YXIgaGFyZExldmVsU3RhckNvdW50ID0gZ2FtZS5wbGF5ZXJNYW4uZ2V0SGFyZExldmVsU3RhcihpICsgMSk7XG4gICAgICAgICAgICBzdGFyQ291bnQgKz0gbGV2ZWxTdGFyQ291bnQ7XG4gICAgICAgICAgICBzdGFyQ291bnQgKz0gaGFyZExldmVsU3RhckNvdW50O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdGFyQ291bnQ7XG4gICAgfVxufSk7XG5cbkdhbWVNYW4uX2luc3RhbmNlID0gbnVsbDtcbkdhbWVNYW4uX2ZpcnN0VXNlSW5zdGFuY2UgPSB0cnVlO1xuXG4vKipcbiAqXG4gKiBAcmV0dXJucyB7R2FtZU1hbn1cbiAqL1xuR2FtZU1hbi5nZXRJbnN0YW5jZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoR2FtZU1hbi5fZmlyc3RVc2VJbnN0YW5jZSkge1xuICAgICAgICBHYW1lTWFuLl9maXJzdFVzZUluc3RhbmNlID0gZmFsc2U7XG4gICAgICAgIEdhbWVNYW4uX2luc3RhbmNlID0gbmV3IEdhbWVNYW4oKTtcbiAgICB9XG4gICAgcmV0dXJuIEdhbWVNYW4uX2luc3RhbmNlO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBHYW1lTWFuOyIsIi8qKlxuICogQ3JlYXRlZCBieSBxaW5uaW5nIG9uIDE1LzUvMTIuXG4gKi9cbnZhciBQbGF5ZXJJbmZvID0gcmVxdWlyZShcIi4uL2VudGl0eS9QbGF5ZXJJbmZvXCIpO1xudmFyIEV2ZW50c05hbWUgPSByZXF1aXJlKFwiLi4vZXZlbnRzL0V2ZW50c05hbWVcIik7XG52YXIgQm9vc3RUeXBlID0gcmVxdWlyZShcIi4uL2VudW0vQm9vc3RUeXBlXCIpO1xuXG52YXIgUExBWUVSX0tFWSA9IFwicGxheWVyX2tleVwiO1xuXG52YXIgUGxheWVyTWFuID0gY2MuQ2xhc3MuZXh0ZW5kKHtcbiAgICBwbGF5ZXI6IG51bGwsXG4gICAgYmVzdFNjb3JlS2V5OiBudWxsLFxuICAgIGxldmVsQm9hcmRLZXk6IG51bGwsXG5cbiAgICBpbml0ZWQ6IGZhbHNlLFxuICAgIGN0b3I6IGZ1bmN0aW9uICgpIHtcbiAgICB9LFxuXG4gICAgaW5pdERhdGE6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuaW5pdGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pbml0ZWQgPSBmYWxzZTtcbiAgICAgICAgdmFyIHBsYXllckluZm9TdHIgPSBnYW1lLnN0b3JhZ2VDb250cm9sbGVyLmdldEl0ZW0oUExBWUVSX0tFWSwgbnVsbCk7XG4gICAgICAgIHZhciBwbGF5ZXI7XG4gICAgICAgIGlmIChwbGF5ZXJJbmZvU3RyID09IG51bGwgfHwgcGxheWVySW5mb1N0ciA9PSBcIlwiKSB7XG4gICAgICAgICAgICBwbGF5ZXIgPSBQbGF5ZXJJbmZvLmNyZWF0ZURlZmF1bHQoKTtcbiAgICAgICAgICAgIGdhbWUuc3RvcmFnZUNvbnRyb2xsZXIuc2V0SXRlbShQTEFZRVJfS0VZLCBKU09OLnN0cmluZ2lmeShwbGF5ZXIpKTtcbiAgICAgICAgICAgIGdhbWUuYW5hbHlzZU1hbmFnZXIuYWRkVmlydHVhbEN1cnJlbmN5KFwiaW5pdF9wbGF5ZXJcIiwgcGxheWVyLmRpYW1vbmRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBsYXllciA9IG5ldyBQbGF5ZXJJbmZvKCk7XG4gICAgICAgICAgICBwbGF5ZXIudW5tYXJzaGFsbChKU09OLnBhcnNlKHBsYXllckluZm9TdHIpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBsYXllciA9IHBsYXllcjtcbiAgICB9LFxuXG4gICAgcmVtb3ZlZEFkczogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnBsYXllci5yZW1vdmVkQWRzID0gdHJ1ZTtcbiAgICAgICAgZ2FtZS5hZHNNYW5hZ2VyLnJlbW92ZUJhbm5lckFkcyhcInRvcFwiKTtcbiAgICAgICAgZ2FtZS5hZHNNYW5hZ2VyLnJlbW92ZUJhbm5lckFkcyhcImJvdHRvbVwiKTtcbiAgICAgICAgdGhpcy5fZmx1c2hUb1N0b3JhZ2UoKTtcbiAgICB9LFxuXG4gICAgc2V0UmF0ZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5wbGF5ZXIucmF0ZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLl9mbHVzaFRvU3RvcmFnZSgpO1xuICAgIH0sXG5cbiAgICBnZXRMZXZlbDogZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoY2MuaXNVbmRlZmluZWQodGhpcy5wbGF5ZXIubGV2ZWwpKSB7XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBsYXllci5sZXZlbDtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBzZXRMZXZlbDogZnVuY3Rpb24gKGxldmVsKSB7XG4gICAgICAgIGlmICh0aGlzLnBsYXllci5sZXZlbCA8IGxldmVsKSB7XG4gICAgICAgICAgICB0aGlzLnBsYXllci5sZXZlbCA9IGxldmVsO1xuICAgICAgICAgICAgZ2FtZS5hbmFseXNlTWFuYWdlci50cmFja1BsYXllckxldmVsKGxldmVsKTtcbiAgICAgICAgICAgIHRoaXMuX2ZsdXNoVG9TdG9yYWdlKCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgdXBkYXRlTGV2ZWxEYXRhOiBmdW5jdGlvbiAobGV2ZWwsIG5hbWUsIGRhdGEpIHtcbiAgICAgICAgaWYgKGNjLmlzVW5kZWZpbmVkKHRoaXMucGxheWVyLmxldmVsc01hcFtsZXZlbF0pKSB7XG4gICAgICAgICAgICB0aGlzLnBsYXllci5sZXZlbHNNYXBbbGV2ZWxdID0ge307XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wbGF5ZXIubGV2ZWxzTWFwW2xldmVsXVtuYW1lXSA9IGRhdGE7XG4gICAgICAgIHRoaXMuX2ZsdXNoVG9TdG9yYWdlKCk7XG4gICAgfSxcblxuICAgIGdldExldmVsRGF0YTogZnVuY3Rpb24gKGxldmVsLCBuYW1lKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5wbGF5ZXIubGV2ZWxzTWFwW2xldmVsXSB8fCB7fSlbbmFtZV07XG4gICAgfSxcblxuICAgIGdldExldmVsU3RhcjogZnVuY3Rpb24gKGxldmVsKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldExldmVsRGF0YShsZXZlbCwgXCJzdGFyXCIpIHx8IDA7XG4gICAgfSxcblxuICAgIGdldEhhcmRMZXZlbFN0YXI6IGZ1bmN0aW9uIChsZXZlbCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRMZXZlbERhdGEobGV2ZWwsIFwiaGFyZFN0YXJcIikgfHwgMDtcbiAgICB9LFxuXG4gICAgYWRkSW50ZXJzdGl0aWFsQWRDb3VudDogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnBsYXllci5pbnRlcnN0aXRpYWxBZENvdW50Kys7XG4gICAgICAgIHRoaXMuX2ZsdXNoVG9TdG9yYWdlKCk7XG4gICAgfSxcblxuICAgIGFkZFJld2FyZGVkQWRDb3VudDogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnBsYXllci5yZXdhcmRlZEFkQ291bnQrKztcbiAgICAgICAgdGhpcy5fZmx1c2hUb1N0b3JhZ2UoKTtcbiAgICB9LFxuXG4gICAgc2V0SGFyZExldmVsOiBmdW5jdGlvbiAobGV2ZWwpIHtcbiAgICAgICAgaWYgKHRoaXMucGxheWVyLmhhcmRMZXZlbCA8IGxldmVsKSB7XG4gICAgICAgICAgICB0aGlzLnBsYXllci5oYXJkTGV2ZWwgPSBsZXZlbDtcbiAgICAgICAgICAgIHRoaXMuX2ZsdXNoVG9TdG9yYWdlKCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgZ2V0SGFyZExldmVsOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChjYy5pc1VuZGVmaW5lZCh0aGlzLnBsYXllci5oYXJkTGV2ZWwpKSB7XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBsYXllci5oYXJkTGV2ZWw7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgZ2V0Qm9vc3RDb3VudDogZnVuY3Rpb24gKGJvb3N0VHlwZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5wbGF5ZXIuYm9vc3RNYXBbYm9vc3RUeXBlXSB8fCAwO1xuICAgIH0sXG5cbiAgICB1c2VCb29zdDogZnVuY3Rpb24gKGJvb3N0VHlwZSkge1xuICAgICAgICBpZiAodGhpcy5nZXRCb29zdENvdW50KGJvb3N0VHlwZSkgPiAwKSB7XG4gICAgICAgICAgICB0aGlzLnBsYXllci5ib29zdE1hcFtib29zdFR5cGVdLS07XG4gICAgICAgICAgICBpZiAoYm9vc3RUeXBlID09PSBCb29zdFR5cGUuU1BMSVQpIHtcbiAgICAgICAgICAgICAgICBnYW1lLmFuYWx5c2VNYW5hZ2VyLmNvbnN1bWVJdGVtKFwiYm9vc3Rfc3BsaXRcIiwgMSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGJvb3N0VHlwZSA9PT0gQm9vc3RUeXBlLlRIUkVFX0JBTEwpIHtcbiAgICAgICAgICAgICAgICBnYW1lLmFuYWx5c2VNYW5hZ2VyLmNvbnN1bWVJdGVtKFwiYm9vc3RfbmV3XzNcIiwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9mbHVzaFRvU3RvcmFnZSgpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICBhZGRCb29zdDogZnVuY3Rpb24gKGJvb3N0VHlwZSwgY291bnQpIHtcbiAgICAgICAgdGhpcy5wbGF5ZXIuYm9vc3RNYXBbYm9vc3RUeXBlXSArPSBjb3VudDtcbiAgICAgICAgdGhpcy5fZmx1c2hUb1N0b3JhZ2UoKTtcbiAgICAgICAgZ2FtZS5ldmVudERpc3BhdGNoZXIuZGlzcGF0Y2hFdmVudChFdmVudHNOYW1lLlJFRlJFU0hfQk9PU1QpO1xuICAgIH0sXG5cbiAgICBzZXRCb29zdDogZnVuY3Rpb24gKGJvb3N0VHlwZSwgY291bnQpIHtcbiAgICAgICAgdGhpcy5wbGF5ZXIuYm9vc3RNYXBbYm9vc3RUeXBlXSA9IGNvdW50O1xuICAgICAgICB0aGlzLl9mbHVzaFRvU3RvcmFnZSgpO1xuICAgICAgICBnYW1lLmV2ZW50RGlzcGF0Y2hlci5kaXNwYXRjaEV2ZW50KEV2ZW50c05hbWUuUkVGUkVTSF9CT09TVCk7XG4gICAgfSxcblxuICAgIGFkZERpYW1vbmRzOiBmdW5jdGlvbiAoZGlhbW9uZHMsIHJlYXNvbiwgYnV5SXRlbU5hbWUsIGJ1eUl0ZW1Db3VudCwgaXNVU0RQdXJjaGFzZWQpIHtcbiAgICAgICAgaWYgKGlzTmFOKGRpYW1vbmRzKSkge1xuICAgICAgICAgICAgY2MuZXJyb3IoXCJkaWFtb25kcyBpcyBOQU5cIik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRpYW1vbmRzID4gMCkge1xuICAgICAgICAgICAgZ2FtZS5hdWRpb1BsYXllci5wbGF5RWZmZWN0QnlLZXkoXCJkaWFtb25kX2FkZFwiKTtcbiAgICAgICAgICAgIGlmICghaXNVU0RQdXJjaGFzZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAocmVhc29uKSB7XG4gICAgICAgICAgICAgICAgICAgIGdhbWUuYW5hbHlzZU1hbmFnZXIuYWRkVmlydHVhbEN1cnJlbmN5KHJlYXNvbiwgZGlhbW9uZHMpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGdhbWUuYW5hbHlzZU1hbmFnZXIuYWRkVmlydHVhbEN1cnJlbmN5KFwidW5rb253X3JlYXNvblwiLCBkaWFtb25kcyk7XG4gICAgICAgICAgICAgICAgICAgIGNjLmVycm9yKFwiZXJyb3IgYWRkRGlhbW9uZHMgdW5rbm93biByZWFzb246XCIgKyByZWFzb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChkaWFtb25kcyA8IDApIHtcbiAgICAgICAgICAgIGlmIChidXlJdGVtTmFtZSAmJiBidXlJdGVtQ291bnQpIHtcbiAgICAgICAgICAgICAgICBnYW1lLmFuYWx5c2VNYW5hZ2VyLmNvbnN1bWVWaXJ0dWFsQ3VycmVuY3koYnV5SXRlbU5hbWUsIGJ1eUl0ZW1Db3VudCwgLWRpYW1vbmRzKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY2MuZXJyb3IoXCJlcnJvciBhZGREaWFtb25kcyB1bmtub3duIGJ1eUl0ZW1OYW1lOlwiICsgYnV5SXRlbU5hbWUgKyBcIixidXlJdGVtQ291bnQ6XCIgKyBidXlJdGVtQ291bnQpO1xuICAgICAgICAgICAgICAgIGdhbWUuYW5hbHlzZU1hbmFnZXIuY29uc3VtZVZpcnR1YWxDdXJyZW5jeShcInVua25vd25fcmVhc29uXCIsIDAsIC1kaWFtb25kcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wbGF5ZXIuZGlhbW9uZHMgKz0gZGlhbW9uZHM7XG4gICAgICAgIHRoaXMuX2ZsdXNoVG9TdG9yYWdlKCk7XG4gICAgICAgIGdhbWUuZXZlbnREaXNwYXRjaGVyLmRpc3BhdGNoRXZlbnQoRXZlbnRzTmFtZS5ESUFNT05EU19VUERBVEUsIHtcbiAgICAgICAgICAgIFwiZGlhbW9uZHNcIjogdGhpcy5wbGF5ZXIuZGlhbW9uZHMsXG4gICAgICAgICAgICBcImRlbHRhXCI6IGRpYW1vbmRzXG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBnZXREaWFtb25kczogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wbGF5ZXIuZGlhbW9uZHM7XG4gICAgfSxcblxuICAgIHNldFRhc2tDbGFpbWVkOiBmdW5jdGlvbiAodGFza0lkKSB7XG4gICAgICAgIGNjLmxvZyhcIlBsYXllck1hbiBzZXRUYXNrQ2xhaW1lZDpcIiArIHRhc2tJZCk7XG4gICAgICAgIHRoaXMucGxheWVyLnRhc2tNYXBbdGFza0lkXSA9IHRydWU7XG4gICAgICAgIHRoaXMuX2ZsdXNoVG9TdG9yYWdlKCk7XG4gICAgfSxcblxuICAgIGlzVGFza0NsYWltZWQ6IGZ1bmN0aW9uICh0YXNrSWQpIHtcbiAgICAgICAgY2MubG9nKFwiUGxheWVyTWFuIGlzVGFza0NsYWltZWQ6XCIgKyB0YXNrSWQpO1xuICAgICAgICByZXR1cm4gISF0aGlzLnBsYXllci50YXNrTWFwW3Rhc2tJZF07XG4gICAgfSxcblxuICAgIHNldEd1aWRlZDogZnVuY3Rpb24gKGd1aWRlZCkge1xuICAgICAgICB0aGlzLnBsYXllci5ndWlkZWQgPSBndWlkZWQ7XG4gICAgICAgIHRoaXMuX2ZsdXNoVG9TdG9yYWdlKCk7XG4gICAgfSxcblxuICAgIHNldExhc3RXaGVlbFRpbWU6IGZ1bmN0aW9uICh3aGVlbFRpbWUpIHtcbiAgICAgICAgdGhpcy5wbGF5ZXIubGFzdFdoZWVsVGltZSA9IHdoZWVsVGltZTtcbiAgICAgICAgdGhpcy5fZmx1c2hUb1N0b3JhZ2UoKTtcbiAgICB9LFxuXG4gICAgZ2V0TGFzdFdoZWVsVGltZTogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wbGF5ZXIubGFzdFdoZWVsVGltZTtcbiAgICB9LFxuXG4gICAgc2V0Q3VycmVudFNraW5JZDogZnVuY3Rpb24gKHNraW5JZCkge1xuICAgICAgICBpZiAoc2tpbklkID09PSB0aGlzLnBsYXllci5jdXJyZW50U2tpbklkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIEJhbGxQb29sID0gcmVxdWlyZShcIi4uL2VudGl0eS9CYWxsUG9vbFwiKTtcbiAgICAgICAgQmFsbFBvb2wuZHJhaW5BbGxQb29scygpO1xuICAgICAgICB0aGlzLnBsYXllci5jdXJyZW50U2tpbklkID0gc2tpbklkO1xuICAgICAgICB0aGlzLl9mbHVzaFRvU3RvcmFnZSgpO1xuICAgIH0sXG5cbiAgICBnZXRDdXJyZW50U2tpbklkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBsYXllci5jdXJyZW50U2tpbklkO1xuICAgIH0sXG5cbiAgICBzZXRDbGFpbWVkU2tpbjogZnVuY3Rpb24gKHNraW5JZCkge1xuICAgICAgICB0aGlzLnBsYXllci5za2luTWFwW3NraW5JZF0gPSB0cnVlO1xuICAgICAgICB0aGlzLl9mbHVzaFRvU3RvcmFnZSgpO1xuICAgIH0sXG5cbiAgICBoYXNTa2luOiBmdW5jdGlvbiAoc2tpbklkKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMucGxheWVyLnNraW5NYXBbc2tpbklkXTtcbiAgICB9LFxuXG4gICAgaXNOZXdQbGF5ZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIChEYXRlLm5vdygpIC0gdGhpcy5wbGF5ZXIuY3JlYXRlRHQgPCAyNCAqIDM2MDAgKiAxMDAwKTtcbiAgICB9LFxuXG4gICAgZ2V0UmVnaXN0ZXJEYXk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoKERhdGUubm93KCkgLSB0aGlzLnBsYXllci5jcmVhdGVEdCkgLyAoMjQgKiAzNjAwICogMTAwMCkpICsgMTtcbiAgICB9LFxuXG4gICAgY3VycmVudERheTogZnVuY3Rpb24oKXtcbiAgICAgICAgcmV0dXJuIGdhbWUudXRpbHMuZ2V0RGF5QnlUcyhEYXRlLm5vdygpKTtcbiAgICB9LFxuXG4gICAgY2hlY2tDb25zZWN1dGl2ZUxvZ2luRGF5OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHRvZGF5ID0gdGhpcy5jdXJyZW50RGF5KCk7XG4gICAgICAgIHZhciBkYXlzID0gdG9kYXkgLSB0aGlzLnBsYXllci5sYXN0TG9naW5EYXk7XG4gICAgICAgIGlmIChkYXlzIDwgMCkge1xuICAgICAgICAgICAgY2MuZXJyb3IoXCJjb25zZWN1dGl2ZSBsb2dpbiBkYXkgZXJyb3IsIHRvZGF5IGlzIHNtYWxsZXIgdGhhbiBsYXN0TG9naW5EYXksIG1heWJlIHlvdSBoYXZlIGFkanVzdCB0aGUgdGltZS5cIik7XG4gICAgICAgICAgICBkYXlzID0gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF5cyA8PSAxKXtcbiAgICAgICAgICAgIHRoaXMucGxheWVyLmNvbnNlY3V0aXZlTG9naW5EYXlzICs9IGRheXM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZXtcbiAgICAgICAgICAgIHRoaXMucGxheWVyLmNvbnNlY3V0aXZlTG9naW5EYXlzID0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucGxheWVyLmxhc3RMb2dpbkRheSA9IHRvZGF5O1xuICAgICAgICBpZiAodGhpcy5wbGF5ZXIuY29uc2VjdXRpdmVMb2dpbkRheXMgPCAxKSB7XG4gICAgICAgICAgICB0aGlzLnBsYXllci5jb25zZWN1dGl2ZUxvZ2luRGF5cyA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMucGxheWVyLmNvbnNlY3V0aXZlTG9naW5EYXlzO1xuICAgIH0sXG5cbiAgICBzZXRMYXN0Q2xhaW1EYWlseUJvbnVzRGF5OiBmdW5jdGlvbiAoZGF5KSB7XG4gICAgICAgIHRoaXMucGxheWVyLmxhc3RDbGFpbURhaWx5Qm9udXNEYXkgPSBkYXk7XG4gICAgICAgIHRoaXMuX2ZsdXNoVG9TdG9yYWdlKCk7XG4gICAgfSxcblxuICAgIHNldE5leHREYXlUaXBzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMucGxheWVyLm5leHREYXlUaXBzID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fZmx1c2hUb1N0b3JhZ2UoKTtcbiAgICB9LFxuXG4gICAgaXNTcGVjaWFsT2ZmZXJQdXJjaGFzZWQ6IGZ1bmN0aW9uIChwaWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGxheWVyLnNwZWNpYWxPZmZlck1hcFtwaWRdIHx8IGZhbHNlO1xuICAgIH0sXG5cbiAgICBzZXRTcGVjaWFsT2ZmZXJQdXJjaGFzZWQ6IGZ1bmN0aW9uIChwaWQpIHtcbiAgICAgICAgdGhpcy5wbGF5ZXIuc3BlY2lhbE9mZmVyTWFwW3BpZF0gPSB0cnVlO1xuICAgICAgICB0aGlzLl9mbHVzaFRvU3RvcmFnZSgpO1xuICAgICAgICBnYW1lLmV2ZW50RGlzcGF0Y2hlci5kaXNwYXRjaEV2ZW50KEV2ZW50c05hbWUuVVBEQVRFX1NQRUNJQUxfT0ZGRVIpO1xuICAgIH0sXG5cbiAgICBzZXRTa2luQWRqdXN0ZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5wbGF5ZXIuc2tpbkFkanVzdGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fZmx1c2hUb1N0b3JhZ2UoKTtcbiAgICB9LFxuXG4gICAgc2V0TGFzdFNob3dSYXRlVGltZTogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnBsYXllci5sYXN0U2hvd1JhdGVUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgICAgdGhpcy5fZmx1c2hUb1N0b3JhZ2UoKTtcbiAgICB9LFxuXG4gICAgYWRkUmV3YXJkQWRDb3VudFBlckRheTogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnRyeUNsZWFyUHJldmlvdXNBZENvdW50UGVyRGF5KCk7XG4gICAgICAgIGlmIChjYy5pc1VuZGVmaW5lZCh0aGlzLnBsYXllci5yZXdhcmRBZENvdW50UGVyRGF5KSkge1xuICAgICAgICAgICAgdGhpcy5wbGF5ZXIucmV3YXJkQWRDb3VudFBlckRheSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wbGF5ZXIucmV3YXJkQWRDb3VudFBlckRheSsrO1xuICAgICAgICB0aGlzLl9mbHVzaFRvU3RvcmFnZSgpO1xuICAgICAgICBnYW1lLmV2ZW50RGlzcGF0Y2hlci5kaXNwYXRjaEV2ZW50KEV2ZW50c05hbWUuUkVXQVJERURfVklERU9fQ09VTlQpO1xuICAgIH0sXG5cbiAgICBnZXRSZXdhcmRBZFBsYWNlQ291bnRQZXJEYXk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy50cnlDbGVhclByZXZpb3VzQWRDb3VudFBlckRheSgpO1xuICAgICAgICByZXR1cm4gdGhpcy5wbGF5ZXIucmV3YXJkQWRDb3VudFBlckRheSB8fCAwO1xuICAgIH0sXG5cbiAgICB0cnlDbGVhclByZXZpb3VzQWRDb3VudFBlckRheTogZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5wbGF5ZXIucmV3YXJkQWRSZWNvcmREYXkgIT09IHRoaXMuZ2V0UmVnaXN0ZXJEYXkoKSkge1xuICAgICAgICAgICAgdGhpcy5wbGF5ZXIucmV3YXJkQWRDb3VudFBlckRheSA9IDA7XG4gICAgICAgICAgICB0aGlzLnBsYXllci5yZXdhcmRBZFJlY29yZERheSA9IHRoaXMuZ2V0UmVnaXN0ZXJEYXkoKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBhZGRJYXBDb3VudDogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnBsYXllci5pYXBDb3VudCsrO1xuICAgICAgICB0aGlzLl9mbHVzaFRvU3RvcmFnZSgpO1xuICAgIH0sXG5cbiAgICBhZGRGYWlsQ291bnQ6IGZ1bmN0aW9uIChsZXZlbElkKSB7XG4gICAgICAgIHRoaXMucGxheWVyLmZhaWxDb3VudE1hcFtsZXZlbElkXSA9IHRoaXMuZ2V0RmFpbENvdW50KGxldmVsSWQpICsgMTtcbiAgICAgICAgdGhpcy5fZmx1c2hUb1N0b3JhZ2UoKTtcbiAgICB9LFxuXG4gICAgZ2V0RmFpbENvdW50OiBmdW5jdGlvbiAobGV2ZWxJZCkge1xuICAgICAgICBjYy5sb2coXCJza2lwIGZhaWwgY291bnQgbWFwOlwiICsgSlNPTi5zdHJpbmdpZnkodGhpcy5wbGF5ZXIuZmFpbENvdW50TWFwKSk7XG4gICAgICAgIHJldHVybiB0aGlzLnBsYXllci5mYWlsQ291bnRNYXBbbGV2ZWxJZF0gfHwgMDtcbiAgICB9LFxuXG4gICAgYWRkU2tpbkFkc0NvdW50OiBmdW5jdGlvbiAoc2tpbklkKSB7XG4gICAgICAgIHRoaXMucGxheWVyLnNraW5BZHNDb3VudE1hcFtza2luSWRdID0gdGhpcy5nZXRTa2luQWRzQ291bnQoc2tpbklkKSArIDE7XG4gICAgICAgIHRoaXMuX2ZsdXNoVG9TdG9yYWdlKCk7XG4gICAgfSxcblxuICAgIGdldFNraW5BZHNDb3VudDogZnVuY3Rpb24gKHNraW5JZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wbGF5ZXIuc2tpbkFkc0NvdW50TWFwW3NraW5JZF0gfHwgMDtcbiAgICB9LFxuXG4gICAgc2V0TGFzdExvZ2luVGltZTogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnBsYXllci5sYXN0TG9naW5UaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgICAgdGhpcy5fZmx1c2hUb1N0b3JhZ2UoKTtcbiAgICB9LFxuXG4gICAgc2V0TGFzdERhaWx5RGlhbW9uZHNUaW1lOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMucGxheWVyLmxhc3REYWlseURpYW1vbmRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgICAgdGhpcy5fZmx1c2hUb1N0b3JhZ2UoKTtcbiAgICB9LFxuXG4gICAgcHVyY2hhc2VkQWltSXRlbTogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnBsYXllci5oYXNBaW1JdGVtID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fZmx1c2hUb1N0b3JhZ2UoKTtcbiAgICB9LFxuXG4gICAgX2ZsdXNoVG9TdG9yYWdlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGdhbWUuc3RvcmFnZUNvbnRyb2xsZXIuc2V0SXRlbShQTEFZRVJfS0VZLCBKU09OLnN0cmluZ2lmeSh0aGlzLnBsYXllcikpO1xuICAgIH1cbn0pO1xuXG5QbGF5ZXJNYW4uX2luc3RhbmNlID0gbnVsbDtcblBsYXllck1hbi5fZmlyc3RVc2VJbnN0YW5jZSA9IHRydWU7XG5cbi8qKlxuICpcbiAqIEByZXR1cm5zIHtQbGF5ZXJNYW59XG4gKi9cblBsYXllck1hbi5nZXRJbnN0YW5jZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoUGxheWVyTWFuLl9maXJzdFVzZUluc3RhbmNlKSB7XG4gICAgICAgIFBsYXllck1hbi5fZmlyc3RVc2VJbnN0YW5jZSA9IGZhbHNlO1xuICAgICAgICBQbGF5ZXJNYW4uX2luc3RhbmNlID0gbmV3IFBsYXllck1hbigpO1xuICAgIH1cbiAgICByZXR1cm4gUGxheWVyTWFuLl9pbnN0YW5jZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUGxheWVyTWFuOyIsIi8qKlxuICogQ3JlYXRlZCBieSBveWUgb24gMTUvMTEvMjEuXG4gKi9cblxudmFyIE5vdGljZUNvbnRyb2xsZXIgPSByZXF1aXJlKFwiLi4vY29udHJvbGxlci9Ob3RpY2VDb250cm9sbGVyXCIpO1xudmFyIEdhbWVPdmVyQ29udHJvbGxlciA9IHJlcXVpcmUoXCIuLi9jb250cm9sbGVyL0dhbWVPdmVyQ29udHJvbGxlclwiKTtcbnZhciBIZWxwQ29udHJvbGxlciA9IHJlcXVpcmUoXCIuLi9jb250cm9sbGVyL0hlbHBDb250cm9sbGVyXCIpO1xudmFyIEdhbWVXaW5Db250cm9sbGVyID0gcmVxdWlyZShcIi4uL2NvbnRyb2xsZXIvR2FtZVdpbkNvbnRyb2xsZXJcIik7XG52YXIgUGFzc0NvbnRyb2xsZXIgPSByZXF1aXJlKFwiLi4vY29udHJvbGxlci9QYXNzQ29udHJvbGxlclwiKTtcbnZhciBTdG9yZUNvbnRyb2xsZXIgPSByZXF1aXJlKFwiLi4vY29udHJvbGxlci9TdG9yZUNvbnRyb2xsZXJcIik7XG52YXIgUGF1c2VDb250cm9sbGVyID0gcmVxdWlyZShcIi4uL2NvbnRyb2xsZXIvUGF1c2VDb250cm9sbGVyXCIpO1xudmFyIEZhaWxDb250cm9sbGVyID0gcmVxdWlyZShcIi4uL2NvbnRyb2xsZXIvRmFpbENvbnRyb2xsZXJcIik7XG52YXIgUmFua0NvbnRyb2xsZXIgPSByZXF1aXJlKFwiLi4vY29udHJvbGxlci9SYW5rQ29udHJvbGxlclwiKTtcbnZhciBSZXdhcmRWaWRlb0NvbnRyb2xsZXIgPSByZXF1aXJlKFwiLi4vY29udHJvbGxlci9SZXdhcmRWaWRlb0NvbnRyb2xsZXJcIik7XG52YXIgV2hlZWxDb250cm9sbGVyID0gcmVxdWlyZShcIi4uL2NvbnRyb2xsZXIvV2hlZWxDb250cm9sbGVyXCIpO1xudmFyIFJld2FyZERvdWJsZUNvbnRyb2xsZXIgPSByZXF1aXJlKFwiLi4vY29udHJvbGxlci9SZXdhcmREb3VibGVDb250cm9sbGVyXCIpO1xudmFyIEJhZ0NvbnRyb2xsZXIgPSByZXF1aXJlKFwiLi4vY29udHJvbGxlci9CYWdDb250cm9sbGVyXCIpO1xudmFyIFJld2FyZEdpZnRDb250cm9sbGVyID0gcmVxdWlyZShcIi4uL2NvbnRyb2xsZXIvUmV3YXJkR2lmdENvbnRyb2xsZXJcIik7XG52YXIgU2tpbkNvbnRyb2xsZXIgPSByZXF1aXJlKFwiLi4vY29udHJvbGxlci9Ta2luQ29udHJvbGxlclwiKTtcbnZhciBEYWlseUJvbnVzQ29udHJvbGxlciA9IHJlcXVpcmUoXCIuLi9jb250cm9sbGVyL0RhaWx5Qm9udXNDb250cm9sbGVyXCIpO1xudmFyIFNwZWNpYWxPZmZlckNvbnRyb2xsZXIgPSByZXF1aXJlKFwiLi4vY29udHJvbGxlci9TcGVjaWFsT2ZmZXJDb250cm9sbGVyXCIpO1xudmFyIFJld2FyZE5vdGljZUNvbnRyb2xsZXIgPSByZXF1aXJlKFwiLi4vY29udHJvbGxlci9SZXdhcmROb3RpY2VDb250cm9sbGVyXCIpO1xudmFyIFRhc2tDb250cm9sbGVyID0gcmVxdWlyZShcIi4uL2NvbnRyb2xsZXIvVGFza0NvbnRyb2xsZXJcIik7XG52YXIgU2V0dGluZ0NvbnRyb2xsZXIgPSByZXF1aXJlKFwiLi4vY29udHJvbGxlci9TZXR0aW5nQ29udHJvbGxlclwiKTtcbnZhciBSZWxpdmVDb250cm9sbGVyID0gcmVxdWlyZShcIi4uL2NvbnRyb2xsZXIvUmVsaXZlQ29udHJvbGxlclwiKTtcbnZhciBXYXRjaEFkc0dldFNraW5Db250cm9sbGVyID0gcmVxdWlyZShcIi4uL2NvbnRyb2xsZXIvV2F0Y2hBZHNHZXRTa2luQ29udHJvbGxlclwiKTtcbnZhciBXYXRjaEFkc0dldEl0ZW1Db250cm9sbGVyID0gcmVxdWlyZShcIi4uL2NvbnRyb2xsZXIvV2F0Y2hBZHNHZXRJdGVtQ29udHJvbGxlclwiKTtcbnZhciBXYXRjaEFkc0dldERpYW1vbmRzQ29udHJvbGxlciA9IHJlcXVpcmUoXCIuLi9jb250cm9sbGVyL1dhdGNoQWRzR2V0RGlhbW9uZHNDb250cm9sbGVyXCIpO1xudmFyIFdhdGNoQWRzR2V0M1N0YXJDb250cm9sbGVyID0gcmVxdWlyZShcIi4uL2NvbnRyb2xsZXIvV2F0Y2hBZHNHZXQzU3RhckNvbnRyb2xsZXJcIik7XG5cbnZhciBQb3B1cE1hbiA9IHtcblxuICAgIHBvcHVwQ29tbW9uRGxnOiBmdW5jdGlvbiAoaW5mbywgeWVzQ2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG5vdGljZU5vZGUgPSBOb3RpY2VDb250cm9sbGVyLmNyZWF0ZUZyb21DQ0IoKTtcbiAgICAgICAgbm90aWNlTm9kZS5jb250cm9sbGVyLmluaXRXaXRoWWVzKGluZm8sIHllc0NhbGxiYWNrLCBudWxsKTtcbiAgICAgICAgbm90aWNlTm9kZS5jb250cm9sbGVyLnBvcHVwKCk7XG4gICAgfSxcblxuICAgIHBvcHVwWWVzTm9Db21tb25EbGc6IGZ1bmN0aW9uIChpbmZvLCB5ZXNJbmZvLCBjYW5jZWxJbmZvLCB5ZXNDYWxsYmFjaywgbm9DYWxsYmFjaywgaXNTaG93Q2xvc2UsIGlzU2hvd0Fkcykge1xuICAgICAgICB2YXIgbm90aWNlTm9kZSA9IE5vdGljZUNvbnRyb2xsZXIuY3JlYXRlRnJvbUNDQigpO1xuICAgICAgICBub3RpY2VOb2RlLmNvbnRyb2xsZXIuaW5pdFdpdGhZZXNObyhpbmZvLCB5ZXNJbmZvLCBjYW5jZWxJbmZvLCB5ZXNDYWxsYmFjaywgbm9DYWxsYmFjaywgaXNTaG93Q2xvc2UsIGlzU2hvd0Fkcyk7XG4gICAgICAgIG5vdGljZU5vZGUuY29udHJvbGxlci5wb3B1cCgpO1xuICAgIH0sXG5cbiAgICBwb3B1cFJld2FyZERsZzogZnVuY3Rpb24gKGluZm8sIHllc0NhbGxiYWNrLCByZXdhcmQxU3ByaXRlLCByZXdhcmQxQ291bnQsIHJld2FyZDJTcHJpdGUsIHJld2FyZDJDb3VudCkge1xuICAgICAgICB2YXIgbm90aWNlTm9kZSA9IE5vdGljZUNvbnRyb2xsZXIuY3JlYXRlRnJvbUNDQigpO1xuICAgICAgICBub3RpY2VOb2RlLmNvbnRyb2xsZXIuaW5pdFdpdGhSZXdhcmRZZXMoaW5mbywgeWVzQ2FsbGJhY2ssIHJld2FyZDFTcHJpdGUsIHJld2FyZDFDb3VudCwgcmV3YXJkMlNwcml0ZSwgcmV3YXJkMkNvdW50KTtcbiAgICAgICAgbm90aWNlTm9kZS5jb250cm9sbGVyLnBvcHVwKCk7XG4gICAgfSxcblxuICAgIHBvcHVwTmV3VGlwQ29tbW9uRGxnOiBmdW5jdGlvbiAoaW5mbywgeWVzSW5mbywgY2FuY2VsSW5mbywgeWVzQ2FsbGJhY2ssIG5vQ2FsbGJhY2ssIGlzU2hvd0Nsb3NlKSB7XG4gICAgICAgIHZhciBub3RpY2VOb2RlID0gTm90aWNlQ29udHJvbGxlci5jcmVhdGVHdWlkZUZyb21DQ0IoKTtcbiAgICAgICAgbm90aWNlTm9kZS5jb250cm9sbGVyLmluaXRXaXRoWWVzTm8oaW5mbywgeWVzSW5mbywgY2FuY2VsSW5mbywgeWVzQ2FsbGJhY2ssIG5vQ2FsbGJhY2ssIGlzU2hvd0Nsb3NlKTtcbiAgICAgICAgbm90aWNlTm9kZS5jb250cm9sbGVyLnBvcHVwKCk7XG4gICAgfSxcblxuICAgIHBvcHVwR2FtZU92ZXJEbGc6IGZ1bmN0aW9uIChwZXJjZW50LCByZXBsYXlDYWxsYmFjaykge1xuICAgICAgICB2YXIgZ2FtZU92ZXJOb2RlID0gR2FtZU92ZXJDb250cm9sbGVyLmNyZWF0ZUZyb21DQ0IoKTtcbiAgICAgICAgZ2FtZU92ZXJOb2RlLmNvbnRyb2xsZXIuaW5pdFdpdGgocGVyY2VudCwgcmVwbGF5Q2FsbGJhY2spO1xuICAgICAgICBnYW1lT3Zlck5vZGUuY29udHJvbGxlci5wb3B1cCgpO1xuICAgIH0sXG5cbiAgICBwb3B1cFJhdGVEbGc6IGZ1bmN0aW9uIChyYXRlZENhbGxiYWNrLCBjbG9zZUNhbGxiYWNrKSB7XG4gICAgICAgIHZhciByYXRlSW5mbyA9IGdhbWUubG9jYWwuZ2V0VmFsdWUoXCJyYXRlX2luZm9cIik7XG4gICAgICAgIHRoaXMucG9wdXBZZXNOb0NvbW1vbkRsZyhyYXRlSW5mbyxcbiAgICAgICAgICAgIGdhbWUubG9jYWwuZ2V0VmFsdWUoXCJyYXRlX2NvbmZpcm1cIiksIGdhbWUubG9jYWwuZ2V0VmFsdWUoXCJyYXRlX2NhbmNlbFwiKSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIC8vY2Muc3lzLm9wZW5VUkwoZ2FtZS5jb25maWcuZ2V0UGxhdGZvcm1Eb3dubG9hZFVybCgpKTtcbiAgICAgICAgICAgICAgICBpZiAoZ2FtZS51dGlscy5pc0lPUygpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNjLnN5cy5vcGVuVVJMKGdhbWUuY29uZmlnLmdldFBsYXRmb3JtRG93bmxvYWRVcmwoKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAganNiX2RwLm9uZVNka0JyaWRnZS5vcGVuQXBwbGljYXRpb25NYXJrZXQoZ2FtZS5jb25maWcuZ2V0UGFja2FnZU5hbWUoKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGdhbWUuYWRzTWFuYWdlci5yYXRlVGltZSA9IERhdGUubm93KCk7XG4gICAgICAgICAgICAgICAgaWYgKHJhdGVkQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgcmF0ZWRDYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNsb3NlQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgY2xvc2VDYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIGZhbHNlKTtcbiAgICB9LFxuXG4gICAgcG9wdXBIZWxwRGxnOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBoZWxwTm9kZSA9IEhlbHBDb250cm9sbGVyLmNyZWF0ZUZyb21DQ0IoKTtcbiAgICAgICAgaGVscE5vZGUuY29udHJvbGxlci5wb3B1cCgpO1xuICAgIH0sXG5cbiAgICBwb3B1cEdhbWVXaW5EbGc6IGZ1bmN0aW9uIChyZXBsYXlDYWxsYmFjaywgbmV4dENhbGxiYWNrKSB7XG4gICAgICAgIHZhciBnYW1lT3Zlck5vZGUgPSBHYW1lV2luQ29udHJvbGxlci5jcmVhdGVGcm9tQ0NCKCk7XG4gICAgICAgIGdhbWVPdmVyTm9kZS5jb250cm9sbGVyLmluaXRXaXRoKHJlcGxheUNhbGxiYWNrLCBuZXh0Q2FsbGJhY2spO1xuICAgICAgICBnYW1lT3Zlck5vZGUuY29udHJvbGxlci5wb3B1cCgpO1xuICAgIH0sXG5cbiAgICBwb3B1cFBhc3NEbGc6IGZ1bmN0aW9uIChyZXBsYXlDYWxsYmFjaywgbmV4dENhbGxiYWNrKSB7XG4gICAgICAgIHZhciBub2RlID0gUGFzc0NvbnRyb2xsZXIuY3JlYXRlRnJvbUNDQigpO1xuICAgICAgICBub2RlLmNvbnRyb2xsZXIuaW5pdFdpdGgocmVwbGF5Q2FsbGJhY2ssIG5leHRDYWxsYmFjayk7XG4gICAgICAgIG5vZGUuY29udHJvbGxlci5wb3B1cCgpO1xuICAgIH0sXG5cbiAgICBwb3B1cEZhaWxEbGc6IGZ1bmN0aW9uIChyZXBsYXlDYWxsYmFjaywgc2tpcENhbGxiYWNrKSB7XG4gICAgICAgIHZhciBub2RlID0gRmFpbENvbnRyb2xsZXIuY3JlYXRlRnJvbUNDQigpO1xuICAgICAgICBub2RlLmNvbnRyb2xsZXIuaW5pdFdpdGgocmVwbGF5Q2FsbGJhY2ssIHNraXBDYWxsYmFjayk7XG4gICAgICAgIG5vZGUuY29udHJvbGxlci5wb3B1cCgpO1xuICAgIH0sXG5cbiAgICBwb3B1cFN0b3JlRGxnOiBmdW5jdGlvbiAodHlwZSwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG5vZGUgPSBTdG9yZUNvbnRyb2xsZXIuY3JlYXRlRnJvbUNDQigpO1xuICAgICAgICBub2RlLmNvbnRyb2xsZXIuaW5pdFdpdGgodHlwZSwgY2FsbGJhY2spO1xuICAgICAgICBub2RlLmNvbnRyb2xsZXIucG9wdXAoKTtcbiAgICB9LFxuXG4gICAgcG9wdXBQYXVzZURsZzogZnVuY3Rpb24gKHJlc3VlbUNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBub2RlID0gUGF1c2VDb250cm9sbGVyLmNyZWF0ZUZyb21DQ0IoKTtcbiAgICAgICAgbm9kZS5jb250cm9sbGVyLmluaXRXaXRoKHJlc3VlbUNhbGxiYWNrKTtcbiAgICAgICAgbm9kZS5jb250cm9sbGVyLnBvcHVwKCk7XG4gICAgfSxcbiAgICBwb3B1cFJhbmtEbGc6IGZ1bmN0aW9uIChyYW5rVHlwZSwgY2xvc2VDYWxsYmFjaykge1xuICAgICAgICB2YXIgbm9kZSA9IFJhbmtDb250cm9sbGVyLmNyZWF0ZUZyb21DQ0IoKTtcbiAgICAgICAgbm9kZS5jb250cm9sbGVyLmluaXQocmFua1R5cGUsIGNsb3NlQ2FsbGJhY2spO1xuICAgICAgICBub2RlLmNvbnRyb2xsZXIucG9wdXAoKTtcbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfSxcbiAgICBwb3B1cEdyb3VwUmFua0RsZzogZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5sYXN0R3JvdXBSYW5rTm9kZSkge1xuICAgICAgICAgICAgdGhpcy5sYXN0R3JvdXBSYW5rTm9kZS5jb250cm9sbGVyLmNsb3NlQ2FsbGJhY2sgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5sYXN0R3JvdXBSYW5rTm9kZS5jb250cm9sbGVyLmNsb3NlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIFJhbmtUeXBlID0gcmVxdWlyZShcIi4uL2VudW0vUmFua1R5cGVcIik7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgdGhpcy5sYXN0R3JvdXBSYW5rTm9kZSA9IHRoaXMucG9wdXBSYW5rRGxnKFJhbmtUeXBlLkdyb3VwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzZWxmLmxhc3RHcm91cFJhbmtOb2RlID0gbnVsbDtcbiAgICAgICAgfSk7XG5cbiAgICB9LFxuICAgIHBvcHVwUmV3YXJkVmlkZW86IGZ1bmN0aW9uIChjbG9zZUNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBub2RlID0gUmV3YXJkVmlkZW9Db250cm9sbGVyLmNyZWF0ZUZyb21DQ0IoKTtcbiAgICAgICAgbm9kZS5jb250cm9sbGVyLmluaXQoY2xvc2VDYWxsYmFjayk7XG4gICAgICAgIG5vZGUuY29udHJvbGxlci5wb3B1cCgpO1xuICAgIH0sXG5cbiAgICBwb3B1cFdoZWVsRGxnOiBmdW5jdGlvbiAod2hlZWxUeXBlKSB7XG4gICAgICAgIHZhciBub2RlID0gV2hlZWxDb250cm9sbGVyLmNyZWF0ZUZyb21DQ0IoKTtcbiAgICAgICAgbm9kZS5jb250cm9sbGVyLmluaXRXaXRoKHdoZWVsVHlwZSk7XG4gICAgICAgIG5vZGUuY29udHJvbGxlci5wb3B1cCgpO1xuICAgIH0sXG5cbiAgICBwb3B1cFJld2FyZERvdWJsZVRpcERsZzogZnVuY3Rpb24gKGltYWdlLCBjb3VudCwgcmV3YXJkTmFtZSwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG5vZGUgPSBSZXdhcmREb3VibGVDb250cm9sbGVyLmNyZWF0ZUZyb21DQ0IoKTtcbiAgICAgICAgbm9kZS5jb250cm9sbGVyLmluaXQoaW1hZ2UsIGNvdW50LCByZXdhcmROYW1lLCBjYWxsYmFjayk7XG4gICAgICAgIG5vZGUuY29udHJvbGxlci5wb3B1cCgpO1xuICAgIH0sXG5cbiAgICBwb3B1cEJhZ0RsZzogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbm9kZSA9IEJhZ0NvbnRyb2xsZXIuY3JlYXRlRnJvbUNDQigpO1xuICAgICAgICBub2RlLmNvbnRyb2xsZXIucG9wdXAoKTtcbiAgICB9LFxuXG4gICAgcG9wdXBSZXdhcmRHaWZ0OiBmdW5jdGlvbiAoY2xvc2VDYWxsYmFjaykge1xuICAgICAgICB2YXIgbm9kZSA9IFJld2FyZEdpZnRDb250cm9sbGVyLmNyZWF0ZUZyb21DQ0IoKTtcbiAgICAgICAgbm9kZS5jb250cm9sbGVyLmluaXQoY2xvc2VDYWxsYmFjayk7XG4gICAgICAgIG5vZGUuY29udHJvbGxlci5wb3B1cCgpO1xuICAgIH0sXG5cbiAgICBwb3B1cFNraW5EbGc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG5vZGUgPSBTa2luQ29udHJvbGxlci5jcmVhdGVGcm9tQ0NCKCk7XG4gICAgICAgIG5vZGUuY29udHJvbGxlci5wb3B1cCgpO1xuICAgIH0sXG5cbiAgICBwb3B1cERhaWx5Qm9udXM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG5vZGUgPSBEYWlseUJvbnVzQ29udHJvbGxlci5jcmVhdGVGcm9tQ0NCKCk7XG4gICAgICAgIG5vZGUuY29udHJvbGxlci5wb3B1cCgpO1xuICAgIH0sXG5cbiAgICBwb3B1cFNwZWljaWFsT2ZmZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG5vZGUgPSBTcGVjaWFsT2ZmZXJDb250cm9sbGVyLmNyZWF0ZUZyb21DQ0IoKTtcbiAgICAgICAgbm9kZS5jb250cm9sbGVyLnBvcHVwKCk7XG4gICAgfSxcblxuICAgIHBvcHVwUmV3YXJkTm90aWNlRGxnOiBmdW5jdGlvbiAoaW5mbywgeWVzQ2FsbGJhY2ssIHJld2FyZDFTcHJpdGUsIHJld2FyZDFDb3VudCwgcmV3YXJkMlNwcml0ZSwgcmV3YXJkMkNvdW50KSB7XG4gICAgICAgIHZhciBub3RpY2VOb2RlID0gUmV3YXJkTm90aWNlQ29udHJvbGxlci5jcmVhdGVGcm9tQ0NCKCk7XG4gICAgICAgIG5vdGljZU5vZGUuY29udHJvbGxlci5pbml0V2l0aFJld2FyZFllcyhpbmZvLCB5ZXNDYWxsYmFjaywgcmV3YXJkMVNwcml0ZSwgcmV3YXJkMUNvdW50LCByZXdhcmQyU3ByaXRlLCByZXdhcmQyQ291bnQpO1xuICAgICAgICBub3RpY2VOb2RlLmNvbnRyb2xsZXIucG9wdXAoKTtcbiAgICB9LFxuXG4gICAgcG9wdXBUYXNrRGxnOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBub2RlID0gVGFza0NvbnRyb2xsZXIuY3JlYXRlRnJvbUNDQigpO1xuICAgICAgICBub2RlLmNvbnRyb2xsZXIucG9wdXAoKTtcbiAgICB9LFxuXG4gICAgcG9wdXBTZXR0aW5nRGxnOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBub2RlID0gU2V0dGluZ0NvbnRyb2xsZXIuY3JlYXRlRnJvbUNDQigpO1xuICAgICAgICBub2RlLmNvbnRyb2xsZXIucG9wdXAoKTtcbiAgICB9LFxuXG4gICAgcG9wdXBSZWxpdmVEbGc6IGZ1bmN0aW9uIChyZWxpdmVDYWxsYmFjaywgY2FuY2VsQ2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG5vZGUgPSBSZWxpdmVDb250cm9sbGVyLmNyZWF0ZUZyb21DQ0IoKTtcbiAgICAgICAgbm9kZS5jb250cm9sbGVyLmluaXRXaXRoKHJlbGl2ZUNhbGxiYWNrLCBjYW5jZWxDYWxsYmFjayk7XG4gICAgICAgIG5vZGUuY29udHJvbGxlci5wb3B1cCgpO1xuICAgIH0sXG5cbiAgICBwb3B1cFdhdGNoQWRzR2V0U2tpbjogZnVuY3Rpb24gKHNraW5DZmcpIHtcbiAgICAgICAgdmFyIG5vZGUgPSBXYXRjaEFkc0dldFNraW5Db250cm9sbGVyLmNyZWF0ZUZyb21DQ0IoKTtcbiAgICAgICAgbm9kZS5jb250cm9sbGVyLmluaXRXaXRoKHNraW5DZmcpO1xuICAgICAgICBub2RlLmNvbnRyb2xsZXIucG9wdXAoKTtcbiAgICB9LFxuXG4gICAgcG9wdXBXYXRjaEFkc0dldEl0ZW06IGZ1bmN0aW9uICh0aXRsZSwgc3ByaXRlTmFtZSwgcmV3YXJkTmFtZSwgY2xvc2VDYWxsYmFjaykge1xuICAgICAgICB2YXIgbm9kZSA9IFdhdGNoQWRzR2V0SXRlbUNvbnRyb2xsZXIuY3JlYXRlRnJvbUNDQigpO1xuICAgICAgICBub2RlLmNvbnRyb2xsZXIuaW5pdFdpdGgodGl0bGUsIHNwcml0ZU5hbWUsIHJld2FyZE5hbWUsIGNsb3NlQ2FsbGJhY2spO1xuICAgICAgICBub2RlLmNvbnRyb2xsZXIucG9wdXAoKTtcbiAgICB9LFxuXG4gICAgcG9wdXBXYXRjaEFkc0dldERpYW1vbmRzOiBmdW5jdGlvbiAocmV3YXJkTmFtZSwgY2xvc2VDYWxsYmFjaykge1xuICAgICAgICB2YXIgbm9kZSA9IFdhdGNoQWRzR2V0RGlhbW9uZHNDb250cm9sbGVyLmNyZWF0ZUZyb21DQ0IoKTtcbiAgICAgICAgbm9kZS5jb250cm9sbGVyLmluaXRXaXRoKHJld2FyZE5hbWUsIGNsb3NlQ2FsbGJhY2spO1xuICAgICAgICBub2RlLmNvbnRyb2xsZXIucG9wdXAoKTtcbiAgICB9LFxuXG4gICAgcG9wdXBHZXQzU3RhcjogZnVuY3Rpb24gKHJld2FyZE5hbWUsIGNsb3NlQ2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG5vZGUgPSBXYXRjaEFkc0dldDNTdGFyQ29udHJvbGxlci5jcmVhdGVGcm9tQ0NCKCk7XG4gICAgICAgIG5vZGUuY29udHJvbGxlci5pbml0V2l0aChyZXdhcmROYW1lLCBjbG9zZUNhbGxiYWNrKTtcbiAgICAgICAgbm9kZS5jb250cm9sbGVyLnBvcHVwKCk7XG4gICAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBQb3B1cE1hbjsiLCJ2YXIgRmlsZUNhY2hlU3R1YiA9IHJlcXVpcmUoXCIuLi8uLi9jb21tb24vdXRpbC9GaWxlQ2FjaGVTdHViXCIpO1xuXG52YXIgUmVzb3VyY2VzTWFuID0gY2MuQ2xhc3MuZXh0ZW5kKHtcblxuICAgIGZpbGVDYWNoZVN0dWI6IG51bGwsXG5cbiAgICBjdG9yOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZmlsZUNhY2hlU3R1YiA9IG5ldyBGaWxlQ2FjaGVTdHViKCk7XG4gICAgfSxcblxuICAgIHByZWxvYWQ6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICAvL2NjLmxvZyhcInByZWxvYWQgMTExXCIpO1xuICAgICAgICB2YXIgcmVzdWx0cyA9IGdhbWUudXRpbHMubG9hZEpzb24oXCJyZXMvcmVzb3VyY2VfbGlzdC9yZXNvdXJjZV9saXN0Lmpzb25cIik7XG4gICAgICAgIHZhciBhdWRpb3MgPSBnYW1lLnV0aWxzLmxvYWRKc29uKFwicmVzL3Jlc291cmNlX2xpc3QvYXVkaW9fbGlzdC5qc29uXCIpO1xuICAgICAgICB2YXIgZmlsZUNhY2hlU3R1YiA9IHRoaXMuZmlsZUNhY2hlU3R1YjtcblxuICAgICAgICB2YXIgcGljTGlzdCA9IFtdO1xuICAgICAgICB2YXIgcGxpc3RMaXN0ID0gW107XG4gICAgICAgIHZhciBjYWNoZUxpc3QgPSBbXTtcbiAgICAgICAgcmVzdWx0cy5mb3JFYWNoKGZ1bmN0aW9uIChmaWxlTmFtZSkge1xuICAgICAgICAgICAgdmFyIGV4dE5hbWUgPSBjYy5wYXRoLmV4dG5hbWUoZmlsZU5hbWUpO1xuICAgICAgICAgICAgaWYgKGV4dE5hbWUgPT09IFwiLnBuZ1wiIHx8IGV4dE5hbWUgPT09IFwiLmpwZ1wiKSB7XG4gICAgICAgICAgICAgICAgcGljTGlzdC5wdXNoKGZpbGVOYW1lKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZXh0TmFtZSA9PT0gXCIucGxpc3RcIikge1xuICAgICAgICAgICAgICAgIHBsaXN0TGlzdC5wdXNoKGZpbGVOYW1lKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZXh0TmFtZSA9PT0gXCIuY2NiaVwiIHx8IGV4dE5hbWUgPT09IFwiLmpzb25cIiB8fCBleHROYW1lID09PSBcIi5hdGxhc1wiIHx8IGV4dE5hbWUgPT09IFwiLm9nZ1wiKSB7XG4gICAgICAgICAgICAgICAgY2FjaGVMaXN0LnB1c2goZmlsZU5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgbG9hZFBpY0Z1bmNzID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGljTGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgLy9jYy5sb2coXCJwcmVsb2FkIDIyMlwiKTtcbiAgICAgICAgICAgIHZhciBsb2FkUGljRnVuYyA9IGZ1bmN0aW9uIChmaWxlTmFtZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGNjLnRleHR1cmVDYWNoZS5hZGRJbWFnZShmaWxlTmFtZSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxvYWRQaWNGdW5jcy5wdXNoKGxvYWRQaWNGdW5jKHBpY0xpc3RbaV0pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBsb2FkTGlzdEZ1YyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vY2MubG9nKFwicHJlbG9hZCAzMzNcIik7XG4gICAgICAgICAgICBwbGlzdExpc3QuZm9yRWFjaChmdW5jdGlvbiAoZmlsZU5hbWUpIHtcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBmaWxlTmFtZS5pbmRleE9mKFwiLlwiKTtcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGxpc3ROYW1lID0gZmlsZU5hbWUuc3Vic3RyKDAsIGluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgY2Muc3ByaXRlRnJhbWVDYWNoZS5hZGRTcHJpdGVGcmFtZXMoZ2FtZS51dGlscy5zcHJpbnRmKFwiJXMucGxpc3RcIiwgcGxpc3ROYW1lKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWUudXRpbHMuc3ByaW50ZihcIiVzLnBuZ1wiLCBwbGlzdE5hbWUpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgY2FjaGVGdW5jID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy9jYy5sb2coXCJwcmVsb2FkIDQ0NFwiKTtcbiAgICAgICAgICAgIGNhY2hlTGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChmaWxlTmFtZSkge1xuICAgICAgICAgICAgICAgIGZpbGVDYWNoZVN0dWIuY2FjaGVGaWxlKGZpbGVOYW1lKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBwcmVsb2FkQXVkaW8gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvL2NjLmxvZyhcInByZWxvYWQgNTU1XCIpO1xuICAgICAgICAgICAgYXVkaW9zLmZvckVhY2goZnVuY3Rpb24gKGZpbGVOYW1lKSB7XG4gICAgICAgICAgICAgICAgZ2FtZS5hdWRpb1BsYXllci5wcmVsb2FkRWZmZWN0KGZpbGVOYW1lKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBmdW5jTGlzdCA9IGxvYWRQaWNGdW5jcy5jb25jYXQoW2xvYWRMaXN0RnVjLCBjYWNoZUZ1bmMsIHByZWxvYWRBdWRpb10pO1xuXG4gICAgICAgIGdhbWUudXRpbHMubG9hZEl0ZXJhdG9yKGZ1bmNMaXN0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59KTtcblxuUmVzb3VyY2VzTWFuLl9pbnN0YW5jZSA9IG51bGw7XG5SZXNvdXJjZXNNYW4uX2ZpcnN0VXNlSW5zdGFuY2UgPSB0cnVlO1xuXG4vKipcbiAqXG4gKiBAcmV0dXJucyB7UmVzb3VyY2VzTWFufVxuICovXG5SZXNvdXJjZXNNYW4uZ2V0SW5zdGFuY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKFJlc291cmNlc01hbi5fZmlyc3RVc2VJbnN0YW5jZSkge1xuICAgICAgICBSZXNvdXJjZXNNYW4uX2ZpcnN0VXNlSW5zdGFuY2UgPSBmYWxzZTtcbiAgICAgICAgUmVzb3VyY2VzTWFuLl9pbnN0YW5jZSA9IG5ldyBSZXNvdXJjZXNNYW4oKTtcbiAgICB9XG4gICAgcmV0dXJuIFJlc291cmNlc01hbi5faW5zdGFuY2U7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlc291cmNlc01hbjsiLCIvKipcbiAqIENyZWF0ZWQgYnkgcWlubmluZyBvbiAyMDE4LzEvMS5cbiAqL1xuXG52YXIgU2NlbmVUeXBlID0gcmVxdWlyZShcIi4uL2VudW0vU2NlbmVUeXBlXCIpO1xudmFyIE1lbnVTY2VuZSA9IHJlcXVpcmUoXCIuLi9zY2VuZS9NZW51U2NlbmVcIik7XG52YXIgTGV2ZWxTY2VuZSA9IHJlcXVpcmUoXCIuLi9zY2VuZS9MZXZlbFNjZW5lXCIpO1xudmFyIFBhY2thZ2VTY2VuZSA9IHJlcXVpcmUoXCIuLi9zY2VuZS9QYWNrYWdlU2NlbmVcIik7XG52YXIgR2FtZVNjZW5lID0gcmVxdWlyZShcIi4uL3NjZW5lL0dhbWVTY2VuZVwiKTtcbnZhciBHYW1lQnJpZGdlID0gcmVxdWlyZShcIi4uLy4uL2NvbW1vbi9icmlkZ2UvR2FtZUJyaWRnZVwiKTtcblxudmFyIFNjZW5lTWFuID0gY2MuQ2xhc3MuZXh0ZW5kKHtcblxuICAgIHNjZW5lTWFwOiBudWxsLFxuXG4gICAgbGFzdFNjZW5lOiBudWxsLFxuICAgIGN1clNjZW5lOiBudWxsLFxuXG4gICAgY3RvcjogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnNjZW5lTWFwID0ge307XG4gICAgICAgIHRoaXMucmVnaXN0ZXIoKTtcbiAgICAgICAgdGhpcy5sYXN0U2NlbmUgPSBTY2VuZVR5cGUuTk9ORTtcbiAgICAgICAgdGhpcy5jdXJTY2VuZSA9IFNjZW5lVHlwZS5NRU5VO1xuICAgIH0sXG5cbiAgICBzZXRDdXJTY2VuZTogZnVuY3Rpb24gKHNjZW5lKSB7XG4gICAgICAgIHRoaXMuY3VyU2NlbmUgPSBzY2VuZTtcbiAgICB9LFxuXG4gICAgcmVnaXN0ZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5zY2VuZU1hcFtTY2VuZVR5cGUuTUVOVV0gPSBHYW1lQnJpZGdlLmdldE1lbnVTY2VuZTtcbiAgICAgICAgdGhpcy5zY2VuZU1hcFtTY2VuZVR5cGUuUEFDS0FHRV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFBhY2thZ2VTY2VuZSgpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnNjZW5lTWFwW1NjZW5lVHlwZS5MRVZFTF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IExldmVsU2NlbmUoKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zY2VuZU1hcFtTY2VuZVR5cGUuR0FNRV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEdhbWVTY2VuZSgpO1xuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBzd2l0Y2hTY2VuZTogZnVuY3Rpb24gKHNjZW5lVHlwZSkge1xuICAgICAgICB0aGlzLmxhc3RTY2VuZSA9IHRoaXMuY3VyU2NlbmU7XG4gICAgICAgIHRoaXMuY3VyU2NlbmUgPSBzY2VuZVR5cGU7XG4gICAgICAgIHZhciBzY2VuZSA9IHRoaXMuc2NlbmVNYXBbdGhpcy5jdXJTY2VuZV07XG4gICAgICAgIGlmIChzY2VuZSkge1xuICAgICAgICAgICAgY2MuZGlyZWN0b3IucnVuU2NlbmUoc2NlbmUoKSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgc3dpdGNoTGFzdFNjZW5lOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuc3dpdGNoU2NlbmUodGhpcy5sYXN0U2NlbmUpO1xuICAgIH1cbn0pO1xuXG5TY2VuZU1hbi5faW5zdGFuY2UgPSBudWxsO1xuU2NlbmVNYW4uX2ZpcnN0VXNlSW5zdGFuY2UgPSB0cnVlO1xuXG4vKipcbiAqXG4gKiBAcmV0dXJucyB7U2NlbmVNYW59XG4gKi9cblNjZW5lTWFuLmdldEluc3RhbmNlID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChTY2VuZU1hbi5fZmlyc3RVc2VJbnN0YW5jZSkge1xuICAgICAgICBTY2VuZU1hbi5fZmlyc3RVc2VJbnN0YW5jZSA9IGZhbHNlO1xuICAgICAgICBTY2VuZU1hbi5faW5zdGFuY2UgPSBuZXcgU2NlbmVNYW4oKTtcbiAgICB9XG4gICAgcmV0dXJuIFNjZW5lTWFuLl9pbnN0YW5jZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU2NlbmVNYW47IiwiLyoqXG4gKiBDcmVhdGVkIGJ5IHFpbm5pbmcgb24gMjAxNy8xLzIzLlxuICovXG5cbnZhciBQYXltZW50SW5mbyA9IHJlcXVpcmUoXCIuLi8uLi9jb21tb24vZW50aXR5L1BheW1lbnRJbmZvXCIpO1xudmFyIFBheW1lbnRDb2RlID0gcmVxdWlyZShcIi4uLy4uL2NvbW1vbi9lbnVtL1BheW1lbnRDb2RlXCIpO1xudmFyIFByb2R1Y3RJbmZvID0gcmVxdWlyZShcIi4uLy4uL2NvbW1vbi9lbnRpdHkvUHJvZHVjdEluZm9cIik7XG52YXIgU3RvcmVUeXBlID0gcmVxdWlyZShcIi4uL2VudW0vU3RvcmVUeXBlXCIpO1xudmFyIENvbmZpZ01hbiA9IHJlcXVpcmUoXCIuLi9jb25maWcvQ29uZmlnTWFuXCIpO1xudmFyIEJvb3N0VHlwZSA9IHJlcXVpcmUoXCIuLi9lbnVtL0Jvb3N0VHlwZVwiKTtcbnZhciBFdmVudHNOYW1lID0gcmVxdWlyZShcIi4uL2V2ZW50cy9FdmVudHNOYW1lXCIpO1xudmFyIFNraW5UeXBlID0gcmVxdWlyZShcIi4uL2VudW0vU2tpblR5cGVcIik7XG5cbnZhciBTdG9yZUhlbHBlciA9IGNjLkNsYXNzLmV4dGVuZCh7XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7QXJyYXkuPFByb2R1Y3RJbmZvPn1cbiAgICAgKi9cbiAgICBwcm9kdWN0TGlzdDogbnVsbCxcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7QXJyYXkuPFN0b3JlQ29uZmlnPn1cbiAgICAgKi9cbiAgICBzdG9yZUxpc3Q6IG51bGwsXG5cbiAgICBpbml0ZWQ6IGZhbHNlLFxuXG4gICAgX3Jld2FyZENCOiBudWxsLFxuXG4gICAgY3RvcjogZnVuY3Rpb24gKCkge1xuICAgICAgICBnYW1lLnN0b3JlTWFuYWdlci5zZXRQYXltZW50RGVsZWdhdGUodGhpcyk7XG4gICAgICAgIHRoaXMuc3RvcmVMaXN0ID0gQ29uZmlnTWFuLmdldEluc3RhbmNlKCkuZ2V0U3RvcmVMaXN0KCk7XG5cbiAgICAgICAgZ2FtZS5hZHNNYW5hZ2VyLnNldEFkTGlzdGVuZXIodGhpcyk7XG4gICAgfSxcblxuICAgIGluaXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuaW5pdGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pbml0ZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLnJlcXVlc3RQcm9kdWN0cygpO1xuICAgICAgICB0aGlzLmdldFVudmVyaWZpZWRSZWNlaXB0TGlzdCgpO1xuICAgIH0sXG5cbiAgICBjbGVhcjogZnVuY3Rpb24gKCkge1xuICAgICAgICBnYW1lLmFkc01hbmFnZXIuc2V0QWRMaXN0ZW5lcihudWxsKTtcbiAgICB9LFxuXG4gICAgb25SZXdhcmRlZFZpZGVvRmluaXNoZWQ6IGZ1bmN0aW9uIChpc1Jld2FyZGVkKSB7XG4gICAgICAgIGNjLmxvZyhcIm9uUmV3YXJkZWRWaWRlb0ZpbmlzaGVkOlwiICsgaXNSZXdhcmRlZCk7XG4gICAgICAgIHRoaXMuX2lzUmV3YXJkZWQgPSBpc1Jld2FyZGVkO1xuICAgICAgICBpZiAoaXNSZXdhcmRlZCAmJiBjYy5zeXMub3MgIT09IGNjLnN5cy5PU19BTkRST0lEKSB7XG4gICAgICAgICAgICB0aGlzLm9uUmV3YXJkZWRWaWRlb1Jld2FyZCgpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIG9uU2hvd1ZpZGVvQWRCZWdpbjogZnVuY3Rpb24gKCkge1xuICAgICAgICBjYy5sb2coXCJHYW1lTm9kZSBvblNob3dWaWRlb0FkQmVnaW5cIik7XG4gICAgICAgIHRoaXMuX2lzUmV3YXJkZWQgPSBmYWxzZTtcbiAgICB9LFxuXG4gICAgb25TaG93VmlkZW9BZEVuZDogZnVuY3Rpb24gKCkge1xuICAgICAgICBjYy5sb2coXCJHYW1lTm9kZSBvblNob3dWaWRlb0FkRW5kXCIpO1xuICAgICAgICB2YXIgdGltZSA9IDEwMDtcbiAgICAgICAgaWYgKGNjLnN5cy5vcyA9PT0gY2Muc3lzLk9TX0FORFJPSUQpIHtcbiAgICAgICAgICAgIHRpbWUgPSAxMDAwO1xuICAgICAgICB9XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2lzUmV3YXJkZWQgJiYgY2Muc3lzLm9zID09PSBjYy5zeXMuT1NfQU5EUk9JRCkge1xuICAgICAgICAgICAgICAgIHRoaXMub25SZXdhcmRlZFZpZGVvUmV3YXJkKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXRoaXMuX2lzUmV3YXJkZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fcmV3YXJkQ0IpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmV3YXJkQ0IoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZXdhcmRDQiA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LmJpbmQodGhpcyksIHRpbWUpO1xuICAgIH0sXG5cbiAgICBvblJld2FyZGVkVmlkZW9SZXdhcmQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZ2FtZS5hbmFseXNlTWFuYWdlci50cmFja0V2ZW50KFwiV2F0Y2hSVlNvdXJjZVwiLCB7bmFtZTogdGhpcy5fYWROYW1lfSk7XG4gICAgICAgIGlmICh0aGlzLl9yZXdhcmRDQikge1xuICAgICAgICAgICAgdGhpcy5fcmV3YXJkQ0IodHJ1ZSk7XG4gICAgICAgICAgICB0aGlzLl9yZXdhcmRDQiA9IG51bGw7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGdhbWUucGxheWVyTWFuLmdldFJld2FyZEFkUGxhY2VDb3VudFBlckRheSgpID49IGdhbWUuY29uZmlnLnJld2FyZEFkTWF4Q291bnRQZXJEYXkpIHtcbiAgICAgICAgICAgIGNjLmxvZyhcIlN0b3JlSGVscGVyIG9uUmV3YXJkZWRWaWRlb1Jld2FyZCBoYXMgcmVhY2hlZCBtYXggY291bnQ6XCIgKyBnYW1lLnBsYXllck1hbi5nZXRSZXdhcmRBZFBsYWNlQ291bnRQZXJEYXkoKSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG5hbWUgPSBcIlwiO1xuICAgICAgICBpZiAodGhpcy5fYWRQYXJhbTEpIHtcbiAgICAgICAgICAgIGdhbWUuYW5hbHlzZU1hbmFnZXIudHJhY2tFdmVudCh0aGlzLl9hZFBhcmFtMSk7XG4gICAgICAgICAgICBuYW1lID0gdGhpcy5fYWRQYXJhbTE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuYW1lID0gXCJ1bmtub3duXCI7XG4gICAgICAgICAgICBjYy5lcnJvcihcIlN0b3JlSGVscGVyIGFkUGFyYW0gaXMgbnVsbDpcIiArIHRoaXMuX2FkUGFyYW0xKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9hZFBhcmFtMSA9IG51bGw7XG4gICAgICAgIGdhbWUucGxheWVyTWFuLmFkZFJld2FyZEFkQ291bnRQZXJEYXkoKTtcbiAgICAgICAgdmFyIGZyZWVFbnRpdHkgPSB0aGlzLmdldFN0b3JlRW50aXR5QnlUeXBlKFN0b3JlVHlwZS5GUkVFKTtcbiAgICAgICAgZ2FtZS5wb3B1cE1hbi5wb3B1cFJld2FyZE5vdGljZURsZyhnYW1lLmxvY2FsLmdldFZhbHVlKFwicmV3YXJkX3ZpZGVvX2RpYW1vbmRzXCIpLFxuICAgICAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGdhbWUucGxheWVyTWFuLmFkZERpYW1vbmRzKGZyZWVFbnRpdHkuY291bnQsIFwicmV3YXJkX3ZpZGVvX1wiICsgbmFtZSk7XG4gICAgICAgICAgICB9LCB0aGlzLmdldEJvb3N0SW1hZ2UoQm9vc3RUeXBlLkRJQU1PTkQpLCBmcmVlRW50aXR5LmNvdW50KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHBpZFxuICAgICAqIEByZXR1cm5zIHtTdG9yZUNvbmZpZyB8IG51bGx9XG4gICAgICovXG4gICAgZ2V0U3RvcmVFbnRpdHk6IGZ1bmN0aW9uIChwaWQpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnN0b3JlTGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuc3RvcmVMaXN0W2ldLnBpZCA9PT0gcGlkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RvcmVMaXN0W2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0sXG5cbiAgICBnZXRTdG9yZUVudGl0eUJ5VHlwZTogZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnN0b3JlTGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuc3RvcmVMaXN0W2ldLnR5cGUgPT09IHR5cGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zdG9yZUxpc3RbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcblxuICAgIGdldEJvb3N0SW1hZ2U6IGZ1bmN0aW9uIChib29zdFR5cGUpIHtcbiAgICAgICAgc3dpdGNoIChib29zdFR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgQm9vc3RUeXBlLlNQTElUOlxuICAgICAgICAgICAgICAgIHJldHVybiBcInN0b3JlXzNfbXVsdGlwbGUucG5nXCI7XG4gICAgICAgICAgICBjYXNlIEJvb3N0VHlwZS5USFJFRV9CQUxMOlxuICAgICAgICAgICAgICAgIHJldHVybiBcInN0b3JlXzNfbmV3LnBuZ1wiO1xuICAgICAgICAgICAgY2FzZSBCb29zdFR5cGUuRElBTU9ORDpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJpY29uX2RpYW1vbmRfMS5wbmdcIjtcbiAgICAgICAgICAgIGNhc2UgQm9vc3RUeXBlLkFJTV9JVEVNOlxuICAgICAgICAgICAgICAgIHJldHVybiBcInN0b3JlX2FpbS5wbmdcIjtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBfZ2V0TnVtRnJvbVN0cmluZzogZnVuY3Rpb24gKHRleHQpIHtcbiAgICAgICAgcmV0dXJuIHRleHQucmVwbGFjZSgvW14wLTkuXS9pZywgXCJcIik7XG4gICAgfSxcblxuICAgIHVwZGF0ZVByaWNlOiBmdW5jdGlvbiAocHJvZHVjdCkge1xuICAgICAgICB2YXIgc3RvcmVQcm9kdWN0ID0gdGhpcy5nZXRTdG9yZUVudGl0eShwcm9kdWN0LnByb2R1Y3RJZCk7XG4gICAgICAgIGlmIChzdG9yZVByb2R1Y3QpIHtcbiAgICAgICAgICAgIHN0b3JlUHJvZHVjdC5wcmljZSA9IHByb2R1Y3QucHJpY2U7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmIChzdG9yZVByb2R1Y3Qub3JpZ2luYWxfcHJpY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByaWNlU3RyID0gdGhpcy5fZ2V0TnVtRnJvbVN0cmluZyhwcm9kdWN0LnByaWNlKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByaWNlTnVtID0gTnVtYmVyKHByaWNlU3RyKTtcbiAgICAgICAgICAgICAgICAgICAgc3RvcmVQcm9kdWN0Lm9yaWdpbmFsX3ByaWNlID0gcHJvZHVjdC5wcmljZS5yZXBsYWNlKHByaWNlU3RyLFxuICAgICAgICAgICAgICAgICAgICAgICAgKHByaWNlTnVtICogKHN0b3JlUHJvZHVjdC5kaXNjb3VudF9tdWx0aSArIDEpKS50b0ZpeGVkKDIpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICAgICAgICAgIGNjLmVycm9yKFwidXBkYXRlIHByaWNlOlwiICsgZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIGNoZWNrQW5kU2hvd1Jld2FyZFZpZGVvOiBmdW5jdGlvbiAobmFtZSwgY2IsIHBhcmFtMSkge1xuICAgICAgICB0aGlzLl9hZFBhcmFtMSA9IHBhcmFtMTtcbiAgICAgICAgdGhpcy5fYWROYW1lID0gbmFtZTtcbiAgICAgICAgaWYgKGdhbWUuYWRzTWFuYWdlci5pc1Jld2FyZFZpZGVvUmVhZHkoKSkge1xuICAgICAgICAgICAgdGhpcy5fcmV3YXJkQ0IgPSBjYjtcbiAgICAgICAgICAgIGdhbWUuYWRzTWFuYWdlci5zaG93UmV3YXJkVmlkZW9BZChuYW1lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNjLmxvZyhcInJld2FyZCB2aWRlbyBub3QgcmVhZHlcIik7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtTdG9yZUNvbmZpZ30gc3RvcmVFbnRpdHlcbiAgICAgKi9cbiAgICBidXlQcm9kdWN0OiBmdW5jdGlvbiAoc3RvcmVFbnRpdHkpIHtcbiAgICAgICAgc3dpdGNoIChzdG9yZUVudGl0eS50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIFN0b3JlVHlwZS5ORVdfMzpcbiAgICAgICAgICAgIGNhc2UgU3RvcmVUeXBlLlNQTElUOlxuICAgICAgICAgICAgY2FzZSBTdG9yZVR5cGUuRklSU1RfUFVSQ0hBU0U6XG4gICAgICAgICAgICAgICAgZ2FtZS5zdG9yZU1hbmFnZXIucGF5Rm9yUHJvZHVjdChzdG9yZUVudGl0eS5waWQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTdG9yZVR5cGUuRElBTU9ORDpcbiAgICAgICAgICAgICAgICAvL2dhbWUuYW5hbHlzZU1hbmFnZXIudHJhY2tFdmVudChcIlB1cmNoYXNlRGlhbW9uZHNcIiwge1wicGlkXCI6IHN0b3JlRW50aXR5LnBpZH0pO1xuICAgICAgICAgICAgICAgIGdhbWUuc3RvcmVNYW5hZ2VyLnBheUZvclByb2R1Y3Qoc3RvcmVFbnRpdHkucGlkKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgU3RvcmVUeXBlLkZSRUU6XG4gICAgICAgICAgICAgICAgdGhpcy5jaGVja0FuZFNob3dSZXdhcmRWaWRlbyhnYW1lLnV0aWxzLmlzSU9TKCkgPyBcImRhb2p1MDFcIiA6IFwiamlsaTAzXCIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTdG9yZVR5cGUuUkVNT1ZFX0FEUzpcbiAgICAgICAgICAgICAgICB0aGlzLmJ1eVJlbW92ZUFkcyhzdG9yZUVudGl0eS5waWQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTdG9yZVR5cGUuUkVTVE9SRTpcbiAgICAgICAgICAgICAgICBnYW1lLnN0b3JlTWFuYWdlci5yZXN0b3JlQ29tcGxldGVkVHJhbnNhY3Rpb25zKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFN0b3JlVHlwZS5ORVdfQU5EX1NQTElUOlxuICAgICAgICAgICAgICAgIHRoaXMuYnV5Qm9vc3RzKHN0b3JlRW50aXR5KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgU3RvcmVUeXBlLkFJTV9JVEVNOlxuICAgICAgICAgICAgICAgIGdhbWUuc3RvcmVNYW5hZ2VyLnBheUZvclByb2R1Y3Qoc3RvcmVFbnRpdHkucGlkKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBidXlSZW1vdmVBZHM6IGZ1bmN0aW9uIChwaWQpIHtcbiAgICAgICAgaWYgKGdhbWUucGxheWVyTWFuLnBsYXllci5yZW1vdmVkQWRzKSB7XG4gICAgICAgICAgICBnYW1lLnBvcHVwTWFuLnBvcHVwQ29tbW9uRGxnKGdhbWUubG9jYWwuZ2V0VmFsdWUoXCJyZW1vdmVkX2FsbF9hZHNfdGlwc1wiKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoY2Muc3lzLm9zID09PSBjYy5zeXMuT1NfQU5EUk9JRCkge1xuICAgICAgICAgICAgICAgIGdhbWUucG9wdXBNYW4ucG9wdXBZZXNOb0NvbW1vbkRsZyhnYW1lLmxvY2FsLmdldFZhbHVlKFwicHVyY2hhc2Vfbm9fYWRfdGlwc1wiKSxcbiAgICAgICAgICAgICAgICAgICAgZ2FtZS5sb2NhbC5nZXRWYWx1ZShcImJ1eV90aXRsZVwiKSwgZ2FtZS5sb2NhbC5nZXRWYWx1ZShcImNhbmNlbF90aXRsZVwiKSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZS5zdG9yZU1hbmFnZXIucGF5Rm9yUHJvZHVjdChwaWQpO1xuICAgICAgICAgICAgICAgICAgICB9LCBudWxsLCBmYWxzZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGdhbWUucG9wdXBNYW4ucG9wdXBZZXNOb0NvbW1vbkRsZyhnYW1lLmxvY2FsLmdldFZhbHVlKFwicHVyY2hhc2Vfbm9fYWRfdGlwc1wiKSxcbiAgICAgICAgICAgICAgICAgICAgZ2FtZS5sb2NhbC5nZXRWYWx1ZShcImJ1eV90aXRsZVwiKSwgZ2FtZS5sb2NhbC5nZXRWYWx1ZShcInJlc3RvcmVfdGl0bGVcIiksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2FtZS5zdG9yZU1hbmFnZXIucGF5Rm9yUHJvZHVjdChwaWQpO1xuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2FtZS5zdG9yZU1hbmFnZXIucmVzdG9yZUNvbXBsZXRlZFRyYW5zYWN0aW9ucygpO1xuICAgICAgICAgICAgICAgIH0sIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIGJ1eVNraW46IGZ1bmN0aW9uIChza2luQ2ZnLCByZXdhcmROYW1lLCBjYikge1xuICAgICAgICBpZiAoIWdhbWUucGxheWVyTWFuLmhhc1NraW4oc2tpbkNmZy5pZCkpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoc2tpbkNmZy50eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBTa2luVHlwZS5EaWFtb25kczpcbiAgICAgICAgICAgICAgICAgICAgaWYgKGdhbWUucGxheWVyTWFuLmdldERpYW1vbmRzKCkgPj0gc2tpbkNmZy5jb3VudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZS5wbGF5ZXJNYW4uc2V0Q2xhaW1lZFNraW4oc2tpbkNmZy5pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBnYW1lLnBsYXllck1hbi5zZXRDdXJyZW50U2tpbklkKHNraW5DZmcuaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZS5wbGF5ZXJNYW4uYWRkRGlhbW9uZHMoLXNraW5DZmcuY291bnQsIFwicHVyY2hhc2Vfc2tpblwiLCBcInNraW5cIiwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBnYW1lLmV2ZW50RGlzcGF0Y2hlci5kaXNwYXRjaEV2ZW50KEV2ZW50c05hbWUuVVBEQVRFX1NLSU4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZS5hbmFseXNlTWFuYWdlci50cmFja0V2ZW50KFwiRGlhbW9uZFB1cmNoYXNlU2tpblwiLCB7XCJza2luSWRcIjogc2tpbkNmZy5pZH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2IgJiYgY2IodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBvcHVwTGFja0RpYW1vbmRzKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBTa2luVHlwZS5XYXRjaEFkczpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGVja0FuZFNob3dSZXdhcmRWaWRlbyhyZXdhcmROYW1lLCBmdW5jdGlvbiAocmV3YXJkZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXdhcmRlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhbWUucGxheWVyTWFuLmFkZFNraW5BZHNDb3VudChza2luQ2ZnLmlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ2FtZS5wbGF5ZXJNYW4uZ2V0U2tpbkFkc0NvdW50KHNraW5DZmcuaWQpID49IHNraW5DZmcuY291bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZS5wbGF5ZXJNYW4uc2V0Q2xhaW1lZFNraW4oc2tpbkNmZy5pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhbWUucGxheWVyTWFuLnNldEN1cnJlbnRTa2luSWQoc2tpbkNmZy5pZCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZS5wb3B1cE1hbi5wb3B1cFJld2FyZE5vdGljZURsZyhnYW1lLmxvY2FsLmdldFZhbHVlKFwic2tpbl9jbGFpbWVkXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgc2tpbkNmZy5pbWFnZSArIFwiX2wucG5nXCIsIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYiAmJiBjYih0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZS5hbmFseXNlTWFuYWdlci50cmFja0V2ZW50KFwiUmV3YXJkVmlkZW9QdXJjaGFzZVNraW5cIiwge1wic2tpbklkXCI6IHNraW5DZmcuaWR9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYW1lLmV2ZW50RGlzcGF0Y2hlci5kaXNwYXRjaEV2ZW50KEV2ZW50c05hbWUuVVBEQVRFX1NLSU4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgY2MuZXJyb3IoXCJ1bmRlZmluZWQgc2tpbiB0eXBlOlwiICsgc2tpbkNmZy50eXBlKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgdXNlU2tpbjogZnVuY3Rpb24gKHNraW5DZmcpIHtcbiAgICAgICAgZ2FtZS5wbGF5ZXJNYW4uc2V0Q3VycmVudFNraW5JZChza2luQ2ZnLmlkKTtcbiAgICAgICAgZ2FtZS5ldmVudERpc3BhdGNoZXIuZGlzcGF0Y2hFdmVudChFdmVudHNOYW1lLlVQREFURV9TS0lOKTtcbiAgICB9LFxuXG4gICAgYnV5Qm9vc3RzOiBmdW5jdGlvbiAoc3RvcmVFbnRpdHkpIHtcbiAgICAgICAgaWYgKGdhbWUucGxheWVyTWFuLmdldERpYW1vbmRzKCkgPj0gc3RvcmVFbnRpdHkuY291bnQpIHtcbiAgICAgICAgICAgIHZhciBzcGxpdENvdW50ID0gc3RvcmVFbnRpdHkuZGF0YS5tdWx0aXBsZV8zO1xuICAgICAgICAgICAgdmFyIHRocmVlQmFsbENvdW50ID0gc3RvcmVFbnRpdHkuZGF0YS5uZXdfMztcbiAgICAgICAgICAgIHZhciBzcGxpdEltYWdlID0gdGhpcy5nZXRCb29zdEltYWdlKEJvb3N0VHlwZS5TUExJVCk7XG4gICAgICAgICAgICB2YXIgbmV3M0ltYWdlID0gdGhpcy5nZXRCb29zdEltYWdlKEJvb3N0VHlwZS5USFJFRV9CQUxMKTtcbiAgICAgICAgICAgIGdhbWUucGxheWVyTWFuLmFkZERpYW1vbmRzKC1zdG9yZUVudGl0eS5jb3VudCAvIDIsIFwiYnV5X2Jvb3N0c1wiLCBcImJvb3N0X3NwbGl0XCIsIHNwbGl0Q291bnQpO1xuICAgICAgICAgICAgZ2FtZS5wbGF5ZXJNYW4uYWRkRGlhbW9uZHMoLXN0b3JlRW50aXR5LmNvdW50IC8gMiwgXCJidXlfYm9vc3RzXCIsIFwiYm9vc3RfbmV3XzNcIiwgdGhyZWVCYWxsQ291bnQpO1xuICAgICAgICAgICAgZ2FtZS5hbmFseXNlTWFuYWdlci50cmFja0V2ZW50KFwiRGlhbW9uZFB1cmNoYXNlQm9vc3RzXCIsIHtcImRpYW1vbmRzXCI6IHN0b3JlRW50aXR5LmNvdW50fSk7XG4gICAgICAgICAgICBnYW1lLnBvcHVwTWFuLnBvcHVwUmV3YXJkRGxnKGdhbWUubG9jYWwuZ2V0VmFsdWUoXCJwdXJjaGFzZV9ib29zdF9zdWNjZXNzXCIpLFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2FtZS5wbGF5ZXJNYW4uYWRkQm9vc3QoQm9vc3RUeXBlLlNQTElULCBzcGxpdENvdW50KTtcbiAgICAgICAgICAgICAgICAgICAgZ2FtZS5wbGF5ZXJNYW4uYWRkQm9vc3QoQm9vc3RUeXBlLlRIUkVFX0JBTEwsIHRocmVlQmFsbENvdW50KTtcbiAgICAgICAgICAgICAgICB9LCBzcGxpdEltYWdlLCBzcGxpdENvdW50LCBuZXczSW1hZ2UsIHRocmVlQmFsbENvdW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucG9wdXBMYWNrRGlhbW9uZHMoKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBza2lwTGV2ZWw6IGZ1bmN0aW9uIChsZXZlbElkKSB7XG4gICAgICAgIGlmIChnYW1lLnBsYXllck1hbi5nZXREaWFtb25kcygpID49IGdhbWUuY29uZmlnLnNraXBEaWFtb25kcykge1xuICAgICAgICAgICAgZ2FtZS5wbGF5ZXJNYW4uYWRkRGlhbW9uZHMoLWdhbWUuY29uZmlnLnNraXBEaWFtb25kcywgXCJza2lwX2xldmVsXCIsIFwic2tpcF9sZXZlbFwiLCAxKTtcbiAgICAgICAgICAgIGdhbWUuYW5hbHlzZU1hbmFnZXIuY29uc3VtZUl0ZW0oXCJza2lwX2xldmVsXCIsIDEpO1xuICAgICAgICAgICAgZ2FtZS5hbmFseXNlTWFuYWdlci50cmFja0V2ZW50KFwiRGlhbW9uZFB1cmNoYXNlU2tpcExldmVsXCIsIHtcImxldmVsXCI6IGxldmVsSWR9KTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5wb3B1cExhY2tEaWFtb25kcygpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHJlbGl2ZUxldmVsOiBmdW5jdGlvbiAobGV2ZWxJZCkge1xuICAgICAgICBpZiAoZ2FtZS5wbGF5ZXJNYW4uZ2V0RGlhbW9uZHMoKSA+PSBnYW1lLmNvbmZpZy5yZWxpZmVEaWFtb25kcykge1xuICAgICAgICAgICAgZ2FtZS5wbGF5ZXJNYW4uYWRkRGlhbW9uZHMoLWdhbWUuY29uZmlnLnJlbGlmZURpYW1vbmRzLCBcInJldml2ZVwiLCBcInJldml2ZVwiLCAxKTtcbiAgICAgICAgICAgIGdhbWUuYW5hbHlzZU1hbmFnZXIuY29uc3VtZUl0ZW0oXCJyZXZpdmVcIiwgMSk7XG4gICAgICAgICAgICBnYW1lLmFuYWx5c2VNYW5hZ2VyLnRyYWNrRXZlbnQoXCJEaWFtb25kUHVyY2hhc2VSZWxpdmVMZXZlbFwiLCB7XCJsZXZlbFwiOiBsZXZlbElkfSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucG9wdXBMYWNrRGlhbW9uZHMoKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICB0cnlBaW1JdGVtOiBmdW5jdGlvbiAobGV2ZWxJZCwgY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5jaGVja0FuZFNob3dSZXdhcmRWaWRlbyhcInRyeV9haW1faXRlbVwiLCBmdW5jdGlvbiAocmV3YXJkZWQpIHtcbiAgICAgICAgICAgIGlmIChyZXdhcmRlZCkge1xuICAgICAgICAgICAgICAgIGdhbWUuYW5hbHlzZU1hbmFnZXIudHJhY2tFdmVudChcIlJld2FyZGVkVmlkZW9UcnlBaW1JdGVtXCIsIHtcImxldmVsXCI6IGxldmVsSWR9KTtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LmJpbmQodGhpcykpO1xuICAgIH0sXG5cbiAgICBvbk9wZW5Cb3g6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy9vcGVuIHRoZSB3aGVlbC5cbiAgICAgICAgdmFyIFdoZWVsVHlwZSA9IHJlcXVpcmUoXCIuLi9lbnVtL1doZWVsVHlwZVwiKTtcbiAgICAgICAgZ2FtZS5wb3B1cE1hbi5wb3B1cFdoZWVsRGxnKFdoZWVsVHlwZS5Cb3gpO1xuICAgIH0sXG5cbiAgICBwb3B1cExhY2tEaWFtb25kczogZnVuY3Rpb24gKCkge1xuICAgICAgICAvL2dhbWUucG9wdXBNYW4ucG9wdXBDb21tb25EbGcoXyhcImRpYW1vbmRfbm90X2Vub3VnaFwiKSk7XG4gICAgICAgIGlmICghZ2FtZS5nYW1lTWFuLmlzU3BlY2lhbE9mZmVyUHVyY2hhc2VkKCkpIHtcbiAgICAgICAgICAgIGdhbWUucG9wdXBNYW4ucG9wdXBTcGVpY2lhbE9mZmVyKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgU3RvcmVUeXBlID0gcmVxdWlyZShcIi4uL2VudW0vU3RvcmVUeXBlXCIpO1xuICAgICAgICAgICAgZ2FtZS5wb3B1cE1hbi5wb3B1cFN0b3JlRGxnKFN0b3JlVHlwZS5ESUFNT05EKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICByZXF1ZXN0UHJvZHVjdHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHByb2R1Y3RJZHMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnN0b3JlTGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdmFyIGVudGl0eSA9IHRoaXMuc3RvcmVMaXN0W2ldO1xuICAgICAgICAgICAgaWYgKGVudGl0eSAmJiBlbnRpdHkucGlkKSB7XG4gICAgICAgICAgICAgICAgcHJvZHVjdElkcy5wdXNoKGVudGl0eS5waWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNjLmxvZyhcInJlcXVlc3Rwcm9kdWN0czpcIiArIEpTT04uc3RyaW5naWZ5KHByb2R1Y3RJZHMpKTtcbiAgICAgICAgZ2FtZS5zdG9yZU1hbmFnZXIucmVxdWVzdFByb2R1Y3QocHJvZHVjdElkcyk7XG4gICAgfSxcblxuICAgIGdldFVudmVyaWZpZWRSZWNlaXB0TGlzdDogZnVuY3Rpb24gKCkge1xuICAgICAgICBnYW1lLnN0b3JlTWFuYWdlci5nZXRVbnZlcmlmaWVkUmVjZWlwdExpc3QoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtQYXltZW50Q29kZX0gZXJyb3JcbiAgICAgKiBAcGFyYW0ge1BheW1lbnRJbmZvfSBwYXltZW50SW5mb1xuICAgICAqL1xuICAgIG9uUGF5bWVudENvbXBsZXRlZDogZnVuY3Rpb24gKGVycm9yLCBwYXltZW50SW5mbykge1xuICAgICAgICB2YXIgcGF5bWVudFN1Y2Nlc3MgPSBmYWxzZTtcbiAgICAgICAgaWYgKGVycm9yID09PSBQYXltZW50Q29kZS5QQVlNRU5UX0NPREVfU1VDQ0VTUykge1xuICAgICAgICAgICAgdGhpcy5fb25QYXltZW50U3VjY2VzcyhwYXltZW50SW5mbywgdHJ1ZSk7XG4gICAgICAgICAgICBwYXltZW50U3VjY2VzcyA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnYW1lLnBvcHVwTWFuLnBvcHVwQ29tbW9uRGxnKGdhbWUubG9jYWwuZ2V0VmFsdWUoXCJwdXJjaGFzZV9mYWlsXCIpKTtcbiAgICAgICAgfVxuICAgICAgICBnYW1lLmV2ZW50RGlzcGF0Y2hlci5kaXNwYXRjaEV2ZW50KEV2ZW50c05hbWUuUFVSQ0hBU0VfRU5ELCBwYXltZW50U3VjY2Vzcyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7QXJyYXkuPFBheW1lbnRJbmZvPn0gcGF5bWVudEluZm9MaXN0XG4gICAgICovXG4gICAgb25HZXRVbnZlcmlmaWVkUmVjZWlwdExpc3Q6IGZ1bmN0aW9uIChwYXltZW50SW5mb0xpc3QpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXltZW50SW5mb0xpc3QubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHRoaXMuX29uUGF5bWVudFN1Y2Nlc3MocGF5bWVudEluZm9MaXN0W2ldLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogb24gZ2V0IHByb2R1Y3QgbGlzdC5cbiAgICAgKiBAcGFyYW0ge0FycmF5LjxQcm9kdWN0SW5mbz59IHByb2R1Y3RMaXN0XG4gICAgICovXG4gICAgb25HZXRQcm9kdWN0TGlzdDogZnVuY3Rpb24gKHByb2R1Y3RMaXN0KSB7XG4gICAgICAgIHRoaXMucHJvZHVjdExpc3QgPSBwcm9kdWN0TGlzdDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9kdWN0TGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdmFyIHByb2R1Y3QgPSBwcm9kdWN0TGlzdFtpXTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlUHJpY2UocHJvZHVjdCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtQYXltZW50SW5mb30gcGF5bWVudEluZm9cbiAgICAgKiBAcGFyYW0gaGFzTm90aWNlXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfb25QYXltZW50U3VjY2VzczogZnVuY3Rpb24gKHBheW1lbnRJbmZvLCBoYXNOb3RpY2UpIHtcbiAgICAgICAgLy8gdmFyIHN0b3JlRW50aXR5ID0gdGhpcy5nZXRTdG9yZUVudGl0eSgpXG4gICAgICAgIC8vIHZhciBwcm9kdWN0ID0gdGhpcy5fZ2V0UHJvZHVjdEJ5SWQocGF5bWVudEluZm8ucHJvZHVjdElkKTtcbiAgICAgICAgLy8gaWYgKHByb2R1Y3QpIHtcbiAgICAgICAgLy8gICAgIC8vIHZhciBwcmljZSA9IHRoaXMuX2dldE51bUZyb21TdHJpbmcocHJvZHVjdC5wcmljZSkgKiAxMDA7XG4gICAgICAgIC8vICAgICBnYW1lLmFuYWx5c2VNYW5hZ2VyLnRyYWNrUHVyY2hhc2VFdmVudChwcmljZSwgcHJvZHVjdC50aXRsZSwgcGF5bWVudEluZm8ucHJvZHVjdElkLFxuICAgICAgICAvLyAgICAgICAgIHBheW1lbnRJbmZvLnJlY2VpcHQpO1xuICAgICAgICAvLyB9XG4gICAgICAgIHZhciBzdG9yZUVudGl0eSA9IHRoaXMuZ2V0U3RvcmVFbnRpdHkocGF5bWVudEluZm8ucHJvZHVjdElkKTtcbiAgICAgICAgdmFyIHNwbGl0SW1hZ2UgPSB0aGlzLmdldEJvb3N0SW1hZ2UoQm9vc3RUeXBlLlNQTElUKTtcbiAgICAgICAgdmFyIG5ldzNJbWFnZSA9IHRoaXMuZ2V0Qm9vc3RJbWFnZShCb29zdFR5cGUuVEhSRUVfQkFMTCk7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgc3dpdGNoIChzdG9yZUVudGl0eS50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIFN0b3JlVHlwZS5SRU1PVkVfQURTOlxuICAgICAgICAgICAgICAgIGdhbWUucGxheWVyTWFuLnJlbW92ZWRBZHMoKTtcbiAgICAgICAgICAgICAgICBpZiAoaGFzTm90aWNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGdhbWUucG9wdXBNYW4ucG9wdXBDb21tb25EbGcoZ2FtZS5sb2NhbC5nZXRWYWx1ZShcInB1cmNoYXNlX25vX2FkX3N1Y2Nlc3NcIikpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoY2Muc3lzLm9zID09PSBjYy5zeXMuT1NfSU9TKSB7XG4gICAgICAgICAgICAgICAgICAgIGdhbWUuc3RvcmVNYW5hZ2VyLmNvbnN1bWUocGF5bWVudEluZm8ucHVyY2hhc2VJZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNlbGYuYWRkSWFwQ291bnQoc3RvcmVFbnRpdHkpO1xuICAgICAgICAgICAgICAgIGdhbWUuYW5hbHlzZU1hbmFnZXIudHJhY2tDaGFyZ2VSZXF1ZXN0KHBheW1lbnRJbmZvLnB1cmNoYXNlSWQsIHBheW1lbnRJbmZvLnByb2R1Y3RJZCwgc3RvcmVFbnRpdHkucHJpY2VVUywgXCJVU0RcIiwgMCwgXCJJQVBcIik7XG4gICAgICAgICAgICAgICAgZ2FtZS5hbmFseXNlTWFuYWdlci50cmFja0NoYXJnZVN1Y2Nlc3MocGF5bWVudEluZm8ucHVyY2hhc2VJZCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFN0b3JlVHlwZS5ORVdfMzpcbiAgICAgICAgICAgIGNhc2UgU3RvcmVUeXBlLlNQTElUOlxuICAgICAgICAgICAgICAgIGdhbWUucG9wdXBNYW4ucG9wdXBSZXdhcmREbGcoZ2FtZS5sb2NhbC5nZXRWYWx1ZShcInB1cmNoYXNlX2Jvb3N0X3N1Y2Nlc3NcIiksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2FtZS5wbGF5ZXJNYW4uYWRkQm9vc3Qoc3RvcmVFbnRpdHkudHlwZSwgc3RvcmVFbnRpdHkuY291bnQpO1xuICAgICAgICAgICAgICAgICAgICBnYW1lLnN0b3JlTWFuYWdlci5jb25zdW1lKHBheW1lbnRJbmZvLnB1cmNoYXNlSWQpO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmFkZElhcENvdW50KHN0b3JlRW50aXR5KTtcbiAgICAgICAgICAgICAgICB9LCBzdG9yZUVudGl0eS5pbWFnZSwgc3RvcmVFbnRpdHkuY291bnQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTdG9yZVR5cGUuRklSU1RfUFVSQ0hBU0U6XG4gICAgICAgICAgICAgICAgdmFyIGRpYW1vbmRDb3VudCA9IHN0b3JlRW50aXR5LmRhdGEuZGlhbW9uZHM7XG4gICAgICAgICAgICAgICAgZ2FtZS5wb3B1cE1hbi5wb3B1cFJld2FyZERsZyhnYW1lLmxvY2FsLmdldFZhbHVlKFwicHVyY2hhc2Vfc3VjY2Vzc1wiKSxcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZS5wbGF5ZXJNYW4uYWRkRGlhbW9uZHMoZGlhbW9uZENvdW50LCBcImZpcnN0X3B1cmNoYXNlXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWUuc3RvcmVNYW5hZ2VyLmNvbnN1bWUocGF5bWVudEluZm8ucHVyY2hhc2VJZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBnYW1lLnBsYXllck1hbi5zZXRTcGVjaWFsT2ZmZXJQdXJjaGFzZWQocGF5bWVudEluZm8ucHJvZHVjdElkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWUuYW5hbHlzZU1hbmFnZXIudHJhY2tFdmVudChcIlB1cmNoYXNlU3BlY2lhbE9mZmVyXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5hZGRJYXBDb3VudChzdG9yZUVudGl0eSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL3ZhciBzcGxpdENvdW50ID0gc3RvcmVFbnRpdHkuZGF0YS5tdWx0aXBsZV8zO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy92YXIgdGhyZWVCYWxsQ291bnQgPSBzdG9yZUVudGl0eS5kYXRhLm5ld18zO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9nYW1lLnBvcHVwTWFuLnBvcHVwUmV3YXJkRGxnKGdhbWUubG9jYWwuZ2V0VmFsdWUoXCJwdXJjaGFzZV9ib29zdF9zdWNjZXNzXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgIGdhbWUucGxheWVyTWFuLmFkZEJvb3N0KEJvb3N0VHlwZS5TUExJVCwgc3BsaXRDb3VudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgZ2FtZS5wbGF5ZXJNYW4uYWRkQm9vc3QoQm9vc3RUeXBlLlRIUkVFX0JBTEwsIHRocmVlQmFsbENvdW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgIH0sIHNwbGl0SW1hZ2UsIHNwbGl0Q291bnQsIG5ldzNJbWFnZSwgdGhyZWVCYWxsQ291bnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZS5hbmFseXNlTWFuYWdlci50cmFja0NoYXJnZVJlcXVlc3QocGF5bWVudEluZm8ucHVyY2hhc2VJZCwgcGF5bWVudEluZm8ucHJvZHVjdElkLCBzdG9yZUVudGl0eS5wcmljZVVTLCBcIlVTRFwiLCBkaWFtb25kQ291bnQsIFwiSUFQXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZS5hbmFseXNlTWFuYWdlci50cmFja0NoYXJnZVN1Y2Nlc3MocGF5bWVudEluZm8ucHVyY2hhc2VJZCk7XG4gICAgICAgICAgICAgICAgICAgIH0sIHRoaXMuZ2V0Qm9vc3RJbWFnZShCb29zdFR5cGUuRElBTU9ORCksIGRpYW1vbmRDb3VudCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFN0b3JlVHlwZS5ORVdfQU5EX1NQTElUOlxuICAgICAgICAgICAgICAgIHZhciBzcGxpdENvdW50ID0gc3RvcmVFbnRpdHkuZGF0YS5tdWx0aXBsZV8zO1xuICAgICAgICAgICAgICAgIHZhciB0aHJlZUJhbGxDb3VudCA9IHN0b3JlRW50aXR5LmRhdGEubmV3XzM7XG4gICAgICAgICAgICAgICAgZ2FtZS5wb3B1cE1hbi5wb3B1cFJld2FyZERsZyhnYW1lLmxvY2FsLmdldFZhbHVlKFwicHVyY2hhc2VfYm9vc3Rfc3VjY2Vzc1wiKSxcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZS5wbGF5ZXJNYW4uYWRkQm9vc3QoQm9vc3RUeXBlLlNQTElULCBzcGxpdENvdW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWUucGxheWVyTWFuLmFkZEJvb3N0KEJvb3N0VHlwZS5USFJFRV9CQUxMLCB0aHJlZUJhbGxDb3VudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBnYW1lLnN0b3JlTWFuYWdlci5jb25zdW1lKHBheW1lbnRJbmZvLnB1cmNoYXNlSWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5hZGRJYXBDb3VudChzdG9yZUVudGl0eSk7XG4gICAgICAgICAgICAgICAgICAgIH0sIHNwbGl0SW1hZ2UsIHNwbGl0Q291bnQsIG5ldzNJbWFnZSwgdGhyZWVCYWxsQ291bnQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTdG9yZVR5cGUuRElBTU9ORDpcbiAgICAgICAgICAgICAgICB2YXIgY291bnQgPSBzdG9yZUVudGl0eS5jb3VudDtcbiAgICAgICAgICAgICAgICBnYW1lLnBvcHVwTWFuLnBvcHVwUmV3YXJkRGxnKGdhbWUubG9jYWwuZ2V0VmFsdWUoXCJwdXJjaGFzZV9zdWNjZXNzXCIpLFxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnYW1lLnBsYXllck1hbi5hZGREaWFtb25kcyhjb3VudCwgXCJwdXJjaGFzZVwiLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBnYW1lLnN0b3JlTWFuYWdlci5jb25zdW1lKHBheW1lbnRJbmZvLnB1cmNoYXNlSWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5hZGRJYXBDb3VudChzdG9yZUVudGl0eSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBnYW1lLmFuYWx5c2VNYW5hZ2VyLnRyYWNrQ2hhcmdlUmVxdWVzdChwYXltZW50SW5mby5wdXJjaGFzZUlkLCBwYXltZW50SW5mby5wcm9kdWN0SWQsIHN0b3JlRW50aXR5LnByaWNlVVMsIFwiVVNEXCIsIGNvdW50LCBcIklBUFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWUuYW5hbHlzZU1hbmFnZXIudHJhY2tDaGFyZ2VTdWNjZXNzKHBheW1lbnRJbmZvLnB1cmNoYXNlSWQpO1xuICAgICAgICAgICAgICAgICAgICB9LCBzdG9yZUVudGl0eS5pbWFnZSwgY291bnQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTdG9yZVR5cGUuQUlNX0lURU06XG4gICAgICAgICAgICAgICAgZ2FtZS5wb3B1cE1hbi5wb3B1cFJld2FyZERsZyhnYW1lLmxvY2FsLmdldFZhbHVlKFwicHVyY2hhc2Vfc3VjY2Vzc1wiKSxcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZS5wbGF5ZXJNYW4ucHVyY2hhc2VkQWltSXRlbSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZS5zdG9yZU1hbmFnZXIuY29uc3VtZShwYXltZW50SW5mby5wdXJjaGFzZUlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWUuYW5hbHlzZU1hbmFnZXIudHJhY2tFdmVudChcIlB1cmNoYXNlQWltSXRlbVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuYWRkSWFwQ291bnQoc3RvcmVFbnRpdHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZS5hbmFseXNlTWFuYWdlci50cmFja0NoYXJnZVJlcXVlc3QocGF5bWVudEluZm8ucHVyY2hhc2VJZCwgcGF5bWVudEluZm8ucHJvZHVjdElkLCBzdG9yZUVudGl0eS5wcmljZVVTLCBcIlVTRFwiLCAwLCBcIklBUFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWUuYW5hbHlzZU1hbmFnZXIudHJhY2tDaGFyZ2VTdWNjZXNzKHBheW1lbnRJbmZvLnB1cmNoYXNlSWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZS5ldmVudERpc3BhdGNoZXIuZGlzcGF0Y2hFdmVudChFdmVudHNOYW1lLlVQREFURV9BSU1fSVRFTSk7XG4gICAgICAgICAgICAgICAgICAgIH0sIHRoaXMuZ2V0Qm9vc3RJbWFnZShCb29zdFR5cGUuQUlNX0lURU0pLCAxKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBhZGRJYXBDb3VudDogZnVuY3Rpb24gKHN0b3JlRW50aXR5KSB7XG4gICAgICAgIGdhbWUucGxheWVyTWFuLmFkZElhcENvdW50KCk7XG4gICAgICAgIHZhciBpYXBDb3VudCA9IGdhbWUucGxheWVyTWFuLnBsYXllci5pYXBDb3VudDtcbiAgICAgICAgaWYgKGlhcENvdW50ID09PSAxKSB7XG4gICAgICAgICAgICBnYW1lLmFuYWx5c2VNYW5hZ2VyLnRyYWNrRXZlbnQoXCJGaXJzdFB1cmNoYXNlXCIsIHtcInBpZFwiOiBzdG9yZUVudGl0eS5waWR9KTtcbiAgICAgICAgfSBlbHNlIGlmIChpYXBDb3VudCA9PT0gMikge1xuICAgICAgICAgICAgZ2FtZS5hbmFseXNlTWFuYWdlci50cmFja0V2ZW50KFwiU2Vjb25kUHVyY2hhc2VcIiwge1wicGlkXCI6IHN0b3JlRW50aXR5LnBpZH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpYXBDb3VudCA+PSAyKSB7XG4gICAgICAgICAgICBnYW1lLmFuYWx5c2VNYW5hZ2VyLnRyYWNrRXZlbnQoXCJNdWx0aVB1cmNoYXNlXCIsIHtcInBpZFwiOiBzdG9yZUVudGl0eS5waWR9KTtcbiAgICAgICAgfVxuICAgICAgICBnYW1lLmFuYWx5c2VNYW5hZ2VyLnRyYWNrRXZlbnQoXCJQdXJjaGFzZUxldmVsXCIsIHtcImxldmVsSWRcIjogZ2FtZS5nYW1lTWFuLmxldmVsSWQsIFwicGlkXCI6IHN0b3JlRW50aXR5LnBpZH0pO1xuICAgIH0sXG5cbiAgICBwb3B1cEJvb3N0UmV3YXJkRGxnOiBmdW5jdGlvbiAoc3BsaXRDb3VudCwgdGhyZWVCYWxsQ291bnQsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBuZXczSW1hZ2UgPSB0aGlzLmdldEJvb3N0SW1hZ2UoQm9vc3RUeXBlLlRIUkVFX0JBTEwpO1xuICAgICAgICB2YXIgc3BsaXRJbWFnZSA9IHRoaXMuZ2V0Qm9vc3RJbWFnZShCb29zdFR5cGUuU1BMSVQpO1xuXG4gICAgICAgIHZhciBpbWFnZTEgPSB1bmRlZmluZWQ7XG4gICAgICAgIHZhciBjb3VudDEgPSAwO1xuICAgICAgICB2YXIgaW1hZ2UyID0gdW5kZWZpbmVkO1xuICAgICAgICB2YXIgY291bnQyID0gMDtcbiAgICAgICAgaWYgKHRocmVlQmFsbENvdW50ID4gMCkge1xuICAgICAgICAgICAgaW1hZ2UxID0gbmV3M0ltYWdlO1xuICAgICAgICAgICAgY291bnQxID0gdGhyZWVCYWxsQ291bnQ7XG4gICAgICAgICAgICBpZiAoc3BsaXRDb3VudCA+IDApIHtcbiAgICAgICAgICAgICAgICBpbWFnZTIgPSBzcGxpdEltYWdlO1xuICAgICAgICAgICAgICAgIGNvdW50MiA9IHNwbGl0Q291bnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpbWFnZTEgPSBzcGxpdEltYWdlO1xuICAgICAgICAgICAgY291bnQxID0gc3BsaXRDb3VudDtcbiAgICAgICAgfVxuXG4gICAgICAgIGdhbWUucG9wdXBNYW4ucG9wdXBSZXdhcmROb3RpY2VEbGcoZ2FtZS5sb2NhbC5nZXRWYWx1ZShcInJld2FyZF92aWRlb19ib29zdHNcIiksXG4gICAgICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZ2FtZS5wbGF5ZXJNYW4uYWRkQm9vc3QoQm9vc3RUeXBlLlNQTElULCBzcGxpdENvdW50KTtcbiAgICAgICAgICAgICAgICBnYW1lLnBsYXllck1hbi5hZGRCb29zdChCb29zdFR5cGUuVEhSRUVfQkFMTCwgdGhyZWVCYWxsQ291bnQpO1xuICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIGltYWdlMSwgY291bnQxLCBpbWFnZTIsIGNvdW50Mik7XG4gICAgfSxcblxuICAgIHBvcHVwQWRkRGlhbW9uZHNEbGc6IGZ1bmN0aW9uIChjb3VudCwgcmV3YXJkTmFtZSwgY2IpIHtcbiAgICAgICAgZ2FtZS5wb3B1cE1hbi5wb3B1cFJld2FyZE5vdGljZURsZyhnYW1lLmxvY2FsLmdldFZhbHVlKFwicmV3YXJkX3ZpZGVvX2RpYW1vbmRzXCIpLFxuICAgICAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGdhbWUucGxheWVyTWFuLmFkZERpYW1vbmRzKGNvdW50LCByZXdhcmROYW1lKTtcbiAgICAgICAgICAgICAgICBjYiAmJiBjYigpO1xuICAgICAgICAgICAgfSwgdGhpcy5nZXRCb29zdEltYWdlKEJvb3N0VHlwZS5ESUFNT05EKSwgY291bnQpO1xuICAgIH0sXG5cbiAgICBwb3B1cFJld2FyZERvdWJsZURsZzogZnVuY3Rpb24gKGl0ZW1Db3VudCwgdHlwZSwgcmV3YXJkTmFtZSwgY2IpIHtcbiAgICAgICAgZ2FtZS5wb3B1cE1hbi5wb3B1cFJld2FyZERvdWJsZVRpcERsZyh0aGlzLmdldEJvb3N0SW1hZ2UodHlwZSksIGl0ZW1Db3VudCwgcmV3YXJkTmFtZSwgZnVuY3Rpb24gKGRvdWJsZSkge1xuICAgICAgICAgICAgdmFyIGNvdW50ID0gZG91YmxlID8gaXRlbUNvdW50ICogMiA6IGl0ZW1Db3VudDtcbiAgICAgICAgICAgIHZhciBzcGxpdENvdW50ID0gMDtcbiAgICAgICAgICAgIHZhciB0aHJlZUJhbGxDb3VudCA9IDA7XG4gICAgICAgICAgICB2YXIgZGlhbW9uZENvdW50ID0gMDtcbiAgICAgICAgICAgIGlmICh0eXBlID09PSBCb29zdFR5cGUuU1BMSVQpIHtcbiAgICAgICAgICAgICAgICBzcGxpdENvdW50ID0gY291bnQ7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IEJvb3N0VHlwZS5USFJFRV9CQUxMKSB7XG4gICAgICAgICAgICAgICAgdGhyZWVCYWxsQ291bnQgPSBjb3VudDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gQm9vc3RUeXBlLkRJQU1PTkQpIHtcbiAgICAgICAgICAgICAgICBkaWFtb25kQ291bnQgPSBjb3VudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkb3VibGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoc3BsaXRDb3VudCA+IDAgfHwgdGhyZWVCYWxsQ291bnQgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5wb3B1cEJvb3N0UmV3YXJkRGxnKHNwbGl0Q291bnQsIHRocmVlQmFsbENvdW50LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGlhbW9uZENvdW50ID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucG9wdXBBZGREaWFtb25kc0RsZyhkaWFtb25kQ291bnQsIHJld2FyZE5hbWUsIGNiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2IgJiYgY2IoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRpYW1vbmRDb3VudCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucG9wdXBBZGREaWFtb25kc0RsZyhkaWFtb25kQ291bnQsIHJld2FyZE5hbWUsIGNiKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNiICYmIGNiKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGdhbWUucGxheWVyTWFuLmFkZEJvb3N0KEJvb3N0VHlwZS5TUExJVCwgc3BsaXRDb3VudCk7XG4gICAgICAgICAgICAgICAgZ2FtZS5wbGF5ZXJNYW4uYWRkQm9vc3QoQm9vc3RUeXBlLlRIUkVFX0JBTEwsIHRocmVlQmFsbENvdW50KTtcbiAgICAgICAgICAgICAgICBnYW1lLnBsYXllck1hbi5hZGREaWFtb25kcyhkaWFtb25kQ291bnQsIHJld2FyZE5hbWUpO1xuICAgICAgICAgICAgICAgIGNiICYmIGNiKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgfVxufSk7XG5cblN0b3JlSGVscGVyLl9pbnN0YW5jZSA9IG51bGw7XG5TdG9yZUhlbHBlci5fZmlyc3RVc2VJbnN0YW5jZSA9IHRydWU7XG5cbi8qKlxuICpcbiAqIEByZXR1cm5zIHtTdG9yZUhlbHBlcn1cbiAqL1xuU3RvcmVIZWxwZXIuZ2V0SW5zdGFuY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKFN0b3JlSGVscGVyLl9maXJzdFVzZUluc3RhbmNlKSB7XG4gICAgICAgIFN0b3JlSGVscGVyLl9maXJzdFVzZUluc3RhbmNlID0gZmFsc2U7XG4gICAgICAgIFN0b3JlSGVscGVyLl9pbnN0YW5jZSA9IG5ldyBTdG9yZUhlbHBlcigpO1xuICAgIH1cbiAgICByZXR1cm4gU3RvcmVIZWxwZXIuX2luc3RhbmNlO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTdG9yZUhlbHBlcjsiLCJ2YXIgR2FtZUNvbnRyb2xsZXIgPSByZXF1aXJlKFwiLi4vY29udHJvbGxlci9HYW1lQ29udHJvbGxlclwiKTtcbnZhciBHYW1lTWFuID0gcmVxdWlyZShcIi4uL21vZGVsL0dhbWVNYW5cIik7XG52YXIgU3RvcmVIZWxwZXIgPSByZXF1aXJlKFwiLi4vbW9kZWwvU3RvcmVIZWxwZXJcIik7XG5cbnZhciBHYW1lU2NlbmUgPSBjYy5TY2VuZS5leHRlbmQoe1xuICAgIF9nYW1lVHlwZTogMCxcbiAgICBfaXNCYWNrQ2xpY2tlZDogZmFsc2UsXG5cbiAgICBjdG9yOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX3N1cGVyKCk7XG4gICAgICAgIGdhbWUuYWRzTWFuYWdlci5yZW1vdmVCYW5uZXJBZHMoXCJib3R0b21cIik7XG4gICAgICAgIGdhbWUuZ2FtZU1hbi5yZXNldFRyeUFuaW1JdGVtKCk7XG4gICAgICAgIHZhciBnYW1lTm9kZSA9IEdhbWVDb250cm9sbGVyLmNyZWF0ZUZyb21DQ0IoKTtcbiAgICAgICAgdGhpcy5hZGRDaGlsZChnYW1lTm9kZSk7XG4gICAgfSxcblxuICAgIG9uRW50ZXI6ZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9zdXBlcigpO1xuICAgICAgICBTdG9yZUhlbHBlci5nZXRJbnN0YW5jZSgpLmluaXQoKTtcbiAgICB9LFxuXG4gICAgb25FeGl0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGdhbWUuZGlhbG9nTWFuYWdlci5jbG9zZUFsbCgpO1xuICAgICAgICB0aGlzLl9zdXBlcigpO1xuICAgIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEdhbWVTY2VuZTtcbiIsInZhciBNZW51Q29udHJvbGxlciA9IHJlcXVpcmUoXCIuLi9jb250cm9sbGVyL01lbnVDb250cm9sbGVyXCIpO1xudmFyIFN0b3JlSGVscGVyID0gcmVxdWlyZShcIi4uL21vZGVsL1N0b3JlSGVscGVyXCIpO1xudmFyIExldmVsQ29udHJvbGxlciA9IHJlcXVpcmUoXCIuLi9jb250cm9sbGVyL0xldmVsQ29udHJvbGxlclwiKTtcblxudmFyIExldmVsU2NlbmUgPSBjYy5TY2VuZS5leHRlbmQoe1xuXG4gICAgY3RvcjogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9zdXBlcigpO1xuICAgICAgICB2YXIgbGF5ZXIgPSBMZXZlbENvbnRyb2xsZXIuY3JlYXRlRnJvbUNDQigpO1xuICAgICAgICB0aGlzLmFkZENoaWxkKGxheWVyKTtcbiAgICB9LFxuXG4gICAgb25FbnRlcjpmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX3N1cGVyKCk7XG5cbiAgICAgICAgY2MuZXZlbnRNYW5hZ2VyLmFkZExpc3RlbmVyKHtcbiAgICAgICAgICAgIGV2ZW50OiBjYy5FdmVudExpc3RlbmVyLktFWUJPQVJELFxuICAgICAgICAgICAgb25LZXlSZWxlYXNlZDogZnVuY3Rpb24gKGtleUNvZGUsIGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKGtleUNvZGUgPT09IGNjLktFWS5iYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5faXNCYWNrQ2xpY2tlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faXNCYWNrQ2xpY2tlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBnYW1lLnNjZW5lTWFuLnN3aXRjaFNjZW5lKGdhbWUuc2NlbmVUeXBlLk1FTlUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfS5iaW5kKHRoaXMpXG4gICAgICAgIH0sIHRoaXMpO1xuXG4gICAgICAgIGlmIChnYW1lLnBsYXllck1hbi5nZXRMZXZlbCgpID49IDMpIHtcbiAgICAgICAgICAgIGdhbWUuYWRzTWFuYWdlci5zaG93QmFubmVyQWRzKFwiYm90dG9tXCIpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIG9uRXhpdDogZnVuY3Rpb24gKCkge1xuICAgICAgICBnYW1lLmRpYWxvZ01hbmFnZXIuY2xvc2VBbGwoKTtcbiAgICAgICAgdGhpcy5fc3VwZXIoKTtcbiAgICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBMZXZlbFNjZW5lOyIsIi8qKlxuICogQ3JlYXRlZCBieSBveWUgb24gMTUtNC0xOS5cbiAqL1xudmFyIExvYWRpbmdDb250cm9sbGVyID0gcmVxdWlyZShcIi4uL2NvbnRyb2xsZXIvTG9hZGluZ0NvbnRyb2xsZXJcIik7XG5cbnZhciBMb2FkaW5nU2NlbmUgPSBjYy5TY2VuZS5leHRlbmQoe1xuICAgIGN0b3I6ZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9zdXBlcigpO1xuICAgICAgICB2YXIgbGF5ZXIgPSBMb2FkaW5nQ29udHJvbGxlci5jcmVhdGVGcm9tQ0NCKCk7XG4gICAgICAgIHRoaXMuYWRkQ2hpbGQobGF5ZXIpO1xuICAgIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IExvYWRpbmdTY2VuZTsiLCJ2YXIgTWVudUNvbnRyb2xsZXIgPSByZXF1aXJlKFwiLi4vY29udHJvbGxlci9NZW51Q29udHJvbGxlclwiKTtcbnZhciBTdG9yZUhlbHBlciA9IHJlcXVpcmUoXCIuLi9tb2RlbC9TdG9yZUhlbHBlclwiKTtcbnZhciBHYW1lTWFuID0gcmVxdWlyZShcIi4uL21vZGVsL0dhbWVNYW5cIik7XG52YXIgUGxheWVyTWFuID0gcmVxdWlyZShcIi4uL21vZGVsL1BsYXllck1hblwiKTtcbnZhciBTY2VuZU1hbiA9IHJlcXVpcmUoXCIuLi9tb2RlbC9TY2VuZU1hblwiKTtcbnZhciBTY2VuZVR5cGUgPSByZXF1aXJlKFwiLi4vZW51bS9TY2VuZVR5cGVcIik7XG4vL3ZhciBCcmlja3NWaWV3ID0gcmVxdWlyZShcIi4uL3ZpZXcvQnJpY2tzVmlld1wiKTtcblxud2luZG93LmlzRmlyc3RFbnRlciA9IHRydWU7XG5cbnZhciBNZW51U2NlbmUgPSBjYy5TY2VuZS5leHRlbmQoe1xuXG4gICAgY3RvcjogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9zdXBlcigpO1xuXG4gICAgICAgIHZhciBsYXllciA9IE1lbnVDb250cm9sbGVyLmNyZWF0ZUZyb21DQ0IoKTtcbiAgICAgICAgdGhpcy5hZGRDaGlsZChsYXllcik7XG4gICAgfSxcblxuICAgIG9uRW50ZXI6ZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9zdXBlcigpO1xuXG4gICAgICAgIFN0b3JlSGVscGVyLmdldEluc3RhbmNlKCkuaW5pdCgpO1xuXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgY2MuZXZlbnRNYW5hZ2VyLmFkZExpc3RlbmVyKHtcbiAgICAgICAgICAgIGV2ZW50OiBjYy5FdmVudExpc3RlbmVyLktFWUJPQVJELFxuICAgICAgICAgICAgb25LZXlSZWxlYXNlZDogZnVuY3Rpb24gKGtleUNvZGUsIGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKGtleUNvZGUgPT09IGNjLktFWS5iYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghc2VsZi5faXNCYWNrQ2xpY2tlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5faXNCYWNrQ2xpY2tlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBnYW1lLnBvcHVwTWFuLnBvcHVwWWVzTm9Db21tb25EbGcoXyhcImV4aXRfZ2FtZV9jb25maXJtXCIpLCBfKFwieWVzX3RpdGxlXCIpLCBfKFwibm9fdGl0bGVcIiksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYW1lLmxvZ2ljTWFuLnNjaGVkdWxlTG9jYWxOb3RpZmljYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYy5kaXJlY3Rvci5lbmQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9pc0JhY2tDbGlja2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgdGhpcyk7XG5cbiAgICAgICAgaWYgKGdhbWUucGxheWVyTWFuLmdldExldmVsKCkgPj0gMykge1xuICAgICAgICAgICAgZ2FtZS5hZHNNYW5hZ2VyLnNob3dCYW5uZXJBZHMoXCJib3R0b21cIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZ2FtZS5hZHNNYW5hZ2VyLnNob3dUb3BCYW5uZXIpIHtcbiAgICAgICAgICAgIGdhbWUuYWRzTWFuYWdlci5yZW1vdmVCYW5uZXJBZHMoXCJ0b3BcIik7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNjaGVkdWxlT25jZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBnYW1lLmdjTWFuYWdlci5yZXBvcnRTY29yZSgwLCBnYW1lLmNvbmZpZy5nZXRMZWFkZXJCb2FyZEtleSgpKTtcbiAgICAgICAgICAgIGlmICghd2luZG93LmlzRmlyc3RFbnRlcikge1xuICAgICAgICAgICAgICAgIGdhbWUuY3Jvc3NQcm9tTWFuLnRyeVRvUG9wdXBDcm9zc1Byb21EbGcoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgd2luZG93LmlzRmlyc3RFbnRlciA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCAxKTtcbiAgICB9LFxuXG4gICAgb25FeGl0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGdhbWUuZGlhbG9nTWFuYWdlci5jbG9zZUFsbCgpO1xuICAgICAgICB0aGlzLl9zdXBlcigpO1xuICAgIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1lbnVTY2VuZTsiLCJ2YXIgTWVudUNvbnRyb2xsZXIgPSByZXF1aXJlKFwiLi4vY29udHJvbGxlci9NZW51Q29udHJvbGxlclwiKTtcbnZhciBTdG9yZUhlbHBlciA9IHJlcXVpcmUoXCIuLi9tb2RlbC9TdG9yZUhlbHBlclwiKTtcbnZhciBQYWNrYWdlQ29udHJvbGxlciA9IHJlcXVpcmUoXCIuLi9jb250cm9sbGVyL1BhY2thZ2VDb250cm9sbGVyXCIpO1xuXG52YXIgUGFja2FnZVNjZW5lID0gY2MuU2NlbmUuZXh0ZW5kKHtcbiAgICBjdG9yOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX3N1cGVyKCk7XG4gICAgICAgIHZhciBsYXllciA9IFBhY2thZ2VDb250cm9sbGVyLmNyZWF0ZUZyb21DQ0IoKTtcbiAgICAgICAgdGhpcy5hZGRDaGlsZChsYXllcik7XG4gICAgfSxcblxuICAgIG9uRW50ZXI6ZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9zdXBlcigpO1xuXG4gICAgICAgIGNjLmV2ZW50TWFuYWdlci5hZGRMaXN0ZW5lcih7XG4gICAgICAgICAgICBldmVudDogY2MuRXZlbnRMaXN0ZW5lci5LRVlCT0FSRCxcbiAgICAgICAgICAgIG9uS2V5UmVsZWFzZWQ6IGZ1bmN0aW9uIChrZXlDb2RlLCBldmVudCkge1xuICAgICAgICAgICAgICAgIGlmIChrZXlDb2RlID09PSBjYy5LRVkuYmFjaykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2lzQmFja0NsaWNrZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2lzQmFja0NsaWNrZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZS5zY2VuZU1hbi5zd2l0Y2hTY2VuZShnYW1lLnNjZW5lVHlwZS5NRU5VKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0uYmluZCh0aGlzKVxuICAgICAgICB9LCB0aGlzKTtcbiAgICB9LFxuXG4gICAgb25FeGl0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGdhbWUuZGlhbG9nTWFuYWdlci5jbG9zZUFsbCgpO1xuICAgICAgICB0aGlzLl9zdXBlcigpO1xuICAgIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBhY2thZ2VTY2VuZTsiLCJ2YXIgR3JpZCA9IHJlcXVpcmUoXCIuLi9lbnRpdHkvR3JpZFwiKTtcbnZhciBCYWxsID0gcmVxdWlyZShcIi4uL2VudGl0eS9CYWxsXCIpO1xudmFyIEJvYXJkQ29udHJvbGxlciA9IHJlcXVpcmUoXCIuLi9jb250cm9sbGVyL0JvYXJkQ29udHJvbGxlclwiKTtcbnZhciBCYWxsUG9vbCA9IHJlcXVpcmUoXCIuLi9lbnRpdHkvQmFsbFBvb2xcIik7XG52YXIgVXRpbHMgPSByZXF1aXJlKFwiLi4vLi4vY29tbW9uL3V0aWwvVXRpbHNcIik7XG52YXIgR3JpZFR5cGUgPSByZXF1aXJlKFwiLi4vZW51bS9HcmlkVHlwZVwiKTtcbnZhciBCb2FyZCA9IHJlcXVpcmUoXCIuLi9lbnRpdHkvQm9hcmRcIik7XG52YXIgU2hhcGVUeXBlID0gcmVxdWlyZShcIi4uL2VudW0vU2hhcGVUeXBlXCIpO1xudmFyIEJvb3N0ID0gcmVxdWlyZShcIi4uL2VudGl0eS9Cb29zdFwiKTtcbnZhciBCb29zdFR5cGUgPSByZXF1aXJlKFwiLi4vZW51bS9Cb29zdFR5cGVcIik7XG52YXIgT2JzdGFjbGUgPSByZXF1aXJlKFwiLi4vZW50aXR5L09ic3RhY2xlXCIpO1xudmFyIFdhbGwgPSByZXF1aXJlKFwiLi4vZW50aXR5L1dhbGxcIik7XG52YXIgR2FtZU1hbiA9IHJlcXVpcmUoXCIuLi9tb2RlbC9HYW1lTWFuXCIpO1xudmFyIFN0b3JlSGVscGVyID0gcmVxdWlyZShcIi4uL21vZGVsL1N0b3JlSGVscGVyXCIpO1xudmFyIEV2ZW50c05hbWUgPSByZXF1aXJlKFwiLi4vZXZlbnRzL0V2ZW50c05hbWVcIik7XG52YXIgSXRlbUNhdGVnb3J5ID0gcmVxdWlyZShcIi4uL2VudW0vSXRlbUNhdGVnb3J5XCIpO1xuXG52YXIgQ29sb3JDb25maWdzID0gW1xuICAgIGNjLmNvbG9yKDI1MiwgMTc4LCAwKSxcbiAgICBjYy5jb2xvcig4MSwgMjI5LCAxMiksXG4gICAgY2MuY29sb3IoMjcsIDIyNiwgMjU1KSxcbiAgICBjYy5jb2xvcigyNTUsIDI1MiwgMjkpLFxuICAgIGNjLmNvbG9yKDI1NSwgNTYsIDU2KSxcbiAgICBjYy5jb2xvcigyNDgsIDcwLCAyNTUpLFxuICAgIGNjLmNvbG9yKDI1NSwgMTI5LCAxNyksXG4gICAgY2MuY29sb3IoNTcsIDEwMywgMjQ5KSxcbiAgICBjYy5jb2xvcig5MCwgMTgxLCAxMTApLFxuXG4gICAgY2MuY29sb3IoMjU1LCA5MCwgMTQxKSxcbiAgICBjYy5jb2xvcigyNDIsIDg2LCA5KSxcbiAgICBjYy5jb2xvcig2NiwgNDYsIDE3NiksXG4gICAgY2MuY29sb3IoMTQ0LCA4NSwgMjIyKSxcbiAgICBjYy5jb2xvcigyMywgMTY3LCAxMDQpLFxuICAgIGNjLmNvbG9yKDE3NiwgNzIsIDIwNiksXG4gICAgY2MuY29sb3IoMTQ3LCAxOTIsIDI2KSxcbiAgICBjYy5jb2xvcig1NSwgNzAsIDIxOSlcbl07XG5cbnZhciBHcmF5Q29sb3IgPSBjYy5jb2xvcig4MiwgODIsIDgyKTtcblxudmFyIGdldENvbG9yID0gZnVuY3Rpb24gKHR5cGUpIHtcbiAgICByZXR1cm4gQ29sb3JDb25maWdzWyh0eXBlIC0gMSkgJSBDb2xvckNvbmZpZ3MubGVuZ3RoXTtcbn07XG5cbnZhciBHYW1lU3RlcCA9IHtcbiAgICBQUkVfU1RBUlQ6IDEsXG4gICAgQUlNX0dVSURFOiAyLFxuICAgIFNUQVJUOiAzLFxuICAgIFJFTElGRTogNCxcbiAgICBGQUlMX0FORF9XQUlUX1JFTElGRTogNSxcbiAgICBFTkQ6IDZcbn07XG5cbnZhciBISU5UX1dBTExfR1JPVVAgPSAyO1xuXG52YXIgQnJpY2tzVmlldyA9IGNjLk5vZGUuZXh0ZW5kKHtcbiAgICBTUEFDRV9TVEVQOiAxIC8gNjAsXG4gICAgTElGRV9QT1NJQklMSVRZOiAwLjAwNSxcbiAgICBCT09TVF9QT1NJQklMSVRZOiAwLjA1LFxuICAgIE1BWF9TUEVFRDogNDIwLFxuICAgIE1BWF9MSUZFOiA0LFxuICAgIEJPT1NUX1NQRUVEOiA4MCxcbiAgICBNQVhfQkFMTDogODAwLFxuICAgIFRPUF9JTk5FUl9XQUxMOiA2MCxcbiAgICBNQVhfU1BMSVRfQ09VTlQ6IDEwMCxcbiAgICBUT1BfQURfV0FMTDogMTAwLFxuICAgIEhJTlRfQkFMTDogMjAwLFxuICAgIEhJTlRfR1JBWV9CQUxMOiAxNTAsXG4gICAgLy90aGlzLlRPUF9BRF9XQUxMID0gMTAwO1xuICAgIFNQTElUX0JBTExfQU5HTEU6IFs0NSwgOTAsIDEzNV0sXG4gICAgTVVTVF9HRU5fQk9PU1RfVElNRTogMjUsXG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7TGV2ZWxDb25maWd9XG4gICAgICovXG4gICAgY29uZmlnOiBudWxsLFxuXG4gICAgcm93OiAwLFxuICAgIGNvbDogMCxcblxuICAgIGJhbGxMaXN0OiBudWxsLFxuXG4gICAgZ2FtZVN0ZXA6IC0xLFxuXG4gICAgbGlmZUNvdW50OiAyLFxuXG4gICAgZ2FtZUNvbnRyb2xsZXI6IG51bGwsXG5cbiAgICAvL3N0YXJ0VGltZTogMCxcblxuICAgIHN0b3BlZDogZmFsc2UsXG5cbiAgICBsYXN0VGltZTogMCxcblxuICAgIHRvdGFsVGltZTogMCxcbiAgICBsYXN0QWRqdXN0VGltZTogMCxcblxuICAgIGhhcmRNb2RlOiBmYWxzZSxcblxuICAgIGFjY3VtdWxhdG9yOiAwLFxuICAgIGJvb3N0VHlwZU1hcDogbnVsbCxcbiAgICBsYXN0R2V0Qm9vc3RUaW1lOiAwLFxuICAgIF9jdXJUb3VjaElkOiAtMSxcblxuICAgIGxhc3RSZW1vdmVUaW1lOiAwLFxuXG4gICAgY3VycmVudEZQUzogNjAsXG5cbiAgICBjdG9yOiBmdW5jdGlvbiAoY29uZmlnLCBnYW1lQ29udHJvbGxlcikge1xuICAgICAgICB0aGlzLl9zdXBlcigpO1xuICAgICAgICBpZiAoZ2FtZS51dGlscy5pc0xvd0FuZHJvaWQoKSkge1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50RlBTID0gZ2FtZS5jb25maWcubG93QW5kcm9pZEZQUztcbiAgICAgICAgfVxuICAgICAgICBpZiAoZ2FtZS5nYW1lTWFuLmxldmVsSWQgPj0gMzApIHtcbiAgICAgICAgICAgIHRoaXMuTUFYX0xJRkUgPSAyO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuV0lOX1dJRFRIID0gY2Mud2luU2l6ZS53aWR0aDtcbiAgICAgICAgdGhpcy5XSU5fSEVJR0hUID0gY2Mud2luU2l6ZS5oZWlnaHQ7XG4gICAgICAgIHRoaXMubGFzdEdldEJvb3N0VGltZSA9IERhdGUubm93KCk7XG4gICAgICAgIHRoaXMuYm9vc3RUeXBlTWFwID0ge307XG4gICAgICAgIHRoaXMuYm9vc3RUeXBlTGlzdCA9IFtCb29zdFR5cGUuU1BMSVQsIEJvb3N0VHlwZS5USFJFRV9CQUxMXTtcbiAgICAgICAgaWYgKGNjLnN5cy5vcyA9PT0gY2Muc3lzLk9TX0lPUykge1xuICAgICAgICAgICAgdGhpcy5NQVhfQkFMTCA9IDEwMDA7XG4gICAgICAgIH1cbiAgICAgICAgQmFsbFBvb2wuc2V0TWF4UG9vbFNpemUoXCJiYWxsXCIsIHRoaXMuTUFYX0JBTEwpO1xuICAgICAgICBCYWxsUG9vbC5zZXRNYXhQb29sU2l6ZShcImJyaWNrXCIsIDIwMDApO1xuICAgICAgICBpZiAoZ2FtZS51dGlscy5pc05vdGNoU2NyZWVuKCkpIHtcbiAgICAgICAgICAgIHRoaXMuVE9QX0FEX1dBTEwgKz0gNzA7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5oYXJkTW9kZSA9IEdhbWVNYW4uZ2V0SW5zdGFuY2UoKS5pc0hhcmRNb2RlKCk7XG4gICAgICAgIGlmICh0aGlzLmhhcmRNb2RlKSB7XG4gICAgICAgICAgICBjb25maWcgPSBjb25maWcuZ2V0SGFyZENmZygpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb25maWcubGlmZVByb2JhYmlsaXR5ID4gMCkge1xuICAgICAgICAgICAgdGhpcy5MSUZFX1BPU0lCSUxJVFkgKj0gY29uZmlnLmxpZmVQcm9iYWJpbGl0eTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29uZmlnLmJvb3N0UHJvYmFiaWxpdHkgPiAwKSB7XG4gICAgICAgICAgICB0aGlzLkJPT1NUX1BPU0lCSUxJVFkgKj0gR2FtZU1hbi5nZXRJbnN0YW5jZSgpLmdldEJvb3N0UHJvYmFiaWxpdHkoY29uZmlnKTtcbiAgICAgICAgfVxuICAgICAgICBjYy5sb2coXCJ0aGlzLkJPT1NUX1BPU0lCSUxJVFk6XCIgKyB0aGlzLkJPT1NUX1BPU0lCSUxJVFkpO1xuICAgICAgICB0aGlzLmdhbWVDb250cm9sbGVyID0gZ2FtZUNvbnRyb2xsZXI7XG4gICAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICAgICAgICB0aGlzLnJvdyA9IGNvbmZpZy53aWR0aDtcbiAgICAgICAgdGhpcy5jb2wgPSBjb25maWcuaGVpZ2h0O1xuXG4gICAgICAgIHRoaXMuR1JJRF9XSURUSCA9IGNvbmZpZy5waXhlbFdpZHRoIC8gY29uZmlnLndpZHRoICogMC43O1xuICAgICAgICB0aGlzLkdSSURfSEVJR0hUID0gY29uZmlnLnBpeGVsSGVpZ2h0IC8gY29uZmlnLmhlaWdodCAqIDAuNztcblxuICAgICAgICB0aGlzLkdBUF9XSURUSCA9IGNvbmZpZy5waXhlbFdpZHRoIC8gY29uZmlnLndpZHRoIC0gdGhpcy5HUklEX1dJRFRIO1xuICAgICAgICB0aGlzLkdBUF9IRUlHSFQgPSBjb25maWcucGl4ZWxIZWlnaHQgLyBjb25maWcuaGVpZ2h0IC0gdGhpcy5HUklEX0hFSUdIVDtcblxuICAgICAgICAvL+mhtumDqOacgOWwj+eahOiDveWuuee6s+aVtOS4queQg+ebmOeahOepuumXtFxuICAgICAgICB2YXIgbWluQnJpY2tIZWlnaHQgPSA2MDAgKyB0aGlzLlRPUF9JTk5FUl9XQUxMICsgdGhpcy5UT1BfQURfV0FMTCArIDEwO1xuICAgICAgICB2YXIgbWF4QnJpY2tIZWlnaHQgPSB0aGlzLldJTl9IRUlHSFQgLSBtaW5Ccmlja0hlaWdodDtcblxuICAgICAgICBpZiAoZ2FtZS51dGlscy5pc05vdGNoU2NyZWVuKCkpIHtcbiAgICAgICAgICAgIHRoaXMuQlJJQ0tfWSA9IE1hdGgubWluKHRoaXMuV0lOX0hFSUdIVCAqIDAuNCwgbWF4QnJpY2tIZWlnaHQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5CUklDS19ZID0gTWF0aC5taW4odGhpcy5XSU5fSEVJR0hUICogMC4zLCBtYXhCcmlja0hlaWdodCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLkJPQVJEX1kgPSB0aGlzLkJSSUNLX1kgLSB0aGlzLldJTl9IRUlHSFQgKiAwLjE2O1xuXG4gICAgICAgIHRoaXMuc2V0Q29udGVudFNpemUoY2Mud2luU2l6ZSk7XG5cbiAgICAgICAgdGhpcy5pbml0KCk7XG4gICAgfSxcblxuICAgIG9uRW50ZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fc3VwZXIoKTtcbiAgICAgICAgY2MuZXZlbnRNYW5hZ2VyLmFkZExpc3RlbmVyKHtcbiAgICAgICAgICAgIGV2ZW50OiBjYy5FdmVudExpc3RlbmVyLlRPVUNIX09ORV9CWV9PTkUsXG4gICAgICAgICAgICBzd2FsbG93VG91Y2hlczogdHJ1ZSxcbiAgICAgICAgICAgIG9uVG91Y2hCZWdhbjogdGhpcy5vblRvdWNoQmVnYW4uYmluZCh0aGlzKSxcbiAgICAgICAgICAgIG9uVG91Y2hNb3ZlZDogdGhpcy5vblRvdWNoTW92ZWQuYmluZCh0aGlzKSxcbiAgICAgICAgICAgIG9uVG91Y2hFbmRlZDogdGhpcy5vblRvdWNoRW5kZWQuYmluZCh0aGlzKSxcbiAgICAgICAgICAgIG9uVG91Y2hDYW5jZWxsZWQ6IHRoaXMub25Ub3VjaENhbmNlbGxlZC5iaW5kKHRoaXMpXG4gICAgICAgIH0sIHRoaXMpO1xuXG4gICAgICAgIHRoaXMuc2NoZWR1bGVVcGRhdGUoKTtcblxuICAgICAgICB0aGlzLnNwYWNlLnNldERlZmF1bHRDb2xsaXNpb25IYW5kbGVyKFxuICAgICAgICAgICAgdGhpcy5jb2xsaXNpb25CZWdpbi5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgdGhpcy5jb2xsaXNpb25QcmUuYmluZCh0aGlzKSxcbiAgICAgICAgICAgIHRoaXMuY29sbGlzaW9uUG9zdC5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgdGhpcy5jb2xsaXNpb25TZXBhcmF0ZS5iaW5kKHRoaXMpXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuZ2FtZVN0ZXAgPSBHYW1lU3RlcC5QUkVfU1RBUlQ7XG4gICAgICAgIGdhbWUuZXZlbnREaXNwYXRjaGVyLmFkZEN1c3RvbUV2ZW50TGlzdGVuZXIoY2MuZ2FtZS5FVkVOVF9ISURFLCB0aGlzLmdhbWVPbkhpZGUsIHRoaXMpO1xuICAgICAgICBnYW1lLmV2ZW50RGlzcGF0Y2hlci5hZGRFdmVudExpc3RlbmVyKEV2ZW50c05hbWUuVVBEQVRFX1NLSU4sIHRoaXMub25VcGRhdGVTa2luLCB0aGlzKTtcbiAgICAgICAgZ2FtZS5ldmVudERpc3BhdGNoZXIuYWRkRXZlbnRMaXN0ZW5lcihFdmVudHNOYW1lLlNIT1dfQUlNX0dVSURFLCB0aGlzLm9uU2hvd0FpbUd1aWRlLCB0aGlzKTtcblxuICAgICAgICB0aGlzLnNob3dUb3BCYW5uZXJBZHMoKTtcblxuICAgICAgICBjYy5ldmVudE1hbmFnZXIuYWRkTGlzdGVuZXIoe1xuICAgICAgICAgICAgZXZlbnQ6IGNjLkV2ZW50TGlzdGVuZXIuS0VZQk9BUkQsXG4gICAgICAgICAgICBvbktleVJlbGVhc2VkOiBmdW5jdGlvbiAoa2V5Q29kZSwgZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAoa2V5Q29kZSA9PT0gY2MuS0VZLmJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50cnlTaG93UGF1c2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LmJpbmQodGhpcylcbiAgICAgICAgfSwgdGhpcyk7XG5cbiAgICAgICAgZ2FtZS5nYW1lTWFuLm9uR2FtZVN0YXJ0KCk7XG4gICAgfSxcblxuICAgIG9uRXhpdDogZnVuY3Rpb24gKCkge1xuICAgICAgICBnYW1lLmV2ZW50RGlzcGF0Y2hlci5yZW1vdmVFdmVudExpc3RlbmVyKEV2ZW50c05hbWUuU0hPV19BSU1fR1VJREUsIHRoaXMub25TaG93QWltR3VpZGUsIHRoaXMpO1xuICAgICAgICBnYW1lLmV2ZW50RGlzcGF0Y2hlci5yZW1vdmVDdXN0b21FdmVudExpc3RlbmVyKGNjLmdhbWUuRVZFTlRfSElERSwgdGhpcy5nYW1lT25IaWRlLCB0aGlzKTtcbiAgICAgICAgZ2FtZS5ldmVudERpc3BhdGNoZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihFdmVudHNOYW1lLlVQREFURV9TS0lOLCB0aGlzLm9uVXBkYXRlU2tpbiwgdGhpcyk7XG4gICAgICAgIC8vdGhpcy5zcGFjZS5yZW1vdmVDb2xsaXNpb25IYW5kbGVyKFNoYXBlVHlwZS5CQUxMLFxuICAgICAgICAvLyAgICBTaGFwZVR5cGUuQlJJQ0spO1xuICAgICAgICB0aGlzLnVuc2NoZWR1bGVVcGRhdGUoKTtcbiAgICAgICAgdGhpcy5yZW1vdmVUb3BCYW5uZXJBZHMoKTtcbiAgICAgICAgLy9CYWxsUG9vbC5kcmFpbkFsbFBvb2xzKCk7XG4gICAgICAgIHRoaXMuc3BhY2UgPSBudWxsO1xuICAgICAgICB0aGlzLmJhbGxMaXN0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5ib29zdHMgPSBudWxsO1xuICAgICAgICB0aGlzLm9ic3RhY2xlcyA9IG51bGw7XG4gICAgICAgIHRoaXMud2FsbHMgPSBudWxsO1xuICAgICAgICB0aGlzLmJyaWNrcyA9IG51bGw7XG4gICAgICAgIHRoaXMuX3N1cGVyKCk7XG4gICAgfSxcblxuICAgIG9uVXBkYXRlU2tpbjogZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuYmFsbExpc3QubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHRoaXMuYmFsbExpc3RbaV0udXBkYXRlU2tpbigpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIGdhbWVPbkhpZGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuZ2FtZVN0ZXAgPT09IEdhbWVTdGVwLlNUQVJUKSB7XG4gICAgICAgICAgICB0aGlzLnRyeVNob3dQYXVzZSgpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHRyeVNob3dQYXVzZTogZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuc3RvcGVkKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5nYW1lQ29udHJvbGxlcikge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2FtZUNvbnRyb2xsZXIuc2hvd1BhdXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgaW5pdDogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmluaXRXb3JsZCgpO1xuICAgICAgICB0aGlzLmluaXRPYnN0YWNsZXMoKTtcbiAgICAgICAgdGhpcy5pbml0QnJpY2tzKCk7XG4gICAgICAgIHRoaXMuaW5pdEJvYXJkKCk7XG4gICAgICAgIHRoaXMuaW5pdEhpbnRMaW5lcygpO1xuXG4gICAgICAgIHRoaXMuYmFsbExpc3QgPSBbXTtcbiAgICAgICAgdGhpcy5ib29zdHMgPSBbXTtcblxuICAgICAgICB0aGlzLmxhc3RBZGp1c3RUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgICAgdGhpcy5sYXN0UmVtb3ZlVGltZSA9IERhdGUubm93KCk7XG4gICAgfSxcblxuICAgIGluaXRIaW50TGluZXM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5kcmF3Tm9kZSA9IG5ldyBjYy5Ob2RlKCk7XG4gICAgICAgIHRoaXMuYWRkQ2hpbGQodGhpcy5kcmF3Tm9kZSwgdGhpcy5ISU5UX0dSQVlfQkFMTCk7XG5cbiAgICAgICAgdmFyIHNraW5DZmcgPSBHYW1lTWFuLmdldEluc3RhbmNlKCkuZ2V0Q3VycmVudFNraW5DZmcoKTtcbiAgICAgICAgdGhpcy5oaW50U3ByaXRlID0gbmV3IGNjLlNwcml0ZShcIiNcIiArIHNraW5DZmcuaW1hZ2UgKyBcIi5wbmdcIik7XG4gICAgICAgIHRoaXMuYWRkQ2hpbGQodGhpcy5oaW50U3ByaXRlLCB0aGlzLkhJTlRfQkFMTCk7XG4gICAgICAgIHRoaXMuaGludFNwcml0ZS52aXNpYmxlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaGludFNwcml0ZS5zY2FsZSA9IHRoaXMuZ2V0QmFsbFdpZHRoKCkgLyB0aGlzLmhpbnRTcHJpdGUud2lkdGggKiBza2luQ2ZnLnNjYWxlO1xuICAgIH0sXG5cbiAgICBpbml0T2JzdGFjbGVzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMub2JzdGFjbGVzID0gW107XG4gICAgICAgIHRoaXMud2FsbHMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmNvbmZpZy5vYnN0YWNsZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBvYnN0YWNsZUNmZyA9IHRoaXMuY29uZmlnLm9ic3RhY2xlc1tpXTtcbiAgICAgICAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgb2JzdGFjbGVDZmcud2lkdGg7ICsreCkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIHkgPSAwOyB5IDwgb2JzdGFjbGVDZmcuaGVpZ2h0OyArK3kpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxvY2FsQ29sID0geCArIG9ic3RhY2xlQ2ZnLng7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsb2NhbFJvdyA9IHkgKyBvYnN0YWNsZUNmZy55O1xuICAgICAgICAgICAgICAgICAgICB2YXIgb2JzdGFjbGUgPSBCYWxsUG9vbC5nZXRGcm9tUG9vbChcIm9ic3RhY2xlXCIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIW9ic3RhY2xlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYnN0YWNsZSA9IG5ldyBPYnN0YWNsZShHcmF5Q29sb3IsIHRoaXMuR1JJRF9XSURUSCwgdGhpcy5HUklEX0hFSUdIVCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYnN0YWNsZS5yZXNldChHcmF5Q29sb3IsIHRoaXMuR1JJRF9XSURUSCwgdGhpcy5HUklEX0hFSUdIVCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRDaGlsZChvYnN0YWNsZSk7XG4gICAgICAgICAgICAgICAgICAgIG9ic3RhY2xlLnNldFBvc2l0aW9uKHRoaXMuZ2V0R3JpZFBvcyhsb2NhbFJvdywgbG9jYWxDb2wpKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vYnN0YWNsZXMucHVzaChvYnN0YWNsZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIFdBTExfRklMTF9TSVpFID0gY2Muc2l6ZSg2LCA2KTtcbiAgICAgICAgICAgIHZhciB3YWxsID0gbmV3IFdhbGwoKTtcbiAgICAgICAgICAgIHdhbGwuc2V0Q29udGVudFNpemUoY2Muc2l6ZShcbiAgICAgICAgICAgICAgICB0aGlzLkdSSURfV0lEVEggKiBvYnN0YWNsZUNmZy53aWR0aCArIHRoaXMuR0FQX1dJRFRIICogKG9ic3RhY2xlQ2ZnLndpZHRoIC0gMSkgKyBXQUxMX0ZJTExfU0laRS53aWR0aCxcbiAgICAgICAgICAgICAgICB0aGlzLkdSSURfSEVJR0hUICogb2JzdGFjbGVDZmcuaGVpZ2h0ICsgdGhpcy5HQVBfSEVJR0hUICogKG9ic3RhY2xlQ2ZnLmhlaWdodCAtIDEpICsgV0FMTF9GSUxMX1NJWkUuaGVpZ2h0KSk7XG4gICAgICAgICAgICB0aGlzLndhbGxzLnB1c2god2FsbCk7XG4gICAgICAgICAgICB0aGlzLmFkZENoaWxkKHdhbGwpO1xuICAgICAgICAgICAgdmFyIHBvcyA9IGNjLnBBZGQodGhpcy5nZXRHcmlkUG9zKG9ic3RhY2xlQ2ZnLnksIG9ic3RhY2xlQ2ZnLngpLFxuICAgICAgICAgICAgICAgIGNjLnAoLTAuNSAqIHRoaXMuR1JJRF9XSURUSCwgLTAuNSAqIHRoaXMuR1JJRF9IRUlHSFQpKTtcbiAgICAgICAgICAgIHBvcyA9IGNjLnBBZGQocG9zLCBjYy5wKC1XQUxMX0ZJTExfU0laRS53aWR0aCAqIDAuNSwgLVdBTExfRklMTF9TSVpFLmhlaWdodCAqIDAuNSkpO1xuICAgICAgICAgICAgd2FsbC5pbml0Qm9keSh0aGlzLnNwYWNlLCBwb3MpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIGluaXRCcmlja3M6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5icmlja3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmNvbmZpZy5icmlja3MubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBicmlja0NmZyA9IHRoaXMuY29uZmlnLmJyaWNrc1tpXTtcbiAgICAgICAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgYnJpY2tDZmcud2lkdGg7ICsreCkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIHkgPSAwOyB5IDwgYnJpY2tDZmcuaGVpZ2h0OyArK3kpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJyaWNrID0gdGhpcy5jcmVhdGVCcmljayh4LCB5LCBicmlja0NmZyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYnJpY2tzLnB1c2goYnJpY2spO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBjcmVhdGVCcmljazogZnVuY3Rpb24gKHgsIHksIGJyaWNrQ2ZnKSB7XG4gICAgICAgIHZhciBsb2NhbENvbCA9IHggKyBicmlja0NmZy54O1xuICAgICAgICB2YXIgbG9jYWxSb3cgPSB5ICsgYnJpY2tDZmcueTtcbiAgICAgICAgdmFyIGJyaWNrID0gQmFsbFBvb2wuZ2V0RnJvbVBvb2woXCJicmlja1wiKTtcbiAgICAgICAgaWYgKCFicmljaykge1xuICAgICAgICAgICAgYnJpY2sgPSBuZXcgR3JpZChnZXRDb2xvcihicmlja0NmZy50eXBlKSwgdGhpcy5HUklEX1dJRFRILCB0aGlzLkdSSURfSEVJR0hULCBHcmlkVHlwZS5CUklDSyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBicmljay5yZXNldChnZXRDb2xvcihicmlja0NmZy50eXBlKSwgdGhpcy5HUklEX1dJRFRILCB0aGlzLkdSSURfSEVJR0hULCBHcmlkVHlwZS5CUklDSyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hZGRDaGlsZChicmljayk7XG4gICAgICAgIGJyaWNrLmluaXRCb2R5KHRoaXMuc3BhY2UsIHRoaXMuZ2V0R3JpZFBvcyhsb2NhbFJvdywgbG9jYWxDb2wpKTtcbiAgICAgICAgcmV0dXJuIGJyaWNrO1xuICAgIH0sXG5cbiAgICBpbml0Qm9hcmQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5ib2FyZE5vZGUgPSBuZXcgQm9hcmQodGhpcy5nZXRCYWxsV2lkdGgoKSk7XG4gICAgICAgIHRoaXMuYWRkQ2hpbGQodGhpcy5ib2FyZE5vZGUpO1xuICAgICAgICB0aGlzLmJvYXJkTm9kZS5pbml0Qm9keSh0aGlzLnNwYWNlLCBjYy5wKHRoaXMuV0lOX1dJRFRIICogMC41LCB0aGlzLkJPQVJEX1kpKTtcbiAgICB9LFxuXG4gICAgZ2V0QmFsbFdpZHRoOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBNYXRoLm1heCh0aGlzLkdSSURfV0lEVEgsIDgpO1xuICAgIH0sXG5cbiAgICBpbml0V29ybGQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5XQUxMX1RISUNLID0gNTA7XG4gICAgICAgIHRoaXMuSU5ORVJfV0FMTCA9IDIwO1xuICAgICAgICAvL3RoaXMuVE9QX0lOTkVSX1dBTEwgPSA1MDtcbiAgICAgICAgdGhpcy5zcGFjZSA9IG5ldyBjcC5TcGFjZSgpO1xuICAgICAgICB2YXIgeE9mZnNldCA9IDA7XG4gICAgICAgIGlmICh3aW5kb3cuaXNFZGl0b3IpIHtcbiAgICAgICAgICAgIGNjLndpblNpemUud2lkdGggLSA2NDA7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHdhbGxzID0gW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwic2hhcGVcIjogY2Muc2l6ZSh0aGlzLldJTl9XSURUSCArIHRoaXMuV0FMTF9USElDSywgdGhpcy5XQUxMX1RISUNLKSwgLy9ib3R0b21cbiAgICAgICAgICAgICAgICBcInBvc1wiOiBjcC52KHRoaXMuV0lOX1dJRFRIICogMC41IC0gdGhpcy5XQUxMX1RISUNLICogMC41LCAtdGhpcy5XQUxMX1RISUNLICogMC41ICsgdGhpcy5JTk5FUl9XQUxMKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInNoYXBlXCI6IGNjLnNpemUodGhpcy5XSU5fV0lEVEggKyB0aGlzLldBTExfVEhJQ0ssIHRoaXMuV0FMTF9USElDSyksIC8vdG9wXG4gICAgICAgICAgICAgICAgXCJwb3NcIjogY3Audih0aGlzLldJTl9XSURUSCAqIDAuNSAtIHRoaXMuV0FMTF9USElDSyAqIDAuNSwgdGhpcy5XSU5fSEVJR0hUICsgdGhpcy5XQUxMX1RISUNLICogMC41IC0gdGhpcy5UT1BfSU5ORVJfV0FMTCAtIHRoaXMuVE9QX0FEX1dBTEwpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwic2hhcGVcIjogY2Muc2l6ZSh0aGlzLldBTExfVEhJQ0ssIHRoaXMuV0lOX0hFSUdIVCArIHRoaXMuV0FMTF9USElDSyksIC8vbGVmdFxuICAgICAgICAgICAgICAgIFwicG9zXCI6IGNwLnYoeE9mZnNldCAqIDAuNSAtIHRoaXMuV0FMTF9USElDSyAqIDAuNSArIHRoaXMuSU5ORVJfV0FMTCwgdGhpcy5XSU5fSEVJR0hUICogMC41IC0gdGhpcy5XQUxMX1RISUNLICogMC41KVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInNoYXBlXCI6IGNjLnNpemUodGhpcy5XQUxMX1RISUNLLCB0aGlzLldJTl9IRUlHSFQgKyB0aGlzLldBTExfVEhJQ0spLCAvL3JpZ2h0XG4gICAgICAgICAgICAgICAgXCJwb3NcIjogY3AudigteE9mZnNldCAqIDAuNSArIHRoaXMuV0lOX1dJRFRIICsgdGhpcy5XQUxMX1RISUNLICogMC41IC0gdGhpcy5JTk5FUl9XQUxMLCB0aGlzLldJTl9IRUlHSFQgKiAwLjUgLSB0aGlzLldBTExfVEhJQ0sgKiAwLjUpXG4gICAgICAgICAgICB9XG4gICAgICAgIF07XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB3YWxscy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGJvZHkgPSBuZXcgY3AuQm9keShJbmZpbml0eSwgSW5maW5pdHkpO1xuICAgICAgICAgICAgdmFyIHdhbGwgPSB3YWxsc1tpXTtcbiAgICAgICAgICAgIHZhciBzaGFwZSA9IG5ldyBjcC5Cb3hTaGFwZShib2R5LCB3YWxsLnNoYXBlLndpZHRoLCB3YWxsLnNoYXBlLmhlaWdodCk7XG4gICAgICAgICAgICBzaGFwZS5zZXRFbGFzdGljaXR5KDEpO1xuICAgICAgICAgICAgc2hhcGUuc2V0RnJpY3Rpb24oMCk7XG4gICAgICAgICAgICAvL3NoYXBlLmxheWVycyA9IDE7XG4gICAgICAgICAgICBib2R5LnNldFBvcyh3YWxsLnBvcyk7XG4gICAgICAgICAgICB0aGlzLnNwYWNlLmFkZFN0YXRpY1NoYXBlKHNoYXBlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vZm9yICh2YXIgaSA9IDA7IGkgPCB3YWxscy5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyAgICB2YXIgYm9keSA9IG5ldyBjcC5Cb2R5KEluZmluaXR5LCBJbmZpbml0eSk7XG4gICAgICAgIC8vICAgIHZhciB3YWxsID0gd2FsbHNbaV07XG4gICAgICAgIC8vICAgIHZhciBzaGFwZSA9IG5ldyBjcC5Cb3hTaGFwZShib2R5LCB3YWxsLnNoYXBlLndpZHRoLCB3YWxsLnNoYXBlLmhlaWdodCk7XG4gICAgICAgIC8vICAgIHNoYXBlLnNldEVsYXN0aWNpdHkoMSk7XG4gICAgICAgIC8vICAgIHNoYXBlLnNldEZyaWN0aW9uKDApO1xuICAgICAgICAvLyAgICBzaGFwZS5sYXllcnMgPSBISU5UX1dBTExfR1JPVVA7XG4gICAgICAgIC8vICAgIGJvZHkuc2V0UG9zKHdhbGwucG9zKTtcbiAgICAgICAgLy8gICAgdGhpcy5zcGFjZS5hZGRTdGF0aWNTaGFwZShzaGFwZSk7XG4gICAgICAgIC8vfVxuXG4gICAgICAgIC8vIEdyYXZpdHlcbiAgICAgICAgdGhpcy5zcGFjZS5ncmF2aXR5ID0gY3AudigwLCAwKTtcbiAgICAgICAgdGhpcy5zcGFjZS5zbGVlcFRpbWVUaHJlc2hvbGQgPSAwLjU7XG4gICAgICAgIHRoaXMuc3BhY2UuY29sbGlzaW9uU2xvcCA9IDAuNTtcbiAgICAgICAgdGhpcy5zcGFjZS5pdGVyYXRpb25zID0gNTtcbiAgICAgICAgaWYgKGNjLnN5cy5pc05hdGl2ZSkge1xuICAgICAgICAgICAgdGhpcy5zcGFjZS51c2VTcGF0aWFsSGFzaCh0aGlzLmdldEJhbGxXaWR0aCgpLCB0aGlzLk1BWF9CQUxMICogMTApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy90aGlzLmluaXREZWJ1Z01vZGUoKTtcbiAgICB9LFxuXG4gICAgaW5pdERlYnVnTW9kZTogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9kZWJ1Z05vZGUgPSBjYy5QaHlzaWNzRGVidWdOb2RlLmNyZWF0ZSh0aGlzLnNwYWNlKTtcbiAgICAgICAgdGhpcy5hZGRDaGlsZCh0aGlzLl9kZWJ1Z05vZGUpO1xuICAgIH0sXG5cbiAgICBnZXRHcmlkUG9zOiBmdW5jdGlvbiAobG9jYWxSb3csIGxvY2FsQ29sKSB7XG4gICAgICAgIHZhciBncmlkU2l6ZSA9IHRoaXMuZ2V0R3JpZFNpemUoKTtcbiAgICAgICAgcmV0dXJuIGNjLnAoKHRoaXMuV0lOX1dJRFRIIC0gdGhpcy5jb25maWcucGl4ZWxXaWR0aCkgKiAwLjUgKyAoZ3JpZFNpemUud2lkdGggKyB0aGlzLkdBUF9XSURUSCkgKiAobG9jYWxDb2wgKyAwLjUpLFxuICAgICAgICAgICAgKGdyaWRTaXplLmhlaWdodCArIHRoaXMuR0FQX0hFSUdIVCkgKiAobG9jYWxSb3cgKyAwLjUpICsgdGhpcy5CUklDS19ZKTtcbiAgICB9LFxuXG4gICAgZ2V0R3JpZFNpemU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmxhc3RHcmlkU2l6ZSkge1xuICAgICAgICAgICAgdGhpcy5sYXN0R3JpZFNpemUgPSBjYy5zaXplKHRoaXMuR1JJRF9XSURUSCwgdGhpcy5HUklEX0hFSUdIVCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMubGFzdEdyaWRTaXplO1xuICAgIH0sXG5cbiAgICB1cGRhdGU6IGZ1bmN0aW9uIChkdCkge1xuICAgICAgICBpZiAodGhpcy5zdG9wZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKHRoaXMuZ2FtZVN0ZXApIHtcbiAgICAgICAgICAgIGNhc2UgR2FtZVN0ZXAuUFJFX1NUQVJUOlxuXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIEdhbWVTdGVwLlNUQVJUOlxuICAgICAgICAgICAgICAgIC8vdmFyIHQxID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVRpbWUoZHQpO1xuICAgICAgICAgICAgICAgIC8vdmFyIHQyID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgICAgICAvL2NjLmxvZyhcInVwZGF0ZSBzdGFydCB0MjpcIiArICh0MiAtIHQxKSk7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVHcmlkcyhkdCk7XG4gICAgICAgICAgICAgICAgLy92YXIgdDMgPSBEYXRlLm5vdygpO1xuICAgICAgICAgICAgICAgIC8vY2MubG9nKFwidXBkYXRlIHN0YXJ0IHQzOlwiICsgKHQzIC0gdDIpKTtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUNoaXBtdW5rKGR0KTtcbiAgICAgICAgICAgICAgICAvL3ZhciB0NCA9IERhdGUubm93KCk7XG4gICAgICAgICAgICAgICAgLy9jYy5sb2coXCJ1cGRhdGUgc3RhcnQgdDQ6XCIgKyAodDQgLSB0MykpO1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlQm9vc3QoZHQpO1xuICAgICAgICAgICAgICAgIC8vdmFyIHQ1ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgICAgICAvL2NjLmxvZyhcInVwZGF0ZSBzdGFydCB0NTpcIiArICh0NSAtIHQ0KSk7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGVja0dhbWVPdmVyKCk7XG4gICAgICAgICAgICAgICAgLy92YXIgdDYgPSBEYXRlLm5vdygpO1xuICAgICAgICAgICAgICAgIC8vY2MubG9nKFwidXBkYXRlIHN0YXJ0IHQ2OlwiICsgKHQ2IC0gdDUpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgR2FtZVN0ZXAuUkVMSUZFOlxuICAgICAgICAgICAgICAgICBpZiAodGhpcy5nYW1lQ29udHJvbGxlcikge1xuICAgICAgICAgICAgICAgICAgICAgdGhpcy5nYW1lQ29udHJvbGxlci51cGRhdGVMaWZlQ291bnQoKTtcbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlQWxsQm9vc3RzKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5ib2FyZE5vZGUuc2hvd0JhbGwoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmdhbWVTdGVwID0gR2FtZVN0ZXAuUFJFX1NUQVJUO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBHYW1lU3RlcC5FTkQ6XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVDaGlwbXVuayhkdCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgR2FtZVN0ZXAuQUlNX0dVSURFOlxuICAgICAgICAgICAgICAgIHZhciB3b3JsZFBvc2l0aW9uID0gdGhpcy5nYW1lQ29udHJvbGxlci5uZEFpbUhlbHAuY29udHJvbGxlci5nZXRIYW5kV29ybGRQb3NpdGlvbigpO1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5sYXN0QWltSGVscFBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGFzdEFpbUhlbHBQb3NpdGlvbiA9IHdvcmxkUG9zaXRpb247XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBvZmZzZXQgPSAod29ybGRQb3NpdGlvbi54IC0gdGhpcy5sYXN0QWltSGVscFBvc2l0aW9uLngpO1xuICAgICAgICAgICAgICAgIGlmIChNYXRoLmFicyhvZmZzZXQpID4gMTApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGVhckhpbnROb2RlKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZHJhd0FpbUxpbmUod29ybGRQb3NpdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHVwZGF0ZVRpbWU6IGZ1bmN0aW9uIChkdCkge1xuICAgICAgICBpZiAoIXRoaXMuZWNsaXBzZWRUaW1lKSB7XG4gICAgICAgICAgICB0aGlzLmVjbGlwc2VkVGltZSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lY2xpcHNlZFRpbWUgKz0gZHQgKiAxMDAwO1xuICAgICAgICBpZiAodGhpcy5nYW1lQ29udHJvbGxlcikge1xuICAgICAgICAgICAgdGhpcy5nYW1lQ29udHJvbGxlci51cGRhdGVUaW1lKCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgdXBkYXRlQmFsbHM6IGZ1bmN0aW9uIChkdCkge1xuICAgICAgICB2YXIgcmVtb3ZlQ291bnQgPSAwO1xuICAgICAgICB2YXIgY2FuUmVtb3ZlID0gKERhdGUubm93KCkgLSB0aGlzLmxhc3RSZW1vdmVUaW1lKSA+IDIwMDtcbiAgICAgICAgaWYgKCFjYW5SZW1vdmUpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmJhbGxMaXN0Lmxlbmd0aCA8PSAyKSB7XG4gICAgICAgICAgICAgICAgY2FuUmVtb3ZlID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgaSwgYmFsbDtcbiAgICAgICAgaWYgKGNhblJlbW92ZSkge1xuICAgICAgICAgICAgdGhpcy5sYXN0UmVtb3ZlVGltZSA9IERhdGUubm93KCk7XG4gICAgICAgICAgICAvL2NjLmxvZyhcInVwZGF0ZSBiYWxscyA6XCIgKyBjYW5SZW1vdmUgKyBcIiwgYmFsbCBjb3VudDpcIiArIHRoaXMuYmFsbExpc3QubGVuZ3RoKTtcbiAgICAgICAgICAgIGZvciAoaSA9IHRoaXMuYmFsbExpc3QubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgICAgICAgICBiYWxsID0gdGhpcy5iYWxsTGlzdFtpXTtcbiAgICAgICAgICAgICAgICB2YXIgcG9zaXRpb24gPSBiYWxsLmdldFBvc2l0aW9uKCk7XG4gICAgICAgICAgICAgICAgaWYgKHBvc2l0aW9uLnkgPCB0aGlzLkJPQVJEX1kgLSA0MCB8fCAhdGhpcy5pc0luVmlldyhwb3NpdGlvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVCYWxsKGJhbGwpO1xuICAgICAgICAgICAgICAgICAgICByZW1vdmVDb3VudCsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoRGF0ZS5ub3coKSAtIHRoaXMubGFzdEFkanVzdFRpbWUgPiAyMDAwKSB7XG4gICAgICAgICAgICB0aGlzLmxhc3RBZGp1c3RUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmJhbGxMaXN0Lmxlbmd0aCA8IDIwMCkge1xuICAgICAgICAgICAgICAgIGZvciAoaSA9IHRoaXMuYmFsbExpc3QubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgICAgICAgICAgICAgYmFsbCA9IHRoaXMuYmFsbExpc3RbaV07XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWRqdXN0QmFsbFNwZWVkKGJhbGwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBhZGp1c3RCYWxsU3BlZWQ6IGZ1bmN0aW9uIChiYWxsKSB7XG4gICAgICAgIHZhciB2ZWwgPSBiYWxsLmdldFZlbCgpO1xuICAgICAgICB2YXIgZGlzdGFuY2UgPSBjYy5wTGVuZ3RoKHZlbCk7XG4gICAgICAgIGlmIChkaXN0YW5jZSA8IHRoaXMuTUFYX1NQRUVEICogMC45IHx8IGRpc3RhbmNlID4gdGhpcy5NQVhfU1BFRUQgKiAxLjEpIHtcbiAgICAgICAgICAgIHZhciByYWRpYW4gPSBNYXRoLmF0YW4odmVsLnggLyB2ZWwueSk7XG4gICAgICAgICAgICBiYWxsLnNldFZlbChjYy5wKHRoaXMuTUFYX1NQRUVEICogTWF0aC5zaW4ocmFkaWFuKSwgdGhpcy5NQVhfU1BFRUQgKiBNYXRoLmNvcyhyYWRpYW4pKSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgcmFuZG9tQmFsbFNwZWVkOiBmdW5jdGlvbiAoYmFsbCkge1xuICAgICAgICB0aGlzLmFkanVzdEJhbGxTcGVlZChiYWxsKTtcbiAgICAgICAgaWYgKCFiYWxsLl9sYXN0UmFuZG9tVGltZSkge1xuICAgICAgICAgICAgYmFsbC5fbGFzdFJhbmRvbVRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgICB9XG4gICAgICAgIC8vbW9yZSB0aGFuIDUgc2Vjb25kcyx0aGVuIHRyeSB0byBhZGp1c3QgYmFsbCBzcGVlZC5cbiAgICAgICAgaWYgKERhdGUubm93KCkgLSBiYWxsLl9sYXN0UmFuZG9tVGltZSA+PSA1MDAwKSB7XG4gICAgICAgICAgICAvL2NjLmxvZyhcImJyaWNrIHZpZXc6YWRqdXN0IGJhbGwgc3BlZWQ6XCIgKyAoRGF0ZS5ub3coKSAtIGJhbGwuX2xhc3RSYW5kb21UaW1lKSk7XG4gICAgICAgICAgICBiYWxsLl9sYXN0UmFuZG9tVGltZSA9IERhdGUubm93KCk7XG4gICAgICAgICAgICB0aGlzLnJhbmRvbUFkanVzdEJhbGxTcGVlZChiYWxsKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICB1cGRhdGVHcmlkczogZnVuY3Rpb24gKGR0KSB7XG4gICAgICAgIGZvciAodmFyIGkgPSB0aGlzLmJyaWNrcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICAgICAgdmFyIGJyaWNrID0gdGhpcy5icmlja3NbaV07XG4gICAgICAgICAgICBpZiAoYnJpY2sucmVtb3ZlYWJsZSkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlQnJpY2soYnJpY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIHVwZGF0ZUNoaXBtdW5rOiBmdW5jdGlvbiAoZHQpIHtcbiAgICAgICAgLy92YXIgdDEgPSBEYXRlLm5vdygpO1xuICAgICAgICB2YXIgZGVsdGEgPSB0aGlzLmN1cnJlbnRGUFM7XG4gICAgICAgIGlmIChjYy5zeXMub3MgPT09IGNjLnN5cy5PU19BTkRST0lEKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5iYWxsTGlzdC5sZW5ndGggPiAyMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3BhY2Uuc3RlcCgxIC8gZGVsdGEpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDI7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNwYWNlLnN0ZXAoMSAvIGRlbHRhIC8gMik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRoaXMuYmFsbExpc3QubGVuZ3RoID4gMjApIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDI7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNwYWNlLnN0ZXAoMSAvIGRlbHRhIC8gMik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDM7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNwYWNlLnN0ZXAoMSAvIGRlbHRhIC8gMyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vdmFyIHQyID0gRGF0ZS5ub3coKTtcbiAgICAgICAgLy9jYy5sb2coXCJ1cGRhdGUgdDI6XCIgKyAodDIgLSB0MSkpO1xuICAgICAgICB0aGlzLnVwZGF0ZUJhbGxzKGR0KTtcbiAgICAgICAgLy92YXIgdDMgPSBEYXRlLm5vdygpO1xuICAgICAgICAvL2NjLmxvZyhcInVwZGF0ZSB0MzpcIiArICh0MyAtIHQyKSk7XG4gICAgfSxcblxuICAgIHJhbmRvbUFkanVzdEJhbGxTcGVlZDogZnVuY3Rpb24gKGJhbGwpIHtcbiAgICAgICAgdmFyIFJBTkRPTV9NQVhfQ09VTlQgPSA2MDtcbiAgICAgICAgdmFyIHJhbmRvbTEgPSBnYW1lLnV0aWxzLnJhbmdlTmV4dE51bWJlcigtUkFORE9NX01BWF9DT1VOVCAqIDAuNSwgUkFORE9NX01BWF9DT1VOVCAqIDAuNSk7XG4gICAgICAgIHZhciByYW5kb20yID0gZ2FtZS51dGlscy5yYW5nZU5leHROdW1iZXIoLVJBTkRPTV9NQVhfQ09VTlQgKiAwLjUsIFJBTkRPTV9NQVhfQ09VTlQgKiAwLjUpO1xuICAgICAgICBiYWxsLnNldFZlbChjYy5wQWRkKGJhbGwuZ2V0VmVsKCksIGNjLnAocmFuZG9tMSwgcmFuZG9tMikpKTtcbiAgICB9LFxuXG4gICAgdXBkYXRlQm9vc3Q6IGZ1bmN0aW9uIChkdCkge1xuICAgICAgICBmb3IgKHZhciBpID0gdGhpcy5ib29zdHMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgICAgIHZhciBib29zdCA9IHRoaXMuYm9vc3RzW2ldO1xuICAgICAgICAgICAgYm9vc3QueSAtPSBkdCAqIHRoaXMuQk9PU1RfU1BFRUQ7XG4gICAgICAgICAgICBpZiAoY2MucmVjdEludGVyc2VjdHNSZWN0KGJvb3N0LmdldEJvdW5kaW5nQm94KCksIHRoaXMuYm9hcmROb2RlLmdldEJvdW5kaW5nQm94KCkpKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChib29zdC50eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgQm9vc3RUeXBlLkxJRkU6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uQWRkTGlmZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgQm9vc3RUeXBlLlNQTElUOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51c2VTcGxpdEJhbGxCb29zdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgQm9vc3RUeXBlLlRIUkVFX0JBTEw6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVzZU5ldzNCYWxsQm9vc3QoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIEJvb3N0VHlwZS5CT01COlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51c2VCb21iQm9vc3QoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmJvb3N0cy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgYm9vc3QucmVtb3ZlRnJvbVBhcmVudCgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChib29zdC55IDwgMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuYm9vc3RzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICBib29zdC5yZW1vdmVGcm9tUGFyZW50KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgdXNlU3BsaXRCYWxsQm9vc3Q6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy50cnlTaG9vdEZpcnN0QmFsbCgpO1xuICAgICAgICBnYW1lLmF1ZGlvUGxheWVyLnBsYXlFZmZlY3RCeUtleShcImJvb3N0X2FkZFwiKTtcbiAgICAgICAgZ2FtZS5hdWRpb1BsYXllci52aWJyYXRlU2hvcnQoKTtcbiAgICAgICAgLy8gdmFyIHQxID0gRGF0ZS5ub3coKTtcbiAgICAgICAgZm9yICh2YXIgaiA9IHRoaXMuYmFsbExpc3QubGVuZ3RoIC0gMTsgaiA+PSAwOyAtLWopIHtcbiAgICAgICAgICAgIHZhciBiYWxsID0gdGhpcy5iYWxsTGlzdFtqXTtcbiAgICAgICAgICAgIHRoaXMub25TcGxpdEJhbGwoYmFsbC5nZXRQb3NpdGlvbigpKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmJhbGxMaXN0Lmxlbmd0aCA+IHRoaXMuTUFYX0JBTEwpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyB2YXIgdDIgPSBEYXRlLm5vdygpO1xuICAgICAgICAvL2NjLmxvZyhcInNwbGl0IGJhbGwgdGltZTpcIiArICh0MiAtIHQxKSk7XG4gICAgfSxcblxuICAgIHVzZU5ldzNCYWxsQm9vc3Q6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy50cnlTaG9vdEZpcnN0QmFsbCgpO1xuICAgICAgICBnYW1lLmF1ZGlvUGxheWVyLnBsYXlFZmZlY3RCeUtleShcImJvb3N0X2FkZFwiKTtcbiAgICAgICAgdGhpcy5vblNob290M0JhbGwoKTtcbiAgICAgICAgZ2FtZS5hdWRpb1BsYXllci52aWJyYXRlU2hvcnQoKTtcbiAgICB9LFxuXG4gICAgdXNlQm9tYkJvb3N0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vc3RvcCBnYW1lIGFuZCBwbGF5IGVuZCBhbmltYXRpb24uXG4gICAgICAgIHRoaXMud2F0Y2hBZEFuZFJlbGlmZSgpO1xuICAgIH0sXG5cbiAgICBvbkFkZExpZmU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5saWZlQ291bnQrKztcbiAgICAgICAgaWYgKHRoaXMuZ2FtZUNvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgIHRoaXMuZ2FtZUNvbnRyb2xsZXIudXBkYXRlTGlmZUNvdW50KCk7XG4gICAgICAgIH1cbiAgICAgICAgZ2FtZS5hdWRpb1BsYXllci5wbGF5RWZmZWN0QnlLZXkoXCJsaWZlX2FkZFwiKTtcbiAgICAgICAgZ2FtZS5hdWRpb1BsYXllci52aWJyYXRlU2hvcnQoKTtcbiAgICB9LFxuXG4gICAgb25TcGxpdEJhbGw6IGZ1bmN0aW9uIChwb3NpdGlvbikge1xuICAgICAgICB2YXIgdmVsID0gdGhpcy5NQVhfU1BFRUQ7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMzsgKytpKSB7XG4gICAgICAgICAgICB2YXIgYW5nbGUgPSBnYW1lLnV0aWxzLnJhbmRvbU5leHRJbnQoOTApO1xuICAgICAgICAgICAgdmFyIHN5bWJvbDEgPSAoZ2FtZS51dGlscy5yYW5kb21OZXh0SW50KDIpID09PSAxID8gMSA6IC0xKTtcbiAgICAgICAgICAgIHZhciBzeW1ib2wyID0gKGdhbWUudXRpbHMucmFuZG9tTmV4dEludCgyKSA9PT0gMSA/IDEgOiAtMSk7XG4gICAgICAgICAgICB2YXIgeCA9IDEwLHkgPSAxMDtcbiAgICAgICAgICAgIHZhciByYW5kb21Qb3MgPSBjYy5wQWRkKHBvc2l0aW9uLCBjYy5wKC14IC8gMiArIHggKiBnYW1lLnV0aWxzLnJhbmRvbU5leHROdW1iZXIoMSksXG4gICAgICAgICAgICAgICAgLXkgLyAyICsgeSAqIGdhbWUudXRpbHMucmFuZG9tTmV4dE51bWJlcigxKSkpO1xuICAgICAgICAgICAgdGhpcy5zaG9vdEJhbGwocmFuZG9tUG9zLCBjYy5wKHN5bWJvbDEgKiB2ZWwgKiBNYXRoLnNpbihNYXRoLlBJIC8gMTgwICogYW5nbGUpLFxuICAgICAgICAgICAgICAgICAgICBzeW1ib2wyICogdmVsICogTWF0aC5jb3MoTWF0aC5QSSAvIDE4MCAqIGFuZ2xlKSkpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIG9uU2hvb3QzQmFsbDogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdmVsID0gdGhpcy5NQVhfU1BFRUQ7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMzsgKytpKSB7XG4gICAgICAgICAgICB2YXIgc3BlZWQgPSBjYy5wKHZlbCAqIE1hdGguY29zKE1hdGguUEkgLyAxODAgKiB0aGlzLlNQTElUX0JBTExfQU5HTEVbaV0pLFxuICAgICAgICAgICAgICAgIHZlbCAqIE1hdGguc2luKE1hdGguUEkgLyAxODAgKiB0aGlzLlNQTElUX0JBTExfQU5HTEVbaV0pKTtcbiAgICAgICAgICAgIHRoaXMuc2hvb3RCYWxsKHRoaXMuZ2V0SW5pdEJhbGxQb3MoKSwgc3BlZWQpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHN3aXRjaFBhc3NEbGc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZ2FtZS5hdWRpb1BsYXllci5wbGF5RWZmZWN0QnlLZXkoXCJ2aWN0b3J5XCIpO1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGdhbWUucG9wdXBNYW4ucG9wdXBQYXNzRGxnKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBHYW1lTWFuLmdldEluc3RhbmNlKCkucmVzdW1lR2FtZSgpO1xuICAgICAgICAgICAgICAgIGdhbWUuc2NlbmVNYW4uc3dpdGNoU2NlbmUoZ2FtZS5zY2VuZVR5cGUuR0FNRSk7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKEdhbWVNYW4uZ2V0SW5zdGFuY2UoKS5oYXNOZXh0TGV2ZWwoKSkge1xuICAgICAgICAgICAgICAgICAgICBnYW1lLnNjZW5lTWFuLnN3aXRjaFNjZW5lKGdhbWUuc2NlbmVUeXBlLkdBTUUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGdhbWUucG9wdXBNYW4ucG9wdXBDb21tb25EbGcoZ2FtZS5sb2NhbC5nZXRWYWx1ZShcImFsbF9jb21wbGV0ZWRcIiksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWUuc2NlbmVNYW4uc3dpdGNoU2NlbmUoZ2FtZS5zY2VuZVR5cGUuTEVWRUwpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSwgNTAwKTtcbiAgICB9LFxuXG4gICAgY2hlY2tHYW1lT3ZlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIGlmICh0aGlzLmJyaWNrcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGlmICh3aW5kb3cuaXNFZGl0b3IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvL3JldHVybjtcbiAgICAgICAgICAgIHRoaXMuZ2FtZVN0ZXAgPSBHYW1lU3RlcC5FTkQ7XG4gICAgICAgICAgICB0aGlzLnNob3dCYW5uZXJBZHMoKTtcbiAgICAgICAgICAgIHZhciBsZXZlbElkID0gR2FtZU1hbi5nZXRJbnN0YW5jZSgpLmxldmVsSWQ7XG4gICAgICAgICAgICBHYW1lTWFuLmdldEluc3RhbmNlKCkuZ2FtZVdpbih0aGlzLmVjbGlwc2VkVGltZSAvIDEwMDApO1xuICAgICAgICAgICAgdmFyIHN0YXIgPSBHYW1lTWFuLmdldEluc3RhbmNlKCkuY3VycmVudFN0YXI7XG4gICAgICAgICAgICBpZiAoc3RhciA8IDMpIHtcbiAgICAgICAgICAgICAgICBnYW1lLnBvcHVwTWFuLnBvcHVwR2V0M1N0YXIoXCIzX3N0YXJcIiwgZnVuY3Rpb24gKHdhdGNoZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHdhdGNoZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWUuZ2FtZU1hbi5vbldhdGNoQWRzR2V0M1N0YXIobGV2ZWxJZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnN3aXRjaFBhc3NEbGcoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc3dpdGNoUGFzc0RsZygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuc3dpdGNoUGFzc0RsZygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuYmFsbExpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5saWZlQ291bnQgPiAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5saWZlQ291bnQtLTtcbiAgICAgICAgICAgICAgICB0aGlzLmdhbWVTdGVwID0gR2FtZVN0ZXAuUkVMSUZFO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoZ2FtZS5hZHNNYW5hZ2VyLmlzUmV3YXJkVmlkZW9SZWFkeSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2FtZVN0ZXAgPSBHYW1lU3RlcC5GQUlMX0FORF9XQUlUX1JFTElGRTtcbiAgICAgICAgICAgICAgICAgICAgZ2FtZS5wb3B1cE1hbi5wb3B1cFllc05vQ29tbW9uRGxnKGdhbWUubG9jYWwuZ2V0VmFsdWUoXCJ3YXRjaF9hZHNfcmVsaWZlXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZS5sb2NhbC5nZXRWYWx1ZShcInJlbGlmZV95ZXNcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICBnYW1lLmxvY2FsLmdldFZhbHVlKFwicmVsaWZlX25vXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYud2F0Y2hBZEFuZFJlbGlmZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnN3aXRjaFRvRmFpbCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZmFsc2UsIHRydWUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuc3dpdGNoVG9GYWlsKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIHdhdGNoQWRBbmRSZWxpZmU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICBTdG9yZUhlbHBlci5nZXRJbnN0YW5jZSgpLmNoZWNrQW5kU2hvd1Jld2FyZFZpZGVvKGdhbWUudXRpbHMuaXNJT1MoKSA/IFwiZnVodW8wMVwiIDogXCJmdWh1bzAxXCIsIGZ1bmN0aW9uIChyZXdhcmRlZCkge1xuICAgICAgICAgICAgaWYgKHJld2FyZGVkKSB7XG4gICAgICAgICAgICAgICAgZ2FtZS5hbmFseXNlTWFuYWdlci50cmFja0V2ZW50KFwiV2F0Y2hBZHNUb1JlbGlmZVwiKTtcbiAgICAgICAgICAgICAgICBzZWxmLnN3aXRjaFRvUmVsaWZlKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNlbGYuc3dpdGNoVG9GYWlsKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvL3N3aXRjaFRvV2FpdEZhaWw6IGZ1bmN0aW9uICgpIHtcbiAgICAvLyAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgLy8gICAgdGhpcy5nYW1lU3RlcCA9IEdhbWVTdGVwLkZBSUxfQU5EX1dBSVRfUkVMSUZFO1xuICAgIC8vICAgIGdhbWUucG9wdXBNYW4ucG9wdXBSZWxpdmVEbGcoZnVuY3Rpb24gKCkge1xuICAgIC8vICAgICAgICBzZWxmLnN3aXRjaFRvUmVsaWZlKCk7XG4gICAgLy8gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgIC8vICAgICAgICBzZWxmLnN3aXRjaFRvRmFpbCgpO1xuICAgIC8vICAgIH0pO1xuICAgIC8vfSxcblxuICAgIHN3aXRjaFRvUmVsaWZlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMubGlmZUNvdW50ID0gMjtcbiAgICAgICAgdGhpcy5nYW1lU3RlcCA9IEdhbWVTdGVwLlJFTElGRTtcbiAgICB9LFxuXG4gICAgc3dpdGNoVG9GYWlsOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh3aW5kb3cuaXNFZGl0b3IpIHtcbiAgICAgICAgICAgIHRoaXMuc3dpdGNoVG9SZWxpZmUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIEdhbWVNYW4uZ2V0SW5zdGFuY2UoKS5vbkdhbWVGYWlsKCk7XG4gICAgICAgICAgICB0aGlzLmdhbWVTdGVwID0gR2FtZVN0ZXAuRU5EO1xuICAgICAgICAgICAgZ2FtZS5wb3B1cE1hbi5wb3B1cEZhaWxEbGcoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGdhbWUuc2NlbmVNYW4uc3dpdGNoU2NlbmUoZ2FtZS5zY2VuZVR5cGUuR0FNRSk7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgR2FtZU1hbi5nZXRJbnN0YW5jZSgpLnNraXBMZXZlbCgpO1xuICAgICAgICAgICAgICAgIGdhbWUuc2NlbmVNYW4uc3dpdGNoU2NlbmUoZ2FtZS5zY2VuZVR5cGUuR0FNRSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBpc0luVmlldzogZnVuY3Rpb24gKHdvcmxkUG9zKSB7XG4gICAgICAgIGlmICh3b3JsZFBvcy54IDwgMCB8fCB3b3JsZFBvcy54ID4gdGhpcy5XSU5fV0lEVEggfHwgd29ybGRQb3MueSA8IDAgfHwgd29ybGRQb3MueSA+IHRoaXMuV0lOX0hFSUdIVCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG5cbiAgICBvblNob3dBaW1HdWlkZTogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHRoaXMuc2hvd0FpbUd1aWRlQW5pbWF0aW9uKCk7XG4gICAgfSxcblxuICAgIHNob3dBaW1HdWlkZUFuaW1hdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmdhbWVDb250cm9sbGVyLm5kQWltSGVscC52aXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5nYW1lU3RlcCA9IEdhbWVTdGVwLkFJTV9HVUlERTtcbiAgICB9LFxuXG4gICAgdHJ5U2hvb3RGaXJzdEJhbGw6IGZ1bmN0aW9uIChkaXJlY3Rpb24pIHtcbiAgICAgICAgaWYgKCFkaXJlY3Rpb24pIHtcbiAgICAgICAgICAgIGRpcmVjdGlvbiA9IGNjLnAoMCwgMSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuZ2FtZVN0ZXAgPT09IEdhbWVTdGVwLlBSRV9TVEFSVCkge1xuICAgICAgICAgICAgdGhpcy5nYW1lU3RlcCA9IEdhbWVTdGVwLlNUQVJUO1xuICAgICAgICAgICAgdGhpcy5zaG9vdEJhbGwodGhpcy5nZXRJbml0QmFsbFBvcygpLCBjYy5wKGRpcmVjdGlvbi54ICogdGhpcy5NQVhfU1BFRUQsIGRpcmVjdGlvbi55ICogdGhpcy5NQVhfU1BFRUQpKTtcbiAgICAgICAgICAgIHRoaXMuYm9hcmROb2RlLmhpZGVCYWxsKCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgZ2V0UmVmbGVjdGlvbk5vcm1hbDogZnVuY3Rpb24gKHN0YXJ0LCBoaXRQb2ludCwgbikge1xuICAgICAgICB2YXIgYW8gPSBjYy5wU3ViKGhpdFBvaW50LCBzdGFydCk7XG4gICAgICAgIHZhciBkb3QgPSBjYy5wRG90KGFvLCBuKTtcbiAgICAgICAgdmFyIG9iID0gY2MucFN1YihhbywgY2MucE11bHQobiwgMiAqIGRvdCkpO1xuICAgICAgICB2YXIgbm9ybWFsT2IgPSBjYy5wTm9ybWFsaXplKG9iKTtcbiAgICAgICAgY2MubG9nKFwicmVmbGVjdGlvbiBub3JtYWw6XCIgKyBKU09OLnN0cmluZ2lmeShub3JtYWxPYikpO1xuICAgICAgICByZXR1cm4gbm9ybWFsT2I7XG4gICAgfSxcblxuICAgIGNhblNob290OiBmdW5jdGlvbiAodG91Y2hMb2NhdGlvbikge1xuICAgICAgICB2YXIgc3RhcnQgPSB0aGlzLmdldEluaXRCYWxsUG9zKCk7XG4gICAgICAgIGlmICh0b3VjaExvY2F0aW9uLnkgPCBzdGFydC55ICsgMTUpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuXG4gICAgZ2V0RGFzaE5vZGU6IGZ1bmN0aW9uIChzdGFydCwgZW5kKSB7XG4gICAgICAgIHJldHVybiBnYW1lLnV0aWxzLmdldERhc2hQb2ludHNOb2RlKFtzdGFydCwgZW5kXSwgWzIwXSwgMjApO1xuICAgIH0sXG5cbiAgICBvblRvdWNoQmVnYW46ZnVuY3Rpb24odG91Y2gsIGV2ZW50KSB7XG4gICAgICAgIC8vY2MubG9nKFwiYnJpY2sgdmlldyBvblRvdWNoQmVnYW46XCIgKyB0b3VjaC5nZXRJRCgpKTtcbiAgICAgICAgaWYgKHRoaXMuX2N1clRvdWNoSWQgPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fY3VyVG91Y2hJZCA9IHRvdWNoLmdldElEKCk7XG4gICAgICAgIGlmICh0aGlzLmdhbWVDb250cm9sbGVyICYmIHRoaXMuZ2FtZUNvbnRyb2xsZXIubmRIZWxwLnZpc2libGUpIHtcbiAgICAgICAgICAgIHRoaXMuZ2FtZUNvbnRyb2xsZXIubmRIZWxwLnZpc2libGUgPSBmYWxzZTtcbiAgICAgICAgICAgIGdhbWUuc3RvcmFnZUNvbnRyb2xsZXIuc2V0SXRlbShcImZpcnN0X2VudGVyXCIsIFwiZmFsc2VcIik7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5nYW1lQ29udHJvbGxlciAmJiB0aGlzLmdhbWVDb250cm9sbGVyLm5kQWltSGVscC52aXNpYmxlKSB7XG4gICAgICAgICAgICB0aGlzLmdhbWVDb250cm9sbGVyLm5kQWltSGVscC52aXNpYmxlID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmNsZWFySGludE5vZGUoKTtcbiAgICAgICAgICAgIHRoaXMuZ2FtZVN0ZXAgPSBHYW1lU3RlcC5QUkVfU1RBUlQ7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmxhc3RUb3VjaFBvcyA9IHRoaXMuZ2V0UGFyZW50KCkuY29udmVydFRvTm9kZVNwYWNlKHRvdWNoLmdldExvY2F0aW9uKCkpO1xuICAgICAgICB0aGlzLmxhc3REaXJlY3Rpb24gPSBjYy5wKDAsIDEpO1xuICAgICAgICB0aGlzLmdhbWVDb250cm9sbGVyLm5kQW5pbUl0ZW0uY29udHJvbGxlci5wbGF5SGlkZUFuaW0oKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcblxuICAgIG9uVG91Y2hNb3ZlZDpmdW5jdGlvbih0b3VjaCwgZXZlbnQpIHtcbiAgICAgICAgaWYgKHRvdWNoLmdldElEKCkgIT09IHRoaXMuX2N1clRvdWNoSWQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdG91Y2hMb2NhdGlvbiA9IHRoaXMuZ2V0UGFyZW50KCkuY29udmVydFRvTm9kZVNwYWNlKHRvdWNoLmdldExvY2F0aW9uKCkpO1xuICAgICAgICBpZiAodGhpcy5sYXN0VG91Y2hQb3MpIHtcbiAgICAgICAgICAgIHZhciBvZmZzZXQgPSAodG91Y2hMb2NhdGlvbi54IC0gdGhpcy5sYXN0VG91Y2hQb3MueCk7XG4gICAgICAgICAgICBpZiAoTWF0aC5hYnMob2Zmc2V0KSA+IDEuMikge1xuICAgICAgICAgICAgICAgIGlmIChnYW1lLmdhbWVNYW4uY2FuVXNlQWltSXRlbSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmdhbWVTdGVwID09PSBHYW1lU3RlcC5QUkVfU1RBUlQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJIaW50Tm9kZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sYXN0RGlyZWN0aW9uID0gdGhpcy5kcmF3QWltTGluZSh0b3VjaExvY2F0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubW92ZUJvYXJkKG9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1vdmVCb2FyZChvZmZzZXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmxhc3RUb3VjaFBvcyA9IHRvdWNoTG9jYXRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcblxuICAgIGRyYXdBaW1MaW5lOiBmdW5jdGlvbiAodG91Y2hMb2NhdGlvbikge1xuICAgICAgICB2YXIgc3RhcnQgPSB0aGlzLmdldEluaXRCYWxsUG9zKCk7XG4gICAgICAgIGlmICghdGhpcy5jYW5TaG9vdCh0b3VjaExvY2F0aW9uKSkge1xuICAgICAgICAgICAgdG91Y2hMb2NhdGlvbiA9IGNjLnAoc3RhcnQueCwgY2Mud2luU2l6ZS5oZWlnaHQpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkaXJlY3Rpb24gPSBjYy5wTm9ybWFsaXplKGNjLnBTdWIodG91Y2hMb2NhdGlvbiwgc3RhcnQpKTtcbiAgICAgICAgdmFyIGVuZCA9IGNjLnBBZGQoc3RhcnQsIGNjLnBNdWx0KGRpcmVjdGlvbiwgY2Mud2luU2l6ZS5oZWlnaHQgKyBjYy53aW5TaXplLndpZHRoKSk7XG4gICAgICAgIHZhciByYWRpdXMgPSAxMDtcbiAgICAgICAgdmFyIGluZm8gPSB0aGlzLnNwYWNlLnNlZ21lbnRRdWVyeUZpcnN0KHN0YXJ0LCBlbmQsIHJhZGl1cywge1xuICAgICAgICAgICAgZ3JvdXA6IGNwLk5PX0dST1VQLFxuICAgICAgICAgICAgY2F0ZWdvcmllczogY3AuQUxMX0NBVEVHT1JJRVMsXG4gICAgICAgICAgICBtYXNrOiBJdGVtQ2F0ZWdvcnkuV2FsbFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGluZm8pIHtcbiAgICAgICAgICAgIHZhciBoaW50UG9pbnQgPSBpbmZvLnBvaW50O1xuICAgICAgICAgICAgdGhpcy5kcmF3Tm9kZS5hZGRDaGlsZCh0aGlzLmdldERhc2hOb2RlKHN0YXJ0LCBoaW50UG9pbnQpKTtcbiAgICAgICAgICAgIHZhciByZWZsZWN0aW9uTm9ybWFsID0gdGhpcy5nZXRSZWZsZWN0aW9uTm9ybWFsKHN0YXJ0LCBoaW50UG9pbnQsIGluZm8ubm9ybWFsKTtcbiAgICAgICAgICAgIHZhciByZWZsZWN0aW9uUG9pbnQgPSBjYy5wQWRkKGhpbnRQb2ludCwgY2MucE11bHQocmVmbGVjdGlvbk5vcm1hbCwgODApKTtcbiAgICAgICAgICAgIHRoaXMuZHJhd05vZGUuYWRkQ2hpbGQodGhpcy5nZXREYXNoTm9kZShoaW50UG9pbnQsIHJlZmxlY3Rpb25Qb2ludCkpO1xuICAgICAgICAgICAgdGhpcy5oaW50U3ByaXRlLnZpc2libGUgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5oaW50U3ByaXRlLnNldFBvc2l0aW9uKGhpbnRQb2ludCk7XG4gICAgICAgICAgICByZXR1cm4gZGlyZWN0aW9uO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGNjLnAoMCwgMSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgbW92ZUJvYXJkOiBmdW5jdGlvbiAob2Zmc2V0KSB7XG4gICAgICAgIHZhciBYX09GRlNFVCA9IHRoaXMuSU5ORVJfV0FMTCArIHRoaXMuZ2V0QmFsbFdpZHRoKCkgKiAwLjUgKyAyO1xuICAgICAgICB2YXIgeCA9IHRoaXMuYm9hcmROb2RlLnggKyBvZmZzZXQgKiAxLjY7XG4gICAgICAgIGlmICh4IDwgWF9PRkZTRVQpIHtcbiAgICAgICAgICAgIHggPSBYX09GRlNFVDtcbiAgICAgICAgfSBlbHNlIGlmICh4ID4gY2Mud2luU2l6ZS53aWR0aCAtIFhfT0ZGU0VUKSB7XG4gICAgICAgICAgICB4ID0gY2Mud2luU2l6ZS53aWR0aCAtIFhfT0ZGU0VUO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYm9hcmROb2RlLnNldFBvc1goeCk7XG4gICAgfSxcblxuICAgIG9uVG91Y2hFbmRlZDpmdW5jdGlvbih0b3VjaCwgZXZlbnQpIHtcbiAgICAgICAgLy9jYy5sb2coXCJicmljayB2aWV3IG9uVG91Y2hFbmRlZDpcIiArIHRvdWNoLmdldElEKCkpO1xuICAgICAgICBpZiAodG91Y2guZ2V0SUQoKSAhPT0gdGhpcy5fY3VyVG91Y2hJZCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChnYW1lLmdhbWVNYW4uY2FuVXNlQWltSXRlbSgpKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5nYW1lU3RlcCA9PT0gR2FtZVN0ZXAuUFJFX1NUQVJUKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50cnlTaG9vdEZpcnN0QmFsbCh0aGlzLmxhc3REaXJlY3Rpb24pO1xuICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJIaW50Tm9kZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy50cnlTaG9vdEZpcnN0QmFsbCgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubGFzdFNlbGVjdEdyaWQgPSBudWxsO1xuICAgICAgICB0aGlzLmxhc3RUb3VjaFBvcyA9IG51bGw7XG4gICAgICAgIHRoaXMuX2N1clRvdWNoSWQgPSAtMTtcbiAgICAgICAgdGhpcy5sYXN0RGlyZWN0aW9uID0gbnVsbDtcbiAgICB9LFxuXG4gICAgb25Ub3VjaENhbmNlbGxlZDpmdW5jdGlvbih0b3VjaCwgZXZlbnQpIHtcbiAgICAgICAgLy9jYy5sb2coXCJicmljayB2aWV3IG9uVG91Y2hDYW5jZWxsZWQ6XCIgKyB0b3VjaC5nZXRJRCgpKTtcbiAgICAgICAgdGhpcy5vblRvdWNoRW5kZWQodG91Y2gsIGV2ZW50KTtcbiAgICB9LFxuXG4gICAgY2xlYXJIaW50Tm9kZTogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmRyYXdOb2RlLnJlbW92ZUFsbENoaWxkcmVuKCk7XG4gICAgICAgIHRoaXMuaGludFNwcml0ZS52aXNpYmxlID0gZmFsc2U7XG4gICAgfSxcblxuICAgIGNvbGxpc2lvbkJlZ2luIDogZnVuY3Rpb24gKCBhcmJpdGVyLCBzcGFjZSApIHtcbiAgICAgICAgLy9jYy5sb2coJ2NvbGxpc2lvbiBiZWdpbicpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuXG4gICAgY29sbGlzaW9uUHJlIDogZnVuY3Rpb24gKCBhcmJpdGVyLCBzcGFjZSApIHtcbiAgICAgICAgLy9jYy5sb2coJ2NvbGxpc2lvbiBwcmUnKTtcbiAgICAgICAgdmFyIHNoYXBlcyA9IGFyYml0ZXIuZ2V0U2hhcGVzKCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2hhcGVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB2YXIgc2hhcGUgPSBzaGFwZXNbaV07XG4gICAgICAgICAgICAvL2NjLmxvZyhcImNvbGxpc2lvbiBwcmUgc2hhcGUgY29sbGlzaW9uIHR5cGU6XCIgKyBzaGFwZS5jb2xsaXNpb25fdHlwZSk7XG4gICAgICAgICAgICBpZiAoc2hhcGUuY29sbGlzaW9uX3R5cGUgPT0gU2hhcGVUeXBlLkJSSUNLKSB7XG4gICAgICAgICAgICAgICAgdmFyIGJvZHkgPSBzaGFwZS5nZXRCb2R5KCk7XG4gICAgICAgICAgICAgICAgaWYgKGJvZHkudXNlckRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9jYy5sb2coXCJib2R5LnVzZXJEYXRhOlwiICsgYm9keS51c2VyRGF0YS5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgYm9keS51c2VyRGF0YS5yZW1vdmVhYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nZW5lcmF0ZUJvb3N0KGJvZHkudXNlckRhdGEuZ2V0UG9zaXRpb24oKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChzaGFwZS5jb2xsaXNpb25fdHlwZSA9PSBTaGFwZVR5cGUuQkFMTCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmdhbWVTdGVwID09PSBHYW1lU3RlcC5TVEFSVCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsYXlLbm9ja0F1ZGlvKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG5cbiAgICBjb2xsaXNpb25Qb3N0IDogZnVuY3Rpb24gKCBhcmJpdGVyLCBzcGFjZSApIHtcbiAgICAgICAgLy9jYy5sb2coJ2NvbGxpc2lvbiBwb3N0Jyk7XG4gICAgfSxcblxuICAgIGNvbGxpc2lvblNlcGFyYXRlIDogZnVuY3Rpb24gKCBhcmJpdGVyLCBzcGFjZSApIHtcbiAgICAgICAgLy9jYy5sb2coJ2NvbGxpc2lvbiBzZXBhcmF0ZScpO1xuICAgICAgICB2YXIgc2hhcGVzID0gYXJiaXRlci5nZXRTaGFwZXMoKTtcbiAgICAgICAgdmFyIGJhbGxTaGFwZSA9IG51bGw7XG4gICAgICAgIHZhciBib2FyZFNoYXBlID0gbnVsbDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaGFwZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIC8vY2MubG9nKFwiY29sbGlzaW9uIHNlcGFyYXRlIHNoYXBlIGNvbGxpc2lvbiB0eXBlOlwiICsgc2hhcGVzW2ldLmNvbGxpc2lvbl90eXBlKTtcbiAgICAgICAgICAgIGlmIChzaGFwZXNbaV0uY29sbGlzaW9uX3R5cGUgPT0gU2hhcGVUeXBlLkJBTEwpIHtcbiAgICAgICAgICAgICAgICB2YXIgYm9keSA9IHNoYXBlc1tpXS5nZXRCb2R5KCk7XG4gICAgICAgICAgICAgICAgaWYgKGJvZHkgJiYgYm9keS51c2VyRGF0YSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJhbmRvbUJhbGxTcGVlZChib2R5LnVzZXJEYXRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYmFsbFNoYXBlID0gc2hhcGVzW2ldO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzaGFwZXNbaV0uY29sbGlzaW9uX3R5cGUgPT0gU2hhcGVUeXBlLkJPQVJEKSB7XG4gICAgICAgICAgICAgICAgYm9hcmRTaGFwZSA9IHNoYXBlc1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoYmFsbFNoYXBlICYmIGJvYXJkU2hhcGUpIHtcbiAgICAgICAgICAgIC8vY2MubG9nKFwiYm9hcmQgY29sbGlzaW9uIDFcIik7XG4gICAgICAgICAgICBpZiAoYmFsbFNoYXBlLmJvZHkgJiYgYmFsbFNoYXBlLmJvZHkudXNlckRhdGEgJiYgYm9hcmRTaGFwZS5ib2R5ICYmIGJvYXJkU2hhcGUuYm9keS51c2VyRGF0YSkge1xuICAgICAgICAgICAgICAgIC8vY2MubG9nKFwiYm9hcmQgY29sbGlzaW9uIDJcIik7XG4gICAgICAgICAgICAgICAgdmFyIGJhbGwgPSBiYWxsU2hhcGUuYm9keS51c2VyRGF0YTtcbiAgICAgICAgICAgICAgICB2YXIgYm9hcmQgPSBib2FyZFNoYXBlLmJvZHkudXNlckRhdGE7XG4gICAgICAgICAgICAgICAgLy9jYy5sb2coXCJib2FyZCBjb2xsaXNpb24gMiBiYWxsLmdldFBvc2l0aW9uKCkueTpcIiArIGJhbGwuZ2V0UG9zaXRpb24oKS55KTtcbiAgICAgICAgICAgICAgICAvL2NjLmxvZyhcImJvYXJkIGNvbGxpc2lvbiAyIGJvYXJkLnkgKyBib2FyZC5oZWlnaHQgKiAwLjU6XCIgKyAoYm9hcmQueSArIGJvYXJkLmhlaWdodCAqIDAuNSAtIDEwKSk7XG4gICAgICAgICAgICAgICAgaWYgKGJhbGwuZ2V0UG9zaXRpb24oKS55IDwgYm9hcmQueSArIGJvYXJkLmhlaWdodCAqIDAuNSAtIDEwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy9jYy5sb2coXCJib2FyZCBjb2xsaXNpb24gM1wiKTtcbiAgICAgICAgICAgICAgICB2YXIgYm9hcmRTaGFwZVgxID0gYmFsbC5nZXRQb3NpdGlvbigpLnggLSAoYm9hcmQueCAtIGJvYXJkLndpZHRoIC8gMik7XG4gICAgICAgICAgICAgICAgdmFyIHggPSBib2FyZFNoYXBlWDEgLyBib2FyZFNoYXBlLmJvZHkudXNlckRhdGEud2lkdGggKiAxMDAgLyA1MCAtIDE7XG4gICAgICAgICAgICAgICAgeCA9IE1hdGgubWF4KE1hdGgubWluKDAuOSwgeCksIC0wLjkpO1xuICAgICAgICAgICAgICAgIC8vY2MubG9nKFwiYm9hcmQgY29sbGlzaW9uIDQ6XCIgKyB4KTtcbiAgICAgICAgICAgICAgICB2YXIgeSA9IE1hdGguc3FydCgxIC0geCAqIHgpO1xuICAgICAgICAgICAgICAgIGJhbGwuc2V0VmVsKGNjLnAodGhpcy5NQVhfU1BFRUQgKiB4LCB0aGlzLk1BWF9TUEVFRCAqIHkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBwbGF5S25vY2tBdWRpbzogZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoRGF0ZS5ub3coKSAtIHRoaXMubGFzdFRpbWUgPiA1MCkge1xuICAgICAgICAgICAgdGhpcy5sYXN0VGltZSA9IERhdGUubm93KCk7XG4gICAgICAgICAgICBnYW1lLmF1ZGlvUGxheWVyLnBsYXlFZmZlY3RCeUtleShcImtub2NrXCIpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIGdldEluaXRCYWxsUG9zOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBjYy5wQWRkKHRoaXMuYm9hcmROb2RlLmdldFBvc2l0aW9uKCksIGNjLnAoMCwgMjApKTtcbiAgICB9LFxuXG4gICAgc2hvb3RCYWxsOiBmdW5jdGlvbiAocG9zaXRpb24sIHZlbCkge1xuICAgICAgICBpZiAodGhpcy5iYWxsTGlzdC5sZW5ndGggPiB0aGlzLk1BWF9CQUxMKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGJhbGwgPSBCYWxsUG9vbC5nZXRGcm9tUG9vbChcImJhbGxcIik7XG4gICAgICAgIGlmICghYmFsbCkge1xuICAgICAgICAgICAgYmFsbCA9IG5ldyBCYWxsKHRoaXMuZ2V0QmFsbFdpZHRoKCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYmFsbC5yZXNldCh0aGlzLmdldEJhbGxXaWR0aCgpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFkZENoaWxkKGJhbGwpO1xuICAgICAgICB0aGlzLmJhbGxMaXN0LnB1c2goYmFsbCk7XG4gICAgICAgIGJhbGwuaW5pdEJvZHkodGhpcy5zcGFjZSwgcG9zaXRpb24pO1xuICAgICAgICBiYWxsLnNldFZlbCh2ZWwpO1xuICAgIH0sXG5cbiAgICByZW1vdmVCYWxsOiBmdW5jdGlvbiAoYmFsbCkge1xuICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmJhbGxMaXN0LmluZGV4T2YoYmFsbCk7XG4gICAgICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICAgICAgICB0aGlzLmJhbGxMaXN0LnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICAgICAgYmFsbC5yZW1vdmVCb2R5KCk7XG4gICAgICAgIEJhbGxQb29sLnB1dEluUG9vbChcImJhbGxcIiwgYmFsbCk7XG4gICAgICAgIGJhbGwucmVtb3ZlRnJvbVBhcmVudChmYWxzZSk7XG4gICAgfSxcblxuICAgIHJlbW92ZUJyaWNrOiBmdW5jdGlvbiAoYnJpY2spIHtcbiAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5icmlja3MuaW5kZXhPZihicmljayk7XG4gICAgICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICAgICAgICB0aGlzLmJyaWNrcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgICAgIGJyaWNrLnJlbW92ZUJvZHkoKTtcbiAgICAgICAgLy9pZiAoYnJpY2suaXNHaWZ0KSB7XG4gICAgICAgIC8vICAgIHRoaXMuc3RvcCgpO1xuICAgICAgICAvLyAgICBnYW1lLnBvcHVwTWFuLnBvcHVwUmV3YXJkR2lmdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vICAgICAgICB0aGlzLnJlc3VtZSgpO1xuICAgICAgICAvLyAgICB9LmJpbmQodGhpcykpO1xuICAgICAgICAvL30gZWxzZSB7XG4gICAgICAgIEJhbGxQb29sLnB1dEluUG9vbChcImJyaWNrXCIsIGJyaWNrKTtcbiAgICAgICAgLy99XG4gICAgICAgIGJyaWNrLnJlbW92ZUZyb21QYXJlbnQoKTtcbiAgICB9LFxuXG4gICAgZ2V0TWluR2VuZXJhdGVCb29zdFR5cGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy9ib29zdFR5cGVMaXN0XG4gICAgICAgIHZhciBtaW5Cb29zdFR5cGUgPSAwO1xuICAgICAgICB2YXIgbWluQm9vc3RDb3VudCA9IDEwMDAwMDA7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5ib29zdFR5cGVMaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB2YXIgYm9vc3RUeXBlID0gdGhpcy5ib29zdFR5cGVMaXN0W2ldO1xuICAgICAgICAgICAgdmFyIGJvb3N0Q291bnQgPSB0aGlzLmJvb3N0VHlwZU1hcFtib29zdFR5cGVdIHx8IDA7XG4gICAgICAgICAgICBpZiAoYm9vc3RDb3VudCA8IG1pbkJvb3N0Q291bnQpIHtcbiAgICAgICAgICAgICAgICBtaW5Cb29zdFR5cGUgPSBib29zdFR5cGU7XG4gICAgICAgICAgICAgICAgbWluQm9vc3RDb3VudCA9IGJvb3N0Q291bnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1pbkJvb3N0VHlwZTtcbiAgICB9LFxuXG4gICAgZ2V0RXN0aW1hdGVkQmFsbENvdW50OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBiYWxsQ291bnQgPSB0aGlzLmJhbGxMaXN0Lmxlbmd0aDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmJvb3N0cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuYm9vc3RzW2ldLnkgPCB0aGlzLmJvYXJkTm9kZS55IC0gMzApIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmJvb3N0c1tpXS50eXBlID09PSBCb29zdFR5cGUuU1BMSVQpIHtcbiAgICAgICAgICAgICAgICBiYWxsQ291bnQgPSBiYWxsQ291bnQgKiA0O1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmJvb3N0c1tpXS50eXBlID09PSBCb29zdFR5cGUuVEhSRUVfQkFMTCkge1xuICAgICAgICAgICAgICAgIGJhbGxDb3VudCArPSAzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBiYWxsQ291bnQ7XG4gICAgfSxcblxuICAgIGdlbmVyYXRlQm9vc3Q6IGZ1bmN0aW9uIChwb3MpIHtcbiAgICAgICAgdmFyIGJvb3N0VHlwZTtcblxuICAgICAgICAvL3ZhciBlc3RpbWF0ZWRCYWxsQ291bnQgPSB0aGlzLmdldEVzdGltYXRlZEJhbGxDb3VudCgpO1xuICAgICAgICAvLy8vY2MubG9nKFwiYnJpY2sgdmlldzplc3RpbWF0ZWQgQmFsbENvdW50OlwiICsgZXN0aW1hdGVkQmFsbENvdW50KTtcbiAgICAgICAgLy8vL2NjLmxvZyhcImJyaWNrIHZpZXc6cmVhbCBCYWxsQ291bnQ6XCIgKyB0aGlzLmJhbGxMaXN0Lmxlbmd0aCk7XG4gICAgICAgIC8vLy9jYy5sb2coXCJicmljayB2aWV3OmVzdGltYXRlZFJhdGlvOlwiICsgZ2FtZS5jb25maWcuZXN0aW1hdGVkUmF0aW8pO1xuICAgICAgICAvLy8vY2MubG9nKFwiYnJpY2sgdmlldzptaW5Qb3NzaWJpbGl0eTpcIiArIGdhbWUuY29uZmlnLm1pblBvc3NpYmlsaXR5KTtcbiAgICAgICAgLy9lc3RpbWF0ZWRCYWxsQ291bnQgPSBNYXRoLm1heChlc3RpbWF0ZWRCYWxsQ291bnQgKiBnYW1lLmNvbmZpZy5lc3RpbWF0ZWRSYXRpbywgdGhpcy5iYWxsTGlzdC5sZW5ndGgpO1xuICAgICAgICAvLy8vY2MubG9nKFwiYnJpY2sgdmlldzpwYXJhbSBCYWxsQ291bnQ6XCIgKyBlc3RpbWF0ZWRCYWxsQ291bnQpO1xuICAgICAgICAvL3ZhciBwcm9iYWJpbGl0eSA9IDEwMCAqIHRoaXMuQk9PU1RfUE9TSUJJTElUWSAvIGVzdGltYXRlZEJhbGxDb3VudDtcbiAgICAgICAgLy9wcm9iYWJpbGl0eSA9IE1hdGgubWF4KHByb2JhYmlsaXR5LCBnYW1lLmNvbmZpZy5taW5Qb3NzaWJpbGl0eSAqIDEwMCk7XG4gICAgICAgIC8vdmFyIGhhc0Jvb3N0ID0gZ2FtZS51dGlscy5yYW5kb21OZXh0TnVtYmVyKDEwMCkgPCBwcm9iYWJpbGl0eTtcblxuICAgICAgICB2YXIgaGFzQm9vc3QgPSBmYWxzZTtcbiAgICAgICAgaWYgKHRoaXMuaGFyZE1vZGUpIHtcbiAgICAgICAgICAgIGhhc0Jvb3N0ID0gZ2FtZS51dGlscy5yYW5kb21OZXh0SW50KDQwMCkgPCA0MDAgKiB0aGlzLkJPT1NUX1BPU0lCSUxJVFkgLyB0aGlzLmJhbGxMaXN0Lmxlbmd0aDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGhhc0Jvb3N0ID0gZ2FtZS51dGlscy5yYW5kb21OZXh0SW50KDEwMCkgPCAxMDAgKiB0aGlzLkJPT1NUX1BPU0lCSUxJVFkgLyB0aGlzLmJhbGxMaXN0Lmxlbmd0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChHYW1lTWFuLmdldEluc3RhbmNlKCkubGV2ZWxJZCA8PSAyKSB7XG4gICAgICAgICAgICBpZiAoY2MuaXNVbmRlZmluZWQodGhpcy5nZW5lcmF0ZUJvb3N0Q291bnQpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5nZW5lcmF0ZUJvb3N0Q291bnQgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuZ2VuZXJhdGVCb29zdENvdW50IDwgMykge1xuICAgICAgICAgICAgICAgIGhhc0Jvb3N0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmdlbmVyYXRlQm9vc3RDb3VudCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy9wcm90ZWN0IGdlbiBib29zdC5cbiAgICAgICAgaWYgKCFoYXNCb29zdCAmJiAoRGF0ZS5ub3coKSAtIHRoaXMubGFzdEdldEJvb3N0VGltZSA+IHRoaXMuTVVTVF9HRU5fQk9PU1RfVElNRSAqIDEwMDApKSB7XG4gICAgICAgICAgICBoYXNCb29zdCA9IHRydWU7XG4gICAgICAgICAgICBjYy5sb2coXCJicmlja3MtdmlldyBtdXN0IGdlbiBib29zdCB0aW1lXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhhc0Jvb3N0KSB7XG4gICAgICAgICAgICB0aGlzLmxhc3RHZXRCb29zdFRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgICAgICAgYm9vc3RUeXBlID0gdGhpcy5nZXRNaW5HZW5lcmF0ZUJvb3N0VHlwZSgpO1xuICAgICAgICAgICAgdGhpcy5ib29zdFR5cGVNYXBbYm9vc3RUeXBlXSA9ICh0aGlzLmJvb3N0VHlwZU1hcFtib29zdFR5cGVdIHx8IDApICsgMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBoYXNMaWZlID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKCFoYXNCb29zdCkge1xuICAgICAgICAgICAgaGFzTGlmZSA9IGdhbWUudXRpbHMucmFuZG9tTmV4dE51bWJlcigxMDApIDwgKDEwMCAqIHRoaXMuTElGRV9QT1NJQklMSVRZIC8gdGhpcy5iYWxsTGlzdC5sZW5ndGgpO1xuICAgICAgICAgICAgaWYgKGhhc0xpZmUpIHtcbiAgICAgICAgICAgICAgICB2YXIgbGlmZUJvb3N0Q291bnQgPSAwO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5ib29zdHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYm9vc3RzW2ldLnR5cGUgPT09IEJvb3N0VHlwZS5MSUZFKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaWZlQm9vc3RDb3VudCsrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmxpZmVDb3VudCArIGxpZmVCb29zdENvdW50ID49IHRoaXMuTUFYX0xJRkUpIHtcbiAgICAgICAgICAgICAgICAgICAgaGFzTGlmZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGJvb3N0VHlwZSA9IEJvb3N0VHlwZS5MSUZFO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChoYXNMaWZlIHx8IGhhc0Jvb3N0KSB7XG4gICAgICAgICAgICB2YXIgYm9vc3QgPSBuZXcgQm9vc3QoYm9vc3RUeXBlKTtcbiAgICAgICAgICAgIGJvb3N0LnNldFBvc2l0aW9uKHBvcyk7XG4gICAgICAgICAgICB0aGlzLmFkZENoaWxkKGJvb3N0KTtcbiAgICAgICAgICAgIHRoaXMuYm9vc3RzLnB1c2goYm9vc3QpO1xuICAgICAgICAgICAgdGhpcy5ib29zdHMuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgICAgIHJldHVybiAoYS55IC0gYi55KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIGdldERyb3BwaW5nQm9vc3RDb3VudDogZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgICAgdmFyIGNvdW50ID0gMDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmJvb3N0cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuYm9vc3RzW2ldLnR5cGUgPT09IHR5cGUpIHtcbiAgICAgICAgICAgICAgICBjb3VudCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb3VudDtcbiAgICB9LFxuXG4gICAgb25SZW1vdmVCb29zdDogZnVuY3Rpb24gKGJvb3N0KSB7XG4gICAgICAgIHZhciBpbmRleCA9IHRoaXMuYm9vc3RzLmluZGV4T2YoYm9vc3QpO1xuICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICAgICAgdGhpcy5ib29zdHMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIGJvb3N0LnJlbW92ZUZyb21QYXJlbnQoKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICByZW1vdmVBbGxCb29zdHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmJvb3N0cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdmFyIGJvb3N0ID0gdGhpcy5ib29zdHNbaV07XG4gICAgICAgICAgICBpZiAoYm9vc3QpIHtcbiAgICAgICAgICAgICAgICBib29zdC5yZW1vdmVGcm9tUGFyZW50KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ib29zdHMgPSBbXTtcbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnN0b3BlZCA9IHRydWU7XG4gICAgICAgIC8vdGhpcy5zaG93QmFubmVyQWRzKCk7XG4gICAgICAgIGlmIChnYW1lLmFkc01hbmFnZXIuc2hvd1RvcEJhbm5lcikge1xuICAgICAgICAgICAgZ2FtZS5hZHNNYW5hZ2VyLnJlbW92ZUJhbm5lckFkcyhcInRvcFwiKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICByZXN1bWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5zdG9wZWQgPSBmYWxzZTtcbiAgICAgICAgLy9nYW1lLmFkc01hbmFnZXIucmVtb3ZlQmFubmVyQWRzKFwiYm90dG9tXCIpO1xuICAgICAgICBpZiAoZ2FtZS5hZHNNYW5hZ2VyLnNob3dUb3BCYW5uZXIpIHtcbiAgICAgICAgICAgIGdhbWUuYWRzTWFuYWdlci5zaG93QmFubmVyQWRzKFwidG9wXCIpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHNob3dCYW5uZXJBZHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy9pZiAoZ2FtZS5wbGF5ZXJNYW4uZ2V0TGV2ZWwoKSA+PSAzKSB7XG4gICAgICAgIC8vICAgIGdhbWUuYWRzTWFuYWdlci5zaG93QmFubmVyQWRzKFwiYm90dG9tXCIpO1xuICAgICAgICAvL31cbiAgICB9LFxuXG4gICAgc2hvd1RvcEJhbm5lckFkczogZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoZ2FtZS5wbGF5ZXJNYW4uZ2V0TGV2ZWwoKSA+PSAzKSB7XG4gICAgICAgICAgICBpZiAoZ2FtZS5hZHNNYW5hZ2VyLnNob3dUb3BCYW5uZXIpIHtcbiAgICAgICAgICAgICAgICAvL2lmIDEgPiAwXG4gICAgICAgICAgICAgICAgaWYgKGdhbWUucGxheWVyTWFuLmdldFJlZ2lzdGVyRGF5KCkgPiBnYW1lLmFkc01hbmFnZXIudG9wQmFubmVyRGF5KSB7XG4gICAgICAgICAgICAgICAgICAgIGdhbWUuYWRzTWFuYWdlci5zaG93QmFubmVyQWRzKFwidG9wXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICByZW1vdmVUb3BCYW5uZXJBZHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy9pZiAoZ2FtZS5hZHNNYW5hZ2VyLnNob3dUb3BCYW5uZXIpIHtcbiAgICAgICAgLy8gICAgZ2FtZS5hZHNNYW5hZ2VyLnJlbW92ZUJhbm5lckFkcyhcInRvcFwiKTtcbiAgICAgICAgLy99XG4gICAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQnJpY2tzVmlldzsiXX0=
